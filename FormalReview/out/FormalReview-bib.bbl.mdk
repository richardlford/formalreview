~ begin bibliography { .bib-natural; cite-style:"natural:'(',')','; '" ; caption:"222" ; data-style:"author-date" ; data-hanging-indent:"2"; data-style:'apa';  }
~ begin bibitem {id:"absint_compcert_nodate"; cite-year:"2019"; cite-authors:"Absint"; cite-authors-long:"Absint"; cite-label:"Absint, n.d."; caption:"CompCert - Publications&nl;Absint, 2019"; data-line:"FormalReview.bib:771"; searchterm:"CompCert%20%20Publications%20Absint%2C%202019"; spellcheck:"false"}
Absint. (n.d.). CompCert - Publications. Retrieved January 31, 2019, from <http://compcert.inria.fr/publi.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"adams_common_2015"; cite-year:"2015"; cite-authors:"Adams"; cite-authors-long:"Adams"; cite-label:"Adams, 2015"; caption:"The Common HOL Platform&nl;Adams, 2015"; data-line:"FormalReview.bib:2343"; searchterm:"The%20Common%20HOL%20Platform%20Adams%2C%202015"; spellcheck:"false"}
Adams, M.&nbsp;(2015). The Common HOL Platform. _Electronic Proceedings in Theoretical Computer Science_, _186_, 42–56. https://doi.org/[10.4204/EPTCS.186.6](https://dx.doi.org/10.4204/EPTCS.186.6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"adewale_implementing_nodate"; cite-year:"2019"; cite-authors:"Adewale"; cite-authors-long:"Adewale"; cite-label:"Adewale, n.d."; caption:"Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University&nl;Adewale, 2019"; data-line:"FormalReview.bib:1362"; searchterm:"Implementing%20a%20highperformance%20keyvalue%20store%20using%20a%20trie%20of%20B%2BTrees%20with%20cursors%20%26bar%3B%20Computer%20Science%20Department%20at%20Princeton%20University%20Adewale%2C%202019"; spellcheck:"false"}
Adewale, O.&nbsp;(n.d.). Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University. Retrieved February 1, 2019, from <https://www.cs.princeton.edu/research/techreps/TR-004-18>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ahman_recalling_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy"; cite-label:"Ahman, Fournet, et al., 2017"; caption:"Recalling a Witness: Foundations and Applications of Monotonic State&nl;Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy, 2017"; data-line:"FormalReview.bib:1998"; searchterm:"Recalling%20a%20Witness%3A%20Foundations%20and%20Applications%20of%20Monotonic%20State%20Ahman%2C%20Fournet%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Rastogi%2C%20and%20Swamy%2C%202017"; spellcheck:"false"}
Ahman, D., Fournet, C., Hriţcu, C., Maillard, K., Rastogi, A., & Swamy, N.&nbsp;(2017). Recalling a Witness: Foundations and Applications of Monotonic State. _Proc. ACM Program. Lang._, _2_, 65:1–65:30. https://doi.org/[10.1145/3158153](https://dx.doi.org/10.1145/3158153){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahman_dijkstra_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al."; cite-label:"Ahman, Hriţcu, et al., 2017"; caption:"Dijkstra Monads for Free&nl;Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al., 2017"; data-line:"FormalReview.bib:1971"; searchterm:"Dijkstra%20Monads%20for%20Free%20Ahman%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Mart%C3%ADnez%2C%20Plotkin%2C%20Protzenko%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Ahman, D., Hriţcu, C., Maillard, K., Martínez, G., Plotkin, G., Protzenko, J., … Swamy, N.&nbsp;(2017). Dijkstra Monads for Free. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 515–529). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009878](https://dx.doi.org/10.1145/3009837.3009878){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahrendt_deductive_nodate"; cite-year:"2019"; cite-authors:"Ahrendt"; cite-authors-long:"Ahrendt"; cite-label:"Ahrendt, n.d."; caption:"Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project&nl;Ahrendt, 2019"; data-line:"FormalReview.bib:1044"; searchterm:"Deductive%20Software%20Verification%20%E2%80%93%20The%20KeY%20BookFrom%20Theory%20to%20Practice%20%E2%80%93%20The%20KeY%20Project%20Ahrendt%2C%202019"; spellcheck:"false"}
Ahrendt, W.&nbsp;(n.d.). Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project. Retrieved January 31, 2019, from <https://www.key-project.org/thebook2/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_verifying_2007"; cite-year:"2007"; cite-authors:"Ahrendt et al."; cite-authors-long:"Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt"; cite-label:"Ahrendt, Beckert, Hähnle, Rümmer, \& Schmitt, 2007"; caption:"Verifying Object-Oriented Programs with KeY: A Tutorial&nl;Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt, 2007"; data-line:"FormalReview.bib:915"; searchterm:"Verifying%20ObjectOriented%20Programs%20with%20KeY%3A%20A%20Tutorial%20Ahrendt%2C%20Beckert%2C%20H%C3%A4hnle%2C%20R%C3%BCmmer%2C%20and%20Schmitt%2C%202007"; spellcheck:"false"}
Ahrendt, W., Beckert, B., Hähnle, R., Rümmer, P., & Schmitt, P.&nbsp;H.&nbsp;(2007). Verifying Object-Oriented Programs with KeY: A Tutorial. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (Vol. 4709, pp. 70–101). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-74792-5_4](https://dx.doi.org/10.1007/978-3-540-74792-5_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"altenkirch_quotient_2018"; cite-year:"2018"; cite-authors:"Altenkirch et al."; cite-authors-long:"Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg"; cite-label:"Altenkirch, Capriotti, Dijkstra, Kraus, \& Forsberg, 2018"; caption:"Quotient inductive-inductive types&nl;Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg, 2018"; data-line:"FormalReview.bib:207"; searchterm:"Quotient%20inductiveinductive%20types%20Altenkirch%2C%20Capriotti%2C%20Dijkstra%2C%20Kraus%2C%20and%20Forsberg%2C%202018"; spellcheck:"false"}
Altenkirch, T., Capriotti, P., Dijkstra, G., Kraus, N., & Forsberg, F.&nbsp;N.&nbsp;(2018). Quotient inductive-inductive types. _arXiv:1612.02346 \[cs\]_, _10803_, 293–310. https://doi.org/[10.1007/978-3-319-89366-2_16](https://dx.doi.org/10.1007/978-3-319-89366-2_16){.bib-doi}
~ end bibitem

~ begin bibitem {id:"amin_computing_2016"; cite-year:"2016"; cite-authors:"Amin et al."; cite-authors-long:"Amin, Leino, and Rompf"; cite-label:"Amin, Leino, \& Rompf, 2016"; caption:"Computing with an SMT Solver&nl;Amin, Leino, and Rompf, 2016"; data-line:"FormalReview.bib:1190"; searchterm:"Computing%20with%20an%20SMT%20Solver%20Amin%2C%20Leino%2C%20and%20Rompf%2C%202016"; spellcheck:"false"}
Amin, N., Leino, R., & Rompf, T.&nbsp;(2016). Computing with an SMT Solver, _8570_. Retrieved from <https://www.microsoft.com/en-us/research/publication/computing-smt-solver/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"amorim_verified_2013"; cite-year:"2013"; cite-authors:"Amorim et al."; cite-authors-long:"Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al."; cite-label:"Amorim et al., 2013"; caption:"A Verified Information-Flow Architecture (Long version)&nl;Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al., 2013"; data-line:"FormalReview.bib:3051"; searchterm:"A%20Verified%20InformationFlow%20Architecture%20Long%20version%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hritcu%2C%20Pichardie%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Amorim, A.&nbsp;A.&nbsp;de, Collins, N., DeHon, A., Demange, D., Hritcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2013). _A Verified Information-Flow Architecture (Long version)_.
~ end bibitem

~ begin bibitem {id:"anand_towards_nodate"; cite-year:"2019"; cite-authors:"Anand et al."; cite-authors-long:"Anand, Boulier, Cohen, Sozeau, and Tabareau"; cite-label:"Anand, Boulier, Cohen, Sozeau, \& Tabareau, n.d."; caption:"Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink&nl;Anand, Boulier, Cohen, Sozeau, and Tabareau, 2019"; data-line:"FormalReview.bib:1691"; searchterm:"Towards%20Certified%20MetaProgramming%20with%20Typed%20TemplateCoq%20%26bar%3B%20SpringerLink%20Anand%2C%20Boulier%2C%20Cohen%2C%20Sozeau%2C%20and%20Tabareau%2C%202019"; spellcheck:"false"}
Anand, A., Boulier, S., Cohen, C., Sozeau, M., & Tabareau, N.&nbsp;(n.d.). Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink. Retrieved February 1, 2019, from <https://link.springer.com/chapter/10.1007%2F978-3-319-94821-8_2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"anand_typed_nodate"; cite-year:"n.d."; cite-authors:"Anand et al."; cite-authors-long:"Anand, Tabareau, and Sozeau"; cite-label:"Anand, Tabareau, \& Sozeau, n.d."; caption:"Typed Template Coq&nl;Anand, Tabareau, and Sozeau, n.d."; data-line:"FormalReview.bib:1337"; searchterm:"Typed%20Template%20Coq%20Anand%2C%20Tabareau%2C%20and%20Sozeau%2C%20n.d."; spellcheck:"false"}
Anand, A., Tabareau, S.&nbsp;B.&nbsp;N., & Sozeau, M.&nbsp;(n.d.). Typed Template Coq, 2.
~ end bibitem

~ begin bibitem {id:"andrew_oracle_2008"; cite-year:"2008"; cite-authors:"Andrew"; cite-authors-long:"Andrew"; cite-label:"Andrew, 2008"; caption:"Oracle Semantics Aquinas Hobor&nl;Andrew, 2008"; data-line:"FormalReview.bib:3059"; searchterm:"Oracle%20Semantics%20Aquinas%20Hobor%20Andrew%2C%202008"; spellcheck:"false"}
Andrew, A.&nbsp;(2008). _Oracle Semantics Aquinas Hobor_.
~ end bibitem

~ begin bibitem {id:"appel_andrew_w._position_2017"; cite-year:"2017"; cite-authors:"Appel Andrew W.&nbsp;et al."; cite-authors-long:"Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve"; cite-label:"Appel Andrew W. et al., 2017"; caption:"Position paper: the science of deep specification&nl;Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve, 2017"; data-line:"FormalReview.bib:1612"; searchterm:"Position%20paper%3A%20the%20science%20of%20deep%20specification%20Appel%20Andrew%20W.%2C%20Beringer%20Lennart%2C%20Chlipala%20Adam%2C%20Pierce%20Benjamin%20C.%2C%20Shao%20Zhong%2C%20Weirich%20Stephanie%2C%20and%20Zdancewic%20Steve%2C%202017"; spellcheck:"false"}
Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, & Zdancewic Steve. (2017). Position paper: the science of deep specification. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20160331. https://doi.org/[10.1098/rsta.2016.0331](https://dx.doi.org/10.1098/rsta.2016.0331){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jouannaud_verismall:_2011"; cite-year:"2011"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2011"; caption:"VeriSmall: Verified Smallfoot Shape Analysis&nl;Appel, 2011"; data-line:"FormalReview.bib:331"; searchterm:"VeriSmall%3A%20Verified%20Smallfoot%20Shape%20Analysis%20Appel%2C%202011"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2011). VeriSmall: Verified Smallfoot Shape Analysis. In J.-P.&nbsp;Jouannaud & Z.&nbsp;Shao (Eds.), _Certified Programs and Proofs_ (Vol. 7086, pp. 231–246). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-25379-9_18](https://dx.doi.org/10.1007/978-3-642-25379-9_18){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verified_2012"; cite-year:"2012"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2012"; caption:"Verified Software Toolchain&nl;Appel, 2012"; data-line:"FormalReview.bib:367"; searchterm:"Verified%20Software%20Toolchain%20Appel%2C%202012"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2012). Verified Software Toolchain. In _Proceedings of the 4th International Conference on NASA Formal Methods_ (pp. 2–2). Berlin, Heidelberg: Springer-Verlag. https://doi.org/[10.1007/978-3-642-28891-3_2](https://dx.doi.org/10.1007/978-3-642-28891-3_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verification_2015"; cite-year:"2015"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2015"; caption:"Verification of a Cryptographic Primitive: SHA-256&nl;Appel, 2015"; data-line:"FormalReview.bib:313"; searchterm:"Verification%20of%20a%20Cryptographic%20Primitive%3A%20SHA256%20Appel%2C%202015"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2015). Verification of a Cryptographic Primitive: SHA-256. _ACM Trans. Program. Lang. Syst._, _37_(2), 7:1–7:31. https://doi.org/[10.1145/2701415](https://dx.doi.org/10.1145/2701415){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_deepspecdb_2019"; cite-year:"2019"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2019"; caption:"DeepSpecDB - github&nl;Appel, 2019"; data-line:"FormalReview.bib:1381"; searchterm:"DeepSpecDB%20%20github%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2019). _DeepSpecDB - github_. PrincetonUniversity. Retrieved from <https://github.com/PrincetonUniversity/DeepSpecDB>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_certicoq:_nodate"; cite-year:"2019"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, n.d."; caption:"CertiCoq: A verified compiler for Coq - POPL 2017&nl;Appel, 2019"; data-line:"FormalReview.bib:1354"; searchterm:"CertiCoq%3A%20A%20verified%20compiler%20for%20Coq%20%20POPL%202017%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(n.d.). CertiCoq: A verified compiler for Coq - POPL 2017. Retrieved February 1, 2019, from <https://popl17.sigplan.org/event/main-certicoq-a-verified-compiler-for-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_verifiabble_2014"; cite-year:"2014"; cite-authors:"Appel et al."; cite-authors-long:"Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al."; cite-label:"Appel et al., 2014"; caption:"Verifiabble C, Version 2.2&nl;Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al., 2014"; data-line:"FormalReview.bib:299"; searchterm:"Verifiabble%20C%2C%20Version%202.2%20Appel%2C%20Dockins%2C%20Hobor%2C%20Beringer%2C%20Dodds%2C%20Stewart%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Appel, A.&nbsp;W., Dockins, R., Hobor, A., Beringer, L., Dodds, J., Stewart, G., … Leroy, X.&nbsp;(2014). _Verifiabble C, Version 2.2_. Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9781107256552](https://dx.doi.org/10.1017/CBO9781107256552){.bib-doi}
~ end bibitem

~ begin bibitem {id:"arias_jscoq:_2017"; cite-year:"2017"; cite-authors:"Arias et al."; cite-authors-long:"Arias, Pin, and Jouvelot"; cite-label:"Arias, Pin, \& Jouvelot, 2017"; caption:"jsCoq: Towards Hybrid Theorem Proving Interfaces&nl;Arias, Pin, and Jouvelot, 2017"; data-line:"FormalReview.bib:2543"; searchterm:"jsCoq%3A%20Towards%20Hybrid%20Theorem%20Proving%20Interfaces%20Arias%2C%20Pin%2C%20and%20Jouvelot%2C%202017"; spellcheck:"false"}
Arias, E.&nbsp;J.&nbsp;G., Pin, B., & Jouvelot, P.&nbsp;(2017). jsCoq: Towards Hybrid Theorem Proving Interfaces. _Electronic Proceedings in Theoretical Computer Science_, _239_, 15–27. https://doi.org/[10.4204/EPTCS.239.2](https://dx.doi.org/10.4204/EPTCS.239.2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"azevedo_de_amorim_verified_2014"; cite-year:"2014"; cite-authors:"Azevedo de Amorim et al."; cite-authors-long:"Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al."; cite-label:"Azevedo de Amorim et al., 2014"; caption:"A Verified Information-flow Architecture&nl;Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al., 2014"; data-line:"FormalReview.bib:3033"; searchterm:"A%20Verified%20Informationflow%20Architecture%20Azevedo%20de%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hri%C5%A3cu%2C%20Pichardie%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Azevedo de Amorim, A., Collins, N., DeHon, A., Demange, D., Hriţcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2014). A Verified Information-flow Architecture. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 165–178). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535839](https://dx.doi.org/10.1145/2535838.2535839){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barriere_vst_nodate"; cite-year:"n.d."; cite-authors:"Barriere and Appel"; cite-authors-long:"Barriere and Appel"; cite-label:"Barriere \& Appel, n.d."; caption:"VST Veriﬁcation of B+Trees with Cursors&nl;Barriere and Appel, n.d."; data-line:"FormalReview.bib:1372"; searchterm:"VST%20Veri%EF%AC%81cation%20of%20B%2BTrees%20with%20Cursors%20Barriere%20and%20Appel%2C%20n.d."; spellcheck:"false"}
Barriere, A., & Appel, A.&nbsp;(n.d.). VST Veriﬁcation of B+Trees with Cursors, 19.
~ end bibitem

~ begin bibitem {id:"bate_fundamentals_1971"; cite-year:"1971"; cite-authors:"Bate et al."; cite-authors-long:"Bate, Mueller, and White"; cite-label:"Bate, Mueller, \& White, 1971"; caption:"Fundamentals of astrodynamics&nl;Bate, Mueller, and White, 1971"; data-line:"FormalReview.bib:1751"; searchterm:"Fundamentals%20of%20astrodynamics%20Bate%2C%20Mueller%2C%20and%20White%2C%201971"; spellcheck:"false"}
Bate, R.&nbsp;R., Mueller, D.&nbsp;D., & White, J.&nbsp;E.&nbsp;(1971). _Fundamentals of astrodynamics_. New York: Dover Publications.
~ end bibitem

~ begin bibitem {id:"batty_mark_compositional_2017"; cite-year:"2017"; cite-authors:"Batty Mark"; cite-authors-long:"Batty Mark"; cite-label:"Batty Mark, 2017"; caption:"Compositional relaxed concurrency&nl;Batty Mark, 2017"; data-line:"FormalReview.bib:1597"; searchterm:"Compositional%20relaxed%20concurrency%20Batty%20Mark%2C%202017"; spellcheck:"false"}
Batty Mark. (2017). Compositional relaxed concurrency. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150406. https://doi.org/[10.1098/rsta.2015.0406](https://dx.doi.org/10.1098/rsta.2015.0406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"beckert_verification_2006"; cite-year:"2006"; cite-authors:"Beckert et al."; cite-authors-long:"Beckert et al."; cite-label:"Beckert, Hähnle, \& Schmitt, 2006"; caption:"Verification of Object-Oriented Software. The KeY Approach&nl;Beckert et al., 2006"; data-line:"FormalReview.bib:1011"; searchterm:"Verification%20of%20ObjectOriented%20Software.%20The%20KeY%20Approach%20Beckert%20et%20al.%2C%202006"; spellcheck:"false"}
Beckert, B., Hähnle, R., & Schmitt, P.&nbsp;H.&nbsp;(Eds.). (2006). _Verification of Object-Oriented Software. The KeY Approach_ (Vol. 4334). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-69061-0](https://dx.doi.org/10.1007/978-3-540-69061-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_2017"; cite-year:"2017"; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, 2017"; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs&nl;Bedford, 2017"; data-line:"FormalReview.bib:446"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20Bedford%2C%202017"; spellcheck:"false"}
Bedford, A.&nbsp;(2017). Coqatoo: Generating Natural Language Versions of Coq Proofs. _arXiv:1712.03894 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1712.03894](http://arxiv.org/abs/1712.03894){.bib-url}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_nodate"; cite-year:"n.d."; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, n.d."; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides&nl;Bedford, n.d."; data-line:"FormalReview.bib:438"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20%20Slides%20Bedford%2C%20n.d."; spellcheck:"false"}
Bedford, A.&nbsp;(n.d.). Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides, 16.
~ end bibitem

~ begin bibitem {id:"berdine_smallfoot:_2006"; cite-year:"2006"; cite-authors:"Berdine et al."; cite-authors-long:"Berdine, Calcagno, and O’Hearn"; cite-label:"Berdine, Calcagno, \& O’Hearn, 2006"; caption:"Smallfoot: Modular Automatic Assertion Checking with Separation Logic&nl;Berdine, Calcagno, and O’Hearn, 2006"; data-line:"FormalReview.bib:3067"; searchterm:"Smallfoot%3A%20Modular%20Automatic%20Assertion%20Checking%20with%20Separation%20Logic%20Berdine%2C%20Calcagno%2C%20and%20O%E2%80%99Hearn%2C%202006"; spellcheck:"false"}
Berdine, J., Calcagno, C., & O’Hearn, P.&nbsp;W.&nbsp;(2006). Smallfoot: Modular Automatic Assertion Checking with Separation Logic. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (pp. 115–137). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"hutchison_verified_2014"; cite-year:"2014"; cite-authors:"Beringer et al."; cite-authors-long:"Beringer, Stewart, Dockins, and Appel"; cite-label:"Beringer, Stewart, Dockins, \& Appel, 2014"; caption:"Verified Compilation for Shared-Memory C&nl;Beringer, Stewart, Dockins, and Appel, 2014"; data-line:"FormalReview.bib:279"; searchterm:"Verified%20Compilation%20for%20SharedMemory%20C%20Beringer%2C%20Stewart%2C%20Dockins%2C%20and%20Appel%2C%202014"; spellcheck:"false"}
Beringer, L., Stewart, G., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2014). Verified Compilation for Shared-Memory C.&nbsp;In Z.&nbsp;Shao (Ed.), _Programming Languages and Systems_ (Vol. 8410, pp. 107–127). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-54833-8_7,](https://dx.doi.org/10.1007/978-3-642-54833-8_7,){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bertot_yves_nodate"; cite-year:"2019"; cite-authors:"Bertot"; cite-authors-long:"Bertot"; cite-label:"Bertot, n.d."; caption:"Yves Bertot&nl;Bertot, 2019"; data-line:"FormalReview.bib:827"; searchterm:"Yves%20Bertot%20Bertot%2C%202019"; spellcheck:"false"}
Bertot, Y.&nbsp;(n.d.). Yves Bertot. Retrieved January 31, 2019, from <http://www-sop.inria.fr/members/Yves.Bertot/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bertot_interactive_2004"; cite-year:"2004"; cite-authors:"Bertot and Castéran"; cite-authors-long:"Bertot and Castéran"; cite-label:"Bertot \& Castéran, 2004"; caption:"Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions&nl;Bertot and Castéran, 2004"; data-line:"FormalReview.bib:804"; searchterm:"Interactive%20theorem%20proving%20and%20program%20development%3A%20Coq'Art%3A%20the%20calculus%20of%20inductive%20constructions%20Bertot%20and%20Cast%C3%A9ran%2C%202004"; spellcheck:"false"}
Bertot, Y., & Castéran, P.&nbsp;(2004). _Interactive theorem proving and program development: Coq’Art: the calculus of inductive constructions_. Berlin ; New York: Springer. Retrieved from <http://www.labri.fr/perso/casteran/CoqArt/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"birkedal_iris_nodate"; cite-year:"2019"; cite-authors:"Birkedal and Bizjak"; cite-authors-long:"Birkedal and Bizjak"; cite-label:"Birkedal \& Bizjak, n.d."; caption:"Iris Tutorial&nl;Birkedal and Bizjak, 2019"; data-line:"FormalReview.bib:2425"; searchterm:"Iris%20Tutorial%20Birkedal%20and%20Bizjak%2C%202019"; spellcheck:"false"}
Birkedal, L., & Bizjak, A.&nbsp;(n.d.). Iris Tutorial. Retrieved February 1, 2019, from <https://iris-project.org/tutorial-material.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"blanchard_concurrent_2017"; cite-year:"2017"; cite-authors:"Blanchard et al."; cite-authors-long:"Blanchard, Loulergue, and Kosmatov"; cite-label:"Blanchard, Loulergue, \& Kosmatov, 2017"; caption:"From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation&nl;Blanchard, Loulergue, and Kosmatov, 2017"; data-line:"FormalReview.bib:1849"; searchterm:"From%20Concurrent%20Programs%20to%20Simulating%20Sequential%20Programs%3A%20Correctness%20of%20a%20Transformation%20Blanchard%2C%20Loulergue%2C%20and%20Kosmatov%2C%202017"; spellcheck:"false"}
Blanchard, A., Loulergue, F., & Kosmatov, N.&nbsp;(2017). From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation. _Electronic Proceedings in Theoretical Computer Science_, _253_, 109–123. https://doi.org/[10.4204/EPTCS.253.9](https://dx.doi.org/10.4204/EPTCS.253.9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"blatter_static_2018"; cite-year:"2018"; cite-authors:"Blatter et al."; cite-authors-long:"Blatter, Kosmatov, Le Gall, Prevosto, and Petiot"; cite-label:"Blatter, Kosmatov, Le Gall, Prevosto, \& Petiot, 2018"; caption:"Static and Dynamic Verification of Relational Properties on Self-composed C Code&nl;Blatter, Kosmatov, Le Gall, Prevosto, and Petiot, 2018"; data-line:"FormalReview.bib:1901"; searchterm:"Static%20and%20Dynamic%20Verification%20of%20Relational%20Properties%20on%20Selfcomposed%20C%20Code%20Blatter%2C%20Kosmatov%2C%20Le%20Gall%2C%20Prevosto%2C%20and%20Petiot%2C%202018"; spellcheck:"false"}
Blatter, L., Kosmatov, N., Le Gall, P., Prevosto, V., & Petiot, G.&nbsp;(2018). Static and Dynamic Verification of Relational Properties on Self-composed C Code. In C.&nbsp;Dubois & B.&nbsp;Wolff (Eds.), _Tests and Proofs_ (pp. 44–62). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"bohrer_veriphy:_2018"; cite-year:"2018"; cite-authors:"Bohrer et al."; cite-authors-long:"Bohrer, Tan, Mitsch, Myreen, and Platzer"; cite-label:"Bohrer, Tan, Mitsch, Myreen, \& Platzer, 2018"; caption:"VeriPhy: verified controller executables from verified cyber-physical system models&nl;Bohrer, Tan, Mitsch, Myreen, and Platzer, 2018"; data-line:"FormalReview.bib:1027"; searchterm:"VeriPhy%3A%20verified%20controller%20executables%20from%20verified%20cyberphysical%20system%20models%20Bohrer%2C%20Tan%2C%20Mitsch%2C%20Myreen%2C%20and%20Platzer%2C%202018"; spellcheck:"false"}
Bohrer, B., Tan, Y.&nbsp;K., Mitsch, S., Myreen, M.&nbsp;O., & Platzer, A.&nbsp;(2018). VeriPhy: verified controller executables from verified cyber-physical system models. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation&nbsp;- PLDI 2018_ (pp. 617–630). Philadelphia, PA, USA: ACM Press. https://doi.org/[10.1145/3192366.3192406](https://dx.doi.org/10.1145/3192366.3192406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2017"; cite-year:"2017"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2017"; caption:"Round-off Error Analysis of Explicit One-Step Numerical Integration Methods&nl;Boldo, Faissole, and Chapoutot, 2017"; data-line:"FormalReview.bib:2910"; searchterm:"Roundoff%20Error%20Analysis%20of%20Explicit%20OneStep%20Numerical%20Integration%20Methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202017"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2017). Round-off Error Analysis of Explicit One-Step Numerical Integration Methods. In _24th IEEE Symposium on Computer Arithmetic_. London, United Kingdom. https://doi.org/[10.1109/ARITH.2017.22](https://dx.doi.org/10.1109/ARITH.2017.22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2018"; cite-year:"2018"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2018"; caption:"Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods&nl;Boldo, Faissole, and Chapoutot, 2018"; data-line:"FormalReview.bib:2924"; searchterm:"Roundoff%20error%20and%20exceptional%20behavior%20analysis%20of%20explicit%20RungeKutta%20methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202018"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2018). _Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods_. Retrieved from <https://hal.archives-ouvertes.fr/hal-01883843>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_improving_2012"; cite-year:"2012"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2012"; caption:"Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives&nl;Boldo, Lelay, and Melquiond, 2012"; data-line:"FormalReview.bib:2870"; searchterm:"Improving%20Real%20Analysis%20in%20Coq%3A%20A%20UserFriendly%20Approach%20to%20Integrals%20and%20Derivatives%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202012"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2012). Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives. In C.&nbsp;Hawblitzel & D.&nbsp;Miller (Eds.), _Certified Programs and Proofs_ (Vol. 7679, pp. 289–304). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-35308-6_22](https://dx.doi.org/10.1007/978-3-642-35308-6_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_coquelicot:_2013"; cite-year:"2013"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2013"; caption:"Coquelicot: A User-Friendly Library of Real Analysis for Coq&nl;Boldo, Lelay, and Melquiond, 2013"; data-line:"FormalReview.bib:2953"; searchterm:"Coquelicot%3A%20A%20UserFriendly%20Library%20of%20Real%20Analysis%20for%20Coq%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202013"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2013). Coquelicot: A User-Friendly Library of Real Analysis for Coq. Retrieved from <https://hal.inria.fr/hal-00860648/document>{.bib-url}
~ end bibitem

~ begin bibitem {id:"boldo_formalization_2016"; cite-year:"2016"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2016"; caption:"Formalization of Real Analysis: A Survey of Proof Assistants and Libraries&nl;Boldo, Lelay, and Melquiond, 2016"; data-line:"FormalReview.bib:2965"; searchterm:"Formalization%20of%20Real%20Analysis%3A%20A%20Survey%20of%20Proof%20Assistants%20and%20Libraries%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2016). Formalization of Real Analysis: A Survey of Proof Assistants and Libraries. _Mathematical Structures in Computer Science_, _26_(7), 1196–1233. https://doi.org/[10.1017/S0960129514000437](https://dx.doi.org/10.1017/S0960129514000437){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boulier_next_2017"; cite-year:"2017"; cite-authors:"Boulier et al."; cite-authors-long:"Boulier, Pédrot, and Tabareau"; cite-label:"Boulier, Pédrot, \& Tabareau, 2017"; caption:"The next 700 syntactical models of type theory&nl;Boulier, Pédrot, and Tabareau, 2017"; data-line:"FormalReview.bib:476"; searchterm:"The%20next%20700%20syntactical%20models%20of%20type%20theory%20Boulier%2C%20P%C3%A9drot%2C%20and%20Tabareau%2C%202017"; spellcheck:"false"}
Boulier, S., Pédrot, P.-M., & Tabareau, N.&nbsp;(2017). The next 700 syntactical models of type theory (pp. 182–194). https://doi.org/[10.1145/3018610.3018620](https://dx.doi.org/10.1145/3018610.3018620){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bowman_j1:_nodate"; cite-year:"n.d."; cite-authors:"Bowman"; cite-authors-long:"Bowman"; cite-label:"Bowman, n.d."; caption:"J1: a small Forth CPU Core for FPGAs&nl;Bowman, n.d."; data-line:"FormalReview.bib:490"; searchterm:"J1%3A%20a%20small%20Forth%20CPU%20Core%20for%20FPGAs%20Bowman%2C%20n.d."; spellcheck:"false"}
Bowman, J.&nbsp;(n.d.). _J1: a small Forth CPU Core for FPGAs_.
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_2018"; cite-year:"2018"; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie"; cite-label:"Brahmi et al., 2018"; caption:"Formalise to automate: deployment of a safe and cost-efficient process for avionics software&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie, 2018"; data-line:"FormalReview.bib:1818"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costefficient%20process%20for%20avionics%20software%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Atki%2C%20and%20Marie%2C%202018"; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Atki, A., & Marie, T.&nbsp;(2018). Formalise to automate: deployment of a safe and cost-efficient process for avionics software. In _9th European Congress on Embedded Real Time Software and Systems (ERTS 2018)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01708332>{.bib-url}
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_nodate"; cite-year:"n.d."; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al."; cite-label:"Brahmi et al., n.d."; caption:"Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al., n.d."; data-line:"FormalReview.bib:1832"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costef%EF%AC%81cient%20process%20for%20avionics%20software%20Extended%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Informatics%2C%20Nauzere%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Informatics, C., Nauzere, L., … Marie, T.&nbsp;(n.d.). Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended, 17.
~ end bibitem

~ begin bibitem {id:"brockschmidt_t2:_2016"; cite-year:"2016"; cite-authors:"Brockschmidt et al."; cite-authors-long:"Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman"; cite-label:"Brockschmidt, Cook, Ishtiaq, Khlaaf, \& Piterman, 2016"; caption:"T2: Temporal Property Verification&nl;Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman, 2016"; data-line:"FormalReview.bib:2527"; searchterm:"T2%3A%20Temporal%20Property%20Verification%20Brockschmidt%2C%20Cook%2C%20Ishtiaq%2C%20Khlaaf%2C%20and%20Piterman%2C%202016"; spellcheck:"false"}
Brockschmidt, M., Cook, B., Ishtiaq, S., Khlaaf, H., & Piterman, N.&nbsp;(2016). T2: Temporal Property Verification. In M.&nbsp;Chechik & J.-F.&nbsp;Raskin (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (pp. 387–393). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"brookes_semantics_2007"; cite-year:"2007"; cite-authors:"Brookes"; cite-authors-long:"Brookes"; cite-label:"Brookes, 2007"; caption:"A semantics for concurrent separation logic&nl;Brookes, 2007"; data-line:"FormalReview.bib:119"; searchterm:"A%20semantics%20for%20concurrent%20separation%20logic%20Brookes%2C%202007"; spellcheck:"false"}
Brookes, S.&nbsp;(2007). A semantics for concurrent separation logic. _Theoretical Computer Science_, _375_(1), 227–270. https://doi.org/[10.1016/j.tcs.2006.12.034](https://dx.doi.org/10.1016/j.tcs.2006.12.034){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brookes_concurrent_2016"; cite-year:"2016"; cite-authors:"Brookes and O’Hearn"; cite-authors-long:"Brookes and O’Hearn"; cite-label:"Brookes \& O’Hearn, 2016"; caption:"Concurrent Separation Logic&nl;Brookes and O’Hearn, 2016"; data-line:"FormalReview.bib:106"; searchterm:"Concurrent%20Separation%20Logic%20Brookes%20and%20O%E2%80%99Hearn%2C%202016"; spellcheck:"false"}
Brookes, S., & O’Hearn, P.&nbsp;W.&nbsp;(2016). Concurrent Separation Logic. _ACM SIGLOG News_, _3_(3), 47–65. https://doi.org/[10.1145/2984450.2984457](https://dx.doi.org/10.1145/2984450.2984457){.bib-doi}
~ end bibitem

~ begin bibitem {id:"calcagno_moving_nodate"; cite-year:"2019"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, Dubreil, and O’Hearn"; cite-label:"Calcagno, Distefano, Dubreil, \& O’Hearn, n.d."; caption:"Moving Fast with Software Verification.Facebook Research&nl;Calcagno, Distefano, Dubreil, and O’Hearn, 2019"; data-line:"FormalReview.bib:3119"; searchterm:"Moving%20Fast%20with%20Software%20Verification.Facebook%20Research%20Calcagno%2C%20Distefano%2C%20Dubreil%2C%20and%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
Calcagno, C., Distefano, D., Dubreil, J., & O’Hearn, P.&nbsp;(n.d.). Moving Fast with Software Verification.Facebook Research. Retrieved February 1, 2019, from <https://research.fb.com/publications/moving-fast-with-software-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"calcagno_compositional_2011"; cite-year:"2011"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, O’Hearn, and Yang"; cite-label:"Calcagno, Distefano, O’Hearn, \& Yang, 2011"; caption:"Compositional Shape Analysis by Means of Bi-Abduction&nl;Calcagno, Distefano, O’Hearn, and Yang, 2011"; data-line:"FormalReview.bib:2"; searchterm:"Compositional%20Shape%20Analysis%20by%20Means%20of%20BiAbduction%20Calcagno%2C%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202011"; spellcheck:"false"}
Calcagno, C., Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2011). Compositional Shape Analysis by Means of Bi-Abduction. _Journal of the ACM_, _58_(6), 1–66. https://doi.org/[10.1145/2049697.2049700](https://dx.doi.org/10.1145/2049697.2049700){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cao_vst-floyd:_2018"; cite-year:"2018"; cite-authors:"Cao et al."; cite-authors-long:"Cao, Beringer, Gruetter, Dodds, and Appel"; cite-label:"Cao, Beringer, Gruetter, Dodds, \& Appel, 2018"; caption:"VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs&nl;Cao, Beringer, Gruetter, Dodds, and Appel, 2018"; data-line:"FormalReview.bib:261"; searchterm:"VSTFloyd%3A%20A%20Separation%20Logic%20Tool%20to%20Verify%20Correctness%20of%20C%20Programs%20Cao%2C%20Beringer%2C%20Gruetter%2C%20Dodds%2C%20and%20Appel%2C%202018"; spellcheck:"false"}
Cao, Q., Beringer, L., Gruetter, S., Dodds, J., & Appel, A.&nbsp;W.&nbsp;(2018). VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs. _J.&nbsp;Autom. Reason._, _61_(1), 367–422. https://doi.org/[10.1007/s10817-018-9457-5](https://dx.doi.org/10.1007/s10817-018-9457-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"casteran_pierre_nodate"; cite-year:"2019"; cite-authors:"Castéran"; cite-authors-long:"Castéran"; cite-label:"Castéran, n.d."; caption:"Pierre Castéran's Home page&nl;Castéran, 2019"; data-line:"FormalReview.bib:819"; searchterm:"Pierre%20Cast%C3%A9ran's%20Home%20page%20Cast%C3%A9ran%2C%202019"; spellcheck:"false"}
Castéran, P.&nbsp;(n.d.). Pierre Castéran’s Home page. Retrieved January 31, 2019, from <http://www.labri.fr/perso/casteran/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2010"; cite-year:"2010b"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010a"; caption:"Characteristic Formulae for Mechanized Program Verification&nl;Charguéraud, 2010b"; data-line:"FormalReview.bib:649"; searchterm:"Characteristic%20Formulae%20for%20Mechanized%20Program%20Verification%20Chargu%C3%A9raud%2C%202010b"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010a). _Characteristic Formulae for Mechanized Program Verification_ (phdthesis). UNIVERSITÉ PARIS.DIDEROT, Paris, France.
~ end bibitem

~ begin bibitem {id:"chargueraud_program_2010"; cite-year:"2010a"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010b"; caption:"Program Verification Through Characteristic Formulae&nl;Charguéraud, 2010a"; data-line:"FormalReview.bib:613"; searchterm:"Program%20Verification%20Through%20Characteristic%20Formulae%20Chargu%C3%A9raud%2C%202010a"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010b). Program Verification Through Characteristic Formulae. In _Proceedings of the 15th ACM SIGPLAN International Conference on Functional Programming_ (pp. 321–332). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1863543.1863590](https://dx.doi.org/10.1145/1863543.1863590){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2011"; cite-year:"2011"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2011"; caption:"Characteristic Formulae for the Verification of Imperative Programs&nl;Charguéraud, 2011"; data-line:"FormalReview.bib:631"; searchterm:"Characteristic%20Formulae%20for%20the%20Verification%20of%20Imperative%20Programs%20Chargu%C3%A9raud%2C%202011"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2011). Characteristic Formulae for the Verification of Imperative Programs. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 418–430). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034828](https://dx.doi.org/10.1145/2034773.2034828){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chen_project_nodate"; cite-year:"n.d."; cite-authors:"Chen"; cite-authors-long:"Chen"; cite-label:"Chen, n.d."; caption:"Project Report on DeepSpecDB&nl;Chen, n.d."; data-line:"FormalReview.bib:1392"; searchterm:"Project%20Report%20on%20DeepSpecDB%20Chen%2C%20n.d."; spellcheck:"false"}
Chen, Y.&nbsp;(n.d.). Project Report on DeepSpecDB, 35.
~ end bibitem

~ begin bibitem {id:"chlipala_certified_2013"; cite-year:"2013"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2013"; caption:"Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant&nl;Chlipala, 2013"; data-line:"FormalReview.bib:698"; searchterm:"Certified%20programming%20with%20dependent%20types%3A%20a%20pragmatic%20introduction%20to%20the%20Coq%20proof%20assistant%20Chlipala%2C%202013"; spellcheck:"false"}
Chlipala, A.&nbsp;(2013). _Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant_. Cambridge, MA: The MIT Press. Retrieved from <http://adam.chlipala.net/cpdt/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_formal_2019"; cite-year:"2019"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2019"; caption:"Formal Reasoning About Programs - Github&nl;Chlipala, 2019"; data-line:"FormalReview.bib:719"; searchterm:"Formal%20Reasoning%20About%20Programs%20%20Github%20Chlipala%2C%202019"; spellcheck:"false"}
Chlipala, A.&nbsp;(2019). _Formal Reasoning About Programs - Github_. Retrieved from <https://github.com/achlipala/frap>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_introduction_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-a"; caption:"An Introduction to Programming and Proving with Dependent Types in Coq&nl;Chlipala, n.d."; data-line:"FormalReview.bib:683"; searchterm:"An%20Introduction%20to%20Programming%20and%20Proving%20with%20Dependent%20Types%20in%20Coq%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-a). An Introduction to Programming and Proving with Dependent Types in Coq. _Journal of Formalized Reasoning_, _3_(2), 93.
~ end bibitem

~ begin bibitem {id:"chlipala_certied_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-b"; caption:"Certiﬁed Programming with Dependent Types&nl;Chlipala, n.d."; data-line:"FormalReview.bib:711"; searchterm:"Certi%EF%AC%81ed%20Programming%20with%20Dependent%20Types%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-b). Certiﬁed Programming with Dependent Types, 369.
~ end bibitem

~ begin bibitem {id:"chlipala_end_nodate"; cite-year:"2019"; cite-authors:"Chlipala et al."; cite-authors-long:"Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al."; cite-label:"Chlipala et al., n.d."; caption:"THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN&nl;Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al., 2019"; data-line:"FormalReview.bib:1437"; searchterm:"THE%20END%20OF%20HISTORY%3F%20USING%20A%20PROOF%20ASSISTANT%20TO%20REPLACE%20LANGUAGE%20DESIGN%20WITH%20LIBRARY%20DESIGN%20Chlipala%2C%20Delaware%2C%20Duchovni%2C%20Gross%2C%20PitClaudel%2C%20Suriyakarn%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Chlipala, A., Delaware, B., Duchovni, S., Gross, J., Pit-Claudel, C., Suriyakarn, S., … ye, K.&nbsp;(n.d.). THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN.&nbsp;Retrieved February 1, 2019, from <https://snapl.org/2017/abstracts/Chlipala.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"choi_kami:_2017"; cite-year:"2017"; cite-authors:"Choi et al."; cite-authors-long:"Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind"; cite-label:"Choi, Vijayaraghavan, Sherman, Chlipala, \& Arvind, 2017"; caption:"Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification&nl;Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind, 2017"; data-line:"FormalReview.bib:1528"; searchterm:"Kami%3A%20A%20Platform%20for%20Highlevel%20Parametric%20Hardware%20Specification%20and%20Its%20Modular%20Verification%20Choi%2C%20Vijayaraghavan%2C%20Sherman%2C%20Chlipala%2C%20and%20Arvind%2C%202017"; spellcheck:"false"}
Choi, J., Vijayaraghavan, M., Sherman, B., Chlipala, A., & Arvind. (2017). Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification. _Proc. ACM Program. Lang._, _1_, 24:1–24:30. https://doi.org/[10.1145/3110268](https://dx.doi.org/10.1145/3110268){.bib-doi}
~ end bibitem

~ begin bibitem {id:"christakis_collaborative_2012"; cite-year:"2012"; cite-authors:"Christakis et al."; cite-authors-long:"Christakis, Müller, and Wüstholz"; cite-label:"Christakis, Müller, \& Wüstholz, 2012"; caption:"Collaborative Verification and Testing with Explicit Assumptions&nl;Christakis, Müller, and Wüstholz, 2012"; data-line:"FormalReview.bib:1162"; searchterm:"Collaborative%20Verification%20and%20Testing%20with%20Explicit%20Assumptions%20Christakis%2C%20M%C3%BCller%2C%20and%20W%C3%BCstholz%2C%202012"; spellcheck:"false"}
Christakis, M., Müller, P., & Wüstholz, V.&nbsp;(2012). Collaborative Verification and Testing with Explicit Assumptions. In D.&nbsp;Giannakopoulou & D.&nbsp;Méry (Eds.), _FM 2012: Formal Methods_ (pp. 132–146). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"conchon_alt-ergo_2018"; cite-year:"2018"; cite-authors:"Conchon et al."; cite-authors-long:"Conchon, Coquereau, Iguernlala, and Mebsout"; cite-label:"Conchon, Coquereau, Iguernlala, \& Mebsout, 2018"; caption:"Alt-Ergo 2.2&nl;Conchon, Coquereau, Iguernlala, and Mebsout, 2018"; data-line:"FormalReview.bib:177"; searchterm:"AltErgo%202.2%20Conchon%2C%20Coquereau%2C%20Iguernlala%2C%20and%20Mebsout%2C%202018"; spellcheck:"false"}
Conchon, S., Coquereau, A., Iguernlala, M., & Mebsout, A.&nbsp;(2018). Alt-Ergo 2.2. In _SMT Workshop: International Workshop on Satisfiability Modulo Theories_. Oxford, United Kingdom. Retrieved from <https://hal.inria.fr/hal-01960203>{.bib-url}
~ end bibitem

~ begin bibitem {id:"conchon_increasing_2016"; cite-year:"2016"; cite-authors:"Conchon and Iguernlala"; cite-authors-long:"Conchon and Iguernlala"; cite-label:"Conchon \& Iguernlala, 2016"; caption:"Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo&nl;Conchon and Iguernlala, 2016"; data-line:"FormalReview.bib:190"; searchterm:"Increasing%20Proofs%20Automation%20Rate%20of%20AtelierB%20Thanks%20to%20AltErgo%20Conchon%20and%20Iguernlala%2C%202016"; spellcheck:"false"}
Conchon, S., & Iguernlala, M.&nbsp;(2016). Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo. In T.&nbsp;Lecomte, R.&nbsp;Pinger, & A.&nbsp;Romanovsky (Eds.), _Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification_ (pp. 243–253). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"costan_sanctum:_2016"; cite-year:"2016"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2016"; caption:"Sanctum: Minimal Hardware Extensions for Strong Software Isolation&nl;Costan, Lebedev, and Devadas, 2016"; data-line:"FormalReview.bib:2718"; searchterm:"Sanctum%3A%20Minimal%20Hardware%20Extensions%20for%20Strong%20Software%20Isolation%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202016"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2016). Sanctum: Minimal Hardware Extensions for Strong Software Isolation (pp. 857–874). Retrieved from <https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/costan>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017"; cite-year:"2017a"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017a"; caption:"Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture&nl;Costan, Lebedev, and Devadas, 2017a"; data-line:"FormalReview.bib:2731"; searchterm:"Secure%20Processors%20Part%20I%3A%20Background%2C%20Taxonomy%20for%20Secure%20Enclaves%20and%20Intel%20SGX%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017a"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017a). Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(1), 1–248. https://doi.org/[10.1561/1000000051](https://dx.doi.org/10.1561/1000000051){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017-1"; cite-year:"2017b"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017b"; caption:"Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture&nl;Costan, Lebedev, and Devadas, 2017b"; data-line:"FormalReview.bib:2748"; searchterm:"Secure%20Processors%20Part%20II%3A%20Intel%20SGX%20Security%20Analysis%20and%20MIT%20Sanctum%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017b"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017b). Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(3), 249–361. https://doi.org/[10.1561/1000000052](https://dx.doi.org/10.1561/1000000052){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_2016"; cite-year:"2016"; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, 2016"; caption:"End-to-end Verification of Information-flow Security for C and Assembly Programs&nl;Costanzo, Shao, and Gu, 2016"; data-line:"FormalReview.bib:577"; searchterm:"Endtoend%20Verification%20of%20Informationflow%20Security%20for%20C%20and%20Assembly%20Programs%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%202016"; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(2016). End-to-end Verification of Information-flow Security for C and Assembly Programs. In _Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 648–664). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2908080.2908100](https://dx.doi.org/10.1145/2908080.2908100){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_nodate"; cite-year:"n.d."; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, n.d."; caption:"End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report&nl;Costanzo, Shao, and Gu, n.d."; data-line:"FormalReview.bib:566"; searchterm:"EndtoEnd%20Veri%EF%AC%81cation%20of%20InformationFlow%20Security%20for%20C%20and%20Assembly%20Programs%20%20Tech%20Report%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%20n.d."; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(n.d.). End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report, 21. Retrieved from <http://flint.cs.yale.edu/certikos/publications/security-tr.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"crary_modules_2017"; cite-year:"2017"; cite-authors:"Crary"; cite-authors-long:"Crary"; cite-label:"Crary, 2017"; caption:"Modules, Abstraction, and Parametric Polymorphism&nl;Crary, 2017"; data-line:"FormalReview.bib:846"; searchterm:"Modules%2C%20Abstraction%2C%20and%20Parametric%20Polymorphism%20Crary%2C%202017"; spellcheck:"false"}
Crary, K.&nbsp;(2017). Modules, Abstraction, and Parametric Polymorphism. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 100–113). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009892](https://dx.doi.org/10.1145/3009837.3009892){.bib-doi}
~ end bibitem

~ begin bibitem {id:"crick_share_2014"; cite-year:"2014"; cite-authors:"Crick et al."; cite-authors-long:"Crick, Hall, Ishtiaq, and Takeda"; cite-label:"Crick, Hall, Ishtiaq, \& Takeda, 2014"; caption:"\"Share and Enjoy\": Publishing Useful and Usable Scientific Models&nl;Crick, Hall, Ishtiaq, and Takeda, 2014"; data-line:"FormalReview.bib:2512"; searchterm:"%22Share%20and%20Enjoy%22%3A%20Publishing%20Useful%20and%20Usable%20Scientific%20Models%20Crick%2C%20Hall%2C%20Ishtiaq%2C%20and%20Takeda%2C%202014"; spellcheck:"false"}
Crick, T., Hall, B.&nbsp;A., Ishtiaq, S., & Takeda, K.&nbsp;(2014). &ldquo;Share and Enjoy&rdquo;: Publishing Useful and Usable Scientific Models. _arXiv:1409.0367 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1409.0367](http://arxiv.org/abs/1409.0367){.bib-url}
~ end bibitem

~ begin bibitem {id:"czajka_coqhammer:_nodate"; cite-year:"2019"; cite-authors:"Czajka and Kaliszyk"; cite-authors-long:"Czajka and Kaliszyk"; cite-label:"Czajka \& Kaliszyk, n.d."; caption:"CoqHammer: Strong Automation for Program Verification - CoqPL 2018&nl;Czajka and Kaliszyk, 2019"; data-line:"FormalReview.bib:1054"; searchterm:"CoqHammer%3A%20Strong%20Automation%20for%20Program%20Verification%20%20CoqPL%202018%20Czajka%20and%20Kaliszyk%2C%202019"; spellcheck:"false"}
Czajka, L., & Kaliszyk, C.&nbsp;(n.d.). CoqHammer: Strong Automation for Program Verification - CoqPL 2018. Retrieved January 31, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-coqhammer-strong-automation-for-program-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"david_cristina_program_2017"; cite-year:"2017"; cite-authors:"David Cristina and Kroening Daniel"; cite-authors-long:"David Cristina and Kroening Daniel"; cite-label:"David Cristina \& Kroening Daniel, 2017"; caption:"Program synthesis: challenges and opportunities&nl;David Cristina and Kroening Daniel, 2017"; data-line:"FormalReview.bib:1628"; searchterm:"Program%20synthesis%3A%20challenges%20and%20opportunities%20David%20Cristina%20and%20Kroening%20Daniel%2C%202017"; spellcheck:"false"}
David Cristina, & Kroening Daniel. (2017). Program synthesis: challenges and opportunities. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150403. https://doi.org/[10.1098/rsta.2015.0403](https://dx.doi.org/10.1098/rsta.2015.0403){.bib-doi}
~ end bibitem

~ begin bibitem {id:"parigot_tactic_2000"; cite-year:"2000"; cite-authors:"Delahaye"; cite-authors-long:"Delahaye"; cite-label:"Delahaye, 2000"; caption:"A Tactic Language for the System Coq&nl;Delahaye, 2000"; data-line:"FormalReview.bib:1733"; searchterm:"A%20Tactic%20Language%20for%20the%20System%20Coq%20Delahaye%2C%202000"; spellcheck:"false"}
Delahaye, D.&nbsp;(2000). A Tactic Language for the System Coq. In M.&nbsp;Parigot & A.&nbsp;Voronkov (Eds.), _Logic for Programming and Automated Reasoning_ (Vol. 1955, pp. 85–95). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/3-540-44404-1_7](https://dx.doi.org/10.1007/3-540-44404-1_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_fiat:_2015"; cite-year:"2015"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Pit-Claudel, Gross, and Chlipala"; cite-label:"Delaware, Pit-Claudel, Gross, \& Chlipala, 2015"; caption:"Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant&nl;Delaware, Pit-Claudel, Gross, and Chlipala, 2015"; data-line:"FormalReview.bib:1418"; searchterm:"Fiat%3A%20Deductive%20Synthesis%20of%20Abstract%20Data%20Types%20in%20a%20Proof%20Assistant%20Delaware%2C%20PitClaudel%2C%20Gross%2C%20and%20Chlipala%2C%202015"; spellcheck:"false"}
Delaware, B., Pit-Claudel, C., Gross, J., & Chlipala, A.&nbsp;(2015). Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 689–700). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2677006](https://dx.doi.org/10.1145/2676726.2677006){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_narcissus:_nodate"; cite-year:"n.d."; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Suriyakarn, Pit-Claudel, Ye, and Chlipala"; cite-label:"Delaware, Suriyakarn, Pit-Claudel, Ye, \& Chlipala, n.d."; caption:"Narcissus: Correct-By-Construction Derivation of Decoders and Encoders from Binary Formats&nl;Delaware, Suriyakarn, Pit-Claudel, Ye, and Chlipala, n.d."; data-line:"FormalReview.bib:1546"; searchterm:"Narcissus%3A%20CorrectByConstruction%20Derivation%20of%20Decoders%20and%20Encoders%20from%20Binary%20Formats%20Delaware%2C%20Suriyakarn%2C%20PitClaudel%2C%20Ye%2C%20and%20Chlipala%2C%20n.d."; spellcheck:"false"}
Delaware, B., Suriyakarn, S., Pit-Claudel, C., Ye, Q., & Chlipala, A.&nbsp;(n.d.). Narcissus: Correct-By-Construction Derivation of Decoders and Encoders from Binary Formats, 14.
~ end bibitem

~ begin bibitem {id:"delaware_narcissus:_2018"; cite-year:"2018"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala"; cite-label:"Delaware, Suriyakarn, Pit\&ndash;Claudel, Ye, \& Chlipala, 2018"; caption:"Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats&nl;Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala, 2018"; data-line:"FormalReview.bib:1555"; searchterm:"Narcissus%3A%20Deriving%20CorrectByConstruction%20Decoders%20and%20Encoders%20from%20Binary%20Formats%20Delaware%2C%20Suriyakarn%2C%20Pit%26ndash%3BClaudel%2C%20Ye%2C%20and%20Chlipala%2C%202018"; spellcheck:"false"}
Delaware, B., Suriyakarn, S., Pit&ndash;Claudel, C., Ye, Q., & Chlipala, A.&nbsp;(2018). Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats. Retrieved from <https://arxiv.org/abs/1803.04870v2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"delignat-lavaud_implementing_2017"; cite-year:"2017"; cite-authors:"Delignat-Lavaud et al."; cite-authors-long:"Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al."; cite-label:"Delignat-Lavaud et al., 2017"; caption:"Implementing and Proving the TLS 1.3 Record Layer&nl;Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al., 2017"; data-line:"FormalReview.bib:1799"; searchterm:"Implementing%20and%20Proving%20the%20TLS%201.3%20Record%20Layer%20DelignatLavaud%2C%20Fournet%2C%20Kohlweiss%2C%20Protzenko%2C%20Rastogi%2C%20Swamy%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Protzenko, J., Rastogi, A., Swamy, N., … Zinzindohoue, J.&nbsp;K.&nbsp;(2017). Implementing and Proving the TLS 1.3 Record Layer. Retrieved from <https://www.microsoft.com/en-us/research/publication/implementing-proving-tls-1-3-record-layer/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dijkstra_guarded_1975"; cite-year:"1975"; cite-authors:"Dijkstra"; cite-authors-long:"Dijkstra"; cite-label:"Dijkstra, 1975"; caption:"Guarded Commands, Nondeterminacy and Formal Derivation of Programs&nl;Dijkstra, 1975"; data-line:"FormalReview.bib:1925"; searchterm:"Guarded%20Commands%2C%20Nondeterminacy%20and%20Formal%20Derivation%20of%20Programs%20Dijkstra%2C%201975"; spellcheck:"false"}
Dijkstra, E.&nbsp;W.&nbsp;(1975). Guarded Commands, Nondeterminacy and Formal Derivation of Programs. _Commun. ACM_, _18_(8), 453–457. https://doi.org/[10.1145/360933.360975](https://dx.doi.org/10.1145/360933.360975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hermanns_local_2006"; cite-year:"2006"; cite-authors:"Distefano et al."; cite-authors-long:"Distefano, O’Hearn, and Yang"; cite-label:"Distefano, O’Hearn, \& Yang, 2006"; caption:"A Local Shape Analysis Based on Separation Logic&nl;Distefano, O’Hearn, and Yang, 2006"; data-line:"FormalReview.bib:3100"; searchterm:"A%20Local%20Shape%20Analysis%20Based%20on%20Separation%20Logic%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202006"; spellcheck:"false"}
Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2006). A Local Shape Analysis Based on Separation Logic. In H.&nbsp;Hermanns & J.&nbsp;Palsberg (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (Vol. 3920, pp. 287–302). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/11691372_19](https://dx.doi.org/10.1007/11691372_19){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_fresh_2009"; cite-year:"2009"; cite-authors:"Dockins et al."; cite-authors-long:"Dockins, Hobor, and Appel"; cite-label:"Dockins, Hobor, \& Appel, 2009"; caption:"A Fresh Look at Separation Algebras and Share Accounting&nl;Dockins, Hobor, and Appel, 2009"; data-line:"FormalReview.bib:2211"; searchterm:"A%20Fresh%20Look%20at%20Separation%20Algebras%20and%20Share%20Accounting%20Dockins%2C%20Hobor%2C%20and%20Appel%2C%202009"; spellcheck:"false"}
Dockins, R., Hobor, A., & Appel, A.&nbsp;W.&nbsp;(2009). A Fresh Look at Separation Algebras and Share Accounting. In Z.&nbsp;Hu (Ed.), _Programming Languages and Systems_ (Vol. 5904, pp. 161–177). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-10672-9_13](https://dx.doi.org/10.1007/978-3-642-10672-9_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ebner_metaprogramming_2017"; cite-year:"2017"; cite-authors:"Ebner et al."; cite-authors-long:"Ebner, Ullrich, Roesch, Avigad, and Moura"; cite-label:"Ebner, Ullrich, Roesch, Avigad, \& Moura, 2017"; caption:"A Metaprogramming Framework for Formal Verification&nl;Ebner, Ullrich, Roesch, Avigad, and Moura, 2017"; data-line:"FormalReview.bib:2633"; searchterm:"A%20Metaprogramming%20Framework%20for%20Formal%20Verification%20Ebner%2C%20Ullrich%2C%20Roesch%2C%20Avigad%2C%20and%20Moura%2C%202017"; spellcheck:"false"}
Ebner, G., Ullrich, S., Roesch, J., Avigad, J., & Moura, L.&nbsp;de. (2017). A Metaprogramming Framework for Formal Verification. _Proc. ACM Program. Lang._, _1_, 34:1–34:29. https://doi.org/[10.1145/3110278](https://dx.doi.org/10.1145/3110278){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ekici_smtcoq:_2017"; cite-year:"2017"; cite-authors:"Ekici et al."; cite-authors-long:"Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett"; cite-label:"Ekici et al., 2017"; caption:"SMTCoq: A Plug-In for Integrating SMT Solvers into Coq&nl;Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett, 2017"; data-line:"FormalReview.bib:1675"; searchterm:"SMTCoq%3A%20A%20PlugIn%20for%20Integrating%20SMT%20Solvers%20into%20Coq%20Ekici%2C%20Mebsout%2C%20Tinelli%2C%20Keller%2C%20Katz%2C%20Reynolds%2C%20and%20Barrett%2C%202017"; spellcheck:"false"}
Ekici, B., Mebsout, A., Tinelli, C., Keller, C., Katz, G., Reynolds, A., & Barrett, C.&nbsp;(2017). SMTCoq: A Plug-In for Integrating SMT Solvers into Coq. In R.&nbsp;Majumdar & V.&nbsp;Kunčak (Eds.), _Computer Aided Verification_ (pp. 126–133). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"filinski_representing_1994"; cite-year:"1994"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1994"; caption:"Representing Monads&nl;Filinski, 1994"; data-line:"FormalReview.bib:2054"; searchterm:"Representing%20Monads%20Filinski%2C%201994"; spellcheck:"false"}
Filinski, A.&nbsp;(1994). Representing Monads. In _Proceedings of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 446–457). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/174675.178047](https://dx.doi.org/10.1145/174675.178047){.bib-doi}
~ end bibitem

~ begin bibitem {id:"filinski_representing_1999"; cite-year:"1999"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1999"; caption:"Representing Layered Monads&nl;Filinski, 1999"; data-line:"FormalReview.bib:2071"; searchterm:"Representing%20Layered%20Monads%20Filinski%2C%201999"; spellcheck:"false"}
Filinski, A.&nbsp;(1999). Representing Layered Monads. In _Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 175–188). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/292540.292557](https://dx.doi.org/10.1145/292540.292557){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fisher_kathleen_hacms_2017"; cite-year:"2017"; cite-authors:"Fisher Kathleen et al."; cite-authors-long:"Fisher Kathleen, Launchbury John, and Richards Raymond"; cite-label:"Fisher Kathleen, Launchbury John, \& Richards Raymond, 2017"; caption:"The HACMS program: using formal methods to eliminate exploitable bugs&nl;Fisher Kathleen, Launchbury John, and Richards Raymond, 2017"; data-line:"FormalReview.bib:1496"; searchterm:"The%20HACMS%20program%3A%20using%20formal%20methods%20to%20eliminate%20exploitable%20bugs%20Fisher%20Kathleen%2C%20Launchbury%20John%2C%20and%20Richards%20Raymond%2C%202017"; spellcheck:"false"}
Fisher Kathleen, Launchbury John, & Richards Raymond. (2017). The HACMS program: using formal methods to eliminate exploitable bugs. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150401. https://doi.org/[10.1098/rsta.2015.0401](https://dx.doi.org/10.1098/rsta.2015.0401){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fournet_deploying_nodate"; cite-year:"n.d."; cite-authors:"Fournet et al."; cite-authors-long:"Fournet, Hawblitzel, Parno, and Swamy"; cite-label:"Fournet, Hawblitzel, Parno, \& Swamy, n.d."; caption:"Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem&nl;Fournet, Hawblitzel, Parno, and Swamy, n.d."; data-line:"FormalReview.bib:2243"; searchterm:"Deploying%20a%20Veri%EF%AC%81ed%20Secure%20Implementation%20of%20the%20HTTPS%20Ecosystem%20Fournet%2C%20Hawblitzel%2C%20Parno%2C%20and%20Swamy%2C%20n.d."; spellcheck:"false"}
Fournet, C., Hawblitzel, C., Parno, B., & Swamy, N.&nbsp;(n.d.). Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem, 10.
~ end bibitem

~ begin bibitem {id:"fowler_deriving_nodate"; cite-year:"2019"; cite-authors:"Fowler"; cite-authors-long:"Fowler"; cite-label:"Fowler, n.d."; caption:"Deriving Kepler’s Laws from the Inverse-Square Law&nl;Fowler, 2019"; data-line:"FormalReview.bib:1763"; searchterm:"Deriving%20Kepler%E2%80%99s%20Laws%20from%20the%20InverseSquare%20Law%20Fowler%2C%202019"; spellcheck:"false"}
Fowler, M.&nbsp;(n.d.). Deriving Kepler’s Laws from the Inverse-Square Law. Retrieved February 1, 2019, from <http://galileo.phys.virginia.edu/classes/152.mf1i.spring02/KeplersLaws.htm>{.bib-url}
~ end bibitem

~ begin bibitem {id:"felty_keymaera_2015"; cite-year:"2015"; cite-authors:"Fulton et al."; cite-authors-long:"Fulton, Mitsch, Quesel, Völp, and Platzer"; cite-label:"Fulton, Mitsch, Quesel, Völp, \& Platzer, 2015"; caption:"KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems&nl;Fulton, Mitsch, Quesel, Völp, and Platzer, 2015"; data-line:"FormalReview.bib:958"; searchterm:"KeYmaera%20X%3A%20An%20Axiomatic%20Tactical%20Theorem%20Prover%20for%20Hybrid%20Systems%20Fulton%2C%20Mitsch%2C%20Quesel%2C%20V%C3%B6lp%2C%20and%20Platzer%2C%202015"; spellcheck:"false"}
Fulton, N., Mitsch, S., Quesel, J.-D., Völp, M., & Platzer, A.&nbsp;(2015). KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems. In A.&nbsp;P.&nbsp;Felty & A.&nbsp;Middeldorp (Eds.), _Automated Deduction - CADE-25_ (Vol. 9195, pp. 527–538). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-21401-6_36](https://dx.doi.org/10.1007/978-3-319-21401-6_36){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gasser_building_1988"; cite-year:"1988"; cite-authors:"Gasser"; cite-authors-long:"Gasser"; cite-label:"Gasser, 1988"; caption:"Building a secure computer system&nl;Gasser, 1988"; data-line:"FormalReview.bib:2706"; searchterm:"Building%20a%20secure%20computer%20system%20Gasser%2C%201988"; spellcheck:"false"}
Gasser, M.&nbsp;(1988). _Building a secure computer system_. New York: Van Nostrand Reinhold Co.
~ end bibitem

~ begin bibitem {id:"gonthier_formal_2008"; cite-year:"2008"; cite-authors:"Gonthier"; cite-authors-long:"Gonthier"; cite-label:"Gonthier, 2008"; caption:"Formal Proof—The Four- Color Theorem&nl;Gonthier, 2008"; data-line:"FormalReview.bib:1446"; searchterm:"Formal%20Proof%E2%80%94The%20Four%20Color%20Theorem%20Gonthier%2C%202008"; spellcheck:"false"}
Gonthier, G.&nbsp;(2008). Formal Proof—The Four- Color Theorem, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"gonthier_introduction_2010"; cite-year:"2010"; cite-authors:"Gonthier and Mahboubi"; cite-authors-long:"Gonthier and Mahboubi"; cite-label:"Gonthier \& Mahboubi, 2010"; caption:"An introduction to small scale reflection in Coq&nl;Gonthier and Mahboubi, 2010"; data-line:"FormalReview.bib:2088"; searchterm:"An%20introduction%20to%20small%20scale%20reflection%20in%20Coq%20Gonthier%20and%20Mahboubi%2C%202010"; spellcheck:"false"}
Gonthier, G., & Mahboubi, A.&nbsp;(2010). An introduction to small scale reflection in Coq. _Journal of Formalized Reasoning_, _3_(2), 95–152. https://doi.org/[10.6092/issn.1972-5787/1979](https://dx.doi.org/10.6092/issn.1972-5787/1979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_how_2011"; cite-year:"2011"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Ziliani, Nanevski, and Dreyer"; cite-label:"Gonthier, Ziliani, Nanevski, \& Dreyer, 2011"; caption:"How to Make Ad Hoc Proof Automation Less Ad Hoc&nl;Gonthier, Ziliani, Nanevski, and Dreyer, 2011"; data-line:"FormalReview.bib:2106"; searchterm:"How%20to%20Make%20Ad%20Hoc%20Proof%20Automation%20Less%20Ad%20Hoc%20Gonthier%2C%20Ziliani%2C%20Nanevski%2C%20and%20Dreyer%2C%202011"; spellcheck:"false"}
Gonthier, G., Ziliani, B., Nanevski, A., & Dreyer, D.&nbsp;(2011). How to Make Ad Hoc Proof Automation Less Ad Hoc. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 163–175). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034798](https://dx.doi.org/10.1145/2034773.2034798){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gorogiannis_true_2019"; cite-year:"2019"; cite-authors:"Gorogiannis et al."; cite-authors-long:"Gorogiannis, O’Hearn, and Sergey"; cite-label:"Gorogiannis, O’Hearn, \& Sergey, 2019"; caption:"A true positives theorem for a static race detector&nl;Gorogiannis, O’Hearn, and Sergey, 2019"; data-line:"FormalReview.bib:72"; searchterm:"A%20true%20positives%20theorem%20for%20a%20static%20race%20detector%20Gorogiannis%2C%20O%E2%80%99Hearn%2C%20and%20Sergey%2C%202019"; spellcheck:"false"}
Gorogiannis, N., O’Hearn, P.&nbsp;W., & Sergey, I.&nbsp;(2019). A true positives theorem for a static race detector. _Proceedings of the ACM on Programming Languages_, _3_, 1–29. https://doi.org/[10.1145/3290370](https://dx.doi.org/10.1145/3290370){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gu_deep_2015"; cite-year:"2015"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al."; cite-label:"Gu et al., 2015"; caption:"Deep Specifications and Certified Abstraction Layers&nl;Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al., 2015"; data-line:"FormalReview.bib:498"; searchterm:"Deep%20Specifications%20and%20Certified%20Abstraction%20Layers%20Gu%2C%20Koenig%2C%20Ramananandro%2C%20Shao%2C%20Wu%2C%20Weng%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Gu, R., Koenig, J., Ramananandro, T., Shao, Z., Wu, X.&nbsp;(Newman), Weng, S.-C., … Guo, Y.&nbsp;(2015). Deep Specifications and Certified Abstraction Layers. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 595–608). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2676975](https://dx.doi.org/10.1145/2676726.2676975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gu_certikos:_2016"; cite-year:"2016"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo"; cite-label:"Gu et al., 2016"; caption:"CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels&nl;Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo, 2016"; data-line:"FormalReview.bib:549"; searchterm:"CertiKOS%3A%20An%20Extensible%20Architecture%20for%20Building%20Certified%20Concurrent%20OS%20Kernels%20Gu%2C%20Shao%2C%20Chen%2C%20Wu%2C%20Kim%2C%20Sj%C3%B6berg%2C%20and%20Costanzo%2C%202016"; spellcheck:"false"}
Gu, R., Shao, Z., Chen, H., Wu, X., Kim, J., Sjöberg, V., & Costanzo, D.&nbsp;(2016). CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels. In _Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation_ (pp. 653–669). Berkeley, CA, USA: USENIX Association. Retrieved from <http://dl.acm.org/citation.cfm?id=3026877.3026928>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gu_certified_2018"; cite-year:"2018"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al."; cite-label:"Gu et al., 2018"; caption:"Certified Concurrent Abstraction Layers&nl;Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al., 2018"; data-line:"FormalReview.bib:595"; searchterm:"Certified%20Concurrent%20Abstraction%20Layers%20Gu%2C%20Shao%2C%20Kim%2C%20Wu%2C%20Koenig%2C%20Sj%C3%B6berg%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Gu, R., Shao, Z., Kim, J., Wu, X.&nbsp;(Newman), Koenig, J., Sjöberg, V., … Ramananandro, T.&nbsp;(2018). Certified Concurrent Abstraction Layers. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 646–661). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192381](https://dx.doi.org/10.1145/3192366.3192381){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_seloger:_2013"; cite-year:"2013"; cite-authors:"Haase et al."; cite-authors-long:"Haase, Ishtiaq, Ouaknine, and Parkinson"; cite-label:"Haase, Ishtiaq, Ouaknine, \& Parkinson, 2013"; caption:"SeLoger: A Tool for Graph-Based Reasoning in Separation Logic&nl;Haase, Ishtiaq, Ouaknine, and Parkinson, 2013"; data-line:"FormalReview.bib:2490"; searchterm:"SeLoger%3A%20A%20Tool%20for%20GraphBased%20Reasoning%20in%20Separation%20Logic%20Haase%2C%20Ishtiaq%2C%20Ouaknine%2C%20and%20Parkinson%2C%202013"; spellcheck:"false"}
Haase, C., Ishtiaq, S., Ouaknine, J., & Parkinson, M.&nbsp;J.&nbsp;(2013). SeLoger: A Tool for Graph-Based Reasoning in Separation Logic. In N.&nbsp;Sharygina & H.&nbsp;Veith (Eds.), _Computer Aided Verification_ (Vol. 8044, pp. 790–795). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39799-8_55](https://dx.doi.org/10.1007/978-3-642-39799-8_55){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harper_framework_1993"; cite-year:"1993"; cite-authors:"Harper et al."; cite-authors-long:"Harper, Honsell, and Plotkin"; cite-label:"Harper, Honsell, \& Plotkin, 1993"; caption:"A Framework for Defining Logics&nl;Harper, Honsell, and Plotkin, 1993"; data-line:"FormalReview.bib:2160"; searchterm:"A%20Framework%20for%20Defining%20Logics%20Harper%2C%20Honsell%2C%20and%20Plotkin%2C%201993"; spellcheck:"false"}
Harper, R., Honsell, F., & Plotkin, G.&nbsp;(1993). A Framework for Defining Logics. _J.&nbsp;ACM_, _40_(1), 143–184. https://doi.org/[10.1145/138027.138060](https://dx.doi.org/10.1145/138027.138060){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harrison_formal_2008"; cite-year:"2008"; cite-authors:"Harrison"; cite-authors-long:"Harrison"; cite-label:"Harrison, 2008"; caption:"Formal Proof—Theory and Practice&nl;Harrison, 2008"; data-line:"FormalReview.bib:1468"; searchterm:"Formal%20Proof%E2%80%94Theory%20and%20Practice%20Harrison%2C%202008"; spellcheck:"false"}
Harrison, J.&nbsp;(2008). Formal Proof—Theory and Practice, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"harrison_hol_2013"; cite-year:"2013"; cite-authors:"Harrison"; cite-authors-long:"Harrison"; cite-label:"Harrison, 2013"; caption:"The HOL Light Theory of Euclidean Space&nl;Harrison, 2013"; data-line:"FormalReview.bib:2177"; searchterm:"The%20HOL%20Light%20Theory%20of%20Euclidean%20Space%20Harrison%2C%202013"; spellcheck:"false"}
Harrison, J.&nbsp;(2013). The HOL Light Theory of Euclidean Space. _Journal of Automated Reasoning_, _50_(2), 173–190. https://doi.org/[10.1007/s10817-012-9250-9](https://dx.doi.org/10.1007/s10817-012-9250-9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hatcliff_behavioral_2012"; cite-year:"2012"; cite-authors:"Hatcliff et al."; cite-authors-long:"Hatcliff, Leavens, Leino, Müller, and Parkinson"; cite-label:"Hatcliff, Leavens, Leino, Müller, \& Parkinson, 2012"; caption:"Behavioral Interface Specification Languages&nl;Hatcliff, Leavens, Leino, Müller, and Parkinson, 2012"; data-line:"FormalReview.bib:1202"; searchterm:"Behavioral%20Interface%20Specification%20Languages%20Hatcliff%2C%20Leavens%2C%20Leino%2C%20M%C3%BCller%2C%20and%20Parkinson%2C%202012"; spellcheck:"false"}
Hatcliff, J., Leavens, G.&nbsp;T., Leino, K.&nbsp;R.&nbsp;M., Müller, P., & Parkinson, M.&nbsp;(2012). Behavioral Interface Specification Languages. _ACM Comput. Surv._, _44_(3), 16:1–16:58. https://doi.org/[10.1145/2187671.2187678](https://dx.doi.org/10.1145/2187671.2187678){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hathhorn_defining_2015"; cite-year:"2015"; cite-authors:"Hathhorn et al."; cite-authors-long:"Hathhorn, Ellison, and Roşu"; cite-label:"Hathhorn, Ellison, \& Roşu, 2015"; caption:"Defining the Undefinedness of C&nl;Hathhorn, Ellison, and Roşu, 2015"; data-line:"FormalReview.bib:2570"; searchterm:"Defining%20the%20Undefinedness%20of%20C%20Hathhorn%2C%20Ellison%2C%20and%20Ro%C5%9Fu%2C%202015"; spellcheck:"false"}
Hathhorn, C., Ellison, C., & Roşu, G.&nbsp;(2015). Defining the Undefinedness of C.&nbsp;In _Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 336–345). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2737924.2737979](https://dx.doi.org/10.1145/2737924.2737979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironfleet:_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al."; cite-label:"Hawblitzel, Howell, et al., 2015"; caption:"IronFleet: Proving Practical Distributed Systems Correct&nl;Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al., 2015"; data-line:"FormalReview.bib:2260"; searchterm:"IronFleet%3A%20Proving%20Practical%20Distributed%20Systems%20Correct%20Hawblitzel%2C%20Howell%2C%20Kapritsos%2C%20Lorch%2C%20Parno%2C%20Roberts%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Howell, J., Kapritsos, M., Lorch, J.&nbsp;R., Parno, B., Roberts, M.&nbsp;L., … Zill, B.&nbsp;(2015). IronFleet: Proving Practical Distributed Systems Correct. In _Proceedings of the 25th Symposium on Operating Systems Principles_ (pp. 1–17). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2815400.2815428](https://dx.doi.org/10.1145/2815400.2815428){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironclad_nodate"; cite-year:"n.d."; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill"; cite-label:"Hawblitzel et al., n.d."; caption:"Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation&nl;Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill, n.d."; data-line:"FormalReview.bib:2251"; searchterm:"Ironclad%20Apps%3A%20EndtoEnd%20Security%20via%20Automated%20FullSystem%20Veri%EF%AC%81cation%20Hawblitzel%2C%20Howell%2C%20Lorch%2C%20Narayan%2C%20Parno%2C%20Zhang%2C%20and%20Zill%2C%20n.d."; spellcheck:"false"}
Hawblitzel, C., Howell, J., Lorch, J.&nbsp;R., Narayan, A., Parno, B., Zhang, D., & Zill, B.&nbsp;(n.d.). Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation, 18.
~ end bibitem

~ begin bibitem {id:"hawblitzel_automated_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Petrank, Qadeer, and Tasiran"; cite-label:"Hawblitzel, Petrank, Qadeer, \& Tasiran, 2015"; caption:"Automated and Modular Refinement Reasoning for Concurrent Programs&nl;Hawblitzel, Petrank, Qadeer, and Tasiran, 2015"; data-line:"FormalReview.bib:2278"; searchterm:"Automated%20and%20Modular%20Refinement%20Reasoning%20for%20Concurrent%20Programs%20Hawblitzel%2C%20Petrank%2C%20Qadeer%2C%20and%20Tasiran%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Petrank, E., Qadeer, S., & Tasiran, S.&nbsp;(2015). Automated and Modular Refinement Reasoning for Concurrent Programs. In _Computer Aided Verification_ (pp. 449–465). Springer, Cham. https://doi.org/[10.1007/978-3-319-21668-3_26](https://dx.doi.org/10.1007/978-3-319-21668-3_26){.bib-doi}
~ end bibitem

~ begin bibitem {id:"herlihy_linearizability:_1990"; cite-year:"1990"; cite-authors:"Herlihy and Wing"; cite-authors-long:"Herlihy and Wing"; cite-label:"Herlihy \& Wing, 1990"; caption:"Linearizability: A Correctness Condition for Concurrent Objects&nl;Herlihy and Wing, 1990"; data-line:"FormalReview.bib:532"; searchterm:"Linearizability%3A%20A%20Correctness%20Condition%20for%20Concurrent%20Objects%20Herlihy%20and%20Wing%2C%201990"; spellcheck:"false"}
Herlihy, M.&nbsp;P., & Wing, J.&nbsp;M.&nbsp;(1990). Linearizability: A Correctness Condition for Concurrent Objects. _ACM Trans. Program. Lang. Syst._, _12_(3), 463–492. https://doi.org/[10.1145/78969.78972](https://dx.doi.org/10.1145/78969.78972){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hobor_theory_2010"; cite-year:"2010"; cite-authors:"Hobor et al."; cite-authors-long:"Hobor, Dockins, and Appel"; cite-label:"Hobor, Dockins, \& Appel, 2010"; caption:"A Theory of Indirection via Approximation&nl;Hobor, Dockins, and Appel, 2010"; data-line:"FormalReview.bib:243"; searchterm:"A%20Theory%20of%20Indirection%20via%20Approximation%20Hobor%2C%20Dockins%2C%20and%20Appel%2C%202010"; spellcheck:"false"}
Hobor, A., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2010). A Theory of Indirection via Approximation. In _Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 171–184). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1706299.1706322](https://dx.doi.org/10.1145/1706299.1706322){.bib-doi}
~ end bibitem

~ begin bibitem {id:"holzl_type_2013"; cite-year:"2013"; cite-authors:"Hölzl et al."; cite-authors-long:"Hölzl, Immler, and Huffman"; cite-label:"Hölzl, Immler, \& Huffman, 2013"; caption:"Type Classes and Filters for Mathematical Analysis in Isabelle/HOL&nl;Hölzl, Immler, and Huffman, 2013"; data-line:"FormalReview.bib:2982"; searchterm:"Type%20Classes%20and%20Filters%20for%20Mathematical%20Analysis%20in%20Isabelle%2FHOL%20H%C3%B6lzl%2C%20Immler%2C%20and%20Huffman%2C%202013"; spellcheck:"false"}
Hölzl, J., Immler, F., & Huffman, B.&nbsp;(2013). Type Classes and Filters for Mathematical Analysis in Isabelle/HOL.&nbsp;In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (pp. 279–294). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"hritcu_micro-policies:_2015"; cite-year:"2015"; cite-authors:"Cǎtǎlin Hriţcu"; cite-authors-long:"Cǎtǎlin Hriţcu"; cite-label:"Cǎtǎlin Hriţcu, 2015"; caption:"Micro-Policies: Formally Verified, Tag-Based Security Monitors&nl;Cǎtǎlin Hriţcu, 2015"; data-line:"FormalReview.bib:225"; searchterm:"MicroPolicies%3A%20Formally%20Verified%2C%20TagBased%20Security%20Monitors%20C%C7%8Et%C7%8Elin%20Hri%C5%A3cu%2C%202015"; spellcheck:"false"}
Hriţcu, C.&nbsp;(2015). Micro-Policies: Formally Verified, Tag-Based Security Monitors. In _Proceedings of the 10th ACM Workshop on Programming Languages and Analysis for Security - PLAS’15_ (pp. 1–1). Prague, Czech Republic: ACM Press. https://doi.org/[10.1145/2786558.2786560](https://dx.doi.org/10.1145/2786558.2786560){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hritcu_quest_nodate"; cite-year:"n.d."; cite-authors:"Cătălin Hriţcu"; cite-authors-long:"Cătălin Hriţcu"; cite-label:"Cătălin Hriţcu, n.d."; caption:"The Quest for Formally Secure Compartmentalizing Compilation&nl;Cătălin Hriţcu, n.d."; data-line:"FormalReview.bib:1989"; searchterm:"The%20Quest%20for%20Formally%20Secure%20Compartmentalizing%20Compilation%20C%C4%83t%C4%83lin%20Hri%C5%A3cu%2C%20n.d."; spellcheck:"false"}
Hriţcu, C.&nbsp;(n.d.). The Quest for Formally Secure Compartmentalizing Compilation, 96.
~ end bibitem

~ begin bibitem {id:"hunt_warren_a._industrial_2017"; cite-year:"2017"; cite-authors:"Hunt Warren A.&nbsp;et al."; cite-authors-long:"Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna"; cite-label:"Hunt Warren A., Kaufmann Matt, Moore J Strother, \& Slobodova Anna, 2017"; caption:"Industrial hardware and software verification with ACL2&nl;Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna, 2017"; data-line:"FormalReview.bib:1660"; searchterm:"Industrial%20hardware%20and%20software%20verification%20with%20ACL2%20Hunt%20Warren%20A.%2C%20Kaufmann%20Matt%2C%20Moore%20J%20Strother%2C%20and%20Slobodova%20Anna%2C%202017"; spellcheck:"false"}
Hunt Warren A., Kaufmann Matt, Moore J Strother, & Slobodova Anna. (2017). Industrial hardware and software verification with ACL2. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150399. https://doi.org/[10.1098/rsta.2015.0399](https://dx.doi.org/10.1098/rsta.2015.0399){.bib-doi}
~ end bibitem

~ begin bibitem {id:"immler_verified_2018"; cite-year:"2018"; cite-authors:"Immler"; cite-authors-long:"Immler"; cite-label:"Immler, 2018"; caption:"A Verified ODE Solver and the Lorenz Attractor&nl;Immler, 2018"; data-line:"FormalReview.bib:2935"; searchterm:"A%20Verified%20ODE%20Solver%20and%20the%20Lorenz%20Attractor%20Immler%2C%202018"; spellcheck:"false"}
Immler, F.&nbsp;(2018). A Verified ODE Solver and the Lorenz Attractor. _J Autom Reasoning_, _61_(1), 73–111. https://doi.org/[10.1007/s10817-017-9448-y](https://dx.doi.org/10.1007/s10817-017-9448-y){.bib-doi}
~ end bibitem

~ begin bibitem {id:"inria_inria_nodate"; cite-year:"2019"; cite-authors:"Inria"; cite-authors-long:"Inria"; cite-label:"Inria, n.d."; caption:"Inria - Inventors for the digital world.Inria&nl;Inria, 2019"; data-line:"FormalReview.bib:835"; searchterm:"Inria%20%20Inventors%20for%20the%20digital%20world.Inria%20Inria%2C%202019"; spellcheck:"false"}
Inria. (n.d.). Inria - Inventors for the digital world.Inria. Retrieved January 31, 2019, from <https://www.inria.fr/en>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ishtiaq_bi_2011"; cite-year:"2011"; cite-authors:"Ishtiaq and O’Hearn"; cite-authors-long:"Ishtiaq and O’Hearn"; cite-label:"Ishtiaq \& O’Hearn, 2011"; caption:"BI As an Assertion Language for Mutable Data Structures&nl;Ishtiaq and O’Hearn, 2011"; data-line:"FormalReview.bib:2474"; searchterm:"BI%20As%20an%20Assertion%20Language%20for%20Mutable%20Data%20Structures%20Ishtiaq%20and%20O%E2%80%99Hearn%2C%202011"; spellcheck:"false"}
Ishtiaq, S., & O’Hearn, P.&nbsp;W.&nbsp;(2011). BI As an Assertion Language for Mutable Data Structures. _SIGPLAN Not._, _46_(4), 84–96. https://doi.org/[10.1145/1988042.1988050](https://dx.doi.org/10.1145/1988042.1988050){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast/verifast:_2019"; cite-year:"2019"; cite-authors:"Jacobs"; cite-authors-long:"Jacobs"; cite-label:"Jacobs, 2019"; caption:"verifast/verifast: Research prototype tool for modular formal verification of C and Java programs&nl;Jacobs, 2019"; data-line:"FormalReview.bib:2773"; searchterm:"verifast%2Fverifast%3A%20Research%20prototype%20tool%20for%20modular%20formal%20verification%20of%20C%20and%20Java%20programs%20Jacobs%2C%202019"; spellcheck:"false"}
Jacobs, B.&nbsp;(2019). _verifast/verifast: Research prototype tool for modular formal verification of C and Java programs_. verifast. Retrieved from <https://github.com/verifast/verifast>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2008"; cite-year:"2008"; cite-authors:"Jacobs and Piessens"; cite-authors-long:"Jacobs and Piessens"; cite-label:"Jacobs \& Piessens, 2008"; caption:"The VeriFast program verifier&nl;Jacobs and Piessens, 2008"; data-line:"FormalReview.bib:2803"; searchterm:"The%20VeriFast%20program%20verifier%20Jacobs%20and%20Piessens%2C%202008"; spellcheck:"false"}
Jacobs, B., & Piessens, F.&nbsp;(2008). _The VeriFast program verifier_.
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2017"; cite-year:"2017"; cite-authors:"Jacobs et al."; cite-authors-long:"Jacobs, Smans, and Piessens"; cite-label:"Jacobs, Smans, \& Piessens, 2017"; caption:"The VeriFast Program Veriﬁer: A Tutorial&nl;Jacobs, Smans, and Piessens, 2017"; data-line:"FormalReview.bib:2811"; searchterm:"The%20VeriFast%20Program%20Veri%EF%AC%81er%3A%20A%20Tutorial%20Jacobs%2C%20Smans%2C%20and%20Piessens%2C%202017"; spellcheck:"false"}
Jacobs, B., Smans, J., & Piessens, F.&nbsp;(2017). The VeriFast Program Veriﬁer: A Tutorial, 102.
~ end bibitem

~ begin bibitem {id:"jacobs_featherweight_2015"; cite-year:"2015"; cite-authors:"Jacobs et al."; cite-authors-long:"Jacobs, Vogels, and Piessens"; cite-label:"Jacobs, Vogels, \& Piessens, 2015"; caption:"Featherweight VeriFast&nl;Jacobs, Vogels, and Piessens, 2015"; data-line:"FormalReview.bib:2785"; searchterm:"Featherweight%20VeriFast%20Jacobs%2C%20Vogels%2C%20and%20Piessens%2C%202015"; spellcheck:"false"}
Jacobs, B., Vogels, F., & Piessens, F.&nbsp;(2015). Featherweight VeriFast. _Logical Methods in Computer Science_, _11_(3). https://doi.org/[10.2168/LMCS-11(3:19)2015](https://dx.doi.org/10.2168/LMCS-11%283:19%292015){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jeannet_apron_nodate"; cite-year:"2019"; cite-authors:"Jeannet and Miné"; cite-authors-long:"Jeannet and Miné"; cite-label:"Jeannet \& Miné, n.d."; caption:"APRON numerical abstract domain library&nl;Jeannet and Miné, 2019"; data-line:"FormalReview.bib:1841"; searchterm:"APRON%20numerical%20abstract%20domain%20library%20Jeannet%20and%20Min%C3%A9%2C%202019"; spellcheck:"false"}
Jeannet, B., & Miné, A.&nbsp;(n.d.). APRON numerical abstract domain library. Retrieved February 1, 2019, from <http://apron.cri.ensmp.fr/library/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jung_iris_nodate"; cite-year:"2019"; cite-authors:"Jung"; cite-authors-long:"Jung"; cite-label:"Jung, n.d."; caption:"Iris Project&nl;Jung, 2019"; data-line:"FormalReview.bib:2417"; searchterm:"Iris%20Project%20Jung%2C%202019"; spellcheck:"false"}
Jung, R.&nbsp;(n.d.). Iris Project. Retrieved February 1, 2019, from <https://iris-project.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jung_rustbelt:_2017"; cite-year:"2017"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Jourdan, Krebbers, and Dreyer"; cite-label:"Jung, Jourdan, Krebbers, \& Dreyer, 2017"; caption:"RustBelt: securing the foundations of the rust programming language&nl;Jung, Jourdan, Krebbers, and Dreyer, 2017"; data-line:"FormalReview.bib:34"; searchterm:"RustBelt%3A%20securing%20the%20foundations%20of%20the%20rust%20programming%20language%20Jung%2C%20Jourdan%2C%20Krebbers%2C%20and%20Dreyer%2C%202017"; spellcheck:"false"}
Jung, R., Jourdan, J.-H., Krebbers, R., & Dreyer, D.&nbsp;(2017). RustBelt: securing the foundations of the rust programming language. _Proceedings of the ACM on Programming Languages_, _2_, 1–34. https://doi.org/[10.1145/3158154](https://dx.doi.org/10.1145/3158154){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_2018"; cite-year:"2018"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer"; cite-label:"Jung et al., 2018"; caption:"Iris from the ground up: A modular foundation for higher-order concurrent separation logic&nl;Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer, 2018"; data-line:"FormalReview.bib:2433"; searchterm:"Iris%20from%20the%20ground%20up%3A%20A%20modular%20foundation%20for%20higherorder%20concurrent%20separation%20logic%20Jung%2C%20Krebbers%2C%20Jourdan%2C%20Bizjak%2C%20Birkedal%2C%20and%20Dreyer%2C%202018"; spellcheck:"false"}
Jung, R., Krebbers, R., Jourdan, J.-H., Bizjak, A., Birkedal, L., & Dreyer, D.&nbsp;(2018). Iris from the ground up: A modular foundation for higher-order concurrent separation logic. _Journal of Functional Programming_, _28_. https://doi.org/[10.1017/S0956796818000151](https://dx.doi.org/10.1017/S0956796818000151){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kaiser_destruct_nodate"; cite-year:"2019"; cite-authors:"Kaiser and Ziliani"; cite-authors-long:"Kaiser and Ziliani"; cite-label:"Kaiser \& Ziliani, n.d."; caption:"A “destruct” Tactic for Mtac2 - POPL 2018&nl;Kaiser and Ziliani, 2019"; data-line:"FormalReview.bib:2562"; searchterm:"A%20%E2%80%9Cdestruct%E2%80%9D%20Tactic%20for%20Mtac2%20%20POPL%202018%20Kaiser%20and%20Ziliani%2C%202019"; spellcheck:"false"}
Kaiser, J.-O., & Ziliani, B.&nbsp;(n.d.). A &ldquo;destruct&rdquo; Tactic for Mtac2 - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-a-destruct-tactic-for-mtac2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kang_crellvm:_2018"; cite-year:"2018"; cite-authors:"Kang et al."; cite-authors-long:"Kang, Kim, Song, Lee, Park, Shin, et al."; cite-label:"Kang et al., 2018"; caption:"Crellvm: Verified Credible Compilation for LLVM&nl;Kang, Kim, Song, Lee, Park, Shin, et al., 2018"; data-line:"FormalReview.bib:2662"; searchterm:"Crellvm%3A%20Verified%20Credible%20Compilation%20for%20LLVM%20Kang%2C%20Kim%2C%20Song%2C%20Lee%2C%20Park%2C%20Shin%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Kang, J., Kim, Y., Song, Y., Lee, J., Park, S., Shin, M.&nbsp;D., … Yi, K.&nbsp;(2018). Crellvm: Verified Credible Compilation for LLVM.&nbsp;In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 631–645). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192377](https://dx.doi.org/10.1145/3192366.3192377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kastner_program_2015"; cite-year:"2015"; cite-authors:"Daniel Kästner and Pohland"; cite-authors-long:"Daniel Kästner and Pohland"; cite-label:"Daniel Kästner \& Pohland, 2015"; caption:"Program Analysis on Evolving Software&nl;Daniel Kästner and Pohland, 2015"; data-line:"FormalReview.bib:384"; searchterm:"Program%20Analysis%20on%20Evolving%20Software%20Daniel%20K%C3%A4stner%20and%20Pohland%2C%202015"; spellcheck:"false"}
Kästner, D., & Pohland, J.&nbsp;(2015). Program Analysis on Evolving Software. In M.&nbsp;Roy (Ed.), _CARS 2015 - Critical Automotive applications: Robustness &amp; Safety_. Paris, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01192985>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kastner_astree:_nodate"; cite-year:"n.d."; cite-authors:"D Kästner et al."; cite-authors-long:"D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al."; cite-label:"D Kästner et al., n.d."; caption:"Astree: Proving the Absence of Runtime Errors&nl;D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al., n.d."; data-line:"FormalReview.bib:414"; searchterm:"Astree%3A%20Proving%20the%20Absence%20of%20Runtime%20Errors%20D%20K%C3%A4stner%2C%20Wilhelm%2C%20Nenova%2C%20Min%C3%A9%2C%20Rival%2C%20Mauborgne%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Kästner, D., Wilhelm, S., Nenova, S., Miné, A., Rival, X., Mauborgne, L., … Cousot, R.&nbsp;(n.d.). Astree: Proving the Absence of Runtime Errors, 9. Retrieved from <https://www.di.ens.fr/~rival/papers/erts10.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"klein_gerwin_provably_2017"; cite-year:"2017"; cite-authors:"Klein Gerwin et al."; cite-authors-long:"Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam"; cite-label:"Klein Gerwin et al., 2017"; caption:"Provably trustworthy systems&nl;Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam, 2017"; data-line:"FormalReview.bib:1582"; searchterm:"Provably%20trustworthy%20systems%20Klein%20Gerwin%2C%20Andronick%20June%2C%20Keller%20Gabriele%2C%20Matichuk%20Daniel%2C%20Murray%20Toby%2C%20and%20O%E2%80%99Connor%20Liam%2C%202017"; spellcheck:"false"}
Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, & O’Connor Liam. (2017). Provably trustworthy systems. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150404. https://doi.org/[10.1098/rsta.2015.0404](https://dx.doi.org/10.1098/rsta.2015.0404){.bib-doi}
~ end bibitem

~ begin bibitem {id:"koenig_programming_2016"; cite-year:"2016"; cite-authors:"Koenig and Leino"; cite-authors-long:"Koenig and Leino"; cite-label:"Koenig \& Leino, 2016"; caption:"Programming Language Features for Refinement&nl;Koenig and Leino, 2016"; data-line:"FormalReview.bib:1253"; searchterm:"Programming%20Language%20Features%20for%20Refinement%20Koenig%20and%20Leino%2C%202016"; spellcheck:"false"}
Koenig, J., & Leino, R.&nbsp;(2016). Programming Language Features for Refinement. Retrieved from <https://www.microsoft.com/en-us/research/publication/programming-language-features-refinement/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"krebbers_type_2011"; cite-year:"2011"; cite-authors:"Krebbers and Spitters"; cite-authors-long:"Krebbers and Spitters"; cite-label:"Krebbers \& Spitters, 2011"; caption:"Type classes for efficient exact real arithmetic in Coq&nl;Krebbers and Spitters, 2011"; data-line:"FormalReview.bib:2998"; searchterm:"Type%20classes%20for%20efficient%20exact%20real%20arithmetic%20in%20Coq%20Krebbers%20and%20Spitters%2C%202011"; spellcheck:"false"}
Krebbers, R., & Spitters, B.&nbsp;(2011). Type classes for efficient exact real arithmetic in Coq. _arXiv:1106.3448 \[cs, Math\]_. https://doi.org/[10.2168/LMCS-9(1:01)2013](https://dx.doi.org/10.2168/LMCS-9%281:01%292013){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krishnan_modelling_2018"; cite-year:"2018"; cite-authors:"Krishnan and Lalithambika"; cite-authors-long:"Krishnan and Lalithambika"; cite-label:"Krishnan \& Lalithambika, 2018"; caption:"Modelling and validating 1553B protocol using the SPIN model checker&nl;Krishnan and Lalithambika, 2018"; data-line:"FormalReview.bib:18"; searchterm:"Modelling%20and%20validating%201553B%20protocol%20using%20the%20SPIN%20model%20checker%20Krishnan%20and%20Lalithambika%2C%202018"; spellcheck:"false"}
Krishnan, R., & Lalithambika, V.&nbsp;R.&nbsp;(2018). Modelling and validating 1553B protocol using the SPIN model checker. In _2018 10th International Conference on Communication Systems &amp; Networks (COMSNETS)_ (pp. 472–475). Bengaluru: IEEE.&nbsp;https://doi.org/[10.1109/COMSNETS.2018.8328247](https://dx.doi.org/10.1109/COMSNETS.2018.8328247){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kubota_foundations_2016"; cite-year:"2016"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, 2016"; caption:"Foundations of Mathematics&nl;Kubota, 2016"; data-line:"FormalReview.bib:2597"; searchterm:"Foundations%20of%20Mathematics%20Kubota%2C%202016"; spellcheck:"false"}
Kubota, K.&nbsp;(2016). Foundations of Mathematics. https://doi.org/[10.4444/100.111](https://dx.doi.org/10.4444/100.111){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kubota_foundations_nodate"; cite-year:"2019"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, n.d."; caption:"Foundations of Mathematics – Owl of Minerva Press&nl;Kubota, 2019"; data-line:"FormalReview.bib:2588"; searchterm:"Foundations%20of%20Mathematics%20%E2%80%93%20Owl%20of%20Minerva%20Press%20Kubota%2C%202019"; spellcheck:"false"}
Kubota, K.&nbsp;(n.d.). Foundations of Mathematics – Owl of Minerva Press. Retrieved February 1, 2019, from <http://owlofminerva.net/foundations-of-mathematics/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lahiri_symdiff:_2012"; cite-year:"2012"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Hawblitzel, Kawaguchi, and Rebêlo"; cite-label:"Lahiri, Hawblitzel, Kawaguchi, \& Rebêlo, 2012"; caption:"SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs&nl;Lahiri, Hawblitzel, Kawaguchi, and Rebêlo, 2012"; data-line:"FormalReview.bib:2326"; searchterm:"SYMDIFF%3A%20A%20LanguageAgnostic%20Semantic%20Diff%20Tool%20for%20Imperative%20Programs%20Lahiri%2C%20Hawblitzel%2C%20Kawaguchi%2C%20and%20Reb%C3%AAlo%2C%202012"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Hawblitzel, C., Kawaguchi, M., & Rebêlo, H.&nbsp;(2012). SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs. In P.&nbsp;Madhusudan & S.&nbsp;A.&nbsp;Seshia (Eds.), _Computer Aided Verification_ (pp. 712–717). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"lahiri_automatic_2015"; cite-year:"2015"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Sinha, and Hawblitzel"; cite-label:"Lahiri, Sinha, \& Hawblitzel, 2015"; caption:"Automatic Rootcausing for Program Equivalence Failures in Binaries&nl;Lahiri, Sinha, and Hawblitzel, 2015"; data-line:"FormalReview.bib:2294"; searchterm:"Automatic%20Rootcausing%20for%20Program%20Equivalence%20Failures%20in%20Binaries%20Lahiri%2C%20Sinha%2C%20and%20Hawblitzel%2C%202015"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Sinha, R., & Hawblitzel, C.&nbsp;(2015). Automatic Rootcausing for Program Equivalence Failures in Binaries. In D.&nbsp;Kroening & C.&nbsp;S.&nbsp;Păsăreanu (Eds.), _Computer Aided Verification_ (pp. 362–379). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"lamport_specifying_nodate"; cite-year:"2019"; cite-authors:"Lamport"; cite-authors-long:"Lamport"; cite-label:"Lamport, n.d."; caption:"Specifying Systems&nl;Lamport, 2019"; data-line:"FormalReview.bib:2608"; searchterm:"Specifying%20Systems%20Lamport%2C%202019"; spellcheck:"false"}
Lamport, L.&nbsp;(n.d.). Specifying Systems. Retrieved February 1, 2019, from <https://lamport.azurewebsites.net/tla/book.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lampson_abcds_2001"; cite-year:"2001"; cite-authors:"Lampson"; cite-authors-long:"Lampson"; cite-label:"Lampson, 2001"; caption:"The ABCD's of Paxos&nl;Lampson, 2001"; data-line:"FormalReview.bib:2836"; searchterm:"The%20ABCD's%20of%20Paxos%20Lampson%2C%202001"; spellcheck:"false"}
Lampson, B.&nbsp;(2001). The ABCD’s of Paxos. In _Proceedings of the Twentieth Annual ACM Symposium on Principles of Distributed Computing_ (p. 13 – ). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/383962.383969](https://dx.doi.org/10.1145/383962.383969){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lancaster_unified_1969"; cite-year:"1969"; cite-authors:"Lancaster and Blanchard"; cite-authors-long:"Lancaster and Blanchard"; cite-label:"Lancaster \& Blanchard, 1969"; caption:"A unified form of lambert's theorem&nl;Lancaster and Blanchard, 1969"; data-line:"FormalReview.bib:1771"; searchterm:"A%20unified%20form%20of%20lambert's%20theorem%20Lancaster%20and%20Blanchard%2C%201969"; spellcheck:"false"}
Lancaster, E.&nbsp;R., & Blanchard, R.&nbsp;C.&nbsp;(1969). A unified form of lambert’s theorem. _NASA Technical Note_, _{TN} D-5368_, 18.
~ end bibitem

~ begin bibitem {id:"leino_assertional_2015"; cite-year:"2015"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-label:"K. Rustan M. Leino \& Lucio, 2015"; caption:"An Assertional Proof of the Stability and Correctness of Natural Mergesort&nl;K. Rustan M. Leino and Lucio, 2015"; data-line:"FormalReview.bib:1145"; searchterm:"An%20Assertional%20Proof%20of%20the%20Stability%20and%20Correctness%20of%20Natural%20Mergesort%20K.%20Rustan%20M.%20Leino%20and%20Lucio%2C%202015"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Lucio, P.&nbsp;(2015). An Assertional Proof of the Stability and Correctness of Natural Mergesort. _ACM Trans. Comput. Logic_, _17_(1), 6:1–6:22. https://doi.org/[10.1145/2814571](https://dx.doi.org/10.1145/2814571){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chaudhuri_trigger_2016"; cite-year:"2016"; cite-authors:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-authors-long:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-label:"K. R. M. Leino \& Pit-Claudel, 2016"; caption:"Trigger Selection Strategies to Stabilize Program Verifiers&nl;K. R. M. Leino and Pit-Claudel, 2016"; data-line:"FormalReview.bib:779"; searchterm:"Trigger%20Selection%20Strategies%20to%20Stabilize%20Program%20Verifiers%20K.%20R.%20M.%20Leino%20and%20PitClaudel%2C%202016"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Pit-Claudel, C.&nbsp;(2016). Trigger Selection Strategies to Stabilize Program Verifiers. In S.&nbsp;Chaudhuri & A.&nbsp;Farzan (Eds.), _Computer Aided Verification_ (Vol. 9779, pp. 361–381). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-41528-4_20](https://dx.doi.org/10.1007/978-3-319-41528-4_20){.bib-doi}
~ end bibitem

~ begin bibitem {id:"leino_compiling_2016"; cite-year:"2016a"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016a"; caption:"Compiling Hilbert's epsilon Operator&nl;R. Leino, 2016a"; data-line:"FormalReview.bib:1264"; searchterm:"Compiling%20Hilbert's%20epsilon%20Operator%20R.%20Leino%2C%202016a"; spellcheck:"false"}
Leino, R.&nbsp;(2016a). Compiling Hilbert’s epsilon Operator. _LPAR-20. 20th International Conferences on Logic for Programming, Artificial Intelligence and Reasoning_, _35_. Retrieved from <https://www.microsoft.com/en-us/research/publication/compiling-hilberts-%cf%b5-operator/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_well-founded_2016"; cite-year:"2016b"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016b"; caption:"Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial&nl;R. Leino, 2016b"; data-line:"FormalReview.bib:1300"; searchterm:"WellFounded%20Functions%20and%20Extreme%20Predicates%20in%20Dafny%3A%20A%20Tutorial%20R.%20Leino%2C%202016b"; spellcheck:"false"}
Leino, R.&nbsp;(2016b). Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial, _40_. Retrieved from <https://www.microsoft.com/en-us/research/publication/well-founded-functions-extreme-predicates-dafny-tutorial/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_co-induction_2013"; cite-year:"2013"; cite-authors:"R.&nbsp;Leino and Moskal"; cite-authors-long:"R.&nbsp;Leino and Moskal"; cite-label:"R. Leino \& Moskal, 2013"; caption:"Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier&nl;R. Leino and Moskal, 2013"; data-line:"FormalReview.bib:1178"; searchterm:"CoInduction%20Simply%3A%20Automatic%20CoInductive%20Proofs%20in%20a%20Program%20Verifier%20R.%20Leino%20and%20Moskal%2C%202013"; spellcheck:"false"}
Leino, R., & Moskal, M.&nbsp;(2013). Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier. Retrieved from <https://www.microsoft.com/en-us/research/publication/co-induction-simply-automatic-co-inductive-proofs-in-a-program-verifier/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verification_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino et al."; cite-authors-long:"R.&nbsp;Leino, Müller, and Smans"; cite-label:"R. Leino, Müller, \& Smans, 2016"; caption:"Verification of Concurrent Programs with Chalice&nl;R. Leino, Müller, and Smans, 2016"; data-line:"FormalReview.bib:1219"; searchterm:"Verification%20of%20Concurrent%20Programs%20with%20Chalice%20R.%20Leino%2C%20M%C3%BCller%2C%20and%20Smans%2C%202016"; spellcheck:"false"}
Leino, R., Müller, P., & Smans, J.&nbsp;(2016). Verification of Concurrent Programs with Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/verification-concurrent-programs-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verified_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Polikarpova"; cite-authors-long:"R.&nbsp;Leino and Polikarpova"; cite-label:"R. Leino \& Polikarpova, 2016"; caption:"Verified Calculations&nl;R. Leino and Polikarpova, 2016"; data-line:"FormalReview.bib:1289"; searchterm:"Verified%20Calculations%20R.%20Leino%20and%20Polikarpova%2C%202016"; spellcheck:"false"}
Leino, R., & Polikarpova, N.&nbsp;(2016). Verified Calculations. Retrieved from <https://www.microsoft.com/en-us/research/publication/verified-calculations/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_fine-grained_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Wüstholz"; cite-authors-long:"R.&nbsp;Leino and Wüstholz"; cite-label:"R. Leino \& Wüstholz, 2016"; caption:"Fine-grained Caching of Verification Results&nl;R. Leino and Wüstholz, 2016"; data-line:"FormalReview.bib:1241"; searchterm:"Finegrained%20Caching%20of%20Verification%20Results%20R.%20Leino%20and%20W%C3%BCstholz%2C%202016"; spellcheck:"false"}
Leino, R., & Wüstholz, V.&nbsp;(2016). Fine-grained Caching of Verification Results, _9206_. Retrieved from <https://www.microsoft.com/en-us/research/publication/fine-grained-caching-verification-results/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_stepwise_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Yessenov"; cite-authors-long:"R.&nbsp;Leino and Yessenov"; cite-label:"R. Leino \& Yessenov, 2016"; caption:"Stepwise Refinement of Heap-Manipulating Code in Chalice&nl;R. Leino and Yessenov, 2016"; data-line:"FormalReview.bib:1230"; searchterm:"Stepwise%20Refinement%20of%20HeapManipulating%20Code%20in%20Chalice%20R.%20Leino%20and%20Yessenov%2C%202016"; spellcheck:"false"}
Leino, R., & Yessenov, K.&nbsp;(2016). Stepwise Refinement of Heap-Manipulating Code in Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/stepwise-refinement-heap-manipulating-code-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leroy_ocaml_nodate"; cite-year:"2019"; cite-authors:"Leroy"; cite-authors-long:"Leroy"; cite-label:"Leroy, n.d."; caption:"OCaml Home Page&nl;Leroy, 2019"; data-line:"FormalReview.bib:2820"; searchterm:"OCaml%20Home%20Page%20Leroy%2C%202019"; spellcheck:"false"}
Leroy, X.&nbsp;(n.d.). OCaml Home Page. Retrieved February 1, 2019, from <https://ocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"letouzey_certified_nodate"; cite-year:"2019"; cite-authors:"Letouzey"; cite-authors-long:"Letouzey"; cite-label:"Letouzey, n.d."; caption:"Certified functional programming : Program extraction within Coq proof assistant.ResearchGate&nl;Letouzey, 2019"; data-line:"FormalReview.bib:2650"; searchterm:"Certified%20functional%20programming%20%3A%20Program%20extraction%20within%20Coq%20proof%20assistant.ResearchGate%20Letouzey%2C%202019"; spellcheck:"false"}
Letouzey, P.&nbsp;(n.d.). Certified functional programming : Program extraction within Coq proof assistant.ResearchGate. Retrieved February 1, 2019, from <https://www.researchgate.net/publication/280790704_Certified_functional_programming_Program_extraction_within_Coq_proof_assistant>{.bib-url}
~ end bibitem

~ begin bibitem {id:"luo_extended_nodate"; cite-year:"2019"; cite-authors:"Luo"; cite-authors-long:"Luo"; cite-label:"Luo, n.d."; caption:"An Extended Calculus of Constructions&nl;Luo, 2019"; data-line:"FormalReview.bib:2681"; searchterm:"An%20Extended%20Calculus%20of%20Constructions%20Luo%2C%202019"; spellcheck:"false"}
Luo, Z.&nbsp;(n.d.). An Extended Calculus of Constructions. Retrieved February 1, 2019, from <http://www.lfcs.inf.ed.ac.uk/reports/90/ECS-LFCS-90-118/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"malecha_reflection_2018"; cite-year:"2018"; cite-authors:"Malecha"; cite-authors-long:"Malecha"; cite-label:"Malecha, 2018"; caption:"Reflection library for Coq. Contribute to gmalecha/template-coq development by creating an account on GitHub&nl;Malecha, 2018"; data-line:"FormalReview.bib:1700"; searchterm:"Reflection%20library%20for%20Coq.%20Contribute%20to%20gmalecha%2Ftemplatecoq%20development%20by%20creating%20an%20account%20on%20GitHub%20Malecha%2C%202018"; spellcheck:"false"}
Malecha, G.&nbsp;(2018). _Reflection library for Coq. Contribute to gmalecha/template-coq development by creating an account on GitHub_. Retrieved from <https://github.com/gmalecha/template-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"martin-dorel_proving_2016"; cite-year:"2016"; cite-authors:"Martin-Dorel and Melquiond"; cite-authors-long:"Martin-Dorel and Melquiond"; cite-label:"Martin-Dorel \& Melquiond, 2016"; caption:"Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq&nl;Martin-Dorel and Melquiond, 2016"; data-line:"FormalReview.bib:2892"; searchterm:"Proving%20Tight%20Bounds%20on%20Univariate%20Expressions%20with%20Elementary%20Functions%20in%20Coq%20MartinDorel%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Martin-Dorel, É., & Melquiond, G.&nbsp;(2016). Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq. _J Autom Reasoning_, _57_(3), 187–217. https://doi.org/[10.1007/s10817-015-9350-4](https://dx.doi.org/10.1007/s10817-015-9350-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"martin_mastering_2013"; cite-year:"2013"; cite-authors:"Martin et al."; cite-authors-long:"Martin, Hoffman, and Cedilnik"; cite-label:"Martin, Hoffman, \& Cedilnik, 2013"; caption:"Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts&nl;Martin, Hoffman, and Cedilnik, 2013"; data-line:"FormalReview.bib:757"; searchterm:"Mastering%20CMake%3A%20a%20crossplatform%20build%20system%20%3B%20covers%20installing%20and%20running%20CMake%20%3B%20details%20converting%20existing%20build%20processes%20to%20CMake%20%3B%20create%20powerful%20crossplatform%20build%20scripts%20Martin%2C%20Hoffman%2C%20and%20Cedilnik%2C%202013"; spellcheck:"false"}
Martin, K., Hoffman, B., & Cedilnik, A.&nbsp;(2013). _Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts_ (6. ed). Clifton Park, NY: Kitware.
~ end bibitem

~ begin bibitem {id:"melquiond_why3_nodate"; cite-year:"2019"; cite-authors:"Melquiond"; cite-authors-long:"Melquiond"; cite-label:"Melquiond, n.d."; caption:"Why3&nl;Melquiond, 2019"; data-line:"FormalReview.bib:1917"; searchterm:"Why3%20Melquiond%2C%202019"; spellcheck:"false"}
Melquiond, G.&nbsp;(n.d.). Why3. Retrieved February 1, 2019, from <http://why3.lri.fr/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mine_taking_2016"; cite-year:"2016"; cite-authors:"Miné et al."; cite-authors-long:"Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al."; cite-label:"Miné et al., 2016"; caption:"Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée&nl;Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al., 2016"; data-line:"FormalReview.bib:425"; searchterm:"Taking%20Static%20Analysis%20to%20the%20Next%20Level%3A%20Proving%20the%20Absence%20of%20RunTime%20Errors%20and%20Data%20Races%20with%20Astr%C3%A9e%20Min%C3%A9%2C%20Mauborgne%2C%20Rival%2C%20Feret%2C%20Cousot%2C%20K%C3%A4stner%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Miné, A., Mauborgne, L., Rival, X., Feret, J., Cousot, P., Kästner, D., … Ferdinand, C.&nbsp;(2016). Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée. In _8th European Congress on Embedded Real Time Software and Systems (ERTS 2016)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01271552>{.bib-url}
~ end bibitem

~ begin bibitem {id:"minsky_real_nodate"; cite-year:"2019"; cite-authors:"Minsky et al."; cite-authors-long:"Minsky, Madhavapeddy, and Hickey"; cite-label:"Minsky, Madhavapeddy, \& Hickey, n.d."; caption:"Real World OCaml&nl;Minsky, Madhavapeddy, and Hickey, 2019"; data-line:"FormalReview.bib:2828"; searchterm:"Real%20World%20OCaml%20Minsky%2C%20Madhavapeddy%2C%20and%20Hickey%2C%202019"; spellcheck:"false"}
Minsky, Y., Madhavapeddy, A., & Hickey, J.&nbsp;(n.d.). Real World OCaml. Retrieved February 1, 2019, from <http://dev.realworldocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mokhov_algebraic_2017"; cite-year:"2017"; cite-authors:"Mokhov"; cite-authors-long:"Mokhov"; cite-label:"Mokhov, 2017"; caption:"Algebraic Graphs with Class (Functional Pearl)&nl;Mokhov, 2017"; data-line:"FormalReview.bib:2124"; searchterm:"Algebraic%20Graphs%20with%20Class%20Functional%20Pearl%20Mokhov%2C%202017"; spellcheck:"false"}
Mokhov, A.&nbsp;(2017). Algebraic Graphs with Class (Functional Pearl). In _Proceedings of the 10th ACM SIGPLAN International Symposium on Haskell_ (pp. 2–13). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3122955.3122956](https://dx.doi.org/10.1145/3122955.3122956){.bib-doi}
~ end bibitem

~ begin bibitem {id:"monniaux_parallel_2005"; cite-year:"2005"; cite-authors:"Monniaux"; cite-authors-long:"Monniaux"; cite-label:"Monniaux, 2005"; caption:"The parallel implementation of the Astr&bslash;'&lcurly;e&rcurly;e static analyzer&nl;Monniaux, 2005"; data-line:"FormalReview.bib:397"; searchterm:"The%20parallel%20implementation%20of%20the%20Astr%26bslash%3B'%26lcurly%3Be%26rcurly%3Be%20static%20analyzer%20Monniaux%2C%202005"; spellcheck:"false"}
Monniaux, D.&nbsp;(2005). The parallel implementation of the Astr&bslash;’&lcurly;e&rcurly;e static analyzer. _arXiv:cs/0701191_, _3780_, 86–96. https://doi.org/[10.1007/11575467_7](https://dx.doi.org/10.1007/11575467_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"murawski_invitation_2016"; cite-year:"2016"; cite-authors:"Murawski and Tzevelekos"; cite-authors-long:"Murawski and Tzevelekos"; cite-label:"Murawski \& Tzevelekos, 2016"; caption:"An Invitation to Game Semantics&nl;Murawski and Tzevelekos, 2016"; data-line:"FormalReview.bib:516"; searchterm:"An%20Invitation%20to%20Game%20Semantics%20Murawski%20and%20Tzevelekos%2C%202016"; spellcheck:"false"}
Murawski, A.&nbsp;S., & Tzevelekos, N.&nbsp;(2016). An Invitation to Game Semantics. _ACM SIGLOG News_, _3_(2), 56–67. https://doi.org/[10.1145/2948896.2948902](https://dx.doi.org/10.1145/2948896.2948902){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017"; cite-year:"2017a"; cite-authors:"Nelson et al."; cite-authors-long:"Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"Nelson et al., 2017a"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel&nl;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017a"; data-line:"FormalReview.bib:2381"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017a"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017a). Hyperkernel: Push-Button Verification of an OS Kernel. In _Proceedings of the 26th Symposium on Operating Systems Principles_ (pp. 252–269). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017-1"; cite-year:"2017b"; cite-authors:"Nelson et al."; cite-authors-long:"Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"Nelson et al., 2017b"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel - Slides&nl;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017b"; data-line:"FormalReview.bib:2399"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20%20Slides%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017b"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017b). Hyperkernel: Push-Button Verification of an OS Kernel - Slides. In _Proceedings of the 26th Symposium on Operating Systems Principles&nbsp;- SOSP ’17_ (pp. 252–269). Shanghai, China: ACM Press. https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_categorical_2015"; cite-year:"2015"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2015"; caption:"From Categorical Logic to Facebook Engineering&nl;P. O’Hearn, 2015"; data-line:"FormalReview.bib:135"; searchterm:"From%20Categorical%20Logic%20to%20Facebook%20Engineering%20P.%20O%E2%80%99Hearn%2C%202015"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2015). From Categorical Logic to Facebook Engineering. In _Proceedings of the 2015 30th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)_ (pp. 17–20). Washington, DC, USA: IEEE Computer Society. https://doi.org/[10.1109/LICS.2015.11](https://dx.doi.org/10.1109/LICS.2015.11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_separation_2019"; cite-year:"2019"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2019"; caption:"Separation logic&nl;P. O’Hearn, 2019"; data-line:"FormalReview.bib:51"; searchterm:"Separation%20logic%20P.%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2019). Separation logic. _Communications of the ACM_, _62_(2), 86–95. https://doi.org/[10.1145/3211968](https://dx.doi.org/10.1145/3211968){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_local_2001"; cite-year:"2001"; cite-authors:"O’Hearn et al."; cite-authors-long:"O’Hearn, Reynolds, and Yang"; cite-label:"O’Hearn, Reynolds, \& Yang, 2001"; caption:"Local Reasoning about Programs that Alter Data Structures&nl;O’Hearn, Reynolds, and Yang, 2001"; data-line:"FormalReview.bib:3084"; searchterm:"Local%20Reasoning%20about%20Programs%20that%20Alter%20Data%20Structures%20O%E2%80%99Hearn%2C%20Reynolds%2C%20and%20Yang%2C%202001"; spellcheck:"false"}
O’Hearn, P., Reynolds, J., & Yang, H.&nbsp;(2001). Local Reasoning about Programs that Alter Data Structures. In L.&nbsp;Fribourg (Ed.), _Computer Science Logic_ (pp. 1–19). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"ohearn_continuous_2018"; cite-year:"2018"; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, 2018"; caption:"Continuous Reasoning: Scaling the impact of formal methods&nl;P. W. O’Hearn, 2018"; data-line:"FormalReview.bib:88"; searchterm:"Continuous%20Reasoning%3A%20Scaling%20the%20impact%20of%20formal%20methods%20P.%20W.%20O%E2%80%99Hearn%2C%202018"; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(2018). Continuous Reasoning: Scaling the impact of formal methods. In _Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science&nbsp;- LICS ’18_ (pp. 13–25). Oxford, United Kingdom: ACM Press. https://doi.org/[10.1145/3209108.3209109](https://dx.doi.org/10.1145/3209108.3209109){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_peter_nodate"; cite-year:"n.d."; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, n.d."; caption:"Peter W O'hearn - acm profile&nl;P. W. O’Hearn, n.d."; data-line:"FormalReview.bib:66"; searchterm:"Peter%20W%20O'hearn%20%20acm%20profile%20P.%20W.%20O%E2%80%99Hearn%2C%20n.d."; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(n.d.). Peter W O’hearn - acm profile. Retrieved from <https://dl.acm.org/author_page.cfm?id=81332519314&coll=DL&dl=ACM&trk=0>{.bib-url}
~ end bibitem

~ begin bibitem {id:"pakin_comprehensive_nodate"; cite-year:"n.d."; cite-authors:"Pakin"; cite-authors-long:"Pakin"; cite-label:"Pakin, n.d."; caption:"The Comprehensive LaTeX Symbol List&nl;Pakin, n.d."; data-line:"FormalReview.bib:2624"; searchterm:"The%20Comprehensive%20LaTeX%20Symbol%20List%20Pakin%2C%20n.d."; spellcheck:"false"}
Pakin, S.&nbsp;(n.d.). The Comprehensive LaTeX Symbol List, 358.
~ end bibitem

~ begin bibitem {id:"parigot_logic_2000"; cite-year:"2000"; cite-authors:"Parigot and Voronkov"; cite-authors-long:"Parigot and Voronkov"; cite-label:"Parigot \& Voronkov, 2000"; caption:"Logic for Programming and Automated Reasoning: 7th International Conference, LPAR 2000 Reunion Island, France, November 6-10, 2000 Proceedings&nl;Parigot and Voronkov, 2000"; data-line:"FormalReview.bib:1721"; searchterm:"Logic%20for%20Programming%20and%20Automated%20Reasoning%3A%207th%20International%20Conference%2C%20LPAR%202000%20Reunion%20Island%2C%20France%2C%20November%20610%2C%202000%20Proceedings%20Parigot%20and%20Voronkov%2C%202000"; spellcheck:"false"}
Parigot, M., & Voronkov, A.&nbsp;(2000). _Logic for Programming and Automated Reasoning: 7th International Conference, LPAR 2000 Reunion Island, France, November 6-10, 2000 Proceedings_. Berlin, Heidelberg: Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"parkinson_relationship_nodate"; cite-year:"n.d."; cite-authors:"Parkinson and Summers"; cite-authors-long:"Parkinson and Summers"; cite-label:"Parkinson \& Summers, n.d."; caption:"The Relationship between Separation Logic and Implicit Dynamic Frames&nl;Parkinson and Summers, n.d."; data-line:"FormalReview.bib:1277"; searchterm:"The%20Relationship%20between%20Separation%20Logic%20and%20Implicit%20Dynamic%20Frames%20Parkinson%20and%20Summers%2C%20n.d."; spellcheck:"false"}
Parkinson, M.&nbsp;J., & Summers, A.&nbsp;J.&nbsp;(n.d.). The Relationship between Separation Logic and Implicit Dynamic Frames. _LNCS_, _6602_, 439–458.
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate-1"; cite-year:"n.d."; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-a"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation&nl;Patterson and Ahmed, n.d."; data-line:"FormalReview.bib:2697"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20Patterson%20and%20Ahmed%2C%20n.d."; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-a). On Compositional Compiler Correctness and Fully Abstract Compilation, 3. Retrieved from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate"; cite-year:"2019"; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-b"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018&nl;Patterson and Ahmed, 2019"; data-line:"FormalReview.bib:2689"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20%20POPL%202018%20Patterson%20and%20Ahmed%2C%202019"; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-b). On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"paulson_foundation_2000"; cite-year:"2000"; cite-authors:"Paulson"; cite-authors-long:"Paulson"; cite-label:"Paulson, 2000"; caption:"The Foundation of a Generic Theorem Prover&nl;Paulson, 2000"; data-line:"FormalReview.bib:2449"; searchterm:"The%20Foundation%20of%20a%20Generic%20Theorem%20Prover%20Paulson%2C%202000"; spellcheck:"false"}
Paulson, L.&nbsp;C.&nbsp;(2000). The Foundation of a Generic Theorem Prover. _arXiv:cs/9301105_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[cs/9301105](http://arxiv.org/abs/cs/9301105){.bib-url}
~ end bibitem

~ begin bibitem {id:"petcher_foundational_2015"; cite-year:"2015"; cite-authors:"Petcher and Morrisett"; cite-authors-long:"Petcher and Morrisett"; cite-label:"Petcher \& Morrisett, 2015"; caption:"The Foundational Cryptography Framework&nl;Petcher and Morrisett, 2015"; data-line:"FormalReview.bib:1479"; searchterm:"The%20Foundational%20Cryptography%20Framework%20Petcher%20and%20Morrisett%2C%202015"; spellcheck:"false"}
Petcher, A., & Morrisett, G.&nbsp;(2015). The Foundational Cryptography Framework. In R.&nbsp;Focardi & A.&nbsp;Myers (Eds.), _Principles of Security and Trust_ (pp. 53–72). Springer Berlin Heidelberg. Retrieved from <http://www.cs.cornell.edu/~jgm/papers/FCF.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_your_2015"; cite-year:"2015"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2015"; caption:"Your Proof Fails? Testing Helps to Find the Reason&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2015"; data-line:"FormalReview.bib:1886"; searchterm:"Your%20Proof%20Fails%3F%20Testing%20Helps%20to%20Find%20the%20Reason%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202015"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2015). Your Proof Fails? Testing Helps to Find the Reason. _arXiv:1508.01691 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1508.01691](http://arxiv.org/abs/1508.01691){.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_how_2018"; cite-year:"2018"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2018"; caption:"How testing helps to diagnose proof failures&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2018"; data-line:"FormalReview.bib:1868"; searchterm:"How%20testing%20helps%20to%20diagnose%20proof%20failures%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202018"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2018). How testing helps to diagnose proof failures. _Form Asp Comp_, _30_(6), 629–657. https://doi.org/[10.1007/s00165-018-0456-4](https://dx.doi.org/10.1007/s00165-018-0456-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pit-claudel_clement_nodate"; cite-year:"2019"; cite-authors:"Pit-Claudel"; cite-authors-long:"Pit-Claudel"; cite-label:"Pit-Claudel, n.d."; caption:"Clément Pit-Claudel&nl;Pit-Claudel, 2019"; data-line:"FormalReview.bib:796"; searchterm:"Cl%C3%A9ment%20PitClaudel%20PitClaudel%2C%202019"; spellcheck:"false"}
Pit-Claudel, C.&nbsp;(n.d.). Clément Pit-Claudel. Retrieved January 31, 2019, from <http://pit-claudel.fr/clement/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"pit-claudel_extensible_nodate"; cite-year:"n.d."; cite-authors:"Pit-Claudel et al."; cite-authors-long:"Pit-Claudel, Wang, Delaware, Gross, and Chlipala"; cite-label:"Pit-Claudel, Wang, Delaware, Gross, \& Chlipala, n.d."; caption:"Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs&nl;Pit-Claudel, Wang, Delaware, Gross, and Chlipala, n.d."; data-line:"FormalReview.bib:729"; searchterm:"Extensible%20Extraction%20of%20Ef%EF%AC%81cient%20Imperative%20Programs%20with%20Foreign%20Functions%2C%20Manually%20Managed%20Memory%2C%20and%20Proofs%20PitClaudel%2C%20Wang%2C%20Delaware%2C%20Gross%2C%20and%20Chlipala%2C%20n.d."; spellcheck:"false"}
Pit-Claudel, C., Wang, P., Delaware, B., Gross, J., & Chlipala, A.&nbsp;(n.d.). Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs, 14. Retrieved from <http://pit-claudel.fr/clement/papers/fiat-to-facade.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2008"; cite-year:"2008"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2008"; caption:"Differential Dynamic Logic for Hybrid Systems&nl;André Platzer, 2008"; data-line:"FormalReview.bib:899"; searchterm:"Differential%20Dynamic%20Logic%20for%20Hybrid%20Systems%20Andr%C3%A9%20Platzer%2C%202008"; spellcheck:"false"}
Platzer, A.&nbsp;(2008). Differential Dynamic Logic for Hybrid Systems. _Journal of Automated Reasoning_, _41_(2), 143–189. https://doi.org/[10.1007/s10817-008-9103-8](https://dx.doi.org/10.1007/s10817-008-9103-8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2015"; cite-year:"2015"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2015"; caption:"Differential Game Logic&nl;André Platzer, 2015"; data-line:"FormalReview.bib:882"; searchterm:"Differential%20Game%20Logic%20Andr%C3%A9%20Platzer%2C%202015"; spellcheck:"false"}
Platzer, A.&nbsp;(2015). Differential Game Logic. _ACM Trans. Comput. Logic_, _17_(1), 1:1–1:51. https://doi.org/[10.1145/2817824](https://dx.doi.org/10.1145/2817824){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_complete_2017"; cite-year:"2017"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2017"; caption:"A Complete Uniform Substitution Calculus for Differential Dynamic Logic&nl;André Platzer, 2017"; data-line:"FormalReview.bib:992"; searchterm:"A%20Complete%20Uniform%20Substitution%20Calculus%20for%20Differential%20Dynamic%20Logic%20Andr%C3%A9%20Platzer%2C%202017"; spellcheck:"false"}
Platzer, A.&nbsp;(2017). A Complete Uniform Substitution Calculus for Differential Dynamic Logic. _Journal of Automated Reasoning_, _59_(2), 219–265. https://doi.org/[10.1007/s10817-016-9385-1](https://dx.doi.org/10.1007/s10817-016-9385-1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2018"; cite-year:"2018a"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018a"; caption:"Differential Equations &amp; Differential Invariants&nl;André Platzer, 2018a"; data-line:"FormalReview.bib:865"; searchterm:"Differential%20Equations%20%26amp%3B%20Differential%20Invariants%20Andr%C3%A9%20Platzer%2C%202018a"; spellcheck:"false"}
Platzer, A.&nbsp;(2018a). Differential Equations &amp; Differential Invariants. In A.&nbsp;Platzer, _Logical Foundations of Cyber-Physical Systems_ (pp. 287–322). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0_10](https://dx.doi.org/10.1007/978-3-319-63588-0_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018"; cite-year:"2018"; cite-authors:"Andre Platzer"; cite-authors-long:"Andre Platzer"; cite-label:"Andre Platzer, 2018"; caption:"Logical Foundations of Cyber-Physical Systems&nl;Andre Platzer, 2018"; data-line:"FormalReview.bib:937"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20Andre%20Platzer%2C%202018"; spellcheck:"false"}
Platzer, A.&nbsp;(2018). _Logical Foundations of Cyber-Physical Systems_. Springer International Publishing. Retrieved from <https://www.springer.com/gp/book/9783319635873>{.bib-url}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018-1"; cite-year:"2018b"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018b"; caption:"Logical Foundations of Cyber-Physical Systems - Slides&nl;André Platzer, 2018b"; data-line:"FormalReview.bib:978"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20%20Slides%20Andr%C3%A9%20Platzer%2C%202018b"; spellcheck:"false"}
Platzer, A.&nbsp;(2018b). _Logical Foundations of Cyber-Physical Systems - Slides_. Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0](https://dx.doi.org/10.1007/978-3-319-63588-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_keymaera_nodate"; cite-year:"2019"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, n.d."; caption:"KeYmaera X: Documentation&nl;André Platzer, 2019"; data-line:"FormalReview.bib:950"; searchterm:"KeYmaera%20X%3A%20Documentation%20Andr%C3%A9%20Platzer%2C%202019"; spellcheck:"false"}
Platzer, A.&nbsp;(n.d.). KeYmaera X: Documentation. Retrieved January 31, 2019, from <http://www.ls.cs.cmu.edu/KeYmaeraX/documentation.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"polikarpova_structuring_2019"; cite-year:"2019"; cite-authors:"Polikarpova and Sergey"; cite-authors-long:"Polikarpova and Sergey"; cite-label:"Polikarpova \& Sergey, 2019"; caption:"Structuring the Synthesis of Heap-manipulating Programs&nl;Polikarpova and Sergey, 2019"; data-line:"FormalReview.bib:1128"; searchterm:"Structuring%20the%20Synthesis%20of%20Heapmanipulating%20Programs%20Polikarpova%20and%20Sergey%2C%202019"; spellcheck:"false"}
Polikarpova, N., & Sergey, I.&nbsp;(2019). Structuring the Synthesis of Heap-manipulating Programs. _Proc. ACM Program. Lang._, _3_, 72:1–72:30. https://doi.org/[10.1145/3290385](https://dx.doi.org/10.1145/3290385){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pottier_menhir_nodate"; cite-year:"2019"; cite-authors:"Pottier and REgis-Gianas"; cite-authors-long:"Pottier and REgis-Gianas"; cite-label:"Pottier \& REgis-Gianas, n.d."; caption:"Menhir Reference Manual (version 20181113)&nl;Pottier and REgis-Gianas, 2019"; data-line:"FormalReview.bib:2765"; searchterm:"Menhir%20Reference%20Manual%20version%2020181113%20Pottier%20and%20REgisGianas%2C%202019"; spellcheck:"false"}
Pottier, F., & REgis-Gianas, Y.&nbsp;(n.d.). Menhir Reference Manual (version 20181113). Retrieved February 1, 2019, from <http://gallium.inria.fr/~fpottier/menhir/manual.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"protzenko_verified_2017"; cite-year:"2017"; cite-authors:"Protzenko et al."; cite-authors-long:"Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al."; cite-label:"Protzenko et al., 2017"; caption:"Verified Low-level Programming Embedded in F\*&nl;Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al., 2017"; data-line:"FormalReview.bib:1782"; searchterm:"Verified%20Lowlevel%20Programming%20Embedded%20in%20F%5C*%20Protzenko%2C%20Zinzindohou%C3%A9%2C%20Rastogi%2C%20Ramananandro%2C%20Wang%2C%20ZanellaB%C3%A9guelin%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Protzenko, J., Zinzindohoué, J.-K., Rastogi, A., Ramananandro, T., Wang, P., Zanella-Béguelin, S., … Swamy, N.&nbsp;(2017). Verified Low-level Programming Embedded in F\*. _Proc. ACM Program. Lang._, _1_, 17:1–17:29. https://doi.org/[10.1145/3110261](https://dx.doi.org/10.1145/3110261){.bib-doi}
~ end bibitem

~ begin bibitem {id:"qureshi_formal_nodate"; cite-year:"n.d."; cite-authors:"Qureshi"; cite-authors-long:"Qureshi"; cite-label:"Qureshi, n.d."; caption:"Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems&nl;Qureshi, n.d."; data-line:"FormalReview.bib:166"; searchterm:"Formal%20Modelling%20and%20Analysis%20of%20MissionCritical%20Software%20in%20Military%20Avionics%20Systems%20Qureshi%2C%20n.d."; spellcheck:"false"}
Qureshi, Z.&nbsp;H.&nbsp;(n.d.). Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems. _11th Australian Workshop on Safety Related Programmable Systems (SCS’06)_, 11. Retrieved from <http://crpit.com/confpapers/CRPITV69Qureshi.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ramsey_applicative_2006"; cite-year:"2006"; cite-authors:"Ramsey and Dias"; cite-authors-long:"Ramsey and Dias"; cite-label:"Ramsey \& Dias, 2006"; caption:"An Applicative Control-Flow Graph Based on Huet's Zipper&nl;Ramsey and Dias, 2006"; data-line:"FormalReview.bib:2142"; searchterm:"An%20Applicative%20ControlFlow%20Graph%20Based%20on%20Huet's%20Zipper%20Ramsey%20and%20Dias%2C%202006"; spellcheck:"false"}
Ramsey, N., & Dias, J.&nbsp;(2006). An Applicative Control-Flow Graph Based on Huet’s Zipper. _Electronic Notes in Theoretical Computer Science_, _148_(2), 105–126. https://doi.org/[10.1016/j.entcs.2005.11.042](https://dx.doi.org/10.1016/j.entcs.2005.11.042){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sherman_making_2017"; cite-year:"2017"; cite-authors:"Sherman"; cite-authors-long:"Sherman"; cite-label:"Sherman, 2017"; caption:"Making Discrete Decisions Based on Continuous Values&nl;Sherman, 2017"; data-line:"FormalReview.bib:461"; searchterm:"Making%20Discrete%20Decisions%20Based%20on%20Continuous%20Values%20Sherman%2C%202017"; spellcheck:"false"}
Sherman, B.&nbsp;(2017). _Making Discrete Decisions Based on Continuous Values_ (Master of Science). MIT, Cambridge, MA.&nbsp;Retrieved from <http://adam.chlipala.net/theses/sherman_sm.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shrobe_trust-management_2009"; cite-year:"2009"; cite-authors:"Shrobe et al."; cite-authors-long:"Shrobe, DeHon, and Knight"; cite-label:"Shrobe, DeHon, \& Knight, 2009"; caption:"Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA)&nl;Shrobe, DeHon, and Knight, 2009"; data-line:"FormalReview.bib:3013"; searchterm:"TrustManagement%2C%20IntrusionTolerance%2C%20Accountability%2C%20and%20Reconstitution%20Architecture%20TIARA%20Shrobe%2C%20DeHon%2C%20and%20Knight%2C%202009"; spellcheck:"false"}
Shrobe, H., DeHon, A., & Knight, T.&nbsp;(2009). Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA), 133. Retrieved from <https://apps.dtic.mil/dtic/tr/fulltext/u2/a511350.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shulman_hott_2013"; cite-year:"2013"; cite-authors:"Shulman"; cite-authors-long:"Shulman"; cite-label:"Shulman, 2013"; caption:"The HoTT Book.Homotopy Type Theory&nl;Shulman, 2013"; data-line:"FormalReview.bib:2361"; searchterm:"The%20HoTT%20Book.Homotopy%20Type%20Theory%20Shulman%2C%202013"; spellcheck:"false"}
Shulman, M.&nbsp;(2013, March 12). The HoTT Book.Homotopy Type Theory. Retrieved February 1, 2019, from <https://homotopytypetheory.org/book/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_equations:_2010"; cite-year:"2010"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2010"; caption:"Equations: A Dependent Pattern-Matching Compiler&nl;Sozeau, 2010"; data-line:"FormalReview.bib:1401"; searchterm:"Equations%3A%20A%20Dependent%20PatternMatching%20Compiler%20Sozeau%2C%202010"; spellcheck:"false"}
Sozeau, M.&nbsp;(2010). Equations: A Dependent Pattern-Matching Compiler. In M.&nbsp;Kaufmann & L.&nbsp;C.&nbsp;Paulson (Eds.), _Interactive Theorem Proving_ (pp. 419–434). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"sozeau_metacoq_2019"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2019"; caption:"MetaCoq - Metaprogramming in Coq (Was template-coq)&nl;Sozeau, 2019"; data-line:"FormalReview.bib:1710"; searchterm:"MetaCoq%20%20Metaprogramming%20in%20Coq%20Was%20templatecoq%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(2019). _MetaCoq - Metaprogramming in Coq (Was template-coq)_. MetaCoq. Retrieved from <https://github.com/MetaCoq/metacoq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-a"; caption:"Typed Template Coq - POPL 2018&nl;Sozeau, 2019"; data-line:"FormalReview.bib:1329"; searchterm:"Typed%20Template%20Coq%20%20POPL%202018%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-a). Typed Template Coq - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-typed-template-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate-1"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-b"; caption:"Typed Template Coq - Slides&nl;Sozeau, n.d."; data-line:"FormalReview.bib:1346"; searchterm:"Typed%20Template%20Coq%20%20Slides%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-b). Typed Template Coq - Slides, 11.
~ end bibitem

~ begin bibitem {id:"spector-zabusky_total_2018"; cite-year:"2018"; cite-authors:"Spector-Zabusky et al."; cite-authors-long:"Spector-Zabusky, Breitner, Rizkallah, and Weirich"; cite-label:"Spector-Zabusky, Breitner, Rizkallah, \& Weirich, 2018"; caption:"Total Haskell is Reasonable Coq&nl;Spector-Zabusky, Breitner, Rizkallah, and Weirich, 2018"; data-line:"FormalReview.bib:2193"; searchterm:"Total%20Haskell%20is%20Reasonable%20Coq%20SpectorZabusky%2C%20Breitner%2C%20Rizkallah%2C%20and%20Weirich%2C%202018"; spellcheck:"false"}
Spector-Zabusky, A., Breitner, J., Rizkallah, C., & Weirich, S.&nbsp;(2018). Total Haskell is Reasonable Coq. In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 14–27). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167092](https://dx.doi.org/10.1145/3167092){.bib-doi}
~ end bibitem

~ begin bibitem {id:"stewart_verified_2012"; cite-year:"2012"; cite-authors:"Stewart et al."; cite-authors-long:"Stewart, Beringer, and Appel"; cite-label:"Stewart, Beringer, \& Appel, 2012"; caption:"Verified Heap Theorem Prover by Paramodulation&nl;Stewart, Beringer, and Appel, 2012"; data-line:"FormalReview.bib:349"; searchterm:"Verified%20Heap%20Theorem%20Prover%20by%20Paramodulation%20Stewart%2C%20Beringer%2C%20and%20Appel%2C%202012"; spellcheck:"false"}
Stewart, G., Beringer, L., & Appel, A.&nbsp;W.&nbsp;(2012). Verified Heap Theorem Prover by Paramodulation. In _Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming_ (pp. 3–14). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2364527.2364531](https://dx.doi.org/10.1145/2364527.2364531){.bib-doi}
~ end bibitem

~ begin bibitem {id:"swamy_project_nodate"; cite-year:"2019"; cite-authors:"Swamy"; cite-authors-long:"Swamy"; cite-label:"Swamy, n.d."; caption:"Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research&nl;Swamy, 2019"; data-line:"FormalReview.bib:2232"; searchterm:"Project%20Everest%20%20Verified%20Secure%20Implementations%20of%20the%20HTTPS%20Ecosystem.Microsoft%20Research%20Swamy%2C%202019"; spellcheck:"false"}
Swamy, N.&nbsp;(n.d.). Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research. Retrieved February 1, 2019, from <https://www.microsoft.com/en-us/research/project/project-everest-verified-secure-implementations-https-ecosystem/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_verifying_2013"; cite-year:"2013"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Chen, and Livshits"; cite-label:"Swamy, Chen, \& Livshits, 2013"; caption:"Verifying Higher-order Programs with the Dijkstra Monad&nl;Swamy, Chen, and Livshits, 2013"; data-line:"FormalReview.bib:1942"; searchterm:"Verifying%20Higherorder%20Programs%20with%20the%20Dijkstra%20Monad%20Swamy%2C%20Chen%2C%20and%20Livshits%2C%202013"; spellcheck:"false"}
Swamy, N., Chen, J., & Livshits, B.&nbsp;(2013). Verifying Higher-order Programs with the Dijkstra Monad. Retrieved from <https://www.microsoft.com/en-us/research/publication/verifying-higher-order-programs-with-the-dijkstra-monad/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_dependent_2016"; cite-year:"2016"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al."; cite-label:"Swamy et al., 2016"; caption:"Dependent Types and Multi-monadic Effects in F\*&nl;Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al., 2016"; data-line:"FormalReview.bib:1953"; searchterm:"Dependent%20Types%20and%20Multimonadic%20Effects%20in%20F%5C*%20Swamy%2C%20Hri%C5%A3cu%2C%20Keller%2C%20Rastogi%2C%20DelignatLavaud%2C%20Forest%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Swamy, N., Hriţcu, C., Keller, C., Rastogi, A., Delignat-Lavaud, A., Forest, S., … Zanella-Béguelin, S.&nbsp;(2016). Dependent Types and Multi-monadic Effects in F\*. In _Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 256–270). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2837614.2837655](https://dx.doi.org/10.1145/2837614.2837655){.bib-doi}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019"; cite-year:"2019a"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019a"; caption:"Fsharp design: RFCs and docs related to the F&hash; language design process,&nl;Syme, 2019a"; data-line:"FormalReview.bib:2016"; searchterm:"Fsharp%20design%3A%20RFCs%20and%20docs%20related%20to%20the%20F%26hash%3B%20language%20design%20process%2C%20Syme%2C%202019a"; spellcheck:"false"}
Syme, D.&nbsp;(2019a). _Fsharp design: RFCs and docs related to the F&hash; language design process,_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fslang-design>{.bib-url}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019-1"; cite-year:"2019b"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019b"; caption:"The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp&nl;Syme, 2019b"; data-line:"FormalReview.bib:2027"; searchterm:"The%20Fsharp%20Compiler%2C%20Core%20Library%20%26amp%3B%20Tools%20F%26hash%3B%20Software%20Foundation%20Repository%3A%20fsharp%2Ffsharp%20Syme%2C%202019b"; spellcheck:"false"}
Syme, D.&nbsp;(2019b). _The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fsharp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"van_renesse_paxos_2015"; cite-year:"2015"; cite-authors:"Van Renesse and Altinbuken"; cite-authors-long:"Van Renesse and Altinbuken"; cite-label:"Van Renesse \& Altinbuken, 2015"; caption:"Paxos Made Moderately Complex&nl;Van Renesse and Altinbuken, 2015"; data-line:"FormalReview.bib:2853"; searchterm:"Paxos%20Made%20Moderately%20Complex%20Van%20Renesse%20and%20Altinbuken%2C%202015"; spellcheck:"false"}
Van Renesse, R., & Altinbuken, D.&nbsp;(2015). Paxos Made Moderately Complex. _ACM Comput. Surv._, _47_(3), 42:1–42:36. https://doi.org/[10.1145/2673577](https://dx.doi.org/10.1145/2673577){.bib-doi}
~ end bibitem

~ begin bibitem {id:"voevodsky_homotopy_nodate"; cite-year:"n.d."; cite-authors:"Voevodsky"; cite-authors-long:"Voevodsky"; cite-label:"Voevodsky, n.d."; caption:"Homotopy Type Theory: Univalent Foundations of Mathematics&nl;Voevodsky, n.d."; data-line:"FormalReview.bib:2373"; searchterm:"Homotopy%20Type%20Theory%3A%20Univalent%20Foundations%20of%20Mathematics%20Voevodsky%2C%20n.d."; spellcheck:"false"}
Voevodsky, V.&nbsp;(n.d.). Homotopy Type Theory: Univalent Foundations of Mathematics, 490.
~ end bibitem

~ begin bibitem {id:"wenzel_isabelle/isar_2018"; cite-year:"2018"; cite-authors:"Wenzel"; cite-authors-long:"Wenzel"; cite-label:"Wenzel, 2018"; caption:"The Isabelle/Isar Reference Manual&nl;Wenzel, 2018"; data-line:"FormalReview.bib:2463"; searchterm:"The%20Isabelle%2FIsar%20Reference%20Manual%20Wenzel%2C%202018"; spellcheck:"false"}
Wenzel, M.&nbsp;(2018). The Isabelle/Isar Reference Manual. Retrieved from <https://core.ac.uk/display/22830292>{.bib-url}
~ end bibitem

~ begin bibitem {id:"white_neil_formal_2017"; cite-year:"2017"; cite-authors:"White Neil et al."; cite-authors-long:"White Neil, Matthews Stuart, and Chapman Roderick"; cite-label:"White Neil, Matthews Stuart, \& Chapman Roderick, 2017"; caption:"Formal verification: will the seedling ever flower?&nl;White Neil, Matthews Stuart, and Chapman Roderick, 2017"; data-line:"FormalReview.bib:1644"; searchterm:"Formal%20verification%3A%20will%20the%20seedling%20ever%20flower%3F%20White%20Neil%2C%20Matthews%20Stuart%2C%20and%20Chapman%20Roderick%2C%202017"; spellcheck:"false"}
White Neil, Matthews Stuart, & Chapman Roderick. (2017). Formal verification: will the seedling ever flower? _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150402. https://doi.org/[10.1098/rsta.2015.0402](https://dx.doi.org/10.1098/rsta.2015.0402){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wiedijk_formal_2008"; cite-year:"2008"; cite-authors:"Wiedijk"; cite-authors-long:"Wiedijk"; cite-label:"Wiedijk, 2008"; caption:"Formal Proof—Getting Started&nl;Wiedijk, 2008"; data-line:"FormalReview.bib:1457"; searchterm:"Formal%20Proof%E2%80%94Getting%20Started%20Wiedijk%2C%202008"; spellcheck:"false"}
Wiedijk, F.&nbsp;(2008). Formal Proof—Getting Started, _55_(11), 7.
~ end bibitem

~ begin bibitem {id:"wikipedia_category:formal_2017"; cite-year:"2017"; cite-authors:"Wikipedia"; cite-authors-long:"Wikipedia"; cite-label:"Wikipedia, 2017"; caption:"Category:Formal methods people&nl;Wikipedia, 2017"; data-line:"FormalReview.bib:151"; searchterm:"Category%3AFormal%20methods%20people%20Wikipedia%2C%202017"; spellcheck:"false"}
Wikipedia. (2017). Category:Formal methods people. In _Wikipedia_. Retrieved from <https://en.wikipedia.org/w/index.php?title=Category:Formal_methods_people&oldid=812800009>{.bib-url}
~ end bibitem

~ begin bibitem {id:"yang_safe_2011"; cite-year:"2011"; cite-authors:"Yang and Hawblitzel"; cite-authors-long:"Yang and Hawblitzel"; cite-label:"Yang \& Hawblitzel, 2011"; caption:"Safe to the last instruction: automated verification of a type-safe operating system&nl;Yang and Hawblitzel, 2011"; data-line:"FormalReview.bib:2309"; searchterm:"Safe%20to%20the%20last%20instruction%3A%20automated%20verification%20of%20a%20typesafe%20operating%20system%20Yang%20and%20Hawblitzel%2C%202011"; spellcheck:"false"}
Yang, J., & Hawblitzel, C.&nbsp;(2011). Safe to the last instruction: automated verification of a type-safe operating system. _Communications of the ACM_, _54_(12), 123. https://doi.org/[10.1145/2043174.2043197](https://dx.doi.org/10.1145/2043174.2043197){.bib-doi}
~ end bibitem

~ begin bibitem {id:"feng_correct-by-construction_2018"; cite-year:"2018"; cite-authors:"Zhang et al."; cite-authors-long:"Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky"; cite-label:"Zhang et al., 2018"; caption:"Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement&nl;Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky, 2018"; data-line:"FormalReview.bib:740"; searchterm:"CorrectbyConstruction%20Implementation%20of%20Runtime%20Monitors%20Using%20Stepwise%20Refinement%20Zhang%2C%20Wiegley%2C%20Giannakopoulos%2C%20Eakman%2C%20PitClaudel%2C%20Lee%2C%20and%20Sokolsky%2C%202018"; spellcheck:"false"}
Zhang, T., Wiegley, J., Giannakopoulos, T., Eakman, G., Pit-Claudel, C., Lee, I., & Sokolsky, O.&nbsp;(2018). Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement. In X.&nbsp;Feng, M.&nbsp;Müller-Olm, & Z.&nbsp;Yang (Eds.), _Dependable Software Engineering. Theories, Tools, and Applications_ (Vol. 10998, pp. 31–49). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-99933-3_3](https://dx.doi.org/10.1007/978-3-319-99933-3_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"acm_acm_nodate"; cite-authors:"2019a"; cite-authors-long:"2019a"; cite-label:"n.d.-a"; caption:"ACM Classification Codes&nl;2019a, "; data-line:"FormalReview.bib:1313"; searchterm:"ACM%20Classification%20Codes%202019a%2C%20"; spellcheck:"false"}
(n.d.-a). ACM Classification Codes. Retrieved February 1, 2019, from <https://cran.r-project.org/web/classifications/ACM.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coq_nodate"; cite-authors:"2019b"; cite-authors-long:"2019b"; cite-label:"n.d.-b"; caption:"Coq for PL conference series - CoqPL 2019&nl;2019b, "; data-line:"FormalReview.bib:1094"; searchterm:"Coq%20for%20PL%20conference%20series%20%20CoqPL%202019%202019b%2C%20"; spellcheck:"false"}
(n.d.-b). Coq for PL conference series - CoqPL 2019. Retrieved January 31, 2019, from <https://popl18.sigplan.org/series/CoqPL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coqpl_nodate-1"; cite-authors:"2019c"; cite-authors-long:"2019c"; cite-label:"n.d.-c"; caption:"CoqPL 2018 The Fourth International Workshop on Coq for Programming Languages - POPL 2018&nl;2019c, "; data-line:"FormalReview.bib:1086"; searchterm:"CoqPL%202018%20The%20Fourth%20International%20Workshop%20on%20Coq%20for%20Programming%20Languages%20%20POPL%202018%202019c%2C%20"; spellcheck:"false"}
(n.d.-c). CoqPL 2018 The Fourth International Workshop on Coq for Programming Languages - POPL 2018. Retrieved January 31, 2019, from <https://popl18.sigplan.org/track/CoqPL-2018>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coqpl_nodate"; cite-authors:"2019d"; cite-authors-long:"2019d"; cite-label:"n.d.-d"; caption:"CoqPL 2019 The Fifth International Workshop on Coq for Programming Languages - POPL 2019&nl;2019d, "; data-line:"FormalReview.bib:1078"; searchterm:"CoqPL%202019%20The%20Fifth%20International%20Workshop%20on%20Coq%20for%20Programming%20Languages%20%20POPL%202019%202019d%2C%20"; spellcheck:"false"}
(n.d.-d). CoqPL 2019 The Fifth International Workshop on Coq for Programming Languages - POPL 2019. Retrieved January 31, 2019, from <https://popl19.sigplan.org/track/CoqPL-2019#program>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cea_frama-c_nodate"; cite-authors:"2019e"; cite-authors-long:"2019e"; cite-label:"n.d.-e"; caption:"Frama-C&nl;2019e, "; data-line:"FormalReview.bib:1810"; searchterm:"FramaC%202019e%2C%20"; spellcheck:"false"}
(n.d.-e). Frama-C.&nbsp;Retrieved February 1, 2019, from <https://frama-c.com/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wikibook_latex_nodate"; cite-authors:"2019f"; cite-authors-long:"2019f"; cite-label:"n.d.-f"; caption:"LaTeX - Wikibooks, open books for an open world&nl;2019f, "; data-line:"FormalReview.bib:2616"; searchterm:"LaTeX%20%20Wikibooks%2C%20open%20books%20for%20an%20open%20world%202019f%2C%20"; spellcheck:"false"}
(n.d.-f). LaTeX - Wikibooks, open books for an open world. Retrieved February 1, 2019, from <https://en.wikibooks.org/wiki/LaTeX>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_msc2010_nodate"; cite-authors:"2019g"; cite-authors-long:"2019g"; cite-label:"n.d.-g"; caption:"MSC2010 database&nl;2019g, "; data-line:"FormalReview.bib:1321"; searchterm:"MSC2010%20database%202019g%2C%20"; spellcheck:"false"}
(n.d.-g). MSC2010 database. Retrieved February 1, 2019, from <https://mathscinet.ams.org/msc/msc2010.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"royalsociety_philosophical_nodate"; cite-authors:"2019h"; cite-authors-long:"2019h"; cite-label:"n.d.-h"; caption:"Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences&nl;2019h, "; data-line:"FormalReview.bib:1512"; searchterm:"Philosophical%20Transactions%20of%20the%20Royal%20Society%20A%3A%20Mathematical%2C%20Physical%20and%20Engineering%20Sciences%202019h%2C%20"; spellcheck:"false"}
(n.d.-h). Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences. Retrieved February 1, 2019, from <https://royalsocietypublishing.org/journal/rsta>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_popl_nodate"; cite-authors:"2019i"; cite-authors-long:"2019i"; cite-label:"n.d.-i"; caption:"POPL conference series - POPL 2020&nl;2019i, "; data-line:"FormalReview.bib:1102"; searchterm:"POPL%20conference%20series%20%20POPL%202020%202019i%2C%20"; spellcheck:"false"}
(n.d.-i). POPL conference series - POPL 2020. Retrieved January 31, 2019, from <https://popl18.sigplan.org/series/POPL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"royalsociety_proceedings_nodate"; cite-authors:"2019j"; cite-authors-long:"2019j"; cite-label:"n.d.-j"; caption:"Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences&nl;2019j, "; data-line:"FormalReview.bib:1520"; searchterm:"Proceedings%20of%20the%20Royal%20Society%20A%3A%20Mathematical%2C%20Physical%20and%20Engineering%20Sciences%202019j%2C%20"; spellcheck:"false"}
(n.d.-j). Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences. Retrieved February 1, 2019, from <https://royalsocietypublishing.org/journal/rspa>{.bib-url}
~ end bibitem

~ end bibliography
