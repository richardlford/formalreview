
@incollection{raschke_flashix_2021,
	location = {Cham},
	title = {Flashix: Modular Verification of a Concurrent and Crash-Safe Flash File System},
	volume = {12750},
	isbn = {978-3-030-76019-9 978-3-030-76020-5},
	url = {https://link.springer.com/10.1007/978-3-030-76020-5_14},
	shorttitle = {Flashix},
	abstract = {The Flashix project has developed the ﬁrst realistic veriﬁed ﬁle system for Flash memory. This paper gives an overview over the project and the theory used. Speciﬁcation is based on modular components and subcomponents, which may have concurrent implementations connected via reﬁnement. Functional correctness and crash-safety of each component is veriﬁed separately. We highlight some components that were recently added to improve eﬃciency, such as ﬁle caches and concurrent garbage collection. The project generates 18K of C code that runs under Linux. We evaluate how eﬃciency has improved and compare to {UBIFS}, the most recent ﬂash ﬁle system implementation available for the Linux kernel.},
	pages = {239--265},
	booktitle = {Logic, Computation and Rigorous Methods},
	publisher = {Springer International Publishing},
	author = {Bodenmüller, Stefan and Schellhorn, Gerhard and Bitterlich, Martin and Reif, Wolfgang},
	editor = {Raschke, Alexander and Riccobene, Elvinia and Schewe, Klaus-Dieter},
	urldate = {2021-06-21},
	date = {2021},
	langid = {english},
	doi = {10.1007/978-3-030-76020-5_14},
	note = {Series Title: Lecture Notes in Computer Science},
	file = {Bodenmüller et al. - 2021 - Flashix Modular Verification of a Concurrent and .pdf:/home/fordrl/Zotero/storage/9A6NT73S/Bodenmüller et al. - 2021 - Flashix Modular Verification of a Concurrent and .pdf:application/pdf},
}

@article{li_incremental_2021,
	title = {An Incremental Path Towards a Safer {OS} Kernel},
	abstract = {Linux has become the de-facto operating system of our age, but its vulnerabilities are a constant threat to service availability, user privacy, and data integrity. While one might scrap Linux and start over, the cost of that would be prohibitive due to Linux’s ubiquitous deployment. In this paper, we propose an alternative, incremental route to a safer Linux through proper modularization and gradual replacement module by module. We lay out the research challenges and potential solutions for this route, and discuss the open questions ahead. {CCS} Concepts • Software and its engineering → Software verification; • Computer systems organization → Reliability.},
	pages = {8},
	author = {Li, Jialin and Miller, Samantha and Zhuo, Danyang and Chen, Ang and Howell, Jon and Anderson, Thomas},
	date = {2021},
	langid = {english},
	file = {Li et al. - 2021 - An Incremental Path Towards a Safer OS Kernel.pdf:/home/fordrl/Zotero/storage/M782TP9R/Li et al. - 2021 - An Incremental Path Towards a Safer OS Kernel.pdf:application/pdf},
}

@article{labrosse_implementing_1992,
	title = {Implementing a Real-Time Kernel, 6/92},
	pages = {6},
	author = {Labrosse, Jean},
	date = {1992-06},
	langid = {english},
	file = {Implementing a Real-Time Kernel, 692.pdf:/home/fordrl/Zotero/storage/MLDLQRL9/Implementing a Real-Time Kernel, 692.pdf:application/pdf},
}

@article{labrosse_portable_1992,
	title = {A Portable Real-Time Kernel in C, 5/92},
	pages = {12},
	journaltitle = {Embedded Systems Programming},
	author = {Labrosse, Jean},
	date = {1992-05},
	langid = {english},
	file = {A Portable Real-Time Kernel in C, 592.pdf:/home/fordrl/Zotero/storage/SWDQXGRW/A Portable Real-Time Kernel in C, 592.pdf:application/pdf},
}

@article{baccelli_riot_2018,
	title = {{RIOT}: An Open Source Operating System for Low-End Embedded Devices in the {IoT}},
	volume = {5},
	issn = {2327-4662, 2372-2541},
	url = {https://ieeexplore.ieee.org/document/8315125/},
	doi = {10.1109/JIOT.2018.2815038},
	shorttitle = {{RIOT}},
	abstract = {As the Internet of Things ({IoT}) emerges, compact operating systems are required on low-end devices to ease development and portability of {IoT} applications. {RIOT} is a prominent free and open source operating system in this space. In this paper, we provide the ﬁrst comprehensive overview of {RIOT}. We cover the key components of interest to potential developers and users: the kernel, hardware abstraction, and software modularity, both conceptually and in practice for various example conﬁgurations. We explain operational aspects like system boot-up, timers, power management, and the use of networking. Finally, the relevant {APIs} as exposed by the operating system are discussed along with the larger ecosystem around {RIOT}, including development and open source community aspects.},
	pages = {4428--4440},
	number = {6},
	journaltitle = {{IEEE} Internet of Things Journal},
	shortjournal = {{IEEE} Internet Things J.},
	author = {Baccelli, Emmanuel and Gundogan, Cenk and Hahm, Oliver and Kietzmann, Peter and Lenders, Martine S. and Petersen, Hauke and Schleiser, Kaspar and Schmidt, Thomas C. and Wahlisch, Matthias},
	urldate = {2021-09-17},
	date = {2018-12},
	langid = {english},
	file = {Baccelli et al. - 2018 - RIOT An Open Source Operating System for Low-End .pdf:/home/fordrl/Zotero/storage/P8KU2BKA/Baccelli et al. - 2018 - RIOT An Open Source Operating System for Low-End .pdf:application/pdf},
}