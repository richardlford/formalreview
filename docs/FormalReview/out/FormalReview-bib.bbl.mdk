~ begin bibliography { .bib-natural; cite-style:"natural:'(',')','; '" ; caption:"1079" ; data-style:"author-date" ; data-hanging-indent:"2"; data-style:'apa';  }
~ begin bibitem {id:"abadi_protection_1998"; cite-year:"1998"; cite-authors:"Martin Abadi"; cite-authors-long:"Martin Abadi"; cite-label:"Martin Abadi, 1998"; caption:"Protection in programming-language translations&nl;Martin Abadi, 1998"; data-line:"Security.bib:244"; searchterm:"Protection%20in%20programminglanguage%20translations%20Martin%20Abadi%2C%201998"; spellcheck:"false"}
Abadi, M.&nbsp;(1998). Protection in programming-language translations. _DECSRC_, 16.
~ end bibitem

~ begin bibitem {id:"abadi_secrecy_1999"; cite-year:"1999"; cite-authors:"Martín Abadi"; cite-authors-long:"Martín Abadi"; cite-label:"Martín Abadi, 1999"; caption:"Secrecy by typing in security protocols&nl;Martín Abadi, 1999"; data-line:"Security.bib:529"; searchterm:"Secrecy%20by%20typing%20in%20security%20protocols%20Mart%C3%ADn%20Abadi%2C%201999"; spellcheck:"false"}
Abadi, M.&nbsp;(1999). Secrecy by typing in security protocols. _Journal of the ACM_, _46_(5), 749–786. https://doi.org/[10.1145/324133.324266](https://dx.doi.org/10.1145/324133.324266){.bib-doi}
~ end bibitem

~ begin bibitem {id:"abadi_secure_2002"; cite-year:"2002"; cite-authors:"Martı́n Abadi et al."; cite-authors-long:"Martı́n Abadi, Fournet, and Gonthier"; cite-label:"Martı́n Abadi, Fournet, \& Gonthier, 2002"; caption:"Secure Implementation of Channel Abstractions&nl;Martı́n Abadi, Fournet, and Gonthier, 2002"; data-line:"Security.bib:496"; searchterm:"Secure%20Implementation%20of%20Channel%20Abstractions%20Mart%C4%B1%CC%81n%20Abadi%2C%20Fournet%2C%20and%20Gonthier%2C%202002"; spellcheck:"false"}
Abadi, M., Fournet, C., & Gonthier, G.&nbsp;(2002). Secure Implementation of Channel Abstractions. _Information and Computation_, _174_(1), 37–83. https://doi.org/[10.1006/inco.2002.3086](https://dx.doi.org/10.1006/inco.2002.3086){.bib-doi}
~ end bibitem

~ begin bibitem {id:"abate_when_2019"; cite-year:"2019"; cite-authors:"Abate et al."; cite-authors-long:"Abate, Amorim, Blanco, Evans, Fachini, Hritcu, et al."; cite-label:"Abate, Amorim, et al., 2019"; caption:"When Good Components Go Bad: Formally Secure Compilation Despite Dynamic Compromise&nl;Abate, Amorim, Blanco, Evans, Fachini, Hritcu, et al., 2019"; data-line:"Security.bib:106"; searchterm:"When%20Good%20Components%20Go%20Bad%3A%20Formally%20Secure%20Compilation%20Despite%20Dynamic%20Compromise%20Abate%2C%20Amorim%2C%20Blanco%2C%20Evans%2C%20Fachini%2C%20Hritcu%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Abate, C., Amorim, A.&nbsp;A.&nbsp;de, Blanco, R., Evans, A.&nbsp;N., Fachini, G., Hritcu, C., … Tolmach, A.&nbsp;(2019). When Good Components Go Bad: Formally Secure Compilation Despite Dynamic Compromise. _arXiv:1802.00588 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1802.00588](http://arxiv.org/abs/1802.00588){.bib-url}
~ end bibitem

~ begin bibitem {id:"abate_extended_2021"; cite-year:"2021"; cite-authors:"Abate et al."; cite-authors-long:"Abate, Blanco, Ciobâcă, Durier, Garg, Hrit, et al."; cite-label:"Abate et al., 2021"; caption:"An Extended Account of Trace-Relating Compiler Correctness and Secure Compilation&nl;Abate, Blanco, Ciobâcă, Durier, Garg, Hrit, et al., 2021"; data-line:"FormalBib.bib:23"; searchterm:"An%20Extended%20Account%20of%20TraceRelating%20Compiler%20Correctness%20and%20Secure%20Compilation%20Abate%2C%20Blanco%2C%20Ciob%C3%A2c%C4%83%2C%20Durier%2C%20Garg%2C%20Hrit%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Abate, C., Blanco, R., Ciobâcă, T., Durier, A., Garg, D., Hrit, C., … Thibault, J.&nbsp;(2021). An Extended Account of Trace-Relating Compiler Correctness and Secure Compilation. _TOPLAS_, _To Appear_, 48. Retrieved from <https://people.mpi-sws.org/~dg/papers/toplas21-diff.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"abate_journey_2019"; cite-year:"2019"; cite-authors:"Abate et al."; cite-authors-long:"Abate, Blanco, Garg, Hritcu, Patrignani, and Thibault"; cite-label:"Abate, Blanco, et al., 2019"; caption:"Journey Beyond Full Abstraction: Exploring Robust Property Preservation for Secure Compilation&nl;Abate, Blanco, Garg, Hritcu, Patrignani, and Thibault, 2019"; data-line:"Security.bib:89"; searchterm:"Journey%20Beyond%20Full%20Abstraction%3A%20Exploring%20Robust%20Property%20Preservation%20for%20Secure%20Compilation%20Abate%2C%20Blanco%2C%20Garg%2C%20Hritcu%2C%20Patrignani%2C%20and%20Thibault%2C%202019"; spellcheck:"false"}
Abate, C., Blanco, R., Garg, D., Hritcu, C., Patrignani, M., & Thibault, J.&nbsp;(2019). Journey Beyond Full Abstraction: Exploring Robust Property Preservation for Secure Compilation. _2019 IEEE 32nd Computer Security Foundations Symposium (CSF)_, 256–25615. https://doi.org/[10.1109/CSF.2019.00025](https://dx.doi.org/10.1109/CSF.2019.00025){.bib-doi}
~ end bibitem

~ begin bibitem {id:"absint_compcert_nodate"; cite-year:"2019"; cite-authors:"Absint"; cite-authors-long:"Absint"; cite-label:"Absint, n.d."; caption:"CompCert - Publications&nl;Absint, 2019"; data-line:"FormalBib.bib:3339"; searchterm:"CompCert%20%20Publications%20Absint%2C%202019"; spellcheck:"false"}
Absint. (n.d.). CompCert - Publications. Retrieved January 31, 2019, from <http://compcert.inria.fr/publi.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"abyaneh_ase_nodate"; cite-year:"n.d."; cite-authors:"Abyaneh and Kirsch"; cite-authors-long:"Abyaneh and Kirsch"; cite-label:"Abyaneh \& Kirsch, n.d."; caption:"ASE: A Value Set Decision Procedure for Symbolic Execution&nl;Abyaneh and Kirsch, n.d."; data-line:"FormalBib.bib:9127"; searchterm:"ASE%3A%20A%20Value%20Set%20Decision%20Procedure%20for%20Symbolic%20Execution%20Abyaneh%20and%20Kirsch%2C%20n.d."; spellcheck:"false"}
Abyaneh, A.&nbsp;S., & Kirsch, C.&nbsp;M.&nbsp;(n.d.). ASE: A Value Set Decision Procedure for Symbolic Execution, 12.
~ end bibitem

~ begin bibitem {id:"noauthor_acsl_nodate"; cite-authors:"2020b"; cite-authors-long:"2020b"; cite-label:"\&ldquo;ACSL by Example.GitHub,\&rdquo; n.d."; caption:"ACSL by Example.GitHub&nl;2020b, "; data-line:"FormalBib.bib:6534"; searchterm:"ACSL%20by%20Example.GitHub%202020b%2C%20"; spellcheck:"false"}
ACSL by Example.GitHub. (n.d.). Retrieved January 10, 2020, from <https://github.com/fraunhoferfokus/acsl-by-example>{.bib-url}
~ end bibitem

~ begin bibitem {id:"adamek_abstract_2004"; cite-year:"2004"; cite-authors:"Adamek et al."; cite-authors-long:"Adamek, Herrlich, Strecker, and Schubert"; cite-label:"Adamek, Herrlich, Strecker, \& Schubert, 2004"; caption:"Abstract and Concrete Categories - The Joy of Cats&nl;Adamek, Herrlich, Strecker, and Schubert, 2004"; data-line:"FormalBib.bib:6039"; searchterm:"Abstract%20and%20Concrete%20Categories%20%20The%20Joy%20of%20Cats%20Adamek%2C%20Herrlich%2C%20Strecker%2C%20and%20Schubert%2C%202004"; spellcheck:"false"}
Adamek, J., Herrlich, H., Strecker, G.&nbsp;E., & Schubert, C.&nbsp;(2004). Abstract and Concrete Categories - The Joy of Cats, 524. Retrieved from <http://katmat.math.uni-bremen.de/acc/acc.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"adams_common_2015"; cite-year:"2015"; cite-authors:"Adams"; cite-authors-long:"Adams"; cite-label:"Adams, 2015"; caption:"The Common HOL Platform&nl;Adams, 2015"; data-line:"FormalBib.bib:1739"; searchterm:"The%20Common%20HOL%20Platform%20Adams%2C%202015"; spellcheck:"false"}
Adams, M.&nbsp;(2015). The Common HOL Platform. _Electronic Proceedings in Theoretical Computer Science_, _186_, 42–56. https://doi.org/[10.4204/EPTCS.186.6](https://dx.doi.org/10.4204/EPTCS.186.6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"adewale_implementing_nodate"; cite-year:"2019"; cite-authors:"Adewale"; cite-authors-long:"Adewale"; cite-label:"Adewale, n.d."; caption:"Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University&nl;Adewale, 2019"; data-line:"FormalBib.bib:3247"; searchterm:"Implementing%20a%20highperformance%20keyvalue%20store%20using%20a%20trie%20of%20B%2BTrees%20with%20cursors%20%26bar%3B%20Computer%20Science%20Department%20at%20Princeton%20University%20Adewale%2C%202019"; spellcheck:"false"}
Adewale, O.&nbsp;(n.d.). Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University. Retrieved February 1, 2019, from <https://www.cs.princeton.edu/research/techreps/TR-004-18>{.bib-url}
~ end bibitem

~ begin bibitem {id:"agten_secure_2012"; cite-year:"2012"; cite-authors:"Agten et al."; cite-authors-long:"Agten, Strackx, Jacobs, and Piessens"; cite-label:"Agten, Strackx, Jacobs, \& Piessens, 2012"; caption:"Secure Compilation to Modern Processors&nl;Agten, Strackx, Jacobs, and Piessens, 2012"; data-line:"Security.bib:254"; searchterm:"Secure%20Compilation%20to%20Modern%20Processors%20Agten%2C%20Strackx%2C%20Jacobs%2C%20and%20Piessens%2C%202012"; spellcheck:"false"}
Agten, P., Strackx, R., Jacobs, B., & Piessens, F.&nbsp;(2012). Secure Compilation to Modern Processors. In _2012 IEEE 25th Computer Security Foundations Symposium_ (pp. 171–185). Cambridge, MA, USA: IEEE.&nbsp;https://doi.org/[10.1109/CSF.2012.12](https://dx.doi.org/10.1109/CSF.2012.12){.bib-doi}
~ end bibitem

~ begin bibitem {id:"aguirre_step-indexed_2017"; cite-year:"2017"; cite-authors:"Aguirre and Birkedal"; cite-authors-long:"Aguirre and Birkedal"; cite-label:"Aguirre \& Birkedal, 2017"; caption:"Step-Indexed Logical Relations for Nondeterministic and Probabilistic Choice&nl;Aguirre and Birkedal, 2017"; data-line:"FormalBib.bib:10289"; searchterm:"StepIndexed%20Logical%20Relations%20for%20Nondeterministic%20and%20Probabilistic%20Choice%20Aguirre%20and%20Birkedal%2C%202017"; spellcheck:"false"}
Aguirre, A., & Birkedal, L.&nbsp;(2017). Step-Indexed Logical Relations for Nondeterministic and Probabilistic Choice, 27.
~ end bibitem

~ begin bibitem {id:"ahman_recalling_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy"; cite-label:"Ahman, Fournet, et al., 2017"; caption:"Recalling a Witness: Foundations and Applications of Monotonic State&nl;Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy, 2017"; data-line:"FormalBib.bib:2036"; searchterm:"Recalling%20a%20Witness%3A%20Foundations%20and%20Applications%20of%20Monotonic%20State%20Ahman%2C%20Fournet%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Rastogi%2C%20and%20Swamy%2C%202017"; spellcheck:"false"}
Ahman, D., Fournet, C., Hriţcu, C., Maillard, K., Rastogi, A., & Swamy, N.&nbsp;(2017). Recalling a Witness: Foundations and Applications of Monotonic State. _Proc. ACM Program. Lang._, _2_, 65:1–65:30. https://doi.org/[10.1145/3158153](https://dx.doi.org/10.1145/3158153){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahman_dijkstra_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al."; cite-label:"Ahman, Hriţcu, et al., 2017"; caption:"Dijkstra Monads for Free&nl;Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al., 2017"; data-line:"FormalBib.bib:2063"; searchterm:"Dijkstra%20Monads%20for%20Free%20Ahman%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Mart%C3%ADnez%2C%20Plotkin%2C%20Protzenko%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Ahman, D., Hriţcu, C., Maillard, K., Martínez, G., Plotkin, G., Protzenko, J., … Swamy, N.&nbsp;(2017). Dijkstra Monads for Free. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 515–529). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009878](https://dx.doi.org/10.1145/3009837.3009878){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahrendt_deductive_nodate"; cite-year:"2019"; cite-authors:"Ahrendt"; cite-authors-long:"Ahrendt"; cite-label:"Ahrendt, n.d."; caption:"Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project&nl;Ahrendt, 2019"; data-line:"FormalBib.bib:3321"; searchterm:"Deductive%20Software%20Verification%20%E2%80%93%20The%20KeY%20BookFrom%20Theory%20to%20Practice%20%E2%80%93%20The%20KeY%20Project%20Ahrendt%2C%202019"; spellcheck:"false"}
Ahrendt, W.&nbsp;(n.d.). Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project. Retrieved January 31, 2019, from <https://www.key-project.org/thebook2/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_verifying_2007"; cite-year:"2007"; cite-authors:"Ahrendt et al."; cite-authors-long:"Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt"; cite-label:"Ahrendt, Beckert, Hähnle, Rümmer, \& Schmitt, 2007"; caption:"Verifying Object-Oriented Programs with KeY: A Tutorial&nl;Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt, 2007"; data-line:"FormalBib.bib:2813"; searchterm:"Verifying%20ObjectOriented%20Programs%20with%20KeY%3A%20A%20Tutorial%20Ahrendt%2C%20Beckert%2C%20H%C3%A4hnle%2C%20R%C3%BCmmer%2C%20and%20Schmitt%2C%202007"; spellcheck:"false"}
Ahrendt, W., Beckert, B., Hähnle, R., Rümmer, P., & Schmitt, P.&nbsp;H.&nbsp;(2007). Verifying Object-Oriented Programs with KeY: A Tutorial. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (Vol. 4709, pp. 70–101). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-74792-5_4](https://dx.doi.org/10.1007/978-3-540-74792-5_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"alam_tailoring_nodate"; cite-year:"2021"; cite-authors:"Alam"; cite-authors-long:"Alam"; cite-label:"Alam, n.d."; caption:"Tailoring Taint Analysis for Database Applications in the K Framework&nl;Alam, 2021"; data-line:"Security.bib:1379"; searchterm:"Tailoring%20Taint%20Analysis%20for%20Database%20Applications%20in%20the%20K%20Framework%20Alam%2C%202021"; spellcheck:"false"}
Alam, I.&nbsp;(n.d.). Tailoring Taint Analysis for Database Applications in the K Framework. Retrieved December 7, 2021, from <https://www.scitepress.org/Papers/2021/106186/106186.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_learning_2019"; cite-authors:"2019c"; cite-authors-long:"2019c"; cite-label:"\_A Learning Environment for Theorem Proving with the Coq proof assistant\_, 2019"; caption:"A Learning Environment for Theorem Proving with the Coq proof assistant: princeton-vl/CoqGym&nl;2019c, "; data-line:"FormalBib.bib:4918"; searchterm:"A%20Learning%20Environment%20for%20Theorem%20Proving%20with%20the%20Coq%20proof%20assistant%3A%20princetonvl%2FCoqGym%202019c%2C%20"; spellcheck:"false"}
_A Learning Environment for Theorem Proving with the Coq proof assistant: princeton-vl/CoqGym_. (2019). Princeton Vision &amp; Learning Lab. Retrieved from <https://github.com/princeton-vl/CoqGym>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_algebraic_nodate"; cite-authors:"2019c"; cite-authors-long:"2019c"; cite-label:"\&ldquo;Algebraic Specification of Stack Effects for Forth Programs.ResearchGate,\&rdquo; n.d."; caption:"Algebraic Specification of Stack Effects for Forth Programs.ResearchGate&nl;2019c, "; data-line:"FormalBib.bib:4599"; searchterm:"Algebraic%20Specification%20of%20Stack%20Effects%20for%20Forth%20Programs.ResearchGate%202019c%2C%20"; spellcheck:"false"}
Algebraic Specification of Stack Effects for Forth Programs.ResearchGate. (n.d.). Retrieved May 26, 2019, from <https://www.researchgate.net/publication/269399251_Algebraic_Specification_of_Stack_Effects_for_Forth_Programs>{.bib-url}
~ end bibitem

~ begin bibitem {id:"algehed_dynamic_nodate"; cite-year:"2021"; cite-authors:"Algehed et al."; cite-authors-long:"Algehed, Bernardy, and Hritcu"; cite-label:"Algehed, Bernardy, \& Hritcu, n.d."; caption:"Dynamic IFC Theorems for Free!&nl;Algehed, Bernardy, and Hritcu, 2021"; data-line:"Security.bib:13"; searchterm:"Dynamic%20IFC%20Theorems%20for%20Free!%20Algehed%2C%20Bernardy%2C%20and%20Hritcu%2C%202021"; spellcheck:"false"}
Algehed, M., Bernardy, J.-P., & Hritcu, C.&nbsp;(n.d.). Dynamic IFC Theorems for Free! (pp. 1–14). IEEE Computer Society. https://doi.org/[10.1109/CSF51468.2021.00005](https://dx.doi.org/10.1109/CSF51468.2021.00005){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_alloy_nodate"; cite-authors:"2020d"; cite-authors-long:"2020d"; cite-label:"\&ldquo;Alloy - software modeling,\&rdquo; n.d."; caption:"Alloy - software modeling&nl;2020d, "; data-line:"FormalBib.bib:6052"; searchterm:"Alloy%20%20software%20modeling%202020d%2C%20"; spellcheck:"false"}
Alloy - software modeling. (n.d.). Retrieved January 15, 2020, from <http://alloytools.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"almeida_last_2020"; cite-year:"2020"; cite-authors:"Almeida et al."; cite-authors-long:"Almeida, Barbosa, Barthe, Gregoire, Koutsos, Laporte, et al."; cite-label:"Almeida et al., 2020"; caption:"The Last Mile: High-Assurance and High-Speed Cryptographic Implementations&nl;Almeida, Barbosa, Barthe, Gregoire, Koutsos, Laporte, et al., 2020"; data-line:"FormalBib.bib:5464"; searchterm:"The%20Last%20Mile%3A%20HighAssurance%20and%20HighSpeed%20Cryptographic%20Implementations%20Almeida%2C%20Barbosa%2C%20Barthe%2C%20Gregoire%2C%20Koutsos%2C%20Laporte%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Almeida, J.&nbsp;B., Barbosa, M., Barthe, G., Gregoire, B., Koutsos, A., Laporte, V., … Strub, P.-Y.&nbsp;(2020). The Last Mile: High-Assurance and High-Speed Cryptographic Implementations. In _2020 IEEE Symposium on Security and Privacy (SP)_ (pp. 965–982). San Francisco, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP40000.2020.00028](https://dx.doi.org/10.1109/SP40000.2020.00028){.bib-doi}
~ end bibitem

~ begin bibitem {id:"alomari_clone_2021"; cite-year:"2021"; cite-authors:"Alomari and Stephan"; cite-authors-long:"Alomari and Stephan"; cite-label:"Alomari \& Stephan, 2021"; caption:"Clone Detection through srcClone: A Program Slicing Based Approach&nl;Alomari and Stephan, 2021"; data-line:"LanguageTools.bib:924"; searchterm:"Clone%20Detection%20through%20srcClone%3A%20A%20Program%20Slicing%20Based%20Approach%20Alomari%20and%20Stephan%2C%202021"; spellcheck:"false"}
Alomari, H., & Stephan, M.&nbsp;(2021). _Clone Detection through srcClone: A Program Slicing Based Approach_.
~ end bibitem

~ begin bibitem {id:"alpern_defining_1985"; cite-year:"1985"; cite-authors:"Alpern and Schneider"; cite-authors-long:"Alpern and Schneider"; cite-label:"Alpern \& Schneider, 1985"; caption:"Defining liveness&nl;Alpern and Schneider, 1985"; data-line:"Security.bib:480"; searchterm:"Defining%20liveness%20Alpern%20and%20Schneider%2C%201985"; spellcheck:"false"}
Alpern, B., & Schneider, F.&nbsp;B.&nbsp;(1985). Defining liveness. _Information Processing Letters_, _21_(4), 181–185. https://doi.org/[10.1016/0020-0190(85)90056-0](https://dx.doi.org/10.1016/0020-0190%2885%2990056-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"di_pierro_galois_2020"; cite-year:"2020"; cite-authors:"Al-Sibahi et al."; cite-authors-long:"Al-Sibahi, Jensen, Møgelberg, and Wąsowski"; cite-label:"Al-Sibahi, Jensen, Møgelberg, \& Wąsowski, 2020"; caption:"Galois Connections for Recursive Types&nl;Al-Sibahi, Jensen, Møgelberg, and Wąsowski, 2020"; data-line:"FormalBib.bib:10053"; searchterm:"Galois%20Connections%20for%20Recursive%20Types%20AlSibahi%2C%20Jensen%2C%20M%C3%B8gelberg%2C%20and%20W%C4%85sowski%2C%202020"; spellcheck:"false"}
Al-Sibahi, A.&nbsp;S., Jensen, T., Møgelberg, R.&nbsp;E., & Wąsowski, A.&nbsp;(2020). Galois Connections for Recursive Types. In A.&nbsp;Di Pierro, P.&nbsp;Malacaria, & R.&nbsp;Nagarajan (Eds.), _From Lambda Calculus to Cybersecurity Through Program Analysis_ (Vol. 12065, pp. 105–131). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-41103-9_4](https://dx.doi.org/10.1007/978-3-030-41103-9_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"altamirano_formal_nodate"; cite-year:"n.d."; cite-authors:"Altamirano"; cite-authors-long:"Altamirano"; cite-label:"Altamirano, n.d."; caption:"Formal Verification of an Implementation of the Roughtime Server&nl;Altamirano, n.d."; data-line:"Hardware.bib:10"; searchterm:"Formal%20Verification%20of%20an%20Implementation%20of%20the%20Roughtime%20Server%20Altamirano%2C%20n.d."; spellcheck:"false"}
Altamirano, C.&nbsp;(n.d.). Formal Verification of an Implementation of the Roughtime Server, 46.
~ end bibitem

~ begin bibitem {id:"altenkirch_quotient_2018"; cite-year:"2018"; cite-authors:"Altenkirch et al."; cite-authors-long:"Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg"; cite-label:"Altenkirch, Capriotti, Dijkstra, Kraus, \& Forsberg, 2018"; caption:"Quotient inductive-inductive types&nl;Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg, 2018"; data-line:"FormalBib.bib:1471"; searchterm:"Quotient%20inductiveinductive%20types%20Altenkirch%2C%20Capriotti%2C%20Dijkstra%2C%20Kraus%2C%20and%20Forsberg%2C%202018"; spellcheck:"false"}
Altenkirch, T., Capriotti, P., Dijkstra, G., Kraus, N., & Forsberg, F.&nbsp;N.&nbsp;(2018). Quotient inductive-inductive types. _arXiv:1612.02346 \[cs\]_, _10803_, 293–310. https://doi.org/[10.1007/978-3-319-89366-2_16](https://dx.doi.org/10.1007/978-3-319-89366-2_16){.bib-doi}
~ end bibitem

~ begin bibitem {id:"altenkirch_why_nodate"; cite-year:"n.d."; cite-authors:"Altenkirch et al."; cite-authors-long:"Altenkirch, McBride, and McKinna"; cite-label:"Altenkirch, McBride, \& McKinna, n.d."; caption:"Why Dependent Types Matter&nl;Altenkirch, McBride, and McKinna, n.d."; data-line:"FormalBib.bib:4966"; searchterm:"Why%20Dependent%20Types%20Matter%20Altenkirch%2C%20McBride%2C%20and%20McKinna%2C%20n.d."; spellcheck:"false"}
Altenkirch, T., McBride, C., & McKinna, J.&nbsp;(n.d.). Why Dependent Types Matter, 21.
~ end bibitem

~ begin bibitem {id:"ambal_certified_nodate"; cite-year:"n.d."; cite-authors:"Ambal et al."; cite-authors-long:"Ambal, Lenglet, and Schmitt"; cite-label:"Ambal, Lenglet, \& Schmitt, n.d."; caption:"Certified Abstract Machines for Skeletal Semantics&nl;Ambal, Lenglet, and Schmitt, n.d."; data-line:"FormalBib.bib:9660"; searchterm:"Certified%20Abstract%20Machines%20for%20Skeletal%20Semantics%20Ambal%2C%20Lenglet%2C%20and%20Schmitt%2C%20n.d."; spellcheck:"false"}
Ambal, G., Lenglet, S., & Schmitt, A.&nbsp;(n.d.). Certified Abstract Machines for Skeletal Semantics, 14.
~ end bibitem

~ begin bibitem {id:"amin_computing_2016"; cite-year:"2016"; cite-authors:"Amin et al."; cite-authors-long:"Amin, Leino, and Rompf"; cite-label:"Amin, Leino, \& Rompf, 2016"; caption:"Computing with an SMT Solver&nl;Amin, Leino, and Rompf, 2016"; data-line:"FormalBib.bib:2640"; searchterm:"Computing%20with%20an%20SMT%20Solver%20Amin%2C%20Leino%2C%20and%20Rompf%2C%202016"; spellcheck:"false"}
Amin, N., Leino, R., & Rompf, T.&nbsp;(2016). Computing with an SMT Solver, _8570_. Retrieved from <https://www.microsoft.com/en-us/research/publication/computing-smt-solver/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ammarguellat_control-flow_1992"; cite-year:"1992"; cite-authors:"Ammarguellat"; cite-authors-long:"Ammarguellat"; cite-label:"Ammarguellat, 1992"; caption:"A control-flow normalization algorithm and its complexity&nl;Ammarguellat, 1992"; data-line:"FormalBib.bib:4246"; searchterm:"A%20controlflow%20normalization%20algorithm%20and%20its%20complexity%20Ammarguellat%2C%201992"; spellcheck:"false"}
Ammarguellat, Z.&nbsp;(1992). A control-flow normalization algorithm and its complexity. _IEEE Transactions on Software Engineering_, _18_(3), 237–251. https://doi.org/[10.1109/32.126773](https://dx.doi.org/10.1109/32.126773){.bib-doi}
~ end bibitem

~ begin bibitem {id:"amorim_verified_2013"; cite-year:"2013"; cite-authors:"Amorim et al."; cite-authors-long:"Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al."; cite-label:"Amorim et al., 2013"; caption:"A Verified Information-Flow Architecture (Long version)&nl;Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al., 2013"; data-line:"FormalBib.bib:3407"; searchterm:"A%20Verified%20InformationFlow%20Architecture%20Long%20version%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hritcu%2C%20Pichardie%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Amorim, A.&nbsp;A.&nbsp;de, Collins, N., DeHon, A., Demange, D., Hritcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2013). _A Verified Information-Flow Architecture (Long version)_.
~ end bibitem

~ begin bibitem {id:"anand_towards_nodate"; cite-year:"2019"; cite-authors:"Anand et al."; cite-authors-long:"Anand, Boulier, Cohen, Sozeau, and Tabareau"; cite-label:"Anand, Boulier, Cohen, Sozeau, \& Tabareau, n.d."; caption:"Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink&nl;Anand, Boulier, Cohen, Sozeau, and Tabareau, 2019"; data-line:"FormalBib.bib:3227"; searchterm:"Towards%20Certified%20MetaProgramming%20with%20Typed%20TemplateCoq%20%26bar%3B%20SpringerLink%20Anand%2C%20Boulier%2C%20Cohen%2C%20Sozeau%2C%20and%20Tabareau%2C%202019"; spellcheck:"false"}
Anand, A., Boulier, S., Cohen, C., Sozeau, M., & Tabareau, N.&nbsp;(n.d.). Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink. Retrieved February 1, 2019, from <https://link.springer.com/chapter/10.1007%2F978-3-319-94821-8_2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"urban_roscoq:_2015"; cite-year:"2015"; cite-authors:"Anand and Knepper"; cite-authors-long:"Anand and Knepper"; cite-label:"Anand \& Knepper, 2015"; caption:"ROSCoq: Robots Powered by Constructive Reals&nl;Anand and Knepper, 2015"; data-line:"FormalBib.bib:2936"; searchterm:"ROSCoq%3A%20Robots%20Powered%20by%20Constructive%20Reals%20Anand%20and%20Knepper%2C%202015"; spellcheck:"false"}
Anand, A., & Knepper, R.&nbsp;(2015). ROSCoq: Robots Powered by Constructive Reals. In C.&nbsp;Urban & X.&nbsp;Zhang (Eds.), _Interactive Theorem Proving_ (Vol. 9236, pp. 34–50). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-22102-1_3](https://dx.doi.org/10.1007/978-3-319-22102-1_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"anand_typed_nodate"; cite-year:"n.d."; cite-authors:"Anand et al."; cite-authors-long:"Anand, Tabareau, and Sozeau"; cite-label:"Anand, Tabareau, \& Sozeau, n.d."; caption:"Typed Template Coq&nl;Anand, Tabareau, and Sozeau, n.d."; data-line:"FormalBib.bib:2520"; searchterm:"Typed%20Template%20Coq%20Anand%2C%20Tabareau%2C%20and%20Sozeau%2C%20n.d."; spellcheck:"false"}
Anand, A., Tabareau, S.&nbsp;B.&nbsp;N., & Sozeau, M.&nbsp;(n.d.). Typed Template Coq, 2.
~ end bibitem

~ begin bibitem {id:"andersen_program_1994"; cite-year:"1994"; cite-authors:"Andersen"; cite-authors-long:"Andersen"; cite-label:"Andersen, 1994"; caption:"Program Analysis and Specialization for the C Programming Language&nl;Andersen, 1994"; data-line:"LanguageTools.bib:625"; searchterm:"Program%20Analysis%20and%20Specialization%20for%20the%20C%20Programming%20Language%20Andersen%2C%201994"; spellcheck:"false"}
Andersen, L.&nbsp;O.&nbsp;(1994). _Program Analysis and Specialization for the C Programming Language_ (phdthesis). University of Copenhagen.
~ end bibitem

~ begin bibitem {id:"anderson_netkat_2014"; cite-year:"2014"; cite-authors:"C.&nbsp;J.&nbsp;Anderson et al."; cite-authors-long:"C.&nbsp;J.&nbsp;Anderson, Foster, Guha, Jeannin, Kozen, Schlesinger, and Walker"; cite-label:"C. J. Anderson et al., 2014"; caption:"NetKAT: semantic foundations for networks&nl;C. J. Anderson, Foster, Guha, Jeannin, Kozen, Schlesinger, and Walker, 2014"; data-line:"Networking.bib:437"; searchterm:"NetKAT%3A%20semantic%20foundations%20for%20networks%20C.%20J.%20Anderson%2C%20Foster%2C%20Guha%2C%20Jeannin%2C%20Kozen%2C%20Schlesinger%2C%20and%20Walker%2C%202014"; spellcheck:"false"}
Anderson, C.&nbsp;J., Foster, N., Guha, A., Jeannin, J.-B., Kozen, D., Schlesinger, C., & Walker, D.&nbsp;(2014). NetKAT: semantic foundations for networks. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 113–126). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2535838.2535862](https://dx.doi.org/10.1145/2535838.2535862){.bib-doi}
~ end bibitem

~ begin bibitem {id:"anderson_comparison_2020"; cite-year:"2020"; cite-authors:"S.&nbsp;Anderson et al."; cite-authors-long:"S.&nbsp;Anderson, Hood, and Jones"; cite-label:"S. Anderson, Hood, \& Jones, 2020"; caption:"A Comparison of Fuzzing Dynamic Analysis and Static Code Analysis&nl;S. Anderson, Hood, and Jones, 2020"; data-line:"Security.bib:598"; searchterm:"A%20Comparison%20of%20Fuzzing%20Dynamic%20Analysis%20and%20Static%20Code%20Analysis%20S.%20Anderson%2C%20Hood%2C%20and%20Jones%2C%202020"; spellcheck:"false"}
Anderson, S., Hood, J., & Jones, E.&nbsp;(2020). A Comparison of Fuzzing Dynamic Analysis and Static Code Analysis, 13.
~ end bibitem

~ begin bibitem {id:"andrew_oracle_2008"; cite-year:"2008"; cite-authors:"Andrew"; cite-authors-long:"Andrew"; cite-label:"Andrew, 2008"; caption:"Oracle Semantics Aquinas Hobor&nl;Andrew, 2008"; data-line:"FormalBib.bib:3399"; searchterm:"Oracle%20Semantics%20Aquinas%20Hobor%20Andrew%2C%202008"; spellcheck:"false"}
Andrew, A.&nbsp;(2008). _Oracle Semantics Aquinas Hobor_.
~ end bibitem

~ begin bibitem {id:"andronick_formal_2018"; cite-year:"2018"; cite-authors:"Andronick et al."; cite-authors-long:"Andronick, Klein, and Lewis"; cite-label:"Andronick, Klein, \& Lewis, 2018"; caption:"Formal Model of a Multi-Core Kernel-based System&nl;Andronick, Klein, and Lewis, 2018"; data-line:"FormalBib.bib:5750"; searchterm:"Formal%20Model%20of%20a%20MultiCore%20Kernelbased%20System%20Andronick%2C%20Klein%2C%20and%20Lewis%2C%202018"; spellcheck:"false"}
Andronick, J., Klein, G., & Lewis, C.&nbsp;(2018). Formal Model of a Multi-Core Kernel-based System, 33.
~ end bibitem

~ begin bibitem {id:"annenkov_extracting_2021"; cite-year:"2021"; cite-authors:"Annenkov et al."; cite-authors-long:"Annenkov, Milo, Nielsen, and Spitters"; cite-label:"Annenkov, Milo, Nielsen, \& Spitters, 2021"; caption:"Extracting smart contracts tested and verified in Coq&nl;Annenkov, Milo, Nielsen, and Spitters, 2021"; data-line:"FormalBib.bib:665"; searchterm:"Extracting%20smart%20contracts%20tested%20and%20verified%20in%20Coq%20Annenkov%2C%20Milo%2C%20Nielsen%2C%20and%20Spitters%2C%202021"; spellcheck:"false"}
Annenkov, D., Milo, M., Nielsen, J.&nbsp;B., & Spitters, B.&nbsp;(2021). Extracting smart contracts tested and verified in Coq. In _Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 105–121). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3437992.3439934](https://dx.doi.org/10.1145/3437992.3439934){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_efficient_2021"; cite-year:"2021"; cite-authors:"A.&nbsp;Appel and Leroy"; cite-authors-long:"A.&nbsp;Appel and Leroy"; cite-label:"A. Appel \& Leroy, 2021"; caption:"Efficient Extensional Binary Tries&nl;A. Appel and Leroy, 2021"; data-line:"FormalBib.bib:8904"; searchterm:"Efficient%20Extensional%20Binary%20Tries%20A.%20Appel%20and%20Leroy%2C%202021"; spellcheck:"false"}
Appel, A., & Leroy, X.&nbsp;(2021). Efficient Extensional Binary Tries. _arXiv:2110.05063 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.05063](http://arxiv.org/abs/2110.05063){.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_andrew_w._position_2017"; cite-year:"2017"; cite-authors:"Appel Andrew W.&nbsp;et al."; cite-authors-long:"Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve"; cite-label:"Appel Andrew W. et al., 2017"; caption:"Position paper: the science of deep specification&nl;Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve, 2017"; data-line:"FormalBib.bib:2296"; searchterm:"Position%20paper%3A%20the%20science%20of%20deep%20specification%20Appel%20Andrew%20W.%2C%20Beringer%20Lennart%2C%20Chlipala%20Adam%2C%20Pierce%20Benjamin%20C.%2C%20Shao%20Zhong%2C%20Weirich%20Stephanie%2C%20and%20Zdancewic%20Steve%2C%202017"; spellcheck:"false"}
Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, & Zdancewic Steve. (2017). Position paper: the science of deep specification. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20160331. https://doi.org/[10.1098/rsta.2016.0331](https://dx.doi.org/10.1098/rsta.2016.0331){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jouannaud_verismall:_2011"; cite-year:"2011"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2011"; caption:"VeriSmall: Verified Smallfoot Shape Analysis&nl;A. W. Appel, 2011"; data-line:"FormalBib.bib:1335"; searchterm:"VeriSmall%3A%20Verified%20Smallfoot%20Shape%20Analysis%20A.%20W.%20Appel%2C%202011"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2011). VeriSmall: Verified Smallfoot Shape Analysis. In J.-P.&nbsp;Jouannaud & Z.&nbsp;Shao (Eds.), _Certified Programs and Proofs_ (Vol. 7086, pp. 231–246). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-25379-9_18](https://dx.doi.org/10.1007/978-3-642-25379-9_18){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verified_2012"; cite-year:"2012"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2012"; caption:"Verified Software Toolchain&nl;A. W. Appel, 2012"; data-line:"FormalBib.bib:1300"; searchterm:"Verified%20Software%20Toolchain%20A.%20W.%20Appel%2C%202012"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2012). Verified Software Toolchain. In _Proceedings of the 4th International Conference on NASA Formal Methods_ (pp. 2–2). Berlin, Heidelberg: Springer-Verlag. https://doi.org/[10.1007/978-3-642-28891-3_2](https://dx.doi.org/10.1007/978-3-642-28891-3_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verification_2015"; cite-year:"2015"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2015"; caption:"Verification of a Cryptographic Primitive: SHA-256&nl;A. W. Appel, 2015"; data-line:"FormalBib.bib:1353"; searchterm:"Verification%20of%20a%20Cryptographic%20Primitive%3A%20SHA256%20A.%20W.%20Appel%2C%202015"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2015). Verification of a Cryptographic Primitive: SHA-256. _ACM Trans. Program. Lang. Syst._, _37_(2), 7:1–7:31. https://doi.org/[10.1145/2701415](https://dx.doi.org/10.1145/2701415){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_deepspecdb_2019"; cite-year:"2019"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2019"; caption:"DeepSpecDB - github&nl;A. W. Appel, 2019"; data-line:"FormalBib.bib:3236"; searchterm:"DeepSpecDB%20%20github%20A.%20W.%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2019). _DeepSpecDB - github_. PrincetonUniversity. Retrieved from <https://github.com/PrincetonUniversity/DeepSpecDB>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_c-language_2020"; cite-year:"2020"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2020"; caption:"C-language ﬂoating-point proofs layered with VST and Flocq&nl;A. W. Appel, 2020"; data-line:"FormalBib.bib:9957"; searchterm:"Clanguage%20%EF%AC%82oatingpoint%20proofs%20layered%20with%20VST%20and%20Flocq%20A.%20W.%20Appel%2C%202020"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2020). C-language ﬂoating-point proofs layered with VST and Flocq, 16.
~ end bibitem

~ begin bibitem {id:"appel_coqs_2022"; cite-year:"2022"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, 2022"; caption:"Coq’s vibrant ecosystem for verification engineering (invited talk)&nl;A. W. Appel, 2022"; data-line:"FormalBib.bib:9668"; searchterm:"Coq%E2%80%99s%20vibrant%20ecosystem%20for%20verification%20engineering%20invited%20talk%20A.%20W.%20Appel%2C%202022"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2022). Coq’s vibrant ecosystem for verification engineering (invited talk). In _Proceedings of the 11th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 2–11). Philadelphia PA USA: ACM.&nbsp;https://doi.org/[10.1145/3497775.3503951](https://dx.doi.org/10.1145/3497775.3503951){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_certicoq:_nodate"; cite-year:"2019"; cite-authors:"A.&nbsp;W.&nbsp;Appel"; cite-authors-long:"A.&nbsp;W.&nbsp;Appel"; cite-label:"A. W. Appel, n.d."; caption:"CertiCoq: A verified compiler for Coq - POPL 2017&nl;A. W. Appel, 2019"; data-line:"FormalBib.bib:3257"; searchterm:"CertiCoq%3A%20A%20verified%20compiler%20for%20Coq%20%20POPL%202017%20A.%20W.%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(n.d.). CertiCoq: A verified compiler for Coq - POPL 2017. Retrieved February 1, 2019, from <https://popl17.sigplan.org/event/main-certicoq-a-verified-compiler-for-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_program_2014"; cite-year:"2014b"; cite-authors:"A.&nbsp;W.&nbsp;Appel et al."; cite-authors-long:"A.&nbsp;W.&nbsp;Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al."; cite-label:"A. W. Appel et al., 2014a"; caption:"Program Logics for Certified Compilers&nl;A. W. Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al., 2014b"; data-line:"FormalBib.bib:6020"; searchterm:"Program%20Logics%20for%20Certified%20Compilers%20A.%20W.%20Appel%2C%20Dockins%2C%20Hobor%2C%20Beringer%2C%20Dodds%2C%20Stewart%2C%20et%20al.%2C%202014b"; spellcheck:"false"}
Appel, A.&nbsp;W., Dockins, R., Hobor, A., Beringer, L., Dodds, J., Stewart, G., … Leroy, X.&nbsp;(2014a). _Program Logics for Certified Compilers_ (1 edition). Cambridge University Press.
~ end bibitem

~ begin bibitem {id:"appel_verifiabble_2014"; cite-year:"2014a"; cite-authors:"A.&nbsp;W.&nbsp;Appel et al."; cite-authors-long:"A.&nbsp;W.&nbsp;Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al."; cite-label:"A. W. Appel et al., 2014b"; caption:"Verifiabble C, Version 2.2&nl;A. W. Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al., 2014a"; data-line:"FormalBib.bib:1371"; searchterm:"Verifiabble%20C%2C%20Version%202.2%20A.%20W.%20Appel%2C%20Dockins%2C%20Hobor%2C%20Beringer%2C%20Dodds%2C%20Stewart%2C%20et%20al.%2C%202014a"; spellcheck:"false"}
Appel, A.&nbsp;W., Dockins, R., Hobor, A., Beringer, L., Dodds, J., Stewart, G., … Leroy, X.&nbsp;(2014b). _Verifiabble C, Version 2.2_. Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9781107256552](https://dx.doi.org/10.1017/CBO9781107256552){.bib-doi}
~ end bibitem

~ begin bibitem {id:"apt_assessing_2021"; cite-year:"2021"; cite-authors:"Apt and Olderog"; cite-authors-long:"Apt and Olderog"; cite-label:"Apt \& Olderog, 2021"; caption:"Assessing the Success and Impact of Hoare's Logic&nl;Apt and Olderog, 2021"; data-line:"FormalBib.bib:8967"; searchterm:"Assessing%20the%20Success%20and%20Impact%20of%20Hoare's%20Logic%20Apt%20and%20Olderog%2C%202021"; spellcheck:"false"}
Apt, K.&nbsp;R., & Olderog, E.-R.&nbsp;(2021). Assessing the Success and Impact of Hoare’s Logic. In _Theories of Programming: The Life and Works of Tony Hoare_ (1st ed., Vol. 39, pp. 41–76). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3477355.3477359](https://dx.doi.org/10.1145/3477355.3477359){.bib-doi}
~ end bibitem

~ begin bibitem {id:"arasu_fastver_nodate"; cite-year:"n.d."; cite-authors:"Arasu et al."; cite-authors-long:"Arasu, Chandramouli, Gehrke, Ghosh, Kossmann, Protzenko, et al."; cite-label:"Arasu et al., n.d."; caption:"FastVer: Making Data Integrity a Commodity&nl;Arasu, Chandramouli, Gehrke, Ghosh, Kossmann, Protzenko, et al., n.d."; data-line:"FormalBib.bib:7967"; searchterm:"FastVer%3A%20Making%20Data%20Integrity%20a%20Commodity%20Arasu%2C%20Chandramouli%2C%20Gehrke%2C%20Ghosh%2C%20Kossmann%2C%20Protzenko%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Arasu, A., Chandramouli, B., Gehrke, J., Ghosh, E., Kossmann, D., Protzenko, J., … Swamy, N.&nbsp;(n.d.). FastVer: Making Data Integrity a Commodity, 13.
~ end bibitem

~ begin bibitem {id:"arias_jscoq:_2017"; cite-year:"2017"; cite-authors:"Arias et al."; cite-authors-long:"Arias, Pin, and Jouvelot"; cite-label:"Arias, Pin, \& Jouvelot, 2017"; caption:"jsCoq: Towards Hybrid Theorem Proving Interfaces&nl;Arias, Pin, and Jouvelot, 2017"; data-line:"FormalBib.bib:3827"; searchterm:"jsCoq%3A%20Towards%20Hybrid%20Theorem%20Proving%20Interfaces%20Arias%2C%20Pin%2C%20and%20Jouvelot%2C%202017"; spellcheck:"false"}
Arias, E.&nbsp;J.&nbsp;G., Pin, B., & Jouvelot, P.&nbsp;(2017). jsCoq: Towards Hybrid Theorem Proving Interfaces. _Electronic Proceedings in Theoretical Computer Science_, _239_, 15–27. https://doi.org/[10.4204/EPTCS.239.2](https://dx.doi.org/10.4204/EPTCS.239.2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"armstrong_isa_2019"; cite-year:"2019"; cite-authors:"Armstrong et al."; cite-authors-long:"Armstrong, Bauereiss, Campbell, Reid, Gray, Norton, et al."; cite-label:"Armstrong et al., 2019"; caption:"ISA Semantics for ARMv8-a, RISC-v, and CHERI-MIPS&nl;Armstrong, Bauereiss, Campbell, Reid, Gray, Norton, et al., 2019"; data-line:"FormalBib.bib:5110"; searchterm:"ISA%20Semantics%20for%20ARMv8a%2C%20RISCv%2C%20and%20CHERIMIPS%20Armstrong%2C%20Bauereiss%2C%20Campbell%2C%20Reid%2C%20Gray%2C%20Norton%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Armstrong, A., Bauereiss, T., Campbell, B., Reid, A., Gray, K.&nbsp;E., Norton, R.&nbsp;M., … Sewell, P.&nbsp;(2019). ISA Semantics for ARMv8-a, RISC-v, and CHERI-MIPS.&nbsp;_Proc. ACM Program. Lang._, _3_, 71:1–71:31. https://doi.org/[10.1145/3290384](https://dx.doi.org/10.1145/3290384){.bib-doi}
~ end bibitem

~ begin bibitem {id:"arusoaie_proof-carrying_2021"; cite-year:"2021"; cite-authors:"Arusoaie and Lucanu"; cite-authors-long:"Arusoaie and Lucanu"; cite-label:"Arusoaie \& Lucanu, 2021"; caption:"Proof-Carrying Parameters in Certified Symbolic Execution: The Case Study of Antiunification&nl;Arusoaie and Lucanu, 2021"; data-line:"LanguageTools.bib:800"; searchterm:"ProofCarrying%20Parameters%20in%20Certified%20Symbolic%20Execution%3A%20The%20Case%20Study%20of%20Antiunification%20Arusoaie%20and%20Lucanu%2C%202021"; spellcheck:"false"}
Arusoaie, A., & Lucanu, D.&nbsp;(2021). Proof-Carrying Parameters in Certified Symbolic Execution: The Case Study of Antiunification. _arXiv:2110.11700 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.11700](http://arxiv.org/abs/2110.11700){.bib-url}
~ end bibitem

~ begin bibitem {id:"arya_blockchain_2021"; cite-year:"2021"; cite-authors:"Arya et al."; cite-authors-long:"Arya, Kumar, Singh, Mishra, and Chong"; cite-label:"Arya, Kumar, Singh, Mishra, \& Chong, 2021"; caption:"BLOCKCHAIN: BASICS, APPLICATIONS, CHALLENGES AND OPPORTUNITIES&nl;Arya, Kumar, Singh, Mishra, and Chong, 2021"; data-line:"FormalBib.bib:5311"; searchterm:"BLOCKCHAIN%3A%20BASICS%2C%20APPLICATIONS%2C%20CHALLENGES%20AND%20OPPORTUNITIES%20Arya%2C%20Kumar%2C%20Singh%2C%20Mishra%2C%20and%20Chong%2C%202021"; spellcheck:"false"}
Arya, J., Kumar, A., Singh, A., Mishra, T., & Chong, P.&nbsp;(2021). _BLOCKCHAIN: BASICS, APPLICATIONS, CHALLENGES AND OPPORTUNITIES_. https://doi.org/[10.13140/RG.2.2.33899.16160](https://dx.doi.org/10.13140/RG.2.2.33899.16160){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jajodia_termination-insensitive_2008"; cite-year:"2008"; cite-authors:"Askarov et al."; cite-authors-long:"Askarov, Hunt, Sabelfeld, and Sands"; cite-label:"Askarov, Hunt, Sabelfeld, \& Sands, 2008"; caption:"Termination-Insensitive Noninterference Leaks More Than Just a Bit&nl;Askarov, Hunt, Sabelfeld, and Sands, 2008"; data-line:"FormalBib.bib:4701"; searchterm:"TerminationInsensitive%20Noninterference%20Leaks%20More%20Than%20Just%20a%20Bit%20Askarov%2C%20Hunt%2C%20Sabelfeld%2C%20and%20Sands%2C%202008"; spellcheck:"false"}
Askarov, A., Hunt, S., Sabelfeld, A., & Sands, D.&nbsp;(2008). Termination-Insensitive Noninterference Leaks More Than Just a Bit. In S.&nbsp;Jajodia & J.&nbsp;Lopez (Eds.), _Computer Security - ESORICS 2008_ (Vol. 5283, pp. 333–348). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-88313-5_22](https://dx.doi.org/10.1007/978-3-540-88313-5_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"assaf_dedukti_nodate"; cite-year:"n.d."; cite-authors:"Assaf et al."; cite-authors-long:"Assaf, Burel, Cauderlier, Dowek, Dubois, Gilbert, et al."; cite-label:"Assaf et al., n.d."; caption:"Dedukti: a Logical Framework based on the λΠ-Calculus Modulo Theory&nl;Assaf, Burel, Cauderlier, Dowek, Dubois, Gilbert, et al., n.d."; data-line:"FormalBib.bib:6267"; searchterm:"Dedukti%3A%20a%20Logical%20Framework%20based%20on%20the%20%CE%BB%CE%A0Calculus%20Modulo%20Theory%20Assaf%2C%20Burel%2C%20Cauderlier%2C%20Dowek%2C%20Dubois%2C%20Gilbert%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Assaf, A., Burel, G., Cauderlier, R., Dowek, G., Dubois, C., Gilbert, F., … Saillard, R.&nbsp;(n.d.). Dedukti: a Logical Framework based on the λΠ-Calculus Modulo Theory, 36.
~ end bibitem

~ begin bibitem {id:"astrauskas_leveraging_2019"; cite-year:"2019"; cite-authors:"Astrauskas et al."; cite-authors-long:"Astrauskas, Müller, Poli, and Summers"; cite-label:"Astrauskas, Müller, Poli, \& Summers, 2019"; caption:"Leveraging rust types for modular specification and verification&nl;Astrauskas, Müller, Poli, and Summers, 2019"; data-line:"FormalBib.bib:5715"; searchterm:"Leveraging%20rust%20types%20for%20modular%20specification%20and%20verification%20Astrauskas%2C%20M%C3%BCller%2C%20Poli%2C%20and%20Summers%2C%202019"; spellcheck:"false"}
Astrauskas, V., Müller, P., Poli, F., & Summers, A.&nbsp;J.&nbsp;(2019). Leveraging rust types for modular specification and verification. _Proceedings of the ACM on Programming Languages_, _3_, 147:1–147:30. https://doi.org/[10.1145/3360573](https://dx.doi.org/10.1145/3360573){.bib-doi}
~ end bibitem

~ begin bibitem {id:"athaiya_data_2021"; cite-year:"2021"; cite-authors:"Athaiya et al."; cite-authors-long:"Athaiya, Komondoor, and Kumar"; cite-label:"Athaiya, Komondoor, \& Kumar, 2021"; caption:"Data Flow Analysis of Asynchronous Systems using Infinite Abstract Domains&nl;Athaiya, Komondoor, and Kumar, 2021"; data-line:"LanguageTools.bib:410"; searchterm:"Data%20Flow%20Analysis%20of%20Asynchronous%20Systems%20using%20Infinite%20Abstract%20Domains%20Athaiya%2C%20Komondoor%2C%20and%20Kumar%2C%202021"; spellcheck:"false"}
Athaiya, S., Komondoor, R., & Kumar, K.&nbsp;N.&nbsp;(2021). Data Flow Analysis of Asynchronous Systems using Infinite Abstract Domains. _Programming Languages and Systems_, _12648_, 30–58. https://doi.org/[10.1007/978-3-030-72019-3_2](https://dx.doi.org/10.1007/978-3-030-72019-3_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"aydemir_engineering_nodate"; cite-year:"n.d."; cite-authors:"Aydemir et al."; cite-authors-long:"Aydemir, Chargueraud, Pierce, Pollack, and Weirich"; cite-label:"Aydemir, Chargueraud, Pierce, Pollack, \& Weirich, n.d."; caption:"Engineering Formal Metatheory&nl;Aydemir, Chargueraud, Pierce, Pollack, and Weirich, n.d."; data-line:"FormalBib.bib:6247"; searchterm:"Engineering%20Formal%20Metatheory%20Aydemir%2C%20Chargueraud%2C%20Pierce%2C%20Pollack%2C%20and%20Weirich%2C%20n.d."; spellcheck:"false"}
Aydemir, B., Chargueraud, A., Pierce, B.&nbsp;C., Pollack, R., & Weirich, S.&nbsp;(n.d.). Engineering Formal Metatheory, 13.
~ end bibitem

~ begin bibitem {id:"azevedo_de_amorim_verified_2014"; cite-year:"2014"; cite-authors:"Azevedo de Amorim et al."; cite-authors-long:"Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al."; cite-label:"Azevedo de Amorim et al., 2014"; caption:"A Verified Information-flow Architecture&nl;Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al., 2014"; data-line:"FormalBib.bib:3415"; searchterm:"A%20Verified%20Informationflow%20Architecture%20Azevedo%20de%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hri%C5%A3cu%2C%20Pichardie%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Azevedo de Amorim, A., Collins, N., DeHon, A., Demange, D., Hriţcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2014). A Verified Information-flow Architecture. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 165–178). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535839](https://dx.doi.org/10.1145/2535838.2535839){.bib-doi}
~ end bibitem

~ begin bibitem {id:"baccelli_riot_2018"; cite-year:"2018"; cite-authors:"Baccelli et al."; cite-authors-long:"Baccelli, Gundogan, Hahm, Kietzmann, Lenders, Petersen, et al."; cite-label:"Baccelli et al., 2018"; caption:"RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT&nl;Baccelli, Gundogan, Hahm, Kietzmann, Lenders, Petersen, et al., 2018"; data-line:"OperatingSystems.bib:52"; searchterm:"RIOT%3A%20An%20Open%20Source%20Operating%20System%20for%20LowEnd%20Embedded%20Devices%20in%20the%20IoT%20Baccelli%2C%20Gundogan%2C%20Hahm%2C%20Kietzmann%2C%20Lenders%2C%20Petersen%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Baccelli, E., Gundogan, C., Hahm, O., Kietzmann, P., Lenders, M.&nbsp;S., Petersen, H., … Wahlisch, M.&nbsp;(2018). RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT.&nbsp;_IEEE Internet of Things Journal_, _5_(6), 4428–4440. https://doi.org/[10.1109/JIOT.2018.2815038](https://dx.doi.org/10.1109/JIOT.2018.2815038){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bacelar_almeida_formal_2021"; cite-year:"2021"; cite-authors:"Bacelar Almeida et al."; cite-authors-long:"Bacelar Almeida, Barbosa, Barthe, Pacheco, Pereira, and Portela"; cite-label:"Bacelar Almeida et al., 2021"; caption:"A Formal Treatment of the Role of Verified Compilers in Secure Computation&nl;Bacelar Almeida, Barbosa, Barthe, Pacheco, Pereira, and Portela, 2021"; data-line:"Security.bib:1412"; searchterm:"A%20Formal%20Treatment%20of%20the%20Role%20of%20Verified%20Compilers%20in%20Secure%20Computation%20Bacelar%20Almeida%2C%20Barbosa%2C%20Barthe%2C%20Pacheco%2C%20Pereira%2C%20and%20Portela%2C%202021"; spellcheck:"false"}
Bacelar Almeida, J.&nbsp;C., Barbosa, M., Barthe, G., Pacheco, H., Pereira, V., & Portela, B.&nbsp;(2021). A Formal Treatment of the Role of Verified Compilers in Secure Computation. _Journal of Logical and Algebraic Methods in Programming_, 100736. https://doi.org/[10.1016/j.jlamp.2021.100736](https://dx.doi.org/10.1016/j.jlamp.2021.100736){.bib-doi}
~ end bibitem

~ begin bibitem {id:"backes_one-click_2019"; cite-year:"2019"; cite-authors:"Backes et al."; cite-authors-long:"Backes, Varming, Whalen, Bolignano, Cook, Gacek, et al."; cite-label:"Backes et al., 2019"; caption:"One-Click Formal Methods&nl;Backes, Varming, Whalen, Bolignano, Cook, Gacek, et al., 2019"; data-line:"Networking.bib:764"; searchterm:"OneClick%20Formal%20Methods%20Backes%2C%20Varming%2C%20Whalen%2C%20Bolignano%2C%20Cook%2C%20Gacek%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Backes, J., Varming, C., Whalen, M., Bolignano, P., Cook, B., Gacek, A., … Tanash, R.&nbsp;(2019). One-Click Formal Methods. _IEEE Software_, _36_(6), 61–65. https://doi.org/[10.1109/MS.2019.2930609](https://dx.doi.org/10.1109/MS.2019.2930609){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bae_rudra_2021"; cite-year:"2021"; cite-authors:"Bae et al."; cite-authors-long:"Bae, Kim, Askar, Lim, and Kim"; cite-label:"Bae, Kim, Askar, Lim, \& Kim, 2021"; caption:"Rudra: Finding Memory Safety Bugs in Rust at the Ecosystem Scale&nl;Bae, Kim, Askar, Lim, and Kim, 2021"; data-line:"LanguageTools.bib:815"; searchterm:"Rudra%3A%20Finding%20Memory%20Safety%20Bugs%20in%20Rust%20at%20the%20Ecosystem%20Scale%20Bae%2C%20Kim%2C%20Askar%2C%20Lim%2C%20and%20Kim%2C%202021"; spellcheck:"false"}
Bae, Y., Kim, Y., Askar, A., Lim, J., & Kim, T.&nbsp;(2021). Rudra: Finding Memory Safety Bugs in Rust at the Ecosystem Scale. In _Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles_ (pp. 84–99). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3477132.3483570](https://dx.doi.org/10.1145/3477132.3483570){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bahr_monadic_nodate"; cite-year:"n.d."; cite-authors:"Bahr and Hutton"; cite-authors-long:"Bahr and Hutton"; cite-label:"Bahr \& Hutton, n.d."; caption:"Monadic Compiler Calculation&nl;Bahr and Hutton, n.d."; data-line:"FormalBib.bib:7644"; searchterm:"Monadic%20Compiler%20Calculation%20Bahr%20and%20Hutton%2C%20n.d."; spellcheck:"false"}
Bahr, P., & Hutton, G.&nbsp;(n.d.). Monadic Compiler Calculation, 27.
~ end bibitem

~ begin bibitem {id:"bakhirkin_combining_2017"; cite-year:"2017"; cite-authors:"Bakhirkin and Monniaux"; cite-authors-long:"Bakhirkin and Monniaux"; cite-label:"Bakhirkin \& Monniaux, 2017"; caption:"Combining Forward and Backward Abstract Interpretation of Horn Clauses&nl;Bakhirkin and Monniaux, 2017"; data-line:"FormalBib.bib:7308"; searchterm:"Combining%20Forward%20and%20Backward%20Abstract%20Interpretation%20of%20Horn%20Clauses%20Bakhirkin%20and%20Monniaux%2C%202017"; spellcheck:"false"}
Bakhirkin, A., & Monniaux, D.&nbsp;(2017). Combining Forward and Backward Abstract Interpretation of Horn Clauses. In F.&nbsp;Ranzato (Ed.), _24th International Static Analysis Symposium (SAS)_. New York City, United States: Springer. Retrieved from <https://hal.archives-ouvertes.fr/hal-01551447>{.bib-url}
~ end bibitem

~ begin bibitem {id:"balabonski_strong_nodate"; cite-year:"n.d."; cite-authors:"Balabonski et al."; cite-authors-long:"Balabonski, Lanco, and Melquiond"; cite-label:"Balabonski, Lanco, \& Melquiond, n.d."; caption:"A strong call-by-need calculus&nl;Balabonski, Lanco, and Melquiond, n.d."; data-line:"FormalBib.bib:8373"; searchterm:"A%20strong%20callbyneed%20calculus%20Balabonski%2C%20Lanco%2C%20and%20Melquiond%2C%20n.d."; spellcheck:"false"}
Balabonski, T., Lanco, A., & Melquiond, G.&nbsp;(n.d.). A strong call-by-need calculus, 22.
~ end bibitem

~ begin bibitem {id:"balajorshari_better_nodate"; cite-year:"n.d."; cite-authors:"Balajorshari and McCamant"; cite-authors-long:"Balajorshari and McCamant"; cite-label:"Balajorshari \& McCamant, n.d."; caption:"Better Program Analysis for Security via Data Flow Tracking and Symbolic Execution&nl;Balajorshari and McCamant, n.d."; data-line:"FormalBib.bib:8709"; searchterm:"Better%20Program%20Analysis%20for%20Security%20via%20Data%20Flow%20Tracking%20and%20Symbolic%20Execution%20Balajorshari%20and%20McCamant%2C%20n.d."; spellcheck:"false"}
Balajorshari, N.&nbsp;E., & McCamant, S.&nbsp;(n.d.). Better Program Analysis for Security via Data Flow Tracking and Symbolic Execution, 92.
~ end bibitem

~ begin bibitem {id:"ballabriga_static_2019"; cite-year:"2019"; cite-authors:"Ballabriga et al."; cite-authors-long:"Ballabriga, Forget, Gonnord, Lipari, and Ruiz"; cite-label:"Ballabriga, Forget, Gonnord, Lipari, \& Ruiz, 2019"; caption:"Static Analysis Of Binary Code With Memory Indirections Using Polyhedra&nl;Ballabriga, Forget, Gonnord, Lipari, and Ruiz, 2019"; data-line:"FormalBib.bib:9832"; searchterm:"Static%20Analysis%20Of%20Binary%20Code%20With%20Memory%20Indirections%20Using%20Polyhedra%20Ballabriga%2C%20Forget%2C%20Gonnord%2C%20Lipari%2C%20and%20Ruiz%2C%202019"; spellcheck:"false"}
Ballabriga, C., Forget, J., Gonnord, L., Lipari, G., & Ruiz, J.&nbsp;(2019). Static Analysis Of Binary Code With Memory Indirections Using Polyhedra. In _VMCAI’19 - International Conference on Verification, Model Checking, and Abstract Interpretation_ (Vol. 11388, pp. 114–135). Cascais, Portugal: Springer. https://doi.org/[10.1007/978-3-030-11245-5_6](https://dx.doi.org/10.1007/978-3-030-11245-5_6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ball_vericon_2014"; cite-year:"2014"; cite-authors:"Ball et al."; cite-authors-long:"Ball, Bjørner, Gember, Itzhaky, Karbyshev, Sagiv, et al."; cite-label:"Ball et al., 2014"; caption:"VeriCon: towards verifying controller programs in software-defined networks&nl;Ball, Bjørner, Gember, Itzhaky, Karbyshev, Sagiv, et al., 2014"; data-line:"Networking.bib:673"; searchterm:"VeriCon%3A%20towards%20verifying%20controller%20programs%20in%20softwaredefined%20networks%20Ball%2C%20Bj%C3%B8rner%2C%20Gember%2C%20Itzhaky%2C%20Karbyshev%2C%20Sagiv%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Ball, T., Bjørner, N., Gember, A., Itzhaky, S., Karbyshev, A., Sagiv, M., … Valadarsky, A.&nbsp;(2014). VeriCon: towards verifying controller programs in software-defined networks. In _Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 282–293). Edinburgh United Kingdom: ACM.&nbsp;https://doi.org/[10.1145/2594291.2594317](https://dx.doi.org/10.1145/2594291.2594317){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bansal_holist:_2019"; cite-year:"2019"; cite-authors:"Bansal et al."; cite-authors-long:"Bansal, Loos, Rabe, Szegedy, and Wilcox"; cite-label:"Bansal, Loos, Rabe, Szegedy, \& Wilcox, 2019"; caption:"HOList: An Environment for Machine Learning of Higher-Order Theorem Proving (extended version)&nl;Bansal, Loos, Rabe, Szegedy, and Wilcox, 2019"; data-line:"FormalBib.bib:4943"; searchterm:"HOList%3A%20An%20Environment%20for%20Machine%20Learning%20of%20HigherOrder%20Theorem%20Proving%20extended%20version%20Bansal%2C%20Loos%2C%20Rabe%2C%20Szegedy%2C%20and%20Wilcox%2C%202019"; spellcheck:"false"}
Bansal, K., Loos, S.&nbsp;M., Rabe, M.&nbsp;N., Szegedy, C., & Wilcox, S.&nbsp;(2019). HOList: An Environment for Machine Learning of Higher-Order Theorem Proving (extended version). _arXiv:1904.03241 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1904.03241](http://arxiv.org/abs/1904.03241){.bib-url}
~ end bibitem

~ begin bibitem {id:"bao_separation_2021"; cite-year:"2021"; cite-authors:"J.&nbsp;Bao et al."; cite-authors-long:"J.&nbsp;Bao, Gaboardi, Hsu, and Tassarotti"; cite-label:"J. Bao, Gaboardi, Hsu, \& Tassarotti, 2021"; caption:"A Separation Logic for Negative Dependence&nl;J. Bao, Gaboardi, Hsu, and Tassarotti, 2021"; data-line:"FormalBib.bib:9263"; searchterm:"A%20Separation%20Logic%20for%20Negative%20Dependence%20J.%20Bao%2C%20Gaboardi%2C%20Hsu%2C%20and%20Tassarotti%2C%202021"; spellcheck:"false"}
Bao, J., Gaboardi, M., Hsu, J., & Tassarotti, J.&nbsp;(2021). A Separation Logic for Negative Dependence. _arXiv:2111.14917 \[cs\]_. https://doi.org/[10.1145/3498719](https://dx.doi.org/10.1145/3498719){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bao_unifying_2018"; cite-year:"2018"; cite-authors:"Y.&nbsp;Bao et al."; cite-authors-long:"Y.&nbsp;Bao, Leavens, and Ernst"; cite-label:"Y. Bao, Leavens, \& Ernst, 2018"; caption:"Unifying separation logic and region logic to allow interoperability&nl;Y. Bao, Leavens, and Ernst, 2018"; data-line:"FormalBib.bib:5806"; searchterm:"Unifying%20separation%20logic%20and%20region%20logic%20to%20allow%20interoperability%20Y.%20Bao%2C%20Leavens%2C%20and%20Ernst%2C%202018"; spellcheck:"false"}
Bao, Y., Leavens, G.&nbsp;T., & Ernst, G.&nbsp;(2018). Unifying separation logic and region logic to allow interoperability. _Formal Aspects of Computing_, _30_(3), 381–441. https://doi.org/[10.1007/s00165-018-0455-5](https://dx.doi.org/10.1007/s00165-018-0455-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bao_haccle_2020"; cite-year:"2020"; cite-authors:"Y.&nbsp;Bao et al."; cite-authors-long:"Y.&nbsp;Bao, Sundararajah, Malik, Ye, Wagner, Wang, et al."; cite-label:"Y. Bao et al., 2020"; caption:"HACCLE: An Ecosystem for Building Secure Multi-Party Computations&nl;Y. Bao, Sundararajah, Malik, Ye, Wagner, Wang, et al., 2020"; data-line:"FormalBib.bib:425"; searchterm:"HACCLE%3A%20An%20Ecosystem%20for%20Building%20Secure%20MultiParty%20Computations%20Y.%20Bao%2C%20Sundararajah%2C%20Malik%2C%20Ye%2C%20Wagner%2C%20Wang%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Bao, Y., Sundararajah, K., Malik, R., Ye, Q., Wagner, C., Wang, F., … Kulkarni, M.&nbsp;(2020). HACCLE: An Ecosystem for Building Secure Multi-Party Computations. _arXiv:2009.01489 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2009.01489](http://arxiv.org/abs/2009.01489){.bib-url}
~ end bibitem

~ begin bibitem {id:"bao_reachability_2021"; cite-year:"2021"; cite-authors:"Y.&nbsp;Bao et al."; cite-authors-long:"Y.&nbsp;Bao, Wei, Bračevac, Jiang, He, and Rompf"; cite-label:"Y. Bao et al., 2021"; caption:"Reachability types: tracking aliasing and separation in higher-order functional programs&nl;Y. Bao, Wei, Bračevac, Jiang, He, and Rompf, 2021"; data-line:"FormalBib.bib:8830"; searchterm:"Reachability%20types%3A%20tracking%20aliasing%20and%20separation%20in%20higherorder%20functional%20programs%20Y.%20Bao%2C%20Wei%2C%20Bra%C4%8Devac%2C%20Jiang%2C%20He%2C%20and%20Rompf%2C%202021"; spellcheck:"false"}
Bao, Y., Wei, G., Bračevac, O., Jiang, Y., He, Q., & Rompf, T.&nbsp;(2021). Reachability types: tracking aliasing and separation in higher-order functional programs. _Proceedings of the ACM on Programming Languages_, _5_, 139:1–139:32. https://doi.org/[10.1145/3485516](https://dx.doi.org/10.1145/3485516){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barbar_compacting_nodate"; cite-year:"n.d."; cite-authors:"Barbar and Sui"; cite-authors-long:"Barbar and Sui"; cite-label:"Barbar \& Sui, n.d.-a"; caption:"Compacting Points-To Sets through Object Clustering&nl;Barbar and Sui, n.d."; data-line:"LanguageTools.bib:915"; searchterm:"Compacting%20PointsTo%20Sets%20through%20Object%20Clustering%20Barbar%20and%20Sui%2C%20n.d."; spellcheck:"false"}
Barbar, M., & Sui, Y.&nbsp;(n.d.-a). Compacting Points-To Sets through Object Clustering, _5_, 27.
~ end bibitem

~ begin bibitem {id:"barbar_hash_nodate"; cite-year:"n.d."; cite-authors:"Barbar and Sui"; cite-authors-long:"Barbar and Sui"; cite-label:"Barbar \& Sui, n.d.-b"; caption:"Hash Consed Points-To Sets&nl;Barbar and Sui, n.d."; data-line:"LanguageTools.bib:1256"; searchterm:"Hash%20Consed%20PointsTo%20Sets%20Barbar%20and%20Sui%2C%20n.d."; spellcheck:"false"}
Barbar, M., & Sui, Y.&nbsp;(n.d.-b). Hash Consed Points-To Sets, 24.
~ end bibitem

~ begin bibitem {id:"barbar_flow-sensitive_2020"; cite-year:"2020"; cite-authors:"Barbar et al."; cite-authors-long:"Barbar, Sui, and Chen"; cite-label:"Barbar, Sui, \& Chen, 2020"; caption:"Flow-Sensitive Type-Based Heap Cloning&nl;Barbar, Sui, and Chen, 2020"; data-line:"LanguageTools.bib:427"; searchterm:"FlowSensitive%20TypeBased%20Heap%20Cloning%20Barbar%2C%20Sui%2C%20and%20Chen%2C%202020"; spellcheck:"false"}
Barbar, M., Sui, Y., & Chen, S.&nbsp;(2020). Flow-Sensitive Type-Based Heap Cloning. _34th European Conference on Object-Oriented Programming_, 26.
~ end bibitem

~ begin bibitem {id:"barbar_object_2021"; cite-year:"2021"; cite-authors:"Barbar et al."; cite-authors-long:"Barbar, Sui, and Chen"; cite-label:"Barbar, Sui, \& Chen, 2021"; caption:"Object Versioning for Flow-Sensitive Pointer Analysis&nl;Barbar, Sui, and Chen, 2021"; data-line:"LanguageTools.bib:483"; searchterm:"Object%20Versioning%20for%20FlowSensitive%20Pointer%20Analysis%20Barbar%2C%20Sui%2C%20and%20Chen%2C%202021"; spellcheck:"false"}
Barbar, M., Sui, Y., & Chen, S.&nbsp;(2021). Object Versioning for Flow-Sensitive Pointer Analysis. In _2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)_ (pp. 222–235). Seoul, Korea (South): IEEE.&nbsp;https://doi.org/[10.1109/CGO51591.2021.9370334](https://dx.doi.org/10.1109/CGO51591.2021.9370334){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bardin_bringing_2019"; cite-year:"2019"; cite-authors:"Bardin et al."; cite-authors-long:"Bardin, Bjørner, and Cadar"; cite-label:"Bardin, Bjørner, \& Cadar, 2019"; caption:"Bringing CP, SAT and SMT together: Next Challenges in Constraint Solving (Dagstuhl Seminar 19062)&nl;Bardin, Bjørner, and Cadar, 2019"; data-line:"FormalBib.bib:4111"; searchterm:"Bringing%20CP%2C%20SAT%20and%20SMT%20together%3A%20Next%20Challenges%20in%20Constraint%20Solving%20Dagstuhl%20Seminar%2019062%20Bardin%2C%20Bj%C3%B8rner%2C%20and%20Cadar%2C%202019"; spellcheck:"false"}
Bardin, S., Bjørner, N., & Cadar, C.&nbsp;(2019). Bringing CP, SAT and SMT together: Next Challenges in Constraint Solving (Dagstuhl Seminar 19062). _Dagstuhl Reports_, _9_(2), 27–47. https://doi.org/[10.4230/DagRep.9.2.27](https://dx.doi.org/10.4230/DagRep.9.2.27){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barras_sets_2010"; cite-year:"2010"; cite-authors:"Barras"; cite-authors-long:"Barras"; cite-label:"Barras, 2010"; caption:"Sets in Coq, Coq in Sets&nl;Barras, 2010"; data-line:"FormalBib.bib:7904"; searchterm:"Sets%20in%20Coq%2C%20Coq%20in%20Sets%20Barras%2C%202010"; spellcheck:"false"}
Barras, B.&nbsp;(2010). Sets in Coq, Coq in Sets. _Journal of Formalized Reasoning_, _3_(1), 29–48. https://doi.org/[10.6092/issn.1972-5787/1695](https://dx.doi.org/10.6092/issn.1972-5787/1695){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barriere_vst_nodate"; cite-year:"n.d."; cite-authors:"Barriere and Appel"; cite-authors-long:"Barriere and Appel"; cite-label:"Barriere \& Appel, n.d."; caption:"VST Veriﬁcation of B+Trees with Cursors&nl;Barriere and Appel, n.d."; data-line:"FormalBib.bib:2511"; searchterm:"VST%20Veri%EF%AC%81cation%20of%20B%2BTrees%20with%20Cursors%20Barriere%20and%20Appel%2C%20n.d."; spellcheck:"false"}
Barriere, A., & Appel, A.&nbsp;(n.d.). VST Veriﬁcation of B+Trees with Cursors, 19.
~ end bibitem

~ begin bibitem {id:"bartell_optimizing_2021"; cite-year:"2021"; cite-authors:"Bartell"; cite-authors-long:"Bartell"; cite-label:"Bartell, 2021"; caption:"Optimizing Whole Programs for Code Size&nl;Bartell, 2021"; data-line:"LanguageTools.bib:1441"; searchterm:"Optimizing%20Whole%20Programs%20for%20Code%20Size%20Bartell%2C%202021"; spellcheck:"false"}
Bartell, S.&nbsp;(2021). _Optimizing Whole Programs for Code Size_ (phdthesis). University of Illinois Urbana–Champaign, Urbana, Illinois.
~ end bibitem

~ begin bibitem {id:"bartha_one_2021"; cite-year:"2021"; cite-authors:"Bartha et al."; cite-authors-long:"Bartha, Cheney, and Belle"; cite-label:"Bartha, Cheney, \& Belle, 2021"; caption:"One Down, 699 to Go: or, synthesising compositional desugarings&nl;Bartha, Cheney, and Belle, 2021"; data-line:"FormalBib.bib:9136"; searchterm:"One%20Down%2C%20699%20to%20Go%3A%20or%2C%20synthesising%20compositional%20desugarings%20Bartha%2C%20Cheney%2C%20and%20Belle%2C%202021"; spellcheck:"false"}
Bartha, S., Cheney, J., & Belle, V.&nbsp;(2021). One Down, 699 to Go: or, synthesising compositional desugarings. _arXiv:2109.06114 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.06114](http://arxiv.org/abs/2109.06114){.bib-url}
~ end bibitem

~ begin bibitem {id:"barthe_secure_2021"; cite-year:"2021"; cite-authors:"Barthe et al."; cite-authors-long:"Barthe, Blazy, Hutin, and Pichardie"; cite-label:"Barthe, Blazy, Hutin, \& Pichardie, 2021"; caption:"Secure Compilation of Constant-Resource Programs&nl;Barthe, Blazy, Hutin, and Pichardie, 2021"; data-line:"Security.bib:380"; searchterm:"Secure%20Compilation%20of%20ConstantResource%20Programs%20Barthe%2C%20Blazy%2C%20Hutin%2C%20and%20Pichardie%2C%202021"; spellcheck:"false"}
Barthe, G., Blazy, S., Hutin, R., & Pichardie, D.&nbsp;(2021). Secure Compilation of Constant-Resource Programs. In _IEEE 34th Computer Security Foundations Symposium (CSF)_. Dubrovnik, Croatia. Retrieved from <https://hal.archives-ouvertes.fr/hal-03221440>{.bib-url}
~ end bibitem

~ begin bibitem {id:"barthe_secure_2018"; cite-year:"2018"; cite-authors:"Barthe et al."; cite-authors-long:"Barthe, Gregoire, and Laporte"; cite-label:"Barthe, Gregoire, \& Laporte, 2018"; caption:"Secure Compilation of Side-Channel Countermeasures: The Case of Cryptographic “Constant-Time”&nl;Barthe, Gregoire, and Laporte, 2018"; data-line:"Security.bib:463"; searchterm:"Secure%20Compilation%20of%20SideChannel%20Countermeasures%3A%20The%20Case%20of%20Cryptographic%20%E2%80%9CConstantTime%E2%80%9D%20Barthe%2C%20Gregoire%2C%20and%20Laporte%2C%202018"; spellcheck:"false"}
Barthe, G., Gregoire, B., & Laporte, V.&nbsp;(2018). Secure Compilation of Side-Channel Countermeasures: The Case of Cryptographic &ldquo;Constant-Time.&rdquo; In _2018 IEEE 31st Computer Security Foundations Symposium (CSF)_ (pp. 328–343). Oxford: IEEE.&nbsp;https://doi.org/[10.1109/CSF.2018.00031](https://dx.doi.org/10.1109/CSF.2018.00031){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barthe_structured_2021"; cite-year:"2021"; cite-authors:"Barthe et al."; cite-authors-long:"Barthe, Gregoire, Laporte, and Priya"; cite-label:"Barthe, Gregoire, Laporte, \& Priya, 2021"; caption:"Structured Leakage and Applications to Cryptographic Constant-Time and Cost&nl;Barthe, Gregoire, Laporte, and Priya, 2021"; data-line:"Cryptography.bib:11"; searchterm:"Structured%20Leakage%20and%20Applications%20to%20Cryptographic%20ConstantTime%20and%20Cost%20Barthe%2C%20Gregoire%2C%20Laporte%2C%20and%20Priya%2C%202021"; spellcheck:"false"}
Barthe, G., Gregoire, B., Laporte, V., & Priya, S.&nbsp;(2021). _Structured Leakage and Applications to Cryptographic Constant-Time and Cost_ (No. 650). Retrieved from <http://eprint.iacr.org/2021/650>{.bib-url}
~ end bibitem

~ begin bibitem {id:"basu_languages_2018"; cite-year:"2018"; cite-authors:"Basu"; cite-authors-long:"Basu"; cite-label:"Basu, 2018"; caption:"Languages for Path-Based Network Programming&nl;Basu, 2018"; data-line:"Networking.bib:376"; searchterm:"Languages%20for%20PathBased%20Network%20Programming%20Basu%2C%202018"; spellcheck:"false"}
Basu, S.&nbsp;(2018). Languages for Path-Based Network Programming. https://doi.org/[10.7298/X4057D4D](https://dx.doi.org/10.7298/X4057D4D){.bib-doi}
~ end bibitem

~ begin bibitem {id:"batty_mark_compositional_2017"; cite-year:"2017"; cite-authors:"Batty Mark"; cite-authors-long:"Batty Mark"; cite-label:"Batty Mark, 2017"; caption:"Compositional relaxed concurrency&nl;Batty Mark, 2017"; data-line:"FormalBib.bib:2313"; searchterm:"Compositional%20relaxed%20concurrency%20Batty%20Mark%2C%202017"; spellcheck:"false"}
Batty Mark. (2017). Compositional relaxed concurrency. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150406. https://doi.org/[10.1098/rsta.2015.0406](https://dx.doi.org/10.1098/rsta.2015.0406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"batz_foundations_2022"; cite-year:"2022"; cite-authors:"Batz et al."; cite-authors-long:"Batz, Fesefeldt, Jansen, Katoen, Keßler, Matheja, and Noll"; cite-label:"Batz et al., 2022"; caption:"Foundations for Entailment Checking in Quantitative Separation Logic (extended version)&nl;Batz, Fesefeldt, Jansen, Katoen, Keßler, Matheja, and Noll, 2022"; data-line:"FormalBib.bib:9926"; searchterm:"Foundations%20for%20Entailment%20Checking%20in%20Quantitative%20Separation%20Logic%20extended%20version%20Batz%2C%20Fesefeldt%2C%20Jansen%2C%20Katoen%2C%20Ke%C3%9Fler%2C%20Matheja%2C%20and%20Noll%2C%202022"; spellcheck:"false"}
Batz, K., Fesefeldt, I., Jansen, M., Katoen, J.-P., Keßler, F., Matheja, C., & Noll, T.&nbsp;(2022). Foundations for Entailment Checking in Quantitative Separation Logic (extended version). _arXiv:2201.11464 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2201.11464](http://arxiv.org/abs/2201.11464){.bib-url}
~ end bibitem

~ begin bibitem {id:"baudin_dogged_2021"; cite-year:"2021"; cite-authors:"Baudin et al."; cite-authors-long:"Baudin, Bobot, Bühler, Correnson, Kirchner, Kosmatov, et al."; cite-label:"Baudin et al., 2021"; caption:"The dogged pursuit of bug-free C programs: the Frama-C software analysis platform&nl;Baudin, Bobot, Bühler, Correnson, Kirchner, Kosmatov, et al., 2021"; data-line:"FormalBib.bib:7343"; searchterm:"The%20dogged%20pursuit%20of%20bugfree%20C%20programs%3A%20the%20FramaC%20software%20analysis%20platform%20Baudin%2C%20Bobot%2C%20B%C3%BChler%2C%20Correnson%2C%20Kirchner%2C%20Kosmatov%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Baudin, P., Bobot, F., Bühler, D., Correnson, L., Kirchner, F., Kosmatov, N., … Williams, N.&nbsp;(2021). The dogged pursuit of bug-free C programs: the Frama-C software analysis platform. _Communications of the ACM_, _64_(8), 56–68. https://doi.org/[10.1145/3470569](https://dx.doi.org/10.1145/3470569){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bauer_extensible_2021"; cite-year:"2021"; cite-authors:"Bauer and Petković"; cite-authors-long:"Bauer and Petković"; cite-label:"Bauer \& Petković, 2021"; caption:"An extensible equality checking algorithm for dependent type theories&nl;Bauer and Petković, 2021"; data-line:"FormalBib.bib:8124"; searchterm:"An%20extensible%20equality%20checking%20algorithm%20for%20dependent%20type%20theories%20Bauer%20and%20Petkovi%C4%87%2C%202021"; spellcheck:"false"}
Bauer, A., & Petković, A.&nbsp;(2021). An extensible equality checking algorithm for dependent type theories. _arXiv:2103.07397 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.07397](http://arxiv.org/abs/2103.07397){.bib-url}
~ end bibitem

~ begin bibitem {id:"beckert_verification_2006"; cite-year:"2006"; cite-authors:"Beckert et al."; cite-authors-long:"Beckert et al."; cite-label:"Beckert, Hähnle, \& Schmitt, 2006"; caption:"Verification of Object-Oriented Software. The KeY Approach&nl;Beckert et al., 2006"; data-line:"FormalBib.bib:2731"; searchterm:"Verification%20of%20ObjectOriented%20Software.%20The%20KeY%20Approach%20Beckert%20et%20al.%2C%202006"; spellcheck:"false"}
Beckert, B., Hähnle, R., & Schmitt, P.&nbsp;H.&nbsp;(Eds.). (2006). _Verification of Object-Oriented Software. The KeY Approach_ (Vol. 4334). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-69061-0](https://dx.doi.org/10.1007/978-3-540-69061-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"beckett_temporal_2016"; cite-year:"2016"; cite-authors:"Beckett et al."; cite-authors-long:"Beckett, Greenberg, and Walker"; cite-label:"Beckett, Greenberg, \& Walker, 2016"; caption:"Temporal NetKAT&nl;Beckett, Greenberg, and Walker, 2016"; data-line:"Networking.bib:283"; searchterm:"Temporal%20NetKAT%20Beckett%2C%20Greenberg%2C%20and%20Walker%2C%202016"; spellcheck:"false"}
Beckett, R., Greenberg, M., & Walker, D.&nbsp;(2016). Temporal NetKAT.&nbsp;In _Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 386–401). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2908080.2908108](https://dx.doi.org/10.1145/2908080.2908108){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_2017"; cite-year:"2017"; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, 2017"; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs&nl;Bedford, 2017"; data-line:"FormalBib.bib:1231"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20Bedford%2C%202017"; spellcheck:"false"}
Bedford, A.&nbsp;(2017). Coqatoo: Generating Natural Language Versions of Coq Proofs. _arXiv:1712.03894 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1712.03894](http://arxiv.org/abs/1712.03894){.bib-url}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_nodate"; cite-year:"n.d."; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, n.d."; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides&nl;Bedford, n.d."; data-line:"FormalBib.bib:1223"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20%20Slides%20Bedford%2C%20n.d."; spellcheck:"false"}
Bedford, A.&nbsp;(n.d.). Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides, 16.
~ end bibitem

~ begin bibitem {id:"beeson_proof-checking_2019"; cite-year:"2019"; cite-authors:"Beeson et al."; cite-authors-long:"Beeson, Narboux, and Wiedijk"; cite-label:"Beeson, Narboux, \& Wiedijk, 2019"; caption:"Proof-checking Euclid&nl;Beeson, Narboux, and Wiedijk, 2019"; data-line:"FormalBib.bib:9597"; searchterm:"Proofchecking%20Euclid%20Beeson%2C%20Narboux%2C%20and%20Wiedijk%2C%202019"; spellcheck:"false"}
Beeson, M., Narboux, J., & Wiedijk, F.&nbsp;(2019). Proof-checking Euclid. _Annals of Mathematics and Artificial Intelligence_, _85_(2), 213–257. https://doi.org/[10.1007/s10472-018-9606-x](https://dx.doi.org/10.1007/s10472-018-9606-x){.bib-doi}
~ end bibitem

~ begin bibitem {id:"beg_working_2020"; cite-year:"2020"; cite-authors:"Beg and Butterfield"; cite-authors-long:"Beg and Butterfield"; cite-label:"Beg \& Butterfield, 2020"; caption:"Working Document for state of the art - formality meets autonomy/robotics&nl;Beg and Butterfield, 2020"; data-line:"FormalBib.bib:527"; searchterm:"Working%20Document%20for%20state%20of%20the%20art%20%20formality%20meets%20autonomy%2Frobotics%20Beg%20and%20Butterfield%2C%202020"; spellcheck:"false"}
Beg, A., & Butterfield, A.&nbsp;(2020). _Working Document for state of the art - formality meets autonomy/robotics_. https://doi.org/[10.13140/RG.2.2.30437.22249](https://dx.doi.org/10.13140/RG.2.2.30437.22249){.bib-doi}
~ end bibitem

~ begin bibitem {id:"begay_developing_2021"; cite-year:"2021"; cite-authors:"Bégay et al."; cite-authors-long:"Bégay, Crégut, and Monin"; cite-label:"Bégay, Crégut, \& Monin, 2021"; caption:"Developing and Certifying Datalog Optimizations in Coq/MathComp&nl;Bégay, Crégut, and Monin, 2021"; data-line:"FormalBib.bib:5319"; searchterm:"Developing%20and%20Certifying%20Datalog%20Optimizations%20in%20Coq%2FMathComp%20B%C3%A9gay%2C%20Cr%C3%A9gut%2C%20and%20Monin%2C%202021"; spellcheck:"false"}
Bégay, P.-L., Crégut, P., & Monin, J.-F.&nbsp;(2021). Developing and Certifying Datalog Optimizations in Coq/MathComp, 15.
~ end bibitem

~ begin bibitem {id:"bengtson_refinement_2011"; cite-year:"2011"; cite-authors:"Bengtson et al."; cite-authors-long:"Bengtson, Bhargavan, Fournet, Gordon, and Maffeis"; cite-label:"Bengtson, Bhargavan, Fournet, Gordon, \& Maffeis, 2011"; caption:"Refinement types for secure implementations&nl;Bengtson, Bhargavan, Fournet, Gordon, and Maffeis, 2011"; data-line:"Security.bib:446"; searchterm:"Refinement%20types%20for%20secure%20implementations%20Bengtson%2C%20Bhargavan%2C%20Fournet%2C%20Gordon%2C%20and%20Maffeis%2C%202011"; spellcheck:"false"}
Bengtson, J., Bhargavan, K., Fournet, C., Gordon, A.&nbsp;D., & Maffeis, S.&nbsp;(2011). Refinement types for secure implementations. _ACM Transactions on Programming Languages and Systems_, _33_(2), 1–45. https://doi.org/[10.1145/1890028.1890031](https://dx.doi.org/10.1145/1890028.1890031){.bib-doi}
~ end bibitem

~ begin bibitem {id:"benzaken_coq_2021"; cite-year:"2021"; cite-authors:"Benzaken et al."; cite-authors-long:"Benzaken, Cohen-Boulakia, Contejean, Keller, and Zucchini"; cite-label:"Benzaken, Cohen-Boulakia, Contejean, Keller, \& Zucchini, 2021"; caption:"A Coq Formalization of Data Provenance&nl;Benzaken, Cohen-Boulakia, Contejean, Keller, and Zucchini, 2021"; data-line:"FormalBib.bib:5561"; searchterm:"A%20Coq%20Formalization%20of%20Data%20Provenance%20Benzaken%2C%20CohenBoulakia%2C%20Contejean%2C%20Keller%2C%20and%20Zucchini%2C%202021"; spellcheck:"false"}
Benzaken, V., Cohen-Boulakia, S., Contejean, É., Keller, C., & Zucchini, R.&nbsp;(2021). A Coq Formalization of Data Provenance, 18.
~ end bibitem

~ begin bibitem {id:"benzmuller_simplified_2022"; cite-year:"2022"; cite-authors:"Benzmüller"; cite-authors-long:"Benzmüller"; cite-label:"Benzmüller, 2022"; caption:"A Simplified Variant of G&bslash;\"odel's Ontological Argument&nl;Benzmüller, 2022"; data-line:"FormalBib.bib:10336"; searchterm:"A%20Simplified%20Variant%20of%20G%26bslash%3B%22odel's%20Ontological%20Argument%20Benzm%C3%BCller%2C%202022"; spellcheck:"false"}
Benzmüller, C.&nbsp;(2022). A Simplified Variant of G&bslash;"odel’s Ontological Argument. _arXiv:2202.06264 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.06264](http://arxiv.org/abs/2202.06264){.bib-url}
~ end bibitem

~ begin bibitem {id:"berdine_smallfoot:_2006"; cite-year:"2006"; cite-authors:"Berdine et al."; cite-authors-long:"Berdine, Calcagno, and O’Hearn"; cite-label:"Berdine, Calcagno, \& O’Hearn, 2006"; caption:"Smallfoot: Modular Automatic Assertion Checking with Separation Logic&nl;Berdine, Calcagno, and O’Hearn, 2006"; data-line:"FormalBib.bib:3382"; searchterm:"Smallfoot%3A%20Modular%20Automatic%20Assertion%20Checking%20with%20Separation%20Logic%20Berdine%2C%20Calcagno%2C%20and%20O%E2%80%99Hearn%2C%202006"; spellcheck:"false"}
Berdine, J., Calcagno, C., & O’Hearn, P.&nbsp;W.&nbsp;(2006). Smallfoot: Modular Automatic Assertion Checking with Separation Logic. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (pp. 115–137). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"bereczky_mechanizing_2022"; cite-year:"2022"; cite-authors:"Bereczky et al."; cite-authors-long:"Bereczky, Chen, Horpácsi, Mizsei, Peña, and Tusil"; cite-label:"Bereczky et al., 2022"; caption:"Mechanizing Matching Logic in Coq&nl;Bereczky, Chen, Horpácsi, Mizsei, Peña, and Tusil, 2022"; data-line:"FormalBib.bib:9780"; searchterm:"Mechanizing%20Matching%20Logic%20in%20Coq%20Bereczky%2C%20Chen%2C%20Horp%C3%A1csi%2C%20Mizsei%2C%20Pe%C3%B1a%2C%20and%20Tusil%2C%202022"; spellcheck:"false"}
Bereczky, P., Chen, X., Horpácsi, D., Mizsei, T.&nbsp;B., Peña, L., & Tusil, J.&nbsp;(2022). Mechanizing Matching Logic in Coq. _arXiv:2201.05716 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2201.05716](http://arxiv.org/abs/2201.05716){.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_verified_2014"; cite-year:"2014"; cite-authors:"Beringer et al."; cite-authors-long:"Beringer, Stewart, Dockins, and Appel"; cite-label:"Beringer, Stewart, Dockins, \& Appel, 2014"; caption:"Verified Compilation for Shared-Memory C&nl;Beringer, Stewart, Dockins, and Appel, 2014"; data-line:"FormalBib.bib:1385"; searchterm:"Verified%20Compilation%20for%20SharedMemory%20C%20Beringer%2C%20Stewart%2C%20Dockins%2C%20and%20Appel%2C%202014"; spellcheck:"false"}
Beringer, L., Stewart, G., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2014). Verified Compilation for Shared-Memory C.&nbsp;In Z.&nbsp;Shao (Ed.), _Programming Languages and Systems_ (Vol. 8410, pp. 107–127). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-54833-8_7,](https://dx.doi.org/10.1007/978-3-642-54833-8_7,){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bernhard_xtag_2022"; cite-year:"2022"; cite-authors:"Bernhard et al."; cite-authors-long:"Bernhard, Rodler, Holz, and Davi"; cite-label:"Bernhard, Rodler, Holz, \& Davi, 2022"; caption:"xTag: Mitigating Use-After-Free Vulnerabilities via Software-Based Pointer Tagging on Intel x86-64&nl;Bernhard, Rodler, Holz, and Davi, 2022"; data-line:"Security.bib:1607"; searchterm:"xTag%3A%20Mitigating%20UseAfterFree%20Vulnerabilities%20via%20SoftwareBased%20Pointer%20Tagging%20on%20Intel%20x8664%20Bernhard%2C%20Rodler%2C%20Holz%2C%20and%20Davi%2C%202022"; spellcheck:"false"}
Bernhard, L., Rodler, M., Holz, T., & Davi, L.&nbsp;(2022). xTag: Mitigating Use-After-Free Vulnerabilities via Software-Based Pointer Tagging on Intel x86-64. _arXiv:2203.04117 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2203.04117](http://arxiv.org/abs/2203.04117){.bib-url}
~ end bibitem

~ begin bibitem {id:"bertino_computing_2021"; cite-year:"2021"; cite-authors:"Bertino et al."; cite-authors-long:"Bertino, Bliss, Lopresti, Peterson, and Schulzrinne"; cite-label:"Bertino, Bliss, Lopresti, Peterson, \& Schulzrinne, 2021"; caption:"Computing Research Challenges in Next Generation Wireless Networking&nl;Bertino, Bliss, Lopresti, Peterson, and Schulzrinne, 2021"; data-line:"Networking.bib:301"; searchterm:"Computing%20Research%20Challenges%20in%20Next%20Generation%20Wireless%20Networking%20Bertino%2C%20Bliss%2C%20Lopresti%2C%20Peterson%2C%20and%20Schulzrinne%2C%202021"; spellcheck:"false"}
Bertino, E., Bliss, D., Lopresti, D., Peterson, L., & Schulzrinne, H.&nbsp;(2021). Computing Research Challenges in Next Generation Wireless Networking. _arXiv:2101.01279 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.01279](http://arxiv.org/abs/2101.01279){.bib-url}
~ end bibitem

~ begin bibitem {id:"bertoni_sponge_nodate"; cite-year:"2022"; cite-authors:"Bertoni et al."; cite-authors-long:"Bertoni, Daemen, and Peeters"; cite-label:"Bertoni, Daemen, \& Peeters, n.d."; caption:"Sponge Functions&nl;Bertoni, Daemen, and Peeters, 2022"; data-line:"Security.bib:1569"; searchterm:"Sponge%20Functions%20Bertoni%2C%20Daemen%2C%20and%20Peeters%2C%202022"; spellcheck:"false"}
Bertoni, G., Daemen, J., & Peeters, M.&nbsp;(n.d.). _Sponge Functions_. STMicroelectronics, Radbound University. Retrieved from <https://keccak.team/files/SpongeFunctions.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bertot_interactive_2004"; cite-year:"2004"; cite-authors:"Bertot and Castéran"; cite-authors-long:"Bertot and Castéran"; cite-label:"Bertot \& Castéran, 2004"; caption:"Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions&nl;Bertot and Castéran, 2004"; data-line:"FormalBib.bib:2904"; searchterm:"Interactive%20theorem%20proving%20and%20program%20development%3A%20Coq'Art%3A%20the%20calculus%20of%20inductive%20constructions%20Bertot%20and%20Cast%C3%A9ran%2C%202004"; spellcheck:"false"}
Bertot, Y., & Castéran, P.&nbsp;(2004). _Interactive theorem proving and program development: Coq’Art: the calculus of inductive constructions_. Berlin ; New York: Springer. Retrieved from <http://www.labri.fr/perso/casteran/CoqArt/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"beyer_decomposing_2022"; cite-year:"2022"; cite-authors:"Beyer et al."; cite-authors-long:"Beyer, Haltermann, Lemberger, and Wehrheim"; cite-label:"Beyer, Haltermann, Lemberger, \& Wehrheim, 2022"; caption:"Decomposing Software Verification into Off-the-Shelf Components: An Application to CEGAR&nl;Beyer, Haltermann, Lemberger, and Wehrheim, 2022"; data-line:"FormalBib.bib:10238"; searchterm:"Decomposing%20Software%20Verification%20into%20OfftheShelf%20Components%3A%20An%20Application%20to%20CEGAR%20Beyer%2C%20Haltermann%2C%20Lemberger%2C%20and%20Wehrheim%2C%202022"; spellcheck:"false"}
Beyer, D., Haltermann, J., Lemberger, T., & Wehrheim, H.&nbsp;(2022). Decomposing Software Verification into Off-the-Shelf Components: An Application to CEGAR, 13.
~ end bibitem

~ begin bibitem {id:"dougherty_tutorial-style_2021"; cite-year:"2021"; cite-authors:"Bhargavan et al."; cite-authors-long:"Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele"; cite-label:"Bhargavan et al., 2021"; caption:"A Tutorial-Style Introduction to DY\*&nl;Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele, 2021"; data-line:"Cryptography.bib:43"; searchterm:"A%20TutorialStyle%20Introduction%20to%20DY%5C*%20Bhargavan%2C%20Bichhawat%2C%20Do%2C%20Hosseyni%2C%20K%C3%BCsters%2C%20Schmitz%2C%20and%20W%C3%BCrtele%2C%202021"; spellcheck:"false"}
Bhargavan, K., Bichhawat, A., Do, Q.&nbsp;H., Hosseyni, P., Küsters, R., Schmitz, G., & Würtele, T.&nbsp;(2021). A Tutorial-Style Introduction to DY\*. In D.&nbsp;Dougherty, J.&nbsp;Meseguer, S.&nbsp;A.&nbsp;Mödersheim, & P.&nbsp;Rowe (Eds.), _Protocols, Strands, and Logic_ (Vol. 13066, pp. 77–97). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-91631-2_4](https://dx.doi.org/10.1007/978-3-030-91631-2_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bhargavan_dy_nodate"; cite-year:"n.d."; cite-authors:"Bhargavan et al."; cite-authors-long:"Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele"; cite-label:"Bhargavan, Bichhawat, et al., n.d.-a"; caption:"DY\* : A Modular Symbolic Veriﬁcation Framework for Executable Cryptographic Protocol Code&nl;Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele, n.d."; data-line:"FormalBib.bib:7705"; searchterm:"DY%5C*%20%3A%20A%20Modular%20Symbolic%20Veri%EF%AC%81cation%20Framework%20for%20Executable%20Cryptographic%20Protocol%20Code%20Bhargavan%2C%20Bichhawat%2C%20Do%2C%20Hosseyni%2C%20K%C3%BCsters%2C%20Schmitz%2C%20and%20W%C3%BCrtele%2C%20n.d."; spellcheck:"false"}
Bhargavan, K., Bichhawat, A., Do, Q.&nbsp;H., Hosseyni, P., Küsters, R., Schmitz, G., & Würtele, T.&nbsp;(n.d.-a). DY\* : A Modular Symbolic Veriﬁcation Framework for Executable Cryptographic Protocol Code, 20.
~ end bibitem

~ begin bibitem {id:"bhargavan_dy_nodate-1"; cite-year:"n.d."; cite-authors:"Bhargavan et al."; cite-authors-long:"Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele"; cite-label:"Bhargavan, Bichhawat, et al., n.d.-b"; caption:"DY\*: A Modular Symbolic Verification Framework for Executable Cryptographic Protocol Code&nl;Bhargavan, Bichhawat, Do, Hosseyni, Küsters, Schmitz, and Würtele, n.d."; data-line:"FormalBib.bib:8009"; searchterm:"DY%5C*%3A%20A%20Modular%20Symbolic%20Verification%20Framework%20for%20Executable%20Cryptographic%20Protocol%20Code%20Bhargavan%2C%20Bichhawat%2C%20Do%2C%20Hosseyni%2C%20K%C3%BCsters%2C%20Schmitz%2C%20and%20W%C3%BCrtele%2C%20n.d."; spellcheck:"false"}
Bhargavan, K., Bichhawat, A., Do, Q., Hosseyni, P., Küsters, R., Schmitz, G., & Würtele, T.&nbsp;(n.d.-b). DY\*: A Modular Symbolic Verification Framework for Executable Cryptographic Protocol Code, 21.
~ end bibitem

~ begin bibitem {id:"bhargavan_handshake_nodate"; cite-year:"n.d."; cite-authors:"Bhargavan et al."; cite-authors-long:"Bhargavan, Cheval, and Wood"; cite-label:"Bhargavan, Cheval, \& Wood, n.d."; caption:"Handshake Privacy for TLS 1.3 - Technical report&nl;Bhargavan, Cheval, and Wood, n.d."; data-line:"Cryptography.bib:63"; searchterm:"Handshake%20Privacy%20for%20TLS%201.3%20%20Technical%20report%20Bhargavan%2C%20Cheval%2C%20and%20Wood%2C%20n.d."; spellcheck:"false"}
Bhargavan, K., Cheval, V., & Wood, C.&nbsp;(n.d.). Handshake Privacy for TLS 1.3 - Technical report, 53.
~ end bibitem

~ begin bibitem {id:"bhat_lambda_2022"; cite-year:"2022"; cite-authors:"Bhat and Grosser"; cite-authors-long:"Bhat and Grosser"; cite-label:"Bhat \& Grosser, 2022"; caption:"Lambda the Ultimate SSA: Optimizing Functional Programs in SSA&nl;Bhat and Grosser, 2022"; data-line:"FormalBib.bib:10116"; searchterm:"Lambda%20the%20Ultimate%20SSA%3A%20Optimizing%20Functional%20Programs%20in%20SSA%20Bhat%20and%20Grosser%2C%202022"; spellcheck:"false"}
Bhat, S., & Grosser, T.&nbsp;(2022). Lambda the Ultimate SSA: Optimizing Functional Programs in SSA.&nbsp;Retrieved from <https://arxiv.org/abs/2201.07272v1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bidmeshki_vericoq:_2015"; cite-year:"2015"; cite-authors:"Bidmeshki and Makris"; cite-authors-long:"Bidmeshki and Makris"; cite-label:"Bidmeshki \& Makris, 2015"; caption:"VeriCoq: A Verilog-to-Coq converter for proof-carrying hardware automation&nl;Bidmeshki and Makris, 2015"; data-line:"FormalBib.bib:4547"; searchterm:"VeriCoq%3A%20A%20VerilogtoCoq%20converter%20for%20proofcarrying%20hardware%20automation%20Bidmeshki%20and%20Makris%2C%202015"; spellcheck:"false"}
Bidmeshki, M.-M., & Makris, Y.&nbsp;(2015). VeriCoq: A Verilog-to-Coq converter for proof-carrying hardware automation. In _2015 IEEE International Symposium on Circuits and Systems (ISCAS)_ (pp. 29–32). Lisbon, Portugal: IEEE.&nbsp;https://doi.org/[10.1109/ISCAS.2015.7168562](https://dx.doi.org/10.1109/ISCAS.2015.7168562){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bily_flexible_2021"; cite-year:"2021"; cite-authors:"Bílý et al."; cite-authors-long:"Bílý, Matheja, and Müller"; cite-label:"Bílý, Matheja, \& Müller, 2021"; caption:"Flexible Refinement Proofs in Separation Logic&nl;Bílý, Matheja, and Müller, 2021"; data-line:"FormalBib.bib:8620"; searchterm:"Flexible%20Refinement%20Proofs%20in%20Separation%20Logic%20B%C3%ADl%C3%BD%2C%20Matheja%2C%20and%20M%C3%BCller%2C%202021"; spellcheck:"false"}
Bílý, A., Matheja, C., & Müller, P.&nbsp;(2021). Flexible Refinement Proofs in Separation Logic. _arXiv:2110.13559 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.13559](http://arxiv.org/abs/2110.13559){.bib-url}
~ end bibitem

~ begin bibitem {id:"birkedal_taste_nodate"; cite-year:"n.d."; cite-authors:"Birkedal"; cite-authors-long:"Birkedal"; cite-label:"Birkedal, n.d."; caption:"A Taste of Categorical Logic — Tutorial Notes&nl;Birkedal, n.d."; data-line:"FormalBib.bib:6224"; searchterm:"A%20Taste%20of%20Categorical%20Logic%20%E2%80%94%20Tutorial%20Notes%20Birkedal%2C%20n.d."; spellcheck:"false"}
Birkedal, L.&nbsp;(n.d.). A Taste of Categorical Logic — Tutorial Notes, 41.
~ end bibitem

~ begin bibitem {id:"birkedal_iris_nodate"; cite-year:"2019"; cite-authors:"Birkedal and Bizjak"; cite-authors-long:"Birkedal and Bizjak"; cite-label:"Birkedal \& Bizjak, n.d.-a"; caption:"Iris Tutorial&nl;Birkedal and Bizjak, 2019"; data-line:"FormalBib.bib:3134"; searchterm:"Iris%20Tutorial%20Birkedal%20and%20Bizjak%2C%202019"; spellcheck:"false"}
Birkedal, L., & Bizjak, A.&nbsp;(n.d.-a). Iris Tutorial. Retrieved February 1, 2019, from <https://iris-project.org/tutorial-material.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"birkedal_lecture_nodate"; cite-year:"n.d."; cite-authors:"Birkedal and Bizjak"; cite-authors-long:"Birkedal and Bizjak"; cite-label:"Birkedal \& Bizjak, n.d.-b"; caption:"Lecture Notes on Iris: Higher-Order Concurrent Separation Logic&nl;Birkedal and Bizjak, n.d."; data-line:"FormalBib.bib:6084"; searchterm:"Lecture%20Notes%20on%20Iris%3A%20HigherOrder%20Concurrent%20Separation%20Logic%20Birkedal%20and%20Bizjak%2C%20n.d."; spellcheck:"false"}
Birkedal, L., & Bizjak, A.&nbsp;(n.d.-b). Lecture Notes on Iris: Higher-Order Concurrent Separation Logic, 138.
~ end bibitem

~ begin bibitem {id:"birkedal_guarded_2017"; cite-year:"2017"; cite-authors:"Birkedal et al."; cite-authors-long:"Birkedal, Bizjak, Clouston, Grathwohl, Spitters, and Vezzosi"; cite-label:"Birkedal et al., 2017"; caption:"Guarded Cubical Type Theory&nl;Birkedal, Bizjak, Clouston, Grathwohl, Spitters, and Vezzosi, 2017"; data-line:"FormalBib.bib:8232"; searchterm:"Guarded%20Cubical%20Type%20Theory%20Birkedal%2C%20Bizjak%2C%20Clouston%2C%20Grathwohl%2C%20Spitters%2C%20and%20Vezzosi%2C%202017"; spellcheck:"false"}
Birkedal, L., Bizjak, A., Clouston, R., Grathwohl, H.&nbsp;B., Spitters, B., & Vezzosi, A.&nbsp;(2017). Guarded Cubical Type Theory. _arXiv:1611.09263 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1611.09263](http://arxiv.org/abs/1611.09263){.bib-url}
~ end bibitem

~ begin bibitem {id:"birkedal_theorems_2021"; cite-year:"2021"; cite-authors:"Birkedal et al."; cite-authors-long:"Birkedal, Dinsdale-Young, Guéneau, Jaber, Svendsen, and Tzevelekos"; cite-label:"Birkedal et al., 2021"; caption:"Theorems for Free from Separation Logic Specifications&nl;Birkedal, Dinsdale-Young, Guéneau, Jaber, Svendsen, and Tzevelekos, 2021"; data-line:"FormalBib.bib:8332"; searchterm:"Theorems%20for%20Free%20from%20Separation%20Logic%20Specifications%20Birkedal%2C%20DinsdaleYoung%2C%20Gu%C3%A9neau%2C%20Jaber%2C%20Svendsen%2C%20and%20Tzevelekos%2C%202021"; spellcheck:"false"}
Birkedal, L., Dinsdale-Young, T., Guéneau, A., Jaber, G., Svendsen, K., & Tzevelekos, N.&nbsp;(2021). Theorems for Free from Separation Logic Specifications, _1_(1), 28.
~ end bibitem

~ begin bibitem {id:"bishop_engineering_2018"; cite-year:"2018"; cite-authors:"Bishop et al."; cite-authors-long:"Bishop, Fairbairn, Mehnert, Norrish, Ridge, Sewell, et al."; cite-label:"Bishop et al., 2018"; caption:"Engineering with Logic: Rigorous Test-Oracle Specification and Validation for TCP/IP and the Sockets API&nl;Bishop, Fairbairn, Mehnert, Norrish, Ridge, Sewell, et al., 2018"; data-line:"FormalBib.bib:5144"; searchterm:"Engineering%20with%20Logic%3A%20Rigorous%20TestOracle%20Specification%20and%20Validation%20for%20TCP%2FIP%20and%20the%20Sockets%20API%20Bishop%2C%20Fairbairn%2C%20Mehnert%2C%20Norrish%2C%20Ridge%2C%20Sewell%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Bishop, S., Fairbairn, M., Mehnert, H., Norrish, M., Ridge, T., Sewell, P., … Wansbrough, K.&nbsp;(2018). Engineering with Logic: Rigorous Test-Oracle Specification and Validation for TCP/IP and the Sockets API.&nbsp;_J.&nbsp;ACM_, _66_(1), 1:1–1:77. https://doi.org/[10.1145/3243650](https://dx.doi.org/10.1145/3243650){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bizjak_iron_2019"; cite-year:"2019"; cite-authors:"Bizjak et al."; cite-authors-long:"Bizjak, Gratzer, Krebbers, and Birkedal"; cite-label:"Bizjak, Gratzer, Krebbers, \& Birkedal, 2019"; caption:"Iron: managing obligations in higher-order concurrent separation logic&nl;Bizjak, Gratzer, Krebbers, and Birkedal, 2019"; data-line:"FormalBib.bib:6067"; searchterm:"Iron%3A%20managing%20obligations%20in%20higherorder%20concurrent%20separation%20logic%20Bizjak%2C%20Gratzer%2C%20Krebbers%2C%20and%20Birkedal%2C%202019"; spellcheck:"false"}
Bizjak, A., Gratzer, D., Krebbers, R., & Birkedal, L.&nbsp;(2019). Iron: managing obligations in higher-order concurrent separation logic. _Proceedings of the ACM on Programming Languages_, _3_, 1–30. https://doi.org/[10.1145/3290378](https://dx.doi.org/10.1145/3290378){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bjorner_manifest_2017"; cite-year:"2017"; cite-authors:"D.&nbsp;Bjørner"; cite-authors-long:"D.&nbsp;Bjørner"; cite-label:"D. Bjørner, 2017"; caption:"Manifest domains: analysis and description&nl;D. Bjørner, 2017"; data-line:"FormalBib.bib:3932"; searchterm:"Manifest%20domains%3A%20analysis%20and%20description%20D.%20Bj%C3%B8rner%2C%202017"; spellcheck:"false"}
Bjørner, D.&nbsp;(2017). Manifest domains: analysis and description. _Formal Aspects of Computing_, _29_(2), 175–225. https://doi.org/[10.1007/s00165-016-0385-z](https://dx.doi.org/10.1007/s00165-016-0385-z){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_40_2014"; cite-year:"2014"; cite-authors:"D.&nbsp;Bjørner and Havelund"; cite-authors-long:"D.&nbsp;Bjørner and Havelund"; cite-label:"D. Bjørner \& Havelund, 2014"; caption:"40 Years of Formal Methods: Some Obstacles and Some Possibilities?&nl;D. Bjørner and Havelund, 2014"; data-line:"FormalBib.bib:3952"; searchterm:"40%20Years%20of%20Formal%20Methods%3A%20Some%20Obstacles%20and%20Some%20Possibilities%3F%20D.%20Bj%C3%B8rner%20and%20Havelund%2C%202014"; spellcheck:"false"}
Bjørner, D., & Havelund, K.&nbsp;(2014). 40 Years of Formal Methods: Some Obstacles and Some Possibilities? In C.&nbsp;Jones, P.&nbsp;Pihlajasaari, & J.&nbsp;Sun (Eds.), _FM 2014: Formal Methods_ (Vol. 8442, pp. 42–61). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-06410-9_4](https://dx.doi.org/10.1007/978-3-319-06410-9_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bjorner_formal_2015"; cite-year:"2015"; cite-authors:"Bjorner et al."; cite-authors-long:"Bjorner, Foster, Godfrey, and Zave"; cite-label:"Bjorner, Foster, Godfrey, \& Zave, 2015"; caption:"Formal Foundations for Networking (Dagstuhl Seminar 15071)&nl;Bjorner, Foster, Godfrey, and Zave, 2015"; data-line:"Networking.bib:930"; searchterm:"Formal%20Foundations%20for%20Networking%20Dagstuhl%20Seminar%2015071%20Bjorner%2C%20Foster%2C%20Godfrey%2C%20and%20Zave%2C%202015"; spellcheck:"false"}
Bjorner, N., Foster, N., Godfrey, P.&nbsp;B., & Zave, P.&nbsp;(2015). Formal Foundations for Networking (Dagstuhl Seminar 15071). _Dagstuhl Reports_, _5_(2), 44–63. https://doi.org/[10.4230/DagRep.5.2.44](https://dx.doi.org/10.4230/DagRep.5.2.44){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bjorner_programming_nodate"; cite-year:"n.d."; cite-authors:"N.&nbsp;Bjørner et al."; cite-authors-long:"N.&nbsp;Bjørner, Moura, Nachmanson, and Wintersteiger"; cite-label:"N. Bjørner, Moura, Nachmanson, \& Wintersteiger, n.d."; caption:"Programming Z3&nl;N. Bjørner, Moura, Nachmanson, and Wintersteiger, n.d."; data-line:"FormalBib.bib:4096"; searchterm:"Programming%20Z3%20N.%20Bj%C3%B8rner%2C%20Moura%2C%20Nachmanson%2C%20and%20Wintersteiger%2C%20n.d."; spellcheck:"false"}
Bjørner, N., Moura, L.&nbsp;de, Nachmanson,  lev, & Wintersteiger, C.&nbsp;(n.d.). Programming Z3. Retrieved from <http://theory.stanford.edu/~nikolaj/programmingz3.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"blanchard_concurrent_2017"; cite-year:"2017"; cite-authors:"Blanchard et al."; cite-authors-long:"Blanchard, Loulergue, and Kosmatov"; cite-label:"Blanchard, Loulergue, \& Kosmatov, 2017"; caption:"From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation&nl;Blanchard, Loulergue, and Kosmatov, 2017"; data-line:"FormalBib.bib:2159"; searchterm:"From%20Concurrent%20Programs%20to%20Simulating%20Sequential%20Programs%3A%20Correctness%20of%20a%20Transformation%20Blanchard%2C%20Loulergue%2C%20and%20Kosmatov%2C%202017"; spellcheck:"false"}
Blanchard, A., Loulergue, F., & Kosmatov, N.&nbsp;(2017). From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation. _Electronic Proceedings in Theoretical Computer Science_, _253_, 109–123. https://doi.org/[10.4204/EPTCS.253.9](https://dx.doi.org/10.4204/EPTCS.253.9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"badger_towards_2019"; cite-year:"2019"; cite-authors:"Blanchard et al."; cite-authors-long:"Blanchard, Loulergue, and Kosmatov"; cite-label:"Blanchard, Loulergue, \& Kosmatov, 2019"; caption:"Towards Full Proof Automation in Frama-C Using Auto-active Verification&nl;Blanchard, Loulergue, and Kosmatov, 2019"; data-line:"FormalBib.bib:4352"; searchterm:"Towards%20Full%20Proof%20Automation%20in%20FramaC%20Using%20Autoactive%20Verification%20Blanchard%2C%20Loulergue%2C%20and%20Kosmatov%2C%202019"; spellcheck:"false"}
Blanchard, A., Loulergue, F., & Kosmatov, N.&nbsp;(2019). Towards Full Proof Automation in Frama-C Using Auto-active Verification. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (Vol. 11460, pp. 88–105). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-20652-9_6](https://dx.doi.org/10.1007/978-3-030-20652-9_6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"blatter_static_2018"; cite-year:"2018"; cite-authors:"Blatter et al."; cite-authors-long:"Blatter, Kosmatov, Le Gall, Prevosto, and Petiot"; cite-label:"Blatter, Kosmatov, Le Gall, Prevosto, \& Petiot, 2018"; caption:"Static and Dynamic Verification of Relational Properties on Self-composed C Code&nl;Blatter, Kosmatov, Le Gall, Prevosto, and Petiot, 2018"; data-line:"FormalBib.bib:2109"; searchterm:"Static%20and%20Dynamic%20Verification%20of%20Relational%20Properties%20on%20Selfcomposed%20C%20Code%20Blatter%2C%20Kosmatov%2C%20Le%20Gall%2C%20Prevosto%2C%20and%20Petiot%2C%202018"; spellcheck:"false"}
Blatter, L., Kosmatov, N., Le Gall, P., Prevosto, V., & Petiot, G.&nbsp;(2018). Static and Dynamic Verification of Relational Properties on Self-composed C Code. In C.&nbsp;Dubois & B.&nbsp;Wolff (Eds.), _Tests and Proofs_ (pp. 44–62). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"blom_correct_2021"; cite-year:"2021"; cite-authors:"Blom et al."; cite-authors-long:"Blom, Darabi, Huisman, and Safari"; cite-label:"Blom, Darabi, Huisman, \& Safari, 2021"; caption:"Correct program parallelisations&nl;Blom, Darabi, Huisman, and Safari, 2021"; data-line:"FormalBib.bib:8460"; searchterm:"Correct%20program%20parallelisations%20Blom%2C%20Darabi%2C%20Huisman%2C%20and%20Safari%2C%202021"; spellcheck:"false"}
Blom, S., Darabi, S., Huisman, M., & Safari, M.&nbsp;(2021). Correct program parallelisations. _International Journal on Software Tools for Technology Transfer_. https://doi.org/[10.1007/s10009-020-00601-z](https://dx.doi.org/10.1007/s10009-020-00601-z){.bib-doi}
~ end bibitem

~ begin bibitem {id:"blouin_interacto_2021"; cite-year:"2021"; cite-authors:"Blouin and Jezequel"; cite-authors-long:"Blouin and Jezequel"; cite-label:"Blouin \& Jezequel, 2021"; caption:"Interacto: A Modern User Interaction Processing Model&nl;Blouin and Jezequel, 2021"; data-line:"LanguageTools.bib:121"; searchterm:"Interacto%3A%20A%20Modern%20User%20Interaction%20Processing%20Model%20Blouin%20and%20Jezequel%2C%202021"; spellcheck:"false"}
Blouin, A., & Jezequel, J.-M.&nbsp;(2021). Interacto: A Modern User Interaction Processing Model. _IEEE Transactions on Software Engineering_, 1–1. https://doi.org/[10.1109/TSE.2021.3083321](https://dx.doi.org/10.1109/TSE.2021.3083321){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bodden_inter-procedural_2012"; cite-year:"2012"; cite-authors:"Bodden"; cite-authors-long:"Bodden"; cite-label:"Bodden, 2012"; caption:"Inter-procedural data-flow analysis with IFDS/IDE and Soot&nl;Bodden, 2012"; data-line:"LanguageTools.bib:1059"; searchterm:"Interprocedural%20dataflow%20analysis%20with%20IFDS%2FIDE%20and%20Soot%20Bodden%2C%202012"; spellcheck:"false"}
Bodden, E.&nbsp;(2012). Inter-procedural data-flow analysis with IFDS/IDE and Soot. In _Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program analysis - SOAP ’12_ (pp. 3–8). Beijing, China: ACM Press. https://doi.org/[10.1145/2259051.2259052](https://dx.doi.org/10.1145/2259051.2259052){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bodden_secret_2018"; cite-year:"2018"; cite-authors:"Bodden"; cite-authors-long:"Bodden"; cite-label:"Bodden, 2018"; caption:"The secret sauce in efficient and precise static analysis: the beauty of distributive, summary-based static analyses (and how to master them)&nl;Bodden, 2018"; data-line:"LanguageTools.bib:1040"; searchterm:"The%20secret%20sauce%20in%20efficient%20and%20precise%20static%20analysis%3A%20the%20beauty%20of%20distributive%2C%20summarybased%20static%20analyses%20and%20how%20to%20master%20them%20Bodden%2C%202018"; spellcheck:"false"}
Bodden, E.&nbsp;(2018). The secret sauce in efficient and precise static analysis: the beauty of distributive, summary-based static analyses (and how to master them). In _Companion Proceedings for the ISSTA/ECOOP 2018 Workshops_ (pp. 85–93). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3236454.3236500](https://dx.doi.org/10.1145/3236454.3236500){.bib-doi}
~ end bibitem

~ begin bibitem {id:"raschke_flashix_2021"; cite-year:"2021"; cite-authors:"Bodenmüller et al."; cite-authors-long:"Bodenmüller, Schellhorn, Bitterlich, and Reif"; cite-label:"Bodenmüller, Schellhorn, Bitterlich, \& Reif, 2021"; caption:"Flashix: Modular Verification of a Concurrent and Crash-Safe Flash File System&nl;Bodenmüller, Schellhorn, Bitterlich, and Reif, 2021"; data-line:"OperatingSystems.bib:2"; searchterm:"Flashix%3A%20Modular%20Verification%20of%20a%20Concurrent%20and%20CrashSafe%20Flash%20File%20System%20Bodenm%C3%BCller%2C%20Schellhorn%2C%20Bitterlich%2C%20and%20Reif%2C%202021"; spellcheck:"false"}
Bodenmüller, S., Schellhorn, G., Bitterlich, M., & Reif, W.&nbsp;(2021). Flashix: Modular Verification of a Concurrent and Crash-Safe Flash File System. In A.&nbsp;Raschke, E.&nbsp;Riccobene, & K.-D.&nbsp;Schewe (Eds.), _Logic, Computation and Rigorous Methods_ (Vol. 12750, pp. 239–265). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-76020-5_14](https://dx.doi.org/10.1007/978-3-030-76020-5_14){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bodin_trusted_2014"; cite-year:"2014"; cite-authors:"Bodin et al."; cite-authors-long:"Bodin, Chargueraud, Filaretti, Gardner, Maffeis, Naudziuniene, et al."; cite-label:"Bodin et al., 2014"; caption:"A trusted mechanised JavaScript specification&nl;Bodin, Chargueraud, Filaretti, Gardner, Maffeis, Naudziuniene, et al., 2014"; data-line:"FormalBib.bib:9715"; searchterm:"A%20trusted%20mechanised%20JavaScript%20specification%20Bodin%2C%20Chargueraud%2C%20Filaretti%2C%20Gardner%2C%20Maffeis%2C%20Naudziuniene%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Bodin, M., Chargueraud, A., Filaretti, D., Gardner, P., Maffeis, S., Naudziuniene, D., … Smith, G.&nbsp;(2014). A trusted mechanised JavaScript specification. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 87–100). San Diego California USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535876](https://dx.doi.org/10.1145/2535838.2535876){.bib-doi}
~ end bibitem

~ begin bibitem {id:"de_boer_formal_nodate"; cite-year:"n.d."; cite-authors:"Boer"; cite-authors-long:"Boer"; cite-label:"Boer, n.d."; caption:"Formal analysis of the Java Collections framework&nl;Boer, n.d."; data-line:"FormalBib.bib:7147"; searchterm:"Formal%20analysis%20of%20the%20Java%20Collections%20framework%20Boer%2C%20n.d."; spellcheck:"false"}
Boer. (n.d.). Formal analysis of the Java Collections framework, 108.
~ end bibitem

~ begin bibitem {id:"bohrer_veriphy:_2018"; cite-year:"2018"; cite-authors:"Bohrer et al."; cite-authors-long:"Bohrer, Tan, Mitsch, Myreen, and Platzer"; cite-label:"Bohrer, Tan, Mitsch, Myreen, \& Platzer, 2018"; caption:"VeriPhy: verified controller executables from verified cyber-physical system models&nl;Bohrer, Tan, Mitsch, Myreen, and Platzer, 2018"; data-line:"FormalBib.bib:2714"; searchterm:"VeriPhy%3A%20verified%20controller%20executables%20from%20verified%20cyberphysical%20system%20models%20Bohrer%2C%20Tan%2C%20Mitsch%2C%20Myreen%2C%20and%20Platzer%2C%202018"; spellcheck:"false"}
Bohrer, B., Tan, Y.&nbsp;K., Mitsch, S., Myreen, M.&nbsp;O., & Platzer, A.&nbsp;(2018). VeriPhy: verified controller executables from verified cyber-physical system models. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation&nbsp;- PLDI 2018_ (pp. 617–630). Philadelphia, PA, USA: ACM Press. https://doi.org/[10.1145/3192366.3192406](https://dx.doi.org/10.1145/3192366.3192406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2017"; cite-year:"2017"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2017"; caption:"Round-off Error Analysis of Explicit One-Step Numerical Integration Methods&nl;Boldo, Faissole, and Chapoutot, 2017"; data-line:"FormalBib.bib:3523"; searchterm:"Roundoff%20Error%20Analysis%20of%20Explicit%20OneStep%20Numerical%20Integration%20Methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202017"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2017). Round-off Error Analysis of Explicit One-Step Numerical Integration Methods. In _24th IEEE Symposium on Computer Arithmetic_. London, United Kingdom. https://doi.org/[10.1109/ARITH.2017.22](https://dx.doi.org/10.1109/ARITH.2017.22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2018"; cite-year:"2018"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2018"; caption:"Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods&nl;Boldo, Faissole, and Chapoutot, 2018"; data-line:"FormalBib.bib:3512"; searchterm:"Roundoff%20error%20and%20exceptional%20behavior%20analysis%20of%20explicit%20RungeKutta%20methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202018"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2018). _Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods_. Retrieved from <https://hal.archives-ouvertes.fr/hal-01883843>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_improving_2012"; cite-year:"2012"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2012"; caption:"Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives&nl;Boldo, Lelay, and Melquiond, 2012"; data-line:"FormalBib.bib:3556"; searchterm:"Improving%20Real%20Analysis%20in%20Coq%3A%20A%20UserFriendly%20Approach%20to%20Integrals%20and%20Derivatives%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202012"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2012). Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives. In C.&nbsp;Hawblitzel & D.&nbsp;Miller (Eds.), _Certified Programs and Proofs_ (Vol. 7679, pp. 289–304). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-35308-6_22](https://dx.doi.org/10.1007/978-3-642-35308-6_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_coquelicot:_2013"; cite-year:"2013"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2013"; caption:"Coquelicot: A User-Friendly Library of Real Analysis for Coq&nl;Boldo, Lelay, and Melquiond, 2013"; data-line:"FormalBib.bib:3481"; searchterm:"Coquelicot%3A%20A%20UserFriendly%20Library%20of%20Real%20Analysis%20for%20Coq%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202013"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2013). Coquelicot: A User-Friendly Library of Real Analysis for Coq. Retrieved from <https://hal.inria.fr/hal-00860648/document>{.bib-url}
~ end bibitem

~ begin bibitem {id:"boldo_formalization_2016"; cite-year:"2016"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2016"; caption:"Formalization of Real Analysis: A Survey of Proof Assistants and Libraries&nl;Boldo, Lelay, and Melquiond, 2016"; data-line:"FormalBib.bib:3464"; searchterm:"Formalization%20of%20Real%20Analysis%3A%20A%20Survey%20of%20Proof%20Assistants%20and%20Libraries%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2016). Formalization of Real Analysis: A Survey of Proof Assistants and Libraries. _Mathematical Structures in Computer Science_, _26_(7), 1196–1233. https://doi.org/[10.1017/S0960129514000437](https://dx.doi.org/10.1017/S0960129514000437){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bonifacio_dealing_2021"; cite-year:"2021"; cite-authors:"Bonifacio et al."; cite-authors-long:"Bonifacio, Krüger, Narasimhan, Bodden, and Mezini"; cite-label:"Bonifacio, Krüger, Narasimhan, Bodden, \& Mezini, 2021"; caption:"Dealing with Variability in API Misuse Specification&nl;Bonifacio, Krüger, Narasimhan, Bodden, and Mezini, 2021"; data-line:"Security.bib:366"; searchterm:"Dealing%20with%20Variability%20in%20API%20Misuse%20Specification%20Bonifacio%2C%20Kr%C3%BCger%2C%20Narasimhan%2C%20Bodden%2C%20and%20Mezini%2C%202021"; spellcheck:"false"}
Bonifacio, R., Krüger, S., Narasimhan, K., Bodden, E., & Mezini, M.&nbsp;(2021). Dealing with Variability in API Misuse Specification. _arXiv:2105.04950 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.04950](http://arxiv.org/abs/2105.04950){.bib-url}
~ end bibitem

~ begin bibitem {id:"bora_openmp_2021"; cite-year:"2021"; cite-authors:"Bora et al."; cite-authors-long:"Bora, Vaishay, Joshi, and Upadrasta"; cite-label:"Bora, Vaishay, Joshi, \& Upadrasta, 2021"; caption:"OpenMP aware MHP Analysis for Improved Static Data-Race Detection&nl;Bora, Vaishay, Joshi, and Upadrasta, 2021"; data-line:"FormalBib.bib:9818"; searchterm:"OpenMP%20aware%20MHP%20Analysis%20for%20Improved%20Static%20DataRace%20Detection%20Bora%2C%20Vaishay%2C%20Joshi%2C%20and%20Upadrasta%2C%202021"; spellcheck:"false"}
Bora, U., Vaishay, S., Joshi, S., & Upadrasta, R.&nbsp;(2021). OpenMP aware MHP Analysis for Improved Static Data-Race Detection. _arXiv:2111.04259 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2111.04259](http://arxiv.org/abs/2111.04259){.bib-url}
~ end bibitem

~ begin bibitem {id:"bordg_certified_2020"; cite-year:"2020"; cite-authors:"Bordg et al."; cite-authors-long:"Bordg, Lachnitt, and He"; cite-label:"Bordg, Lachnitt, \& He, 2020"; caption:"Certified Quantum Computation in Isabelle/HOL&nl;Bordg, Lachnitt, and He, 2020"; data-line:"FormalBib.bib:5683"; searchterm:"Certified%20Quantum%20Computation%20in%20Isabelle%2FHOL%20Bordg%2C%20Lachnitt%2C%20and%20He%2C%202020"; spellcheck:"false"}
Bordg, A., Lachnitt, H., & He, Y.&nbsp;(2020). Certified Quantum Computation in Isabelle/HOL.&nbsp;_Journal of Automated Reasoning_, 1–19. https://doi.org/[10.1007/s10817-020-09584-7](https://dx.doi.org/10.1007/s10817-020-09584-7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bornebusch_coq_nodate"; cite-year:"n.d."; cite-authors:"Bornebusch"; cite-authors-long:"Bornebusch"; cite-label:"Bornebusch, n.d."; caption:"COQ meets Clash: PROPOSING A HARDWARE DESIGN SYNTHESIS FLOW THAT COMBINES PROOF ASSISTANTS WITH FUNCTIONAL HARDWARE DESCRIPTION LANGUAGES&nl;Bornebusch, n.d."; data-line:"Hardware.bib:2"; searchterm:"COQ%20meets%20Clash%3A%20PROPOSING%20A%20HARDWARE%20DESIGN%20SYNTHESIS%20FLOW%20THAT%20COMBINES%20PROOF%20ASSISTANTS%20WITH%20FUNCTIONAL%20HARDWARE%20DESCRIPTION%20LANGUAGES%20Bornebusch%2C%20n.d."; spellcheck:"false"}
Bornebusch, F.&nbsp;(n.d.). COQ meets Clash: PROPOSING A HARDWARE DESIGN SYNTHESIS FLOW THAT COMBINES PROOF ASSISTANTS WITH FUNCTIONAL HARDWARE DESCRIPTION LANGUAGES, 186.
~ end bibitem

~ begin bibitem {id:"bornholt_using_2021"; cite-year:"2021"; cite-authors:"Bornholt et al."; cite-authors-long:"Bornholt, Joshi, Astrauskas, Cully, Kragl, Markle, et al."; cite-label:"Bornholt et al., 2021"; caption:"Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3&nl;Bornholt, Joshi, Astrauskas, Cully, Kragl, Markle, et al., 2021"; data-line:"FormalBib.bib:9031"; searchterm:"Using%20Lightweight%20Formal%20Methods%20to%20Validate%20a%20KeyValue%20Storage%20Node%20in%20Amazon%20S3%20Bornholt%2C%20Joshi%2C%20Astrauskas%2C%20Cully%2C%20Kragl%2C%20Markle%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Bornholt, J., Joshi, R., Astrauskas, V., Cully, B., Kragl, B., Markle, S., … Tasiran, S.&nbsp;(2021). Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3, 15.
~ end bibitem

~ begin bibitem {id:"bosamiya_provably-safe_nodate"; cite-year:"n.d."; cite-authors:"Bosamiya et al."; cite-authors-long:"Bosamiya, Lim, and Parno"; cite-label:"Bosamiya, Lim, \& Parno, n.d."; caption:"Provably-Safe Multilingual Software Sandboxing using WebAssembly&nl;Bosamiya, Lim, and Parno, n.d."; data-line:"FormalBib.bib:10258"; searchterm:"ProvablySafe%20Multilingual%20Software%20Sandboxing%20using%20WebAssembly%20Bosamiya%2C%20Lim%2C%20and%20Parno%2C%20n.d."; spellcheck:"false"}
Bosamiya, J., Lim, W.&nbsp;S., & Parno, B.&nbsp;(n.d.). Provably-Safe Multilingual Software Sandboxing using WebAssembly, 18.
~ end bibitem

~ begin bibitem {id:"bosshart_programming_2014"; cite-year:"2014"; cite-authors:"Bosshart et al."; cite-authors-long:"Bosshart, Daly, Izzard, McKeown, Rexford, Schlesinger, et al."; cite-label:"Bosshart et al., 2014"; caption:"Programming Protocol-Independent Packet Processors&nl;Bosshart, Daly, Izzard, McKeown, Rexford, Schlesinger, et al., 2014"; data-line:"Networking.bib:916"; searchterm:"Programming%20ProtocolIndependent%20Packet%20Processors%20Bosshart%2C%20Daly%2C%20Izzard%2C%20McKeown%2C%20Rexford%2C%20Schlesinger%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Bosshart, P., Daly, D., Izzard, M., McKeown, N., Rexford, J., Schlesinger, C., … Walker, D.&nbsp;(2014). Programming Protocol-Independent Packet Processors. _arXiv:1312.1719 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1312.1719](http://arxiv.org/abs/1312.1719){.bib-url}
~ end bibitem

~ begin bibitem {id:"boston_veried_nodate"; cite-year:"n.d."; cite-authors:"Boston et al."; cite-authors-long:"Boston, Breese, Dodds, Dodds, Huﬀman, Petcher, and Stefanescu"; cite-label:"Boston et al., n.d."; caption:"Veriﬁed Cryptographic Code for Everybody&nl;Boston, Breese, Dodds, Dodds, Huﬀman, Petcher, and Stefanescu, n.d."; data-line:"Cryptography.bib:2"; searchterm:"Veri%EF%AC%81ed%20Cryptographic%20Code%20for%20Everybody%20Boston%2C%20Breese%2C%20Dodds%2C%20Dodds%2C%20Hu%EF%AC%80man%2C%20Petcher%2C%20and%20Stefanescu%2C%20n.d."; spellcheck:"false"}
Boston, B., Breese, S., Dodds, J., Dodds, M., Huﬀman, B., Petcher, A., & Stefanescu, A.&nbsp;(n.d.). Veriﬁed Cryptographic Code for Everybody, 23.
~ end bibitem

~ begin bibitem {id:"degano_secure_2009"; cite-year:"2009"; cite-authors:"Boudol"; cite-authors-long:"Boudol"; cite-label:"Boudol, 2009"; caption:"Secure Information Flow as a Safety Property&nl;Boudol, 2009"; data-line:"Security.bib:429"; searchterm:"Secure%20Information%20Flow%20as%20a%20Safety%20Property%20Boudol%2C%202009"; spellcheck:"false"}
Boudol, G.&nbsp;(2009). Secure Information Flow as a Safety Property. In P.&nbsp;Degano, J.&nbsp;Guttman, & F.&nbsp;Martinelli (Eds.), _Formal Aspects in Security and Trust_ (Vol. 5491, pp. 20–34). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-01465-9_2](https://dx.doi.org/10.1007/978-3-642-01465-9_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boulier_next_2017"; cite-year:"2017"; cite-authors:"Boulier et al."; cite-authors-long:"Boulier, Pédrot, and Tabareau"; cite-label:"Boulier, Pédrot, \& Tabareau, 2017"; caption:"The next 700 syntactical models of type theory&nl;Boulier, Pédrot, and Tabareau, 2017"; data-line:"FormalBib.bib:1194"; searchterm:"The%20next%20700%20syntactical%20models%20of%20type%20theory%20Boulier%2C%20P%C3%A9drot%2C%20and%20Tabareau%2C%202017"; spellcheck:"false"}
Boulier, S., Pédrot, P.-M., & Tabareau, N.&nbsp;(2017). The next 700 syntactical models of type theory (pp. 182–194). https://doi.org/[10.1145/3018610.3018620](https://dx.doi.org/10.1145/3018610.3018620){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boulme_formally_nodate"; cite-year:"n.d."; cite-authors:"Boulmé"; cite-authors-long:"Boulmé"; cite-label:"Boulmé, n.d."; caption:"Formally Veriﬁed Defensive Programming&nl;Boulmé, n.d."; data-line:"FormalBib.bib:7253"; searchterm:"Formally%20Veri%EF%AC%81ed%20Defensive%20Programming%20Boulm%C3%A9%2C%20n.d."; spellcheck:"false"}
Boulmé, S.&nbsp;(n.d.). _Formally Veriﬁed Defensive Programming_ (phdthesis).
~ end bibitem

~ begin bibitem {id:"bourdoncle_efficient_1993"; cite-year:"1993"; cite-authors:"Bourdoncle"; cite-authors-long:"Bourdoncle"; cite-label:"Bourdoncle, 1993"; caption:"Efficient chaotic iteration strategies with widenings&nl;Bourdoncle, 1993"; data-line:"FormalBib.bib:9615"; searchterm:"Efficient%20chaotic%20iteration%20strategies%20with%20widenings%20Bourdoncle%2C%201993"; spellcheck:"false"}
Bourdoncle, F.&nbsp;(1993). Efficient chaotic iteration strategies with widenings (pp. 128–141). Springer-Verlag.
~ end bibitem

~ begin bibitem {id:"bourgeat_multipurpose_2021"; cite-year:"2021"; cite-authors:"Bourgeat et al."; cite-authors-long:"Bourgeat, Clester, Erbsen, Gruetter, Wright, and Chlipala"; cite-label:"Bourgeat et al., 2021"; caption:"A Multipurpose Formal RISC-V Specification&nl;Bourgeat, Clester, Erbsen, Gruetter, Wright, and Chlipala, 2021"; data-line:"FormalBib.bib:7995"; searchterm:"A%20Multipurpose%20Formal%20RISCV%20Specification%20Bourgeat%2C%20Clester%2C%20Erbsen%2C%20Gruetter%2C%20Wright%2C%20and%20Chlipala%2C%202021"; spellcheck:"false"}
Bourgeat, T., Clester, I., Erbsen, A., Gruetter, S., Wright, A., & Chlipala, A.&nbsp;(2021). A Multipurpose Formal RISC-V Specification. _arXiv:2104.00762 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2104.00762](http://arxiv.org/abs/2104.00762){.bib-url}
~ end bibitem

~ begin bibitem {id:"bowman_j1:_nodate"; cite-year:"n.d."; cite-authors:"Bowman"; cite-authors-long:"Bowman"; cite-label:"Bowman, n.d."; caption:"J1: a small Forth CPU Core for FPGAs&nl;Bowman, n.d."; data-line:"FormalBib.bib:1186"; searchterm:"J1%3A%20a%20small%20Forth%20CPU%20Core%20for%20FPGAs%20Bowman%2C%20n.d."; spellcheck:"false"}
Bowman, J.&nbsp;(n.d.). _J1: a small Forth CPU Core for FPGAs_.
~ end bibitem

~ begin bibitem {id:"brady_idris_2013"; cite-year:"2013"; cite-authors:"Brady"; cite-authors-long:"Brady"; cite-label:"Brady, 2013"; caption:"Idris, a general-purpose dependently typed programming language: Design and implementation&nl;Brady, 2013"; data-line:"FormalBib.bib:4214"; searchterm:"Idris%2C%20a%20generalpurpose%20dependently%20typed%20programming%20language%3A%20Design%20and%20implementation%20Brady%2C%202013"; spellcheck:"false"}
Brady, E.&nbsp;(2013). Idris, a general-purpose dependently typed programming language: Design and implementation. _Journal of Functional Programming_, _23_(5), 552–593. https://doi.org/[10.1017/S095679681300018X](https://dx.doi.org/10.1017/S095679681300018X){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_2018"; cite-year:"2018"; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie"; cite-label:"Brahmi et al., 2018"; caption:"Formalise to automate: deployment of a safe and cost-efficient process for avionics software&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie, 2018"; data-line:"FormalBib.bib:2187"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costefficient%20process%20for%20avionics%20software%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Atki%2C%20and%20Marie%2C%202018"; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Atki, A., & Marie, T.&nbsp;(2018). Formalise to automate: deployment of a safe and cost-efficient process for avionics software. In _9th European Congress on Embedded Real Time Software and Systems (ERTS 2018)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01708332>{.bib-url}
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_nodate"; cite-year:"n.d."; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al."; cite-label:"Brahmi et al., n.d."; caption:"Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al., n.d."; data-line:"FormalBib.bib:2178"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costef%EF%AC%81cient%20process%20for%20avionics%20software%20Extended%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Informatics%2C%20Nauzere%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Informatics, C., Nauzere, L., … Marie, T.&nbsp;(n.d.). Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended, 17.
~ end bibitem

~ begin bibitem {id:"braibant_formal_2013"; cite-year:"2013"; cite-authors:"Braibant and Chlipala"; cite-authors-long:"Braibant and Chlipala"; cite-label:"Braibant \& Chlipala, 2013"; caption:"Formal Verification of Hardware Synthesis&nl;Braibant and Chlipala, 2013"; data-line:"FormalBib.bib:4566"; searchterm:"Formal%20Verification%20of%20Hardware%20Synthesis%20Braibant%20and%20Chlipala%2C%202013"; spellcheck:"false"}
Braibant, T., & Chlipala, A.&nbsp;(2013). Formal Verification of Hardware Synthesis. _arXiv:1301.4779 \[cs\]_, _8044_, 213–228. https://doi.org/[10.1007/978-3-642-39799-8_14](https://dx.doi.org/10.1007/978-3-642-39799-8_14){.bib-doi}
~ end bibitem

~ begin bibitem {id:"breitner_ready_2018"; cite-year:"2018"; cite-authors:"Breitner et al."; cite-authors-long:"Breitner, Spector-Zabusky, Li, Rizkallah, Wiegley, and Weirich"; cite-label:"Breitner et al., 2018"; caption:"Ready, Set, Verify! Applying Hs-to-coq to Real-world Haskell Code (Experience Report)&nl;Breitner, Spector-Zabusky, Li, Rizkallah, Wiegley, and Weirich, 2018"; data-line:"FormalBib.bib:4856"; searchterm:"Ready%2C%20Set%2C%20Verify!%20Applying%20Hstocoq%20to%20Realworld%20Haskell%20Code%20Experience%20Report%20Breitner%2C%20SpectorZabusky%2C%20Li%2C%20Rizkallah%2C%20Wiegley%2C%20and%20Weirich%2C%202018"; spellcheck:"false"}
Breitner, J., Spector-Zabusky, A., Li, Y., Rizkallah, C., Wiegley, J., & Weirich, S.&nbsp;(2018). Ready, Set, Verify! Applying Hs-to-coq to Real-world Haskell Code (Experience Report). _Proc. ACM Program. Lang._, _2_, 89:1–89:16. https://doi.org/[10.1145/3236784](https://dx.doi.org/10.1145/3236784){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bridges_apartness_2011"; cite-year:"2011"; cite-authors:"Bridges and Vîţă"; cite-authors-long:"Bridges and Vîţă"; cite-label:"Bridges \& Vîţă, 2011"; caption:"Apartness and Uniformity&nl;Bridges and Vîţă, 2011"; data-line:"FormalBib.bib:6800"; searchterm:"Apartness%20and%20Uniformity%20Bridges%20and%20V%C3%AE%C5%A3%C4%83%2C%202011"; spellcheck:"false"}
Bridges, D.&nbsp;S., & Vîţă, L.&nbsp;S.&nbsp;(2011). _Apartness and Uniformity_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-22415-7](https://dx.doi.org/10.1007/978-3-642-22415-7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brockschmidt_t2:_2016"; cite-year:"2016"; cite-authors:"Brockschmidt et al."; cite-authors-long:"Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman"; cite-label:"Brockschmidt, Cook, Ishtiaq, Khlaaf, \& Piterman, 2016"; caption:"T2: Temporal Property Verification&nl;Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman, 2016"; data-line:"FormalBib.bib:3846"; searchterm:"T2%3A%20Temporal%20Property%20Verification%20Brockschmidt%2C%20Cook%2C%20Ishtiaq%2C%20Khlaaf%2C%20and%20Piterman%2C%202016"; spellcheck:"false"}
Brockschmidt, M., Cook, B., Ishtiaq, S., Khlaaf, H., & Piterman, N.&nbsp;(2016). T2: Temporal Property Verification. In M.&nbsp;Chechik & J.-F.&nbsp;Raskin (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (pp. 387–393). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"brookes_semantics_2007"; cite-year:"2007"; cite-authors:"Brookes"; cite-authors-long:"Brookes"; cite-label:"Brookes, 2007"; caption:"A semantics for concurrent separation logic&nl;Brookes, 2007"; data-line:"FormalBib.bib:1534"; searchterm:"A%20semantics%20for%20concurrent%20separation%20logic%20Brookes%2C%202007"; spellcheck:"false"}
Brookes, S.&nbsp;(2007). A semantics for concurrent separation logic. _Theoretical Computer Science_, _375_(1), 227–270. https://doi.org/[10.1016/j.tcs.2006.12.034](https://dx.doi.org/10.1016/j.tcs.2006.12.034){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brookes_concurrent_2016"; cite-year:"2016"; cite-authors:"Brookes and O’Hearn"; cite-authors-long:"Brookes and O’Hearn"; cite-label:"Brookes \& O’Hearn, 2016"; caption:"Concurrent Separation Logic&nl;Brookes and O’Hearn, 2016"; data-line:"FormalBib.bib:1550"; searchterm:"Concurrent%20Separation%20Logic%20Brookes%20and%20O%E2%80%99Hearn%2C%202016"; spellcheck:"false"}
Brookes, S., & O’Hearn, P.&nbsp;W.&nbsp;(2016). Concurrent Separation Logic. _ACM SIGLOG News_, _3_(3), 47–65. https://doi.org/[10.1145/2984450.2984457](https://dx.doi.org/10.1145/2984450.2984457){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brotherston_biabduction_2016"; cite-year:"2016"; cite-authors:"Brotherston et al."; cite-authors-long:"Brotherston, Gorogiannis, and Kanovich"; cite-label:"Brotherston, Gorogiannis, \& Kanovich, 2016"; caption:"Biabduction (and Related Problems) in Array Separation Logic&nl;Brotherston, Gorogiannis, and Kanovich, 2016"; data-line:"LanguageTools.bib:762"; searchterm:"Biabduction%20and%20Related%20Problems%20in%20Array%20Separation%20Logic%20Brotherston%2C%20Gorogiannis%2C%20and%20Kanovich%2C%202016"; spellcheck:"false"}
Brotherston, J., Gorogiannis, N., & Kanovich, M.&nbsp;(2016). Biabduction (and Related Problems) in Array Separation Logic. _arXiv:1607.01993 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1607.01993](http://arxiv.org/abs/1607.01993){.bib-url}
~ end bibitem

~ begin bibitem {id:"brown_semi-automatic_nodate"; cite-year:"2021"; cite-authors:"Brown"; cite-authors-long:"Brown"; cite-label:"Brown, n.d."; caption:"Semi-Automatic Ladderisation: Improving Code Security through Rewriting and Dependent Types&nl;Brown, 2021"; data-line:"Security.bib:1387"; searchterm:"SemiAutomatic%20Ladderisation%3A%20Improving%20Code%20Security%20through%20Rewriting%20and%20Dependent%20Types%20Brown%2C%202021"; spellcheck:"false"}
Brown, C.&nbsp;(n.d.). Semi-Automatic Ladderisation: Improving Code Security through Rewriting and Dependent Types. Retrieved December 7, 2021, from <https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/24384/Brown_2021_Semi_automatic_ladderisation_PEPM2022_AAM.pdf?sequence=1&isAllowed=y>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bruening_transparent_nodate"; cite-year:"n.d."; cite-authors:"Bruening et al."; cite-authors-long:"Bruening, Zhao, and Amarasinghe"; cite-label:"Bruening, Zhao, \& Amarasinghe, n.d."; caption:"Transparent Dynamic Instrumentation&nl;Bruening, Zhao, and Amarasinghe, n.d."; data-line:"FormalBib.bib:9438"; searchterm:"Transparent%20Dynamic%20Instrumentation%20Bruening%2C%20Zhao%2C%20and%20Amarasinghe%2C%20n.d."; spellcheck:"false"}
Bruening, D., Zhao, Q., & Amarasinghe, S.&nbsp;(n.d.). Transparent Dynamic Instrumentation, 11.
~ end bibitem

~ begin bibitem {id:"bugariu_identifying_2021"; cite-year:"2021"; cite-authors:"Bugariu et al."; cite-authors-long:"Bugariu, Ter-Gabrielyan, and Müller"; cite-label:"Bugariu, Ter-Gabrielyan, \& Müller, 2021"; caption:"Identifying Overly Restrictive Matching Patterns in SMT-based Program Verifiers&nl;Bugariu, Ter-Gabrielyan, and Müller, 2021"; data-line:"FormalBib.bib:219"; searchterm:"Identifying%20Overly%20Restrictive%20Matching%20Patterns%20in%20SMTbased%20Program%20Verifiers%20Bugariu%2C%20TerGabrielyan%2C%20and%20M%C3%BCller%2C%202021"; spellcheck:"false"}
Bugariu, A., Ter-Gabrielyan, A., & Müller, P.&nbsp;(2021). Identifying Overly Restrictive Matching Patterns in SMT-based Program Verifiers. _arXiv:2105.04385 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.04385](http://arxiv.org/abs/2105.04385){.bib-url}
~ end bibitem

~ begin bibitem {id:"bugliesi_secure_2007"; cite-year:"2007"; cite-authors:"Bugliesi and Giunti"; cite-authors-long:"Bugliesi and Giunti"; cite-label:"Bugliesi \& Giunti, 2007"; caption:"Secure implementations of typed channel abstractions&nl;Bugliesi and Giunti, 2007"; data-line:"Security.bib:513"; searchterm:"Secure%20implementations%20of%20typed%20channel%20abstractions%20Bugliesi%20and%20Giunti%2C%202007"; spellcheck:"false"}
Bugliesi, M., & Giunti, M.&nbsp;(2007). Secure implementations of typed channel abstractions. In _Proceedings of the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages&nbsp;- POPL ’07_ (p. 251). Nice, France: ACM Press. https://doi.org/[10.1145/1190216.1190253](https://dx.doi.org/10.1145/1190216.1190253){.bib-doi}
~ end bibitem

~ begin bibitem {id:"burlo_monitorability_2021"; cite-year:"2021"; cite-authors:"Burlò et al."; cite-authors-long:"Burlò, Francalanza, and Scalas"; cite-label:"Burlò, Francalanza, \& Scalas, 2021"; caption:"On the Monitorability of Session Types, in Theory and Practice&nl;Burlò, Francalanza, and Scalas, 2021"; data-line:"Networking.bib:16"; searchterm:"On%20the%20Monitorability%20of%20Session%20Types%2C%20in%20Theory%20and%20Practice%20Burl%C3%B2%2C%20Francalanza%2C%20and%20Scalas%2C%202021"; spellcheck:"false"}
Burlò, C.&nbsp;B., Francalanza, A., & Scalas, A.&nbsp;(2021). On the Monitorability of Session Types, in Theory and Practice. _arXiv:2105.06291 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.06291](http://arxiv.org/abs/2105.06291){.bib-url}
~ end bibitem

~ begin bibitem {id:"busi_brief_2019"; cite-year:"2019"; cite-authors:"Busi and Galletta"; cite-authors-long:"Busi and Galletta"; cite-label:"Busi \& Galletta, 2019"; caption:"A Brief Tour of Formally Secure Compilation&nl;Busi and Galletta, 2019"; data-line:"Security.bib:45"; searchterm:"A%20Brief%20Tour%20of%20Formally%20Secure%20Compilation%20Busi%20and%20Galletta%2C%202019"; spellcheck:"false"}
Busi, M., & Galletta, L.&nbsp;(2019). A Brief Tour of Formally Secure Compilation. In _Proceedings of the Third Italian Conference on Cyber Security_ (p. 13). Pisa, Italy: CEUR-WS.org. Retrieved from <http://ceur-ws.org/Vol-2315/paper03.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"busse_running_2020"; cite-year:"2020"; cite-authors:"Busse et al."; cite-authors-long:"Busse, Nowack, and Cadar"; cite-label:"Busse, Nowack, \& Cadar, 2020"; caption:"Running symbolic execution forever&nl;Busse, Nowack, and Cadar, 2020"; data-line:"Security.bib:928"; searchterm:"Running%20symbolic%20execution%20forever%20Busse%2C%20Nowack%2C%20and%20Cadar%2C%202020"; spellcheck:"false"}
Busse, F., Nowack, M., & Cadar, C.&nbsp;(2020). Running symbolic execution forever. In _Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis_ (pp. 63–74). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3395363.3397360](https://dx.doi.org/10.1145/3395363.3397360){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cadar_klee_2008"; cite-year:"2008"; cite-authors:"Cadar et al."; cite-authors-long:"Cadar, Dunbar, and Engler"; cite-label:"Cadar, Dunbar, \& Engler, 2008"; caption:"KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs&nl;Cadar, Dunbar, and Engler, 2008"; data-line:"Security.bib:945"; searchterm:"KLEE%3A%20unassisted%20and%20automatic%20generation%20of%20highcoverage%20tests%20for%20complex%20systems%20programs%20Cadar%2C%20Dunbar%2C%20and%20Engler%2C%202008"; spellcheck:"false"}
Cadar, C., Dunbar, D., & Engler, D.&nbsp;(2008). KLEE: unassisted and automatic generation of high-coverage tests for complex systems programs. In _Proceedings of the 8th USENIX conference on Operating systems design and implementation_ (pp. 209–224). USA: USENIX Association.
~ end bibitem

~ begin bibitem {id:"cai_canary_2021"; cite-year:"2021"; cite-authors:"Yuandao Cai et al."; cite-authors-long:"Yuandao Cai, Yao, and Zhang"; cite-label:"Yuandao Cai, Yao, \& Zhang, 2021"; caption:"Canary: Practical Static Detection of  Inter-thread Value-Flow Bugs&nl;Yuandao Cai, Yao, and Zhang, 2021"; data-line:"LanguageTools.bib:183"; searchterm:"Canary%3A%20Practical%20Static%20Detection%20of%20Interthread%20ValueFlow%20Bugs%20Yuandao%20Cai%2C%20Yao%2C%20and%20Zhang%2C%202021"; spellcheck:"false"}
Cai, Y., Yao, P., & Zhang, C.&nbsp;(2021). Canary: Practical Static Detection of&nbsp;Inter-thread Value-Flow Bugs, 15.
~ end bibitem

~ begin bibitem {id:"cai_sound_2021"; cite-year:"2021"; cite-authors:"Yan Cai et al."; cite-authors-long:"Yan Cai, Yun, Wang, Qiao, and Palsberg"; cite-label:"Yan Cai, Yun, Wang, Qiao, \& Palsberg, 2021"; caption:"Sound and efficient concurrency bug prediction&nl;Yan Cai, Yun, Wang, Qiao, and Palsberg, 2021"; data-line:"Security.bib:679"; searchterm:"Sound%20and%20efficient%20concurrency%20bug%20prediction%20Yan%20Cai%2C%20Yun%2C%20Wang%2C%20Qiao%2C%20and%20Palsberg%2C%202021"; spellcheck:"false"}
Cai, Y., Yun, H., Wang, J., Qiao, L., & Palsberg, J.&nbsp;(2021). Sound and efficient concurrency bug prediction. In _Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering_ (pp. 255–267). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3468264.3468549](https://dx.doi.org/10.1145/3468264.3468549){.bib-doi}
~ end bibitem

~ begin bibitem {id:"calcagno_moving_nodate"; cite-year:"2019"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, Dubreil, and O’Hearn"; cite-label:"Calcagno, Distefano, Dubreil, \& O’Hearn, n.d."; caption:"Moving Fast with Software Verification.Facebook Research&nl;Calcagno, Distefano, Dubreil, and O’Hearn, 2019"; data-line:"FormalBib.bib:3026"; searchterm:"Moving%20Fast%20with%20Software%20Verification.Facebook%20Research%20Calcagno%2C%20Distefano%2C%20Dubreil%2C%20and%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
Calcagno, C., Distefano, D., Dubreil, J., & O’Hearn, P.&nbsp;(n.d.). Moving Fast with Software Verification.Facebook Research. Retrieved February 1, 2019, from <https://research.fb.com/publications/moving-fast-with-software-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"calcagno_compositional_2011"; cite-year:"2011"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, O’Hearn, and Yang"; cite-label:"Calcagno, Distefano, O’Hearn, \& Yang, 2011"; caption:"Compositional Shape Analysis by Means of Bi-Abduction&nl;Calcagno, Distefano, O’Hearn, and Yang, 2011"; data-line:"LanguageTools.bib:744"; searchterm:"Compositional%20Shape%20Analysis%20by%20Means%20of%20BiAbduction%20Calcagno%2C%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202011"; spellcheck:"false"}
Calcagno, C., Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2011). Compositional Shape Analysis by Means of Bi-Abduction. _Journal of the ACM_, _58_(6), 26:1–26:66. https://doi.org/[10.1145/2049697.2049700](https://dx.doi.org/10.1145/2049697.2049700){.bib-doi}
~ end bibitem

~ begin bibitem {id:"campbell_avenir_nodate"; cite-year:"n.d."; cite-authors:"Campbell et al."; cite-authors-long:"Campbell, Ramamurthy, Hallahan, Srikumar, Cascone, Liu, et al."; cite-label:"Campbell et al., n.d."; caption:"Avenir: Managing Data Plane Diversity with Control Plane Synthesis&nl;Campbell, Ramamurthy, Hallahan, Srikumar, Cascone, Liu, et al., n.d."; data-line:"Networking.bib:999"; searchterm:"Avenir%3A%20Managing%20Data%20Plane%20Diversity%20with%20Control%20Plane%20Synthesis%20Campbell%2C%20Ramamurthy%2C%20Hallahan%2C%20Srikumar%2C%20Cascone%2C%20Liu%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Campbell, E.&nbsp;H., Ramamurthy, V., Hallahan, W.&nbsp;T., Srikumar, P., Cascone, C., Liu, J., … Foster, N.&nbsp;(n.d.). Avenir: Managing Data Plane Diversity with Control Plane Synthesis, 21.
~ end bibitem

~ begin bibitem {id:"canini_nice_2012"; cite-year:"2012"; cite-authors:"Canini et al."; cite-authors-long:"Canini, Venzano, Peresˇıni, Kostic, and Rexford"; cite-label:"Canini, Venzano, Peresˇıni, Kostic, \& Rexford, 2012"; caption:"A NICE Way to Test OpenFlow Applications&nl;Canini, Venzano, Peresˇıni, Kostic, and Rexford, 2012"; data-line:"Networking.bib:147"; searchterm:"A%20NICE%20Way%20to%20Test%20OpenFlow%20Applications%20Canini%2C%20Venzano%2C%20Peres%CB%87%C4%B1ni%2C%20Kostic%2C%20and%20Rexford%2C%202012"; spellcheck:"false"}
Canini, M., Venzano, D., Peresˇıni, P., Kostic, D., & Rexford, J.&nbsp;(2012). A NICE Way to Test OpenFlow Applications, 14.
~ end bibitem

~ begin bibitem {id:"cao_vst-floyd:_2018"; cite-year:"2018"; cite-authors:"Cao et al."; cite-authors-long:"Cao, Beringer, Gruetter, Dodds, and Appel"; cite-label:"Cao, Beringer, Gruetter, Dodds, \& Appel, 2018"; caption:"VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs&nl;Cao, Beringer, Gruetter, Dodds, and Appel, 2018"; data-line:"FormalBib.bib:1405"; searchterm:"VSTFloyd%3A%20A%20Separation%20Logic%20Tool%20to%20Verify%20Correctness%20of%20C%20Programs%20Cao%2C%20Beringer%2C%20Gruetter%2C%20Dodds%2C%20and%20Appel%2C%202018"; spellcheck:"false"}
Cao, Q., Beringer, L., Gruetter, S., Dodds, J., & Appel, A.&nbsp;W.&nbsp;(2018). VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs. _J.&nbsp;Autom. Reason._, _61_(1), 367–422. https://doi.org/[10.1007/s10817-018-9457-5](https://dx.doi.org/10.1007/s10817-018-9457-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"carbonneaux_applying_2021"; cite-year:"2021"; cite-authors:"Carbonneaux et al."; cite-authors-long:"Carbonneaux, Zilberstein, Klee, O’Hearn, and Nardelli"; cite-label:"Carbonneaux, Zilberstein, Klee, O’Hearn, \& Nardelli, 2021"; caption:"Applying Formal Verification to Microkernel IPC at Meta&nl;Carbonneaux, Zilberstein, Klee, O’Hearn, and Nardelli, 2021"; data-line:"FormalBib.bib:9352"; searchterm:"Applying%20Formal%20Verification%20to%20Microkernel%20IPC%20at%20Meta%20Carbonneaux%2C%20Zilberstein%2C%20Klee%2C%20O%E2%80%99Hearn%2C%20and%20Nardelli%2C%202021"; spellcheck:"false"}
Carbonneaux, Q., Zilberstein, N., Klee, C., O’Hearn, P.&nbsp;W., & Nardelli, F.&nbsp;Z.&nbsp;(2021). Applying Formal Verification to Microkernel IPC at Meta, 14.
~ end bibitem

~ begin bibitem {id:"noauthor_carnegie_nodate"; cite-authors:"2021e"; cite-authors-long:"2021e"; cite-label:"\&ldquo;Carnegie Mellon University research repository - Browse,\&rdquo; n.d."; caption:"Carnegie Mellon University research repository - Browse&nl;2021e, "; data-line:"FormalBib.bib:418"; searchterm:"Carnegie%20Mellon%20University%20research%20repository%20%20Browse%202021e%2C%20"; spellcheck:"false"}
Carnegie Mellon University research repository - Browse. (n.d.). Retrieved February 1, 2021, from <https://kilthub.cmu.edu/etd>{.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_specifying_2019"; cite-year:"2019b"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2019a"; caption:"Specifying verified x86 software from scratch&nl;Carneiro, 2019b"; data-line:"FormalBib.bib:6437"; searchterm:"Specifying%20verified%20x86%20software%20from%20scratch%20Carneiro%2C%202019b"; spellcheck:"false"}
Carneiro, M.&nbsp;(2019a). Specifying verified x86 software from scratch. _arXiv:1907.01283 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1907.01283](http://arxiv.org/abs/1907.01283){.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_type_2019"; cite-year:"2019a"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2019b"; caption:"The Type Theory of Lean&nl;Carneiro, 2019a"; data-line:"FormalBib.bib:6451"; searchterm:"The%20Type%20Theory%20of%20Lean%20Carneiro%2C%202019a"; spellcheck:"false"}
Carneiro, M.&nbsp;(2019b). The Type Theory of Lean. Retrieved from <https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_metamath_2020-1"; cite-year:"2020b"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2020a"; caption:"Metamath Zero&nl;Carneiro, 2020b"; data-line:"FormalBib.bib:6459"; searchterm:"Metamath%20Zero%20Carneiro%2C%202020b"; spellcheck:"false"}
Carneiro, M.&nbsp;(2020a). _Metamath Zero_. Retrieved from <https://github.com/digama0/mm0>{.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_metamath_2020"; cite-year:"2020a"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2020b"; caption:"Metamath Zero: Designing a Theorem Prover Prover&nl;Carneiro, 2020a"; data-line:"FormalBib.bib:5634"; searchterm:"Metamath%20Zero%3A%20Designing%20a%20Theorem%20Prover%20Prover%20Carneiro%2C%202020a"; spellcheck:"false"}
Carneiro, M.&nbsp;(2020b). Metamath Zero: Designing a Theorem Prover Prover. In C.&nbsp;Benzmüller & B.&nbsp;Miller (Eds.), _Intelligent Computer Mathematics_ (pp. 71–88). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-53518-6_5](https://dx.doi.org/10.1007/978-3-030-53518-6_5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"casado_abstractions_2014"; cite-year:"2014"; cite-authors:"Casado et al."; cite-authors-long:"Casado, Foster, and Guha"; cite-label:"Casado, Foster, \& Guha, 2014"; caption:"Abstractions for software-defined networks&nl;Casado, Foster, and Guha, 2014"; data-line:"Networking.bib:489"; searchterm:"Abstractions%20for%20softwaredefined%20networks%20Casado%2C%20Foster%2C%20and%20Guha%2C%202014"; spellcheck:"false"}
Casado, M., Foster, N., & Guha, A.&nbsp;(2014). Abstractions for software-defined networks. _Communications of the ACM_, _57_(10), 86–95. https://doi.org/[10.1145/2661061.2661063](https://dx.doi.org/10.1145/2661061.2661063){.bib-doi}
~ end bibitem

~ begin bibitem {id:"casinghino_combining_2014-1"; cite-year:"2014"; cite-authors:"Casinghino"; cite-authors-long:"Casinghino"; cite-label:"Casinghino, 2014"; caption:"Combining Proofs and Programs&nl;Casinghino, 2014"; data-line:"FormalBib.bib:4843"; searchterm:"Combining%20Proofs%20and%20Programs%20Casinghino%2C%202014"; spellcheck:"false"}
Casinghino, C.&nbsp;(2014). _Combining Proofs and Programs_ (phdthesis). University of Pennsylvania, Philadelphia, PA, USA.&nbsp;Retrieved from <https://www.seas.upenn.edu/~sweirich/papers/casinghino-thesis.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"casinghino_combining_2014"; cite-year:"2014"; cite-authors:"Casinghino et al."; cite-authors-long:"Casinghino, Sjöberg, and Weirich"; cite-label:"Casinghino, Sjöberg, \& Weirich, 2014"; caption:"Combining Proofs and Programs in a Dependently Typed Language&nl;Casinghino, Sjöberg, and Weirich, 2014"; data-line:"FormalBib.bib:4824"; searchterm:"Combining%20Proofs%20and%20Programs%20in%20a%20Dependently%20Typed%20Language%20Casinghino%2C%20Sj%C3%B6berg%2C%20and%20Weirich%2C%202014"; spellcheck:"false"}
Casinghino, C., Sjöberg, V., & Weirich, S.&nbsp;(2014). Combining Proofs and Programs in a Dependently Typed Language. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 33–45). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535883](https://dx.doi.org/10.1145/2535838.2535883){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cassez_verification_2021"; cite-year:"2021"; cite-authors:"Cassez"; cite-authors-long:"Cassez"; cite-label:"Cassez, 2021"; caption:"Verification of the Incremental Merkle Tree Algorithm with Dafny&nl;Cassez, 2021"; data-line:"Blockchain.bib:2"; searchterm:"Verification%20of%20the%20Incremental%20Merkle%20Tree%20Algorithm%20with%20Dafny%20Cassez%2C%202021"; spellcheck:"false"}
Cassez, F.&nbsp;(2021). Verification of the Incremental Merkle Tree Algorithm with Dafny. _arXiv:2105.06009 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.06009](http://arxiv.org/abs/2105.06009){.bib-url}
~ end bibitem

~ begin bibitem {id:"cassez_formal_2021"; cite-year:"2021"; cite-authors:"Cassez et al."; cite-authors-long:"Cassez, Fuller, and Asgaonkar"; cite-label:"Cassez, Fuller, \& Asgaonkar, 2021"; caption:"Formal Verification of the Ethereum 2.0 Beacon Chain&nl;Cassez, Fuller, and Asgaonkar, 2021"; data-line:"Blockchain.bib:110"; searchterm:"Formal%20Verification%20of%20the%20Ethereum%202.0%20Beacon%20Chain%20Cassez%2C%20Fuller%2C%20and%20Asgaonkar%2C%202021"; spellcheck:"false"}
Cassez, F., Fuller, J., & Asgaonkar, A.&nbsp;(2021). Formal Verification of the Ethereum 2.0 Beacon Chain. _arXiv:2110.12909 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.12909](http://arxiv.org/abs/2110.12909){.bib-url}
~ end bibitem

~ begin bibitem {id:"casteran_hydras_2021"; cite-year:"2021"; cite-authors:"Castéran et al."; cite-authors-long:"Castéran, Damour, Palmskog, Pit-Claudel, and Zimmermann"; cite-label:"Castéran, Damour, Palmskog, Pit-Claudel, \& Zimmermann, 2021"; caption:"Hydras &amp; Co.: Formalized mathematics in Coq for inspiration and entertainment&nl;Castéran, Damour, Palmskog, Pit-Claudel, and Zimmermann, 2021"; data-line:"FormalBib.bib:8609"; searchterm:"Hydras%20%26amp%3B%20Co.%3A%20Formalized%20mathematics%20in%20Coq%20for%20inspiration%20and%20entertainment%20Cast%C3%A9ran%2C%20Damour%2C%20Palmskog%2C%20PitClaudel%2C%20and%20Zimmermann%2C%202021"; spellcheck:"false"}
Castéran, P., Damour, J., Palmskog, K., Pit-Claudel, C., & Zimmermann, T.&nbsp;(2021). _Hydras &amp; Co.: Formalized mathematics in Coq for inspiration and entertainment_. Retrieved from <https://hal.archives-ouvertes.fr/hal-03404668>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cauligi_sok_2021"; cite-year:"2021"; cite-authors:"S.&nbsp;Cauligi et al."; cite-authors-long:"S.&nbsp;Cauligi, Disselkoen, Moghimi, Barthe, and Stefan"; cite-label:"S. Cauligi, Disselkoen, Moghimi, Barthe, \& Stefan, 2021"; caption:"SoK: Practical Foundations for Spectre Defenses&nl;S. Cauligi, Disselkoen, Moghimi, Barthe, and Stefan, 2021"; data-line:"Security.bib:336"; searchterm:"SoK%3A%20Practical%20Foundations%20for%20Spectre%20Defenses%20S.%20Cauligi%2C%20Disselkoen%2C%20Moghimi%2C%20Barthe%2C%20and%20Stefan%2C%202021"; spellcheck:"false"}
Cauligi, S., Disselkoen, C., Moghimi, D., Barthe, G., & Stefan, D.&nbsp;(2021). SoK: Practical Foundations for Spectre Defenses. _arXiv:2105.05801 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.05801](http://arxiv.org/abs/2105.05801){.bib-url}
~ end bibitem

~ begin bibitem {id:"cauligi_foundations_nodate"; cite-year:"n.d."; cite-authors:"S.&nbsp;R.&nbsp;Cauligi"; cite-authors-long:"S.&nbsp;R.&nbsp;Cauligi"; cite-label:"S. R. Cauligi, n.d."; caption:"Foundations for Speculative Side Channels&nl;S. R. Cauligi, n.d."; data-line:"Security.bib:1277"; searchterm:"Foundations%20for%20Speculative%20Side%20Channels%20S.%20R.%20Cauligi%2C%20n.d."; spellcheck:"false"}
Cauligi, S.&nbsp;R.&nbsp;(n.d.). _Foundations for Speculative Side Channels_ (phdthesis). UC San Diego. Retrieved from <https://escholarship.org/uc/item/64n9f44x>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cavallo_higher_2021"; cite-year:"2021"; cite-authors:"Cavallo"; cite-authors-long:"Cavallo"; cite-label:"Cavallo, 2021"; caption:"Higher Inductive Types and Internal Parametricity for Cubical Type Theory&nl;Cavallo, 2021"; data-line:"FormalBib.bib:8282"; searchterm:"Higher%20Inductive%20Types%20and%20Internal%20Parametricity%20for%20Cubical%20Type%20Theory%20Cavallo%2C%202021"; spellcheck:"false"}
Cavallo, E.&nbsp;(2021). Higher Inductive Types and Internal Parametricity for Cubical Type Theory, 322.
~ end bibitem

~ begin bibitem {id:"cecchetti_compositional_nodate"; cite-year:"n.d."; cite-authors:"Cecchetti et al."; cite-authors-long:"Cecchetti, Yao, Ni, and Myers"; cite-label:"Cecchetti, Yao, Ni, \& Myers, n.d."; caption:"Compositional Security for Reentrant Applications (Technical Report)&nl;Cecchetti, Yao, Ni, and Myers, n.d."; data-line:"Security.bib:879"; searchterm:"Compositional%20Security%20for%20Reentrant%20Applications%20Technical%20Report%20Cecchetti%2C%20Yao%2C%20Ni%2C%20and%20Myers%2C%20n.d."; spellcheck:"false"}
Cecchetti, E., Yao, S., Ni, H., & Myers, A.&nbsp;C.&nbsp;(n.d.). Compositional Security for Reentrant Applications (Technical Report), 56.
~ end bibitem

~ begin bibitem {id:"celik_mutation_2019"; cite-year:"2019"; cite-authors:"Celik et al."; cite-authors-long:"Celik, Palmskog, Parovic, Jesus Gallego Arias, and Gligoric"; cite-label:"Celik, Palmskog, Parovic, Jesus Gallego Arias, \& Gligoric, 2019"; caption:"Mutation Analysis for Coq&nl;Celik, Palmskog, Parovic, Jesus Gallego Arias, and Gligoric, 2019"; data-line:"FormalBib.bib:5919"; searchterm:"Mutation%20Analysis%20for%20Coq%20Celik%2C%20Palmskog%2C%20Parovic%2C%20Jesus%20Gallego%20Arias%2C%20and%20Gligoric%2C%202019"; spellcheck:"false"}
Celik, A., Palmskog, K., Parovic, M., Jesus Gallego Arias, E., & Gligoric, M.&nbsp;(2019). Mutation Analysis for Coq. In _2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)_ (pp. 539–551). San Diego, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/ASE.2019.00057](https://dx.doi.org/10.1109/ASE.2019.00057){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_cerco_nodate"; cite-authors:"2020f"; cite-authors-long:"2020f"; cite-label:"\&ldquo;CerCo - Certified Complexity,\&rdquo; n.d."; caption:"CerCo - Certified Complexity&nl;2020f, "; data-line:"FormalBib.bib:6195"; searchterm:"CerCo%20%20Certified%20Complexity%202020f%2C%20"; spellcheck:"false"}
CerCo - Certified Complexity. (n.d.). Retrieved January 13, 2020, from <http://cerco.cs.unibo.it/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chailloux_developing_2000"; cite-year:"2000"; cite-authors:"Chailloux et al."; cite-authors-long:"Chailloux, Manoury, and Pagano"; cite-label:"Chailloux, Manoury, \& Pagano, 2000"; caption:"Developing Applications with Objective Caml&nl;Chailloux, Manoury, and Pagano, 2000"; data-line:"FormalBib.bib:4535"; searchterm:"Developing%20Applications%20with%20Objective%20Caml%20Chailloux%2C%20Manoury%2C%20and%20Pagano%2C%202000"; spellcheck:"false"}
Chailloux, E., Manoury, P., & Pagano, B.&nbsp;(2000). _Developing Applications with Objective Caml_. Paris: O’Reilly.
~ end bibitem

~ begin bibitem {id:"chajed_record_nodate"; cite-year:"n.d."; cite-authors:"Chajed"; cite-authors-long:"Chajed"; cite-label:"Chajed, n.d."; caption:"Record Updates in Coq&nl;Chajed, n.d."; data-line:"FormalBib.bib:9542"; searchterm:"Record%20Updates%20in%20Coq%20Chajed%2C%20n.d."; spellcheck:"false"}
Chajed, T.&nbsp;(n.d.). Record Updates in Coq, 2.
~ end bibitem

~ begin bibitem {id:"chajed_gojournal_nodate"; cite-year:"n.d."; cite-authors:"Chajed et al."; cite-authors-long:"Chajed, Tassarotti, Kaashoek, Theng, Jung, and Zeldovich"; cite-label:"Chajed, Tassarotti, Kaashoek, Theng, et al., n.d."; caption:"GoJournal: a verified, concurrent, crash-safe journaling system&nl;Chajed, Tassarotti, Kaashoek, Theng, Jung, and Zeldovich, n.d."; data-line:"FormalBib.bib:7601"; searchterm:"GoJournal%3A%20a%20verified%2C%20concurrent%2C%20crashsafe%20journaling%20system%20Chajed%2C%20Tassarotti%2C%20Kaashoek%2C%20Theng%2C%20Jung%2C%20and%20Zeldovich%2C%20n.d."; spellcheck:"false"}
Chajed, T., Tassarotti, J., Kaashoek, M.&nbsp;F., Theng, M., Jung, R., & Zeldovich, N.&nbsp;(n.d.). GoJournal: a verified, concurrent, crash-safe journaling system, 17.
~ end bibitem

~ begin bibitem {id:"chajed_verifying_2019"; cite-year:"2019"; cite-authors:"Chajed et al."; cite-authors-long:"Chajed, Tassarotti, Kaashoek, and Zeldovich"; cite-label:"Chajed, Tassarotti, Kaashoek, \& Zeldovich, 2019"; caption:"Verifying concurrent, crash-safe systems with Perennial&nl;Chajed, Tassarotti, Kaashoek, and Zeldovich, 2019"; data-line:"FormalBib.bib:10019"; searchterm:"Verifying%20concurrent%2C%20crashsafe%20systems%20with%20Perennial%20Chajed%2C%20Tassarotti%2C%20Kaashoek%2C%20and%20Zeldovich%2C%202019"; spellcheck:"false"}
Chajed, T., Tassarotti, J., Kaashoek, M.&nbsp;F., & Zeldovich, N.&nbsp;(2019). Verifying concurrent, crash-safe systems with Perennial. In _Proceedings of the 27th ACM Symposium on Operating Systems Principles_ (pp. 243–258). Huntsville Ontario Canada: ACM.&nbsp;https://doi.org/[10.1145/3341301.3359632](https://dx.doi.org/10.1145/3341301.3359632){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chajed_verifying_nodate"; cite-year:"n.d."; cite-authors:"Chajed et al."; cite-authors-long:"Chajed, Tassarotti, Kaashoek, and Zeldovich"; cite-label:"Chajed, Tassarotti, Kaashoek, \& Zeldovich, n.d."; caption:"Verifying concurrent Go code in Coq with Goose&nl;Chajed, Tassarotti, Kaashoek, and Zeldovich, n.d."; data-line:"FormalBib.bib:10010"; searchterm:"Verifying%20concurrent%20Go%20code%20in%20Coq%20with%20Goose%20Chajed%2C%20Tassarotti%2C%20Kaashoek%2C%20and%20Zeldovich%2C%20n.d."; spellcheck:"false"}
Chajed, T., Tassarotti, J., Kaashoek, M.&nbsp;F., & Zeldovich, N.&nbsp;(n.d.). Verifying concurrent Go code in Coq with Goose, 3.
~ end bibitem

~ begin bibitem {id:"chaliasos_well-typed_2021"; cite-year:"2021a"; cite-authors:"Chaliasos et al."; cite-authors-long:"Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis"; cite-label:"Chaliasos et al., 2021a"; caption:"Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers&nl;Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis, 2021a"; data-line:"FormalBib.bib:8812"; searchterm:"Welltyped%20programs%20can%20go%20wrong%3A%20a%20study%20of%20typingrelated%20bugs%20in%20JVM%20compilers%20Chaliasos%2C%20Sotiropoulos%2C%20Drosos%2C%20Mitropoulos%2C%20Mitropoulos%2C%20and%20Spinellis%2C%202021a"; spellcheck:"false"}
Chaliasos, S., Sotiropoulos, T., Drosos, G.-P., Mitropoulos, C., Mitropoulos, D., & Spinellis, D.&nbsp;(2021a). Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers. _Proceedings of the ACM on Programming Languages_, _5_, 123:1–123:30. https://doi.org/[10.1145/3485500](https://dx.doi.org/10.1145/3485500){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chaliasos_well-typed_2021-1"; cite-year:"2021b"; cite-authors:"Chaliasos et al."; cite-authors-long:"Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis"; cite-label:"Chaliasos et al., 2021b"; caption:"Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers&nl;Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis, 2021b"; data-line:"FormalBib.bib:8848"; searchterm:"Welltyped%20programs%20can%20go%20wrong%3A%20a%20study%20of%20typingrelated%20bugs%20in%20JVM%20compilers%20Chaliasos%2C%20Sotiropoulos%2C%20Drosos%2C%20Mitropoulos%2C%20Mitropoulos%2C%20and%20Spinellis%2C%202021b"; spellcheck:"false"}
Chaliasos, S., Sotiropoulos, T., Drosos, G.-P., Mitropoulos, C., Mitropoulos, D., & Spinellis, D.&nbsp;(2021b). Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers. _Proceedings of the ACM on Programming Languages_, _5_, 1–30. https://doi.org/[10.1145/3485500](https://dx.doi.org/10.1145/3485500){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chaliasos_well-typed_2021-2"; cite-year:"2021c"; cite-authors:"Chaliasos et al."; cite-authors-long:"Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis"; cite-label:"Chaliasos et al., 2021c"; caption:"Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers&nl;Chaliasos, Sotiropoulos, Drosos, Mitropoulos, Mitropoulos, and Spinellis, 2021c"; data-line:"FormalBib.bib:8867"; searchterm:"Welltyped%20programs%20can%20go%20wrong%3A%20a%20study%20of%20typingrelated%20bugs%20in%20JVM%20compilers%20Chaliasos%2C%20Sotiropoulos%2C%20Drosos%2C%20Mitropoulos%2C%20Mitropoulos%2C%20and%20Spinellis%2C%202021c"; spellcheck:"false"}
Chaliasos, S., Sotiropoulos, T., Drosos, G.-P., Mitropoulos, C., Mitropoulos, D., & Spinellis, D.&nbsp;(2021c). Well-typed programs can go wrong: a study of typing-related bugs in JVM compilers. _Proceedings of the ACM on Programming Languages_, _5_, 1–30. https://doi.org/[10.1145/3485500](https://dx.doi.org/10.1145/3485500){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chang_shape_2020"; cite-year:"2020"; cite-authors:"Chang et al."; cite-authors-long:"Chang, Drăgoi, Manevich, Rinetzky, and Rival"; cite-label:"Chang, Drăgoi, Manevich, Rinetzky, \& Rival, 2020"; caption:"Shape Analysis&nl;Chang, Drăgoi, Manevich, Rinetzky, and Rival, 2020"; data-line:"FormalBib.bib:7584"; searchterm:"Shape%20Analysis%20Chang%2C%20Dr%C4%83goi%2C%20Manevich%2C%20Rinetzky%2C%20and%20Rival%2C%202020"; spellcheck:"false"}
Chang, B.-Y.&nbsp;E., Drăgoi, C., Manevich, R., Rinetzky, N., & Rival, X.&nbsp;(2020). Shape Analysis. _Foundations and Trends® in Programming Languages_, _6_(1), 1–158. https://doi.org/[10.1561/2500000037](https://dx.doi.org/10.1561/2500000037){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chapman_fumble_nodate"; cite-year:"n.d."; cite-authors:"Chapman"; cite-authors-long:"Chapman"; cite-label:"Chapman, n.d."; caption:"The Fumble Programmer&nl;Chapman, n.d."; data-line:"FormalBib.bib:4294"; searchterm:"The%20Fumble%20Programmer%20Chapman%2C%20n.d."; spellcheck:"false"}
Chapman, R.&nbsp;(n.d.). The Fumble Programmer. Retrieved from <https://proteancode.com/wp-content/uploads/2018/02/the_fumble_programmer.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2010"; cite-year:"2010b"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010a"; caption:"Characteristic Formulae for Mechanized Program Verification&nl;Charguéraud, 2010b"; data-line:"FormalBib.bib:1019"; searchterm:"Characteristic%20Formulae%20for%20Mechanized%20Program%20Verification%20Chargu%C3%A9raud%2C%202010b"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010a). _Characteristic Formulae for Mechanized Program Verification_ (phdthesis). UNIVERSITÉ PARIS.DIDEROT, Paris, France.
~ end bibitem

~ begin bibitem {id:"chargueraud_program_2010"; cite-year:"2010a"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010b"; caption:"Program Verification Through Characteristic Formulae&nl;Charguéraud, 2010a"; data-line:"FormalBib.bib:1071"; searchterm:"Program%20Verification%20Through%20Characteristic%20Formulae%20Chargu%C3%A9raud%2C%202010a"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010b). Program Verification Through Characteristic Formulae. In _Proceedings of the 15th ACM SIGPLAN International Conference on Functional Programming_ (pp. 321–332). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1863543.1863590](https://dx.doi.org/10.1145/1863543.1863590){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2011"; cite-year:"2011"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2011"; caption:"Characteristic Formulae for the Verification of Imperative Programs&nl;Charguéraud, 2011"; data-line:"FormalBib.bib:1053"; searchterm:"Characteristic%20Formulae%20for%20the%20Verification%20of%20Imperative%20Programs%20Chargu%C3%A9raud%2C%202011"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2011). Characteristic Formulae for the Verification of Imperative Programs. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 418–430). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034828](https://dx.doi.org/10.1145/2034773.2034828){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ter_beek_gospelproviding_2019"; cite-year:"2019"; cite-authors:"Charguéraud et al."; cite-authors-long:"Charguéraud, Filliâtre, Lourenço, and Pereira"; cite-label:"Charguéraud, Filliâtre, Lourenço, \& Pereira, 2019"; caption:"GOSPEL—Providing OCaml with a Formal Specification Language&nl;Charguéraud, Filliâtre, Lourenço, and Pereira, 2019"; data-line:"FormalBib.bib:6915"; searchterm:"GOSPEL%E2%80%94Providing%20OCaml%20with%20a%20Formal%20Specification%20Language%20Chargu%C3%A9raud%2C%20Filli%C3%A2tre%2C%20Louren%C3%A7o%2C%20and%20Pereira%2C%202019"; spellcheck:"false"}
Charguéraud, A., Filliâtre, J.-C., Lourenço, C., & Pereira, M.&nbsp;(2019). GOSPEL—Providing OCaml with a Formal Specification Language. In M.&nbsp;H.&nbsp;ter Beek, A.&nbsp;McIver, & J.&nbsp;N.&nbsp;Oliveira (Eds.), _Formal Methods – The Next 30 Years_ (Vol. 11800, pp. 484–501). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-30942-8_29](https://dx.doi.org/10.1007/978-3-030-30942-8_29){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chen_homotopy_2021"; cite-year:"2021"; cite-authors:"J.&nbsp;Chen"; cite-authors-long:"J.&nbsp;Chen"; cite-label:"J. Chen, 2021"; caption:"Homotopy Type Theory in Isabelle&nl;J. Chen, 2021"; data-line:"FormalBib.bib:7935"; searchterm:"Homotopy%20Type%20Theory%20in%20Isabelle%20J.%20Chen%2C%202021"; spellcheck:"false"}
Chen, J.&nbsp;(2021). Homotopy Type Theory in Isabelle. _arXiv:2002.09282 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2002.09282](http://arxiv.org/abs/2002.09282){.bib-url}
~ end bibitem

~ begin bibitem {id:"chen_boosting_2021"; cite-year:"2021"; cite-authors:"T.&nbsp;Chen et al."; cite-authors-long:"T.&nbsp;Chen, Heo, and Raghothaman"; cite-label:"T. Chen, Heo, \& Raghothaman, 2021"; caption:"Boosting static analysis accuracy with instrumented test executions&nl;T. Chen, Heo, and Raghothaman, 2021"; data-line:"FormalBib.bib:7394"; searchterm:"Boosting%20static%20analysis%20accuracy%20with%20instrumented%20test%20executions%20T.%20Chen%2C%20Heo%2C%20and%20Raghothaman%2C%202021"; spellcheck:"false"}
Chen, T., Heo, K., & Raghothaman, M.&nbsp;(2021). Boosting static analysis accuracy with instrumented test executions. In _Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering_ (pp. 1154–1165). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3468264.3468626](https://dx.doi.org/10.1145/3468264.3468626){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chen_initial_2020"; cite-year:"2020"; cite-authors:"X.&nbsp;Chen et al."; cite-authors-long:"X.&nbsp;Chen, Lucanu, and Roşu"; cite-label:"X. Chen, Lucanu, \& Roşu, 2020"; caption:"Initial Algebra Semantics in Matching Logic&nl;X. Chen, Lucanu, and Roşu, 2020"; data-line:"FormalBib.bib:143"; searchterm:"Initial%20Algebra%20Semantics%20in%20Matching%20Logic%20X.%20Chen%2C%20Lucanu%2C%20and%20Ro%C5%9Fu%2C%202020"; spellcheck:"false"}
Chen, X., Lucanu, D., & Roşu, G.&nbsp;(2020). Initial Algebra Semantics in Matching Logic. Retrieved from <https://www.ideals.illinois.edu/handle/2142/107781>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chen_general_2020"; cite-year:"2020"; cite-authors:"X.&nbsp;Chen and Roşu"; cite-authors-long:"X.&nbsp;Chen and Roşu"; cite-label:"X. Chen \& Roşu, 2020"; caption:"A general approach to define binders using matching logic&nl;X. Chen and Roşu, 2020"; data-line:"FormalBib.bib:155"; searchterm:"A%20general%20approach%20to%20define%20binders%20using%20matching%20logic%20X.%20Chen%20and%20Ro%C5%9Fu%2C%202020"; spellcheck:"false"}
Chen, X., & Roşu, G.&nbsp;(2020). A general approach to define binders using matching logic. _Proceedings of the ACM on Programming Languages_, _4_, 1–32. https://doi.org/[10.1145/3408970](https://dx.doi.org/10.1145/3408970){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chen_project_nodate"; cite-year:"n.d."; cite-authors:"Yixuan Chen"; cite-authors-long:"Yixuan Chen"; cite-label:"Yixuan Chen, n.d."; caption:"Project Report on DeepSpecDB&nl;Yixuan Chen, n.d."; data-line:"FormalBib.bib:2502"; searchterm:"Project%20Report%20on%20DeepSpecDB%20Yixuan%20Chen%2C%20n.d."; spellcheck:"false"}
Chen, Y.&nbsp;(n.d.). Project Report on DeepSpecDB, 35.
~ end bibitem

~ begin bibitem {id:"chen_savior_2019"; cite-year:"2019"; cite-authors:"Yaohui Chen et al."; cite-authors-long:"Yaohui Chen, Li, Xu, Guo, Zhou, Zhang, et al."; cite-label:"Yaohui Chen et al., 2019"; caption:"SAVIOR: Towards Bug-Driven Hybrid Testing&nl;Yaohui Chen, Li, Xu, Guo, Zhou, Zhang, et al., 2019"; data-line:"Security.bib:1020"; searchterm:"SAVIOR%3A%20Towards%20BugDriven%20Hybrid%20Testing%20Yaohui%20Chen%2C%20Li%2C%20Xu%2C%20Guo%2C%20Zhou%2C%20Zhang%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Chen, Y., Li, P., Xu, J., Guo, S., Zhou, R., Zhang, Y., … Lu. (2019). SAVIOR: Towards Bug-Driven Hybrid Testing. _arXiv:1906.07327 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1906.07327](http://arxiv.org/abs/1906.07327){.bib-url}
~ end bibitem

~ begin bibitem {id:"chen_tree_2022"; cite-year:"2022"; cite-authors:"Yanju Chen et al."; cite-authors-long:"Yanju Chen, Liu, Feng, and Bodik"; cite-label:"Yanju Chen, Liu, Feng, \& Bodik, 2022"; caption:"Tree Traversal Synthesis Using Domain-SpecificSymbolic Compilation&nl;Yanju Chen, Liu, Feng, and Bodik, 2022"; data-line:"LanguageTools.bib:1453"; searchterm:"Tree%20Traversal%20Synthesis%20Using%20DomainSpecificSymbolic%20Compilation%20Yanju%20Chen%2C%20Liu%2C%20Feng%2C%20and%20Bodik%2C%202022"; spellcheck:"false"}
Chen, Y., Liu, J., Feng, Y., & Bodik, R.&nbsp;(2022). Tree Traversal Synthesis Using Domain-SpecificSymbolic Compilation, 13.
~ end bibitem

~ begin bibitem {id:"chen_accelerating_nodate"; cite-year:"n.d."; cite-authors:"Yifan Chen et al."; cite-authors-long:"Yifan Chen, Yang, Zhang, Xiong, Tang, Wang, and Zhang"; cite-label:"Yifan Chen et al., n.d."; caption:"Accelerating Program Analyses in Datalog by Merging Library Facts&nl;Yifan Chen, Yang, Zhang, Xiong, Tang, Wang, and Zhang, n.d."; data-line:"FormalBib.bib:9065"; searchterm:"Accelerating%20Program%20Analyses%20in%20Datalog%20by%20Merging%20Library%20Facts%20Yifan%20Chen%2C%20Yang%2C%20Zhang%2C%20Xiong%2C%20Tang%2C%20Wang%2C%20and%20Zhang%2C%20n.d."; spellcheck:"false"}
Chen, Y., Yang, C., Zhang, X., Xiong, Y., Tang, H., Wang, X., & Zhang, L.&nbsp;(n.d.). Accelerating Program Analyses in Datalog by Merging Library Facts, 24.
~ end bibitem

~ begin bibitem {id:"chhak_towards_2020"; cite-year:"2020"; cite-authors:"Chhak et al."; cite-authors-long:"Chhak, Tolmach, and Anderson"; cite-label:"Chhak, Tolmach, \& Anderson, 2020"; caption:"Towards Formally Verified Compilation of Tag-Based Policy Enforcement&nl;Chhak, Tolmach, and Anderson, 2020"; data-line:"Security.bib:136"; searchterm:"Towards%20Formally%20Verified%20Compilation%20of%20TagBased%20Policy%20Enforcement%20Chhak%2C%20Tolmach%2C%20and%20Anderson%2C%202020"; spellcheck:"false"}
Chhak, C.&nbsp;H.&nbsp;R., Tolmach, A., & Anderson, S.&nbsp;(2020). Towards Formally Verified Compilation of Tag-Based Policy Enforcement. _arXiv:2012.10313 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2012.10313](http://arxiv.org/abs/2012.10313){.bib-url}
~ end bibitem

~ begin bibitem {id:"chihani_certication_nodate"; cite-year:"n.d."; cite-authors:"Chihani"; cite-authors-long:"Chihani"; cite-label:"Chihani, n.d."; caption:"Certiﬁcation of First-order proofs in classical and intuitionistic logics&nl;Chihani, n.d."; data-line:"FormalBib.bib:6956"; searchterm:"Certi%EF%AC%81cation%20of%20Firstorder%20proofs%20in%20classical%20and%20intuitionistic%20logics%20Chihani%2C%20n.d."; spellcheck:"false"}
Chihani, Z.&nbsp;(n.d.). Certiﬁcation of First-order proofs in classical and intuitionistic logics, 167.
~ end bibitem

~ begin bibitem {id:"chin_finding_2021"; cite-year:"2021"; cite-authors:"Chin and Pearce"; cite-authors-long:"Chin and Pearce"; cite-label:"Chin \& Pearce, 2021"; caption:"Finding Bugs with Speciﬁcation-Based Testing is Easy!&nl;Chin and Pearce, 2021"; data-line:"FormalBib.bib:8433"; searchterm:"Finding%20Bugs%20with%20Speci%EF%AC%81cationBased%20Testing%20is%20Easy!%20Chin%20and%20Pearce%2C%202021"; spellcheck:"false"}
Chin, J., & Pearce, D.&nbsp;J.&nbsp;(2021). Finding Bugs with Speciﬁcation-Based Testing is Easy!, 35.
~ end bibitem

~ begin bibitem {id:"chiplunkar_automated_nodate"; cite-year:"n.d."; cite-authors:"Chiplunkar et al."; cite-authors-long:"Chiplunkar, Pit-Claudel, and Chlipala"; cite-label:"Chiplunkar, Pit-Claudel, \& Chlipala, n.d."; caption:"Automated Synthesis of Verified Firewalls&nl;Chiplunkar, Pit-Claudel, and Chlipala, n.d."; data-line:"FormalBib.bib:5580"; searchterm:"Automated%20Synthesis%20of%20Verified%20Firewalls%20Chiplunkar%2C%20PitClaudel%2C%20and%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chiplunkar, S., Pit-Claudel, C., & Chlipala, A.&nbsp;(n.d.). Automated Synthesis of Verified Firewalls, 3.
~ end bibitem

~ begin bibitem {id:"chiricescu_safe:_2013"; cite-year:"2013"; cite-authors:"Chiricescu et al."; cite-authors-long:"Chiricescu, DeHon, Demange, Iyer, Kliger, Morrisett, et al."; cite-label:"Chiricescu et al., 2013"; caption:"SAFE: A clean-slate architecture for secure systems&nl;Chiricescu, DeHon, Demange, Iyer, Kliger, Morrisett, et al., 2013"; data-line:"FormalBib.bib:4735"; searchterm:"SAFE%3A%20A%20cleanslate%20architecture%20for%20secure%20systems%20Chiricescu%2C%20DeHon%2C%20Demange%2C%20Iyer%2C%20Kliger%2C%20Morrisett%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Chiricescu, S., DeHon, A., Demange, D., Iyer, S., Kliger, A., Morrisett, G., … Wittenberg, D.&nbsp;(2013). SAFE: A clean-slate architecture for secure systems. In _2013 IEEE International Conference on Technologies for Homeland Security (HST)_ (pp. 570–576). Waltham, MA, USA: IEEE.&nbsp;https://doi.org/[10.1109/THS.2013.6699066](https://dx.doi.org/10.1109/THS.2013.6699066){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chlipala_certified_2013"; cite-year:"2013"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2013"; caption:"Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant&nl;Chlipala, 2013"; data-line:"FormalBib.bib:991"; searchterm:"Certified%20programming%20with%20dependent%20types%3A%20a%20pragmatic%20introduction%20to%20the%20Coq%20proof%20assistant%20Chlipala%2C%202013"; spellcheck:"false"}
Chlipala, A.&nbsp;(2013). _Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant_. Cambridge, MA: The MIT Press. Retrieved from <http://adam.chlipala.net/cpdt/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_formal_2019"; cite-year:"2019"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2019"; caption:"Formal Reasoning About Programs - Github&nl;Chlipala, 2019"; data-line:"FormalBib.bib:973"; searchterm:"Formal%20Reasoning%20About%20Programs%20%20Github%20Chlipala%2C%202019"; spellcheck:"false"}
Chlipala, A.&nbsp;(2019). _Formal Reasoning About Programs - Github_. Retrieved from <https://github.com/achlipala/frap>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_introduction_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-a"; caption:"An Introduction to Programming and Proving with Dependent Types in Coq&nl;Chlipala, n.d."; data-line:"FormalBib.bib:1004"; searchterm:"An%20Introduction%20to%20Programming%20and%20Proving%20with%20Dependent%20Types%20in%20Coq%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-a). An Introduction to Programming and Proving with Dependent Types in Coq. _Journal of Formalized Reasoning_, _3_(2), 93.
~ end bibitem

~ begin bibitem {id:"chlipala_certied_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-b"; caption:"Certiﬁed Programming with Dependent Types&nl;Chlipala, n.d."; data-line:"FormalBib.bib:983"; searchterm:"Certi%EF%AC%81ed%20Programming%20with%20Dependent%20Types%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-b). Certiﬁed Programming with Dependent Types, 369.
~ end bibitem

~ begin bibitem {id:"chlipala_skipping_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-c"; caption:"Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics Course (Functional Pearl)&nl;Chlipala, n.d."; data-line:"FormalBib.bib:7502"; searchterm:"Skipping%20the%20Binder%20Bureaucracy%20with%20Mixed%20Embeddings%20in%20a%20Semantics%20Course%20Functional%20Pearl%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-c). Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics Course (Functional Pearl), _5_, 28.
~ end bibitem

~ begin bibitem {id:"chlipala_end_nodate"; cite-year:"2019"; cite-authors:"Chlipala et al."; cite-authors-long:"Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al."; cite-label:"Chlipala et al., n.d."; caption:"THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN&nl;Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al., 2019"; data-line:"FormalBib.bib:2457"; searchterm:"THE%20END%20OF%20HISTORY%3F%20USING%20A%20PROOF%20ASSISTANT%20TO%20REPLACE%20LANGUAGE%20DESIGN%20WITH%20LIBRARY%20DESIGN%20Chlipala%2C%20Delaware%2C%20Duchovni%2C%20Gross%2C%20PitClaudel%2C%20Suriyakarn%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Chlipala, A., Delaware, B., Duchovni, S., Gross, J., Pit-Claudel, C., Suriyakarn, S., … ye, K.&nbsp;(n.d.). THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN.&nbsp;Retrieved February 1, 2019, from <https://snapl.org/2017/abstracts/Chlipala.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"choi_kami:_2017"; cite-year:"2017"; cite-authors:"Choi et al."; cite-authors-long:"Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind"; cite-label:"Choi, Vijayaraghavan, Sherman, Chlipala, \& Arvind, 2017"; caption:"Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification&nl;Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind, 2017"; data-line:"FormalBib.bib:2372"; searchterm:"Kami%3A%20A%20Platform%20for%20Highlevel%20Parametric%20Hardware%20Specification%20and%20Its%20Modular%20Verification%20Choi%2C%20Vijayaraghavan%2C%20Sherman%2C%20Chlipala%2C%20and%20Arvind%2C%202017"; spellcheck:"false"}
Choi, J., Vijayaraghavan, M., Sherman, B., Chlipala, A., & Arvind. (2017). Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification. _Proc. ACM Program. Lang._, _1_, 24:1–24:30. https://doi.org/[10.1145/3110268](https://dx.doi.org/10.1145/3110268){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chong_code-level_2021"; cite-year:"2021"; cite-authors:"Chong et al."; cite-authors-long:"Chong, Cook, Eidelman, Kallas, Khazem, Monteiro, et al."; cite-label:"Chong et al., 2021"; caption:"Code-level model checking in the software development workflow at Amazon Web Services&nl;Chong, Cook, Eidelman, Kallas, Khazem, Monteiro, et al., 2021"; data-line:"FormalBib.bib:535"; searchterm:"Codelevel%20model%20checking%20in%20the%20software%20development%20workflow%20at%20Amazon%20Web%20Services%20Chong%2C%20Cook%2C%20Eidelman%2C%20Kallas%2C%20Khazem%2C%20Monteiro%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Chong, N., Cook, B., Eidelman, J., Kallas, K., Khazem, K., Monteiro, F.&nbsp;R., … Tuttle, M.&nbsp;R.&nbsp;(2021). Code-level model checking in the software development workflow at Amazon Web Services. _Software: Practice and Experience_, _n/a_. https://doi.org/[10.1002/spe.2949](https://dx.doi.org/10.1002/spe.2949){.bib-doi}
~ end bibitem

~ begin bibitem {id:"choudhury_towards_nodate"; cite-year:"n.d."; cite-authors:"Choudhury"; cite-authors-long:"Choudhury"; cite-label:"Choudhury, n.d."; caption:"Towards a Formalization of Nominal Sets in Coq&nl;Choudhury, n.d."; data-line:"FormalBib.bib:9949"; searchterm:"Towards%20a%20Formalization%20of%20Nominal%20Sets%20in%20Coq%20Choudhury%2C%20n.d."; spellcheck:"false"}
Choudhury, P.&nbsp;(n.d.). Towards a Formalization of Nominal Sets in Coq, 3.
~ end bibitem

~ begin bibitem {id:"christakis_collaborative_2012"; cite-year:"2012"; cite-authors:"Christakis et al."; cite-authors-long:"Christakis, Müller, and Wüstholz"; cite-label:"Christakis, Müller, \& Wüstholz, 2012"; caption:"Collaborative Verification and Testing with Explicit Assumptions&nl;Christakis, Müller, and Wüstholz, 2012"; data-line:"FormalBib.bib:2664"; searchterm:"Collaborative%20Verification%20and%20Testing%20with%20Explicit%20Assumptions%20Christakis%2C%20M%C3%BCller%2C%20and%20W%C3%BCstholz%2C%202012"; spellcheck:"false"}
Christakis, M., Müller, P., & Wüstholz, V.&nbsp;(2012). Collaborative Verification and Testing with Explicit Assumptions. In D.&nbsp;Giannakopoulou & D.&nbsp;Méry (Eds.), _FM 2012: Formal Methods_ (pp. 132–146). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"christensen_programming_2021"; cite-year:"2021"; cite-authors:"Christensen"; cite-authors-long:"Christensen"; cite-label:"Christensen, 2021"; caption:"Programming Language Techniques for Improving ISA and HDL Design&nl;Christensen, 2021"; data-line:"LanguageTools.bib:1428"; searchterm:"Programming%20Language%20Techniques%20for%20Improving%20ISA%20and%20HDL%20Design%20Christensen%2C%202021"; spellcheck:"false"}
Christensen, M.&nbsp;A.&nbsp;(2021). _Programming Language Techniques for Improving ISA and HDL Design_ (phdthesis). UC Santa Barbara, Santa Barbara, CA.&nbsp;Retrieved from <https://escholarship.org/content/qt7sz5r3vd/qt7sz5r3vd.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cito_counterfactual_2021"; cite-year:"2021"; cite-authors:"Cito et al."; cite-authors-long:"Cito, Dillig, Murali, and Chandra"; cite-label:"Cito, Dillig, Murali, \& Chandra, 2021"; caption:"Counterfactual Explanations for Models of Code&nl;Cito, Dillig, Murali, and Chandra, 2021"; data-line:"MachineLearning.bib:146"; searchterm:"Counterfactual%20Explanations%20for%20Models%20of%20Code%20Cito%2C%20Dillig%2C%20Murali%2C%20and%20Chandra%2C%202021"; spellcheck:"false"}
Cito, J., Dillig, I., Murali, V., & Chandra, S.&nbsp;(2021). Counterfactual Explanations for Models of Code. _arXiv:2111.05711 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2111.05711](http://arxiv.org/abs/2111.05711){.bib-url}
~ end bibitem

~ begin bibitem {id:"clark_instructors_2019"; cite-year:"2019"; cite-authors:"Clark"; cite-authors-long:"Clark"; cite-label:"Clark, 2019"; caption:"The Instructor’s Guide to Real Induction&nl;Clark, 2019"; data-line:"FormalBib.bib:6696"; searchterm:"The%20Instructor%E2%80%99s%20Guide%20to%20Real%20Induction%20Clark%2C%202019"; spellcheck:"false"}
Clark, P.&nbsp;L.&nbsp;(2019). The Instructor’s Guide to Real Induction. _Mathematics Magazine_, _92_(2), 136–150. https://doi.org/[10.1080/0025570X.2019.1549902](https://dx.doi.org/10.1080/0025570X.2019.1549902){.bib-doi}
~ end bibitem

~ begin bibitem {id:"clarkson_hyperproperties_2008"; cite-year:"2008"; cite-authors:"Clarkson and Schneider"; cite-authors-long:"Clarkson and Schneider"; cite-label:"Clarkson \& Schneider, 2008"; caption:"Hyperproperties&nl;Clarkson and Schneider, 2008"; data-line:"Security.bib:60"; searchterm:"Hyperproperties%20Clarkson%20and%20Schneider%2C%202008"; spellcheck:"false"}
Clarkson, M.&nbsp;R., & Schneider, F.&nbsp;B.&nbsp;(2008). Hyperproperties. In _2008 21st IEEE Computer Security Foundations Symposium_ (pp. 51–65). https://doi.org/[10.1109/CSF.2008.7](https://dx.doi.org/10.1109/CSF.2008.7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cofer_formal_nodate"; cite-year:"n.d."; cite-authors:"Cofer et al."; cite-authors-long:"Cofer, Miller, and Collins"; cite-label:"Cofer, Miller, \& Collins, n.d."; caption:"Formal Methods Case Studies for DO-333&nl;Cofer, Miller, and Collins, n.d."; data-line:"FormalBib.bib:7000"; searchterm:"Formal%20Methods%20Case%20Studies%20for%20DO333%20Cofer%2C%20Miller%2C%20and%20Collins%2C%20n.d."; spellcheck:"false"}
Cofer, D., Miller, S.&nbsp;P., & Collins, R.&nbsp;(n.d.). Formal Methods Case Studies for DO-333, 203.
~ end bibitem

~ begin bibitem {id:"hutchison_pragmatic_2013"; cite-year:"2013"; cite-authors:"Cohen"; cite-authors-long:"Cohen"; cite-label:"Cohen, 2013"; caption:"Pragmatic Quotient Types in Coq&nl;Cohen, 2013"; data-line:"FormalBib.bib:6840"; searchterm:"Pragmatic%20Quotient%20Types%20in%20Coq%20Cohen%2C%202013"; spellcheck:"false"}
Cohen, C.&nbsp;(2013). Pragmatic Quotient Types in Coq. In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (Vol. 7998, pp. 213–228). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39634-2_17](https://dx.doi.org/10.1007/978-3-642-39634-2_17){.bib-doi}
~ end bibitem

~ begin bibitem {id:"collins_secure_nodate"; cite-year:"n.d."; cite-authors:"Collins"; cite-authors-long:"Collins"; cite-label:"Collins, n.d."; caption:"SECURE MATHEMATICALLY- ASSURED COMPOSITION OF CONTROL MODELS&nl;Collins, n.d."; data-line:"FormalBib.bib:7028"; searchterm:"SECURE%20MATHEMATICALLY%20ASSURED%20COMPOSITION%20OF%20CONTROL%20MODELS%20Collins%2C%20n.d."; spellcheck:"false"}
Collins, R.&nbsp;(n.d.). SECURE MATHEMATICALLY- ASSURED COMPOSITION OF CONTROL MODELS, 134.
~ end bibitem

~ begin bibitem {id:"conchon_alt-ergo_2018"; cite-year:"2018"; cite-authors:"Conchon et al."; cite-authors-long:"Conchon, Coquereau, Iguernlala, and Mebsout"; cite-label:"Conchon, Coquereau, Iguernlala, \& Mebsout, 2018"; caption:"Alt-Ergo 2.2&nl;Conchon, Coquereau, Iguernlala, and Mebsout, 2018"; data-line:"FormalBib.bib:1458"; searchterm:"AltErgo%202.2%20Conchon%2C%20Coquereau%2C%20Iguernlala%2C%20and%20Mebsout%2C%202018"; spellcheck:"false"}
Conchon, S., Coquereau, A., Iguernlala, M., & Mebsout, A.&nbsp;(2018). Alt-Ergo 2.2. In _SMT Workshop: International Workshop on Satisfiability Modulo Theories_. Oxford, United Kingdom. Retrieved from <https://hal.inria.fr/hal-01960203>{.bib-url}
~ end bibitem

~ begin bibitem {id:"conchon_increasing_2016"; cite-year:"2016"; cite-authors:"Conchon and Iguernlala"; cite-authors-long:"Conchon and Iguernlala"; cite-label:"Conchon \& Iguernlala, 2016"; caption:"Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo&nl;Conchon and Iguernlala, 2016"; data-line:"FormalBib.bib:1441"; searchterm:"Increasing%20Proofs%20Automation%20Rate%20of%20AtelierB%20Thanks%20to%20AltErgo%20Conchon%20and%20Iguernlala%2C%202016"; spellcheck:"false"}
Conchon, S., & Iguernlala, M.&nbsp;(2016). Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo. In T.&nbsp;Lecomte, R.&nbsp;Pinger, & A.&nbsp;Romanovsky (Eds.), _Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification_ (pp. 243–253). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"p4_consortium_p4_16_2020"; cite-year:"2020"; cite-authors:"Consortium"; cite-authors-long:"Consortium"; cite-label:"Consortium, 2020"; caption:"P4&underscore;16 Language Specification&nl;Consortium, 2020"; data-line:"FormalBib.bib:745"; searchterm:"P4%26underscore%3B16%20Language%20Specification%20Consortium%2C%202020"; spellcheck:"false"}
Consortium, P.&nbsp;(2020, June 11). P4&underscore;16 Language Specification. Retrieved January 5, 2021, from <https://p4.org/p4-spec/docs/P4-16-working-spec.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"p4_consortium_p4_2021"; cite-year:"2021"; cite-authors:"Consortium"; cite-authors-long:"Consortium"; cite-label:"Consortium, 2021"; caption:"P4 Language and Related Specifications&nl;Consortium, 2021"; data-line:"Networking.bib:506"; searchterm:"P4%20Language%20and%20Related%20Specifications%20Consortium%2C%202021"; spellcheck:"false"}
Consortium, P.&nbsp;(2021). P4 Language and Related Specifications. Retrieved January 13, 2021, from <https://p4.org/specs/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cooper_incomputable_2017"; cite-year:"2017"; cite-authors:"Cooper and Soskova"; cite-authors-long:"Cooper and Soskova"; cite-label:"Cooper \& Soskova, 2017"; caption:"The Incomputable&nl;Cooper and Soskova, 2017"; data-line:"FormalBib.bib:6744"; searchterm:"The%20Incomputable%20Cooper%20and%20Soskova%2C%202017"; spellcheck:"false"}
Cooper, S.&nbsp;B., & Soskova, M.&nbsp;I.&nbsp;(Eds.). (2017). _The Incomputable_. Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-43669-2](https://dx.doi.org/10.1007/978-3-319-43669-2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_coq_nodate"; cite-authors:"2021g"; cite-authors-long:"2021g"; cite-label:"\&ldquo;Coq Coq correct\! verification of type checking and erasure for Coq, in Coq,\&rdquo; n.d."; caption:"Coq Coq correct! verification of type checking and erasure for Coq, in Coq&nl;2021g, "; data-line:"FormalBib.bib:9589"; searchterm:"Coq%20Coq%20correct!%20verification%20of%20type%20checking%20and%20erasure%20for%20Coq%2C%20in%20Coq%202021g%2C%20"; spellcheck:"false"}
Coq Coq correct! verification of type checking and erasure for Coq, in Coq. (n.d.). https://doi.org/[10.1145/3371076](https://dx.doi.org/10.1145/3371076){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_coqeal_2020"; cite-authors:"2020b"; cite-authors-long:"2020b"; cite-label:"\_CoqEAL\_, 2020"; caption:"CoqEAL&nl;2020b, "; data-line:"FormalBib.bib:6514"; searchterm:"CoqEAL%202020b%2C%20"; spellcheck:"false"}
_CoqEAL_. (2020). CoqEAL.&nbsp;Retrieved from <https://github.com/CoqEAL/CoqEAL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_coquelicot.coquelicot_nodate"; cite-authors:"2019h"; cite-authors-long:"2019h"; cite-label:"\&ldquo;Coquelicot.Coquelicot,\&rdquo; n.d."; caption:"Coquelicot.Coquelicot&nl;2019h, "; data-line:"FormalBib.bib:6833"; searchterm:"Coquelicot.Coquelicot%202019h%2C%20"; spellcheck:"false"}
Coquelicot.Coquelicot. (n.d.). Retrieved November 3, 2019, from <http://coquelicot.saclay.inria.fr/html/Coquelicot.Coquelicot.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costan_sanctum:_2016"; cite-year:"2016"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2016"; caption:"Sanctum: Minimal Hardware Extensions for Strong Software Isolation&nl;Costan, Lebedev, and Devadas, 2016"; data-line:"FormalBib.bib:3681"; searchterm:"Sanctum%3A%20Minimal%20Hardware%20Extensions%20for%20Strong%20Software%20Isolation%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202016"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2016). Sanctum: Minimal Hardware Extensions for Strong Software Isolation (pp. 857–874). Retrieved from <https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/costan>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017-1"; cite-year:"2017a"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017a"; caption:"Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture&nl;Costan, Lebedev, and Devadas, 2017a"; data-line:"FormalBib.bib:3664"; searchterm:"Secure%20Processors%20Part%20I%3A%20Background%2C%20Taxonomy%20for%20Secure%20Enclaves%20and%20Intel%20SGX%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017a"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017a). Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(1), 1–248. https://doi.org/[10.1561/1000000051](https://dx.doi.org/10.1561/1000000051){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017"; cite-year:"2017b"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017b"; caption:"Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture&nl;Costan, Lebedev, and Devadas, 2017b"; data-line:"FormalBib.bib:3647"; searchterm:"Secure%20Processors%20Part%20II%3A%20Intel%20SGX%20Security%20Analysis%20and%20MIT%20Sanctum%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017b"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017b). Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(3), 249–361. https://doi.org/[10.1561/1000000052](https://dx.doi.org/10.1561/1000000052){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_2016"; cite-year:"2016"; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, 2016"; caption:"End-to-end verification of information-flow security for C and assembly programs&nl;Costanzo, Shao, and Gu, 2016"; data-line:"Security.bib:1193"; searchterm:"Endtoend%20verification%20of%20informationflow%20security%20for%20C%20and%20assembly%20programs%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%202016"; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(2016). End-to-end verification of information-flow security for C and assembly programs. _ACM SIGPLAN Notices_, _51_(6), 648–664. https://doi.org/[10.1145/2980983.2908100](https://dx.doi.org/10.1145/2980983.2908100){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_nodate"; cite-year:"n.d."; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, n.d."; caption:"End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report&nl;Costanzo, Shao, and Gu, n.d."; data-line:"FormalBib.bib:1107"; searchterm:"EndtoEnd%20Veri%EF%AC%81cation%20of%20InformationFlow%20Security%20for%20C%20and%20Assembly%20Programs%20%20Tech%20Report%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%20n.d."; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(n.d.). End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report, 21. Retrieved from <http://flint.cs.yale.edu/certikos/publications/security-tr.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costea_hippodrome_2021"; cite-year:"2021"; cite-authors:"Costea et al."; cite-authors-long:"Costea, Tiwari, Chianasta, R, Roychoudhury, and Sergey"; cite-label:"Costea et al., 2021"; caption:"HIPPODROME: Data Race Repair using Static Analysis Summaries&nl;Costea, Tiwari, Chianasta, R, Roychoudhury, and Sergey, 2021"; data-line:"LanguageTools.bib:287"; searchterm:"HIPPODROME%3A%20Data%20Race%20Repair%20using%20Static%20Analysis%20Summaries%20Costea%2C%20Tiwari%2C%20Chianasta%2C%20R%2C%20Roychoudhury%2C%20and%20Sergey%2C%202021"; spellcheck:"false"}
Costea, A., Tiwari, A., Chianasta, S., R, K., Roychoudhury, A., & Sergey, I.&nbsp;(2021). HIPPODROME: Data Race Repair using Static Analysis Summaries. _arXiv:2108.02490 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2108.02490](http://arxiv.org/abs/2108.02490){.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_embedding_2007"; cite-year:"2007"; cite-authors:"Cousineau and Dowek"; cite-authors-long:"Cousineau and Dowek"; cite-label:"Cousineau \& Dowek, 2007"; caption:"Embedding Pure Type Systems in the Lambda-Pi-Calculus Modulo&nl;Cousineau and Dowek, 2007"; data-line:"FormalBib.bib:6143"; searchterm:"Embedding%20Pure%20Type%20Systems%20in%20the%20LambdaPiCalculus%20Modulo%20Cousineau%20and%20Dowek%2C%202007"; spellcheck:"false"}
Cousineau, D., & Dowek, G.&nbsp;(2007). Embedding Pure Type Systems in the Lambda-Pi-Calculus Modulo. In S.&nbsp;R.&nbsp;Della Rocca (Ed.), _Typed Lambda Calculi and Applications_ (Vol. 4583, pp. 102–117). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-73228-0_9](https://dx.doi.org/10.1007/978-3-540-73228-0_9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cousot_automatic_2013"; cite-year:"2013"; cite-authors:"Cousot et al."; cite-authors-long:"Cousot, Cousot, Fähndrich, and Logozzo"; cite-label:"Cousot, Cousot, Fähndrich, \& Logozzo, 2013"; caption:"Automatic Inference of Necessary Preconditions&nl;Cousot, Cousot, Fähndrich, and Logozzo, 2013"; data-line:"FormalBib.bib:5732"; searchterm:"Automatic%20Inference%20of%20Necessary%20Preconditions%20Cousot%2C%20Cousot%2C%20F%C3%A4hndrich%2C%20and%20Logozzo%2C%202013"; spellcheck:"false"}
Cousot, P., Cousot, R., Fähndrich, M., & Logozzo, F.&nbsp;(2013). Automatic Inference of Necessary Preconditions. In R.&nbsp;Giacobazzi, J.&nbsp;Berdine, & I.&nbsp;Mastroeni (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 128–148). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-35873-9_10](https://dx.doi.org/10.1007/978-3-642-35873-9_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cousot_a2i:_2019"; cite-year:"2019"; cite-authors:"Cousot et al."; cite-authors-long:"Cousot, Giacobazzi, and Ranzato"; cite-label:"Cousot, Giacobazzi, \& Ranzato, 2019"; caption:"A2I: Abstract2 Interpretation&nl;Cousot, Giacobazzi, and Ranzato, 2019"; data-line:"FormalBib.bib:5266"; searchterm:"A2I%3A%20Abstract2%20Interpretation%20Cousot%2C%20Giacobazzi%2C%20and%20Ranzato%2C%202019"; spellcheck:"false"}
Cousot, P., Giacobazzi, R., & Ranzato, F.&nbsp;(2019). A2I: Abstract2 Interpretation. _Proc. ACM Program. Lang._, _3_, 42:1–42:31. https://doi.org/[10.1145/3290355](https://dx.doi.org/10.1145/3290355){.bib-doi}
~ end bibitem

~ begin bibitem {id:"covington_implementing_nodate"; cite-year:"n.d."; cite-authors:"Covington et al."; cite-authors-long:"Covington, Naous, Erickson, and Mckeown"; cite-label:"Covington, Naous, Erickson, \& Mckeown, n.d."; caption:"Implementing an OpenFlow Switch on the NetFPGA platform&nl;Covington, Naous, Erickson, and Mckeown, n.d."; data-line:"Networking.bib:587"; searchterm:"Implementing%20an%20OpenFlow%20Switch%20on%20the%20NetFPGA%20platform%20Covington%2C%20Naous%2C%20Erickson%2C%20and%20Mckeown%2C%20n.d."; spellcheck:"false"}
Covington, G.&nbsp;A., Naous, J., Erickson, D., & Mckeown, N.&nbsp;(n.d.). _Implementing an OpenFlow Switch on the NetFPGA platform_.
~ end bibitem

~ begin bibitem {id:"coward_formal_nodate"; cite-year:"n.d."; cite-authors:"Coward et al."; cite-authors-long:"Coward, Paulson, Drane, and Morini"; cite-label:"Coward, Paulson, Drane, \& Morini, n.d."; caption:"Formal Veriﬁcation of Transcendental Fixed and Floating Point Algorithms using an Automatic Theorem Prover&nl;Coward, Paulson, Drane, and Morini, n.d."; data-line:"FormalBib.bib:9706"; searchterm:"Formal%20Veri%EF%AC%81cation%20of%20Transcendental%20Fixed%20and%20Floating%20Point%20Algorithms%20using%20an%20Automatic%20Theorem%20Prover%20Coward%2C%20Paulson%2C%20Drane%2C%20and%20Morini%2C%20n.d."; spellcheck:"false"}
Coward, S., Paulson, L., Drane, T., & Morini, E.&nbsp;(n.d.). Formal Veriﬁcation of Transcendental Fixed and Floating Point Algorithms using an Automatic Theorem Prover, 20.
~ end bibitem

~ begin bibitem {id:"cowley_job_2014"; cite-year:"2014"; cite-authors:"Cowley"; cite-authors-long:"Cowley"; cite-label:"Cowley, 2014"; caption:"Job Analysis Results for Malicious-Code Reverse Engineers: A Case Study&nl;Cowley, 2014"; data-line:"Security.bib:1504"; searchterm:"Job%20Analysis%20Results%20for%20MaliciousCode%20Reverse%20Engineers%3A%20A%20Case%20Study%20Cowley%2C%202014"; spellcheck:"false"}
Cowley, J.&nbsp;(2014). Job Analysis Results for Malicious-Code Reverse Engineers: A Case Study, 114.
~ end bibitem

~ begin bibitem {id:"crain_red_2021"; cite-year:"2021"; cite-authors:"Crain et al."; cite-authors-long:"Crain, Natoli, and Gramoli"; cite-label:"Crain, Natoli, \& Gramoli, 2021"; caption:"Red Belly: A Secure, Fair and Scalable Open Blockchain&nl;Crain, Natoli, and Gramoli, 2021"; data-line:"Blockchain.bib:33"; searchterm:"Red%20Belly%3A%20A%20Secure%2C%20Fair%20and%20Scalable%20Open%20Blockchain%20Crain%2C%20Natoli%2C%20and%20Gramoli%2C%202021"; spellcheck:"false"}
Crain, T., Natoli, C., & Gramoli, V.&nbsp;(2021). _Red Belly: A Secure, Fair and Scalable Open Blockchain_. https://doi.org/[10.1109/SP40001.2021.00087](https://dx.doi.org/10.1109/SP40001.2021.00087){.bib-doi}
~ end bibitem

~ begin bibitem {id:"crary_modules_2017"; cite-year:"2017"; cite-authors:"Crary"; cite-authors-long:"Crary"; cite-label:"Crary, 2017"; caption:"Modules, Abstraction, and Parametric Polymorphism&nl;Crary, 2017"; data-line:"FormalBib.bib:2885"; searchterm:"Modules%2C%20Abstraction%2C%20and%20Parametric%20Polymorphism%20Crary%2C%202017"; spellcheck:"false"}
Crary, K.&nbsp;(2017). Modules, Abstraction, and Parametric Polymorphism. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 100–113). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009892](https://dx.doi.org/10.1145/3009837.3009892){.bib-doi}
~ end bibitem

~ begin bibitem {id:"crick_share_2014"; cite-year:"2014"; cite-authors:"Crick et al."; cite-authors-long:"Crick, Hall, Ishtiaq, and Takeda"; cite-label:"Crick, Hall, Ishtiaq, \& Takeda, 2014"; caption:"\"Share and Enjoy\": Publishing Useful and Usable Scientific Models&nl;Crick, Hall, Ishtiaq, and Takeda, 2014"; data-line:"FormalBib.bib:3862"; searchterm:"%22Share%20and%20Enjoy%22%3A%20Publishing%20Useful%20and%20Usable%20Scientific%20Models%20Crick%2C%20Hall%2C%20Ishtiaq%2C%20and%20Takeda%2C%202014"; spellcheck:"false"}
Crick, T., Hall, B.&nbsp;A., Ishtiaq, S., & Takeda, K.&nbsp;(2014). &ldquo;Share and Enjoy&rdquo;: Publishing Useful and Usable Scientific Models. _arXiv:1409.0367 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1409.0367](http://arxiv.org/abs/1409.0367){.bib-url}
~ end bibitem

~ begin bibitem {id:"csoma_escape_2014"; cite-year:"2014"; cite-authors:"Csoma et al."; cite-authors-long:"Csoma, Sonkoly, Csikor, Németh, Gulyas, Tavernier, and Sahhaf"; cite-label:"Csoma et al., 2014"; caption:"ESCAPE: extensible service chain prototyping environment using mininet, click, NETCONF and POX&nl;Csoma, Sonkoly, Csikor, Németh, Gulyas, Tavernier, and Sahhaf, 2014"; data-line:"Networking.bib:38"; searchterm:"ESCAPE%3A%20extensible%20service%20chain%20prototyping%20environment%20using%20mininet%2C%20click%2C%20NETCONF%20and%20POX%20Csoma%2C%20Sonkoly%2C%20Csikor%2C%20N%C3%A9meth%2C%20Gulyas%2C%20Tavernier%2C%20and%20Sahhaf%2C%202014"; spellcheck:"false"}
Csoma, A., Sonkoly, B., Csikor, L., Németh, F., Gulyas, A., Tavernier, W., & Sahhaf, S.&nbsp;(2014). ESCAPE: extensible service chain prototyping environment using mininet, click, NETCONF and POX.&nbsp;In _Proceedings of the 2014 ACM conference on SIGCOMM_ (pp. 125–126). Chicago Illinois USA: ACM.&nbsp;https://doi.org/[10.1145/2619239.2631448](https://dx.doi.org/10.1145/2619239.2631448){.bib-doi}
~ end bibitem

~ begin bibitem {id:"curry_bi-abduction_2020"; cite-year:"2020"; cite-authors:"Curry and Le"; cite-authors-long:"Curry and Le"; cite-label:"Curry \& Le, 2020"; caption:"Bi-Abduction for Shapes with Ordered Data&nl;Curry and Le, 2020"; data-line:"LanguageTools.bib:708"; searchterm:"BiAbduction%20for%20Shapes%20with%20Ordered%20Data%20Curry%20and%20Le%2C%202020"; spellcheck:"false"}
Curry, C., & Le, Q.&nbsp;L.&nbsp;(2020). Bi-Abduction for Shapes with Ordered Data. _arXiv:2006.10439 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2006.10439](http://arxiv.org/abs/2006.10439){.bib-url}
~ end bibitem

~ begin bibitem {id:"czajka_coqhammer:_nodate"; cite-year:"2019"; cite-authors:"Czajka and Kaliszyk"; cite-authors-long:"Czajka and Kaliszyk"; cite-label:"Czajka \& Kaliszyk, n.d."; caption:"CoqHammer: Strong Automation for Program Verification - CoqPL 2018&nl;Czajka and Kaliszyk, 2019"; data-line:"FormalBib.bib:3297"; searchterm:"CoqHammer%3A%20Strong%20Automation%20for%20Program%20Verification%20%20CoqPL%202018%20Czajka%20and%20Kaliszyk%2C%202019"; spellcheck:"false"}
Czajka, L., & Kaliszyk, C.&nbsp;(n.d.). CoqHammer: Strong Automation for Program Verification - CoqPL 2018. Retrieved January 31, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-coqhammer-strong-automation-for-program-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dagand_formal_2022"; cite-year:"2022"; cite-authors:"Dagand et al."; cite-authors-long:"Dagand, Berthou, Demange, and Risset"; cite-label:"Dagand, Berthou, Demange, \& Risset, 2022"; caption:"A Formal Model of Interrupt-based Checkpointing with Peripherals&nl;Dagand, Berthou, Demange, and Risset, 2022"; data-line:"Hardware.bib:28"; searchterm:"A%20Formal%20Model%20of%20Interruptbased%20Checkpointing%20with%20Peripherals%20Dagand%2C%20Berthou%2C%20Demange%2C%20and%20Risset%2C%202022"; spellcheck:"false"}
Dagand, P.-E., Berthou, G., Demange, D., & Risset, T.&nbsp;(2022). _A Formal Model of Interrupt-based Checkpointing with Peripherals_ (Technical Report) (pp. 1–36). IRIF ; IRISA ; INSA RENNES.&nbsp;Retrieved from <https://hal.archives-ouvertes.fr/hal-03557760>{.bib-url}
~ end bibitem

~ begin bibitem {id:"daggitt_vehicle_2022"; cite-year:"2022"; cite-authors:"Daggitt et al."; cite-authors-long:"Daggitt, Kokke, Atkey, Arnaboldi, and Komendantskya"; cite-label:"Daggitt, Kokke, Atkey, Arnaboldi, \& Komendantskya, 2022"; caption:"Vehicle: Interfacing Neural Network Verifiers with Interactive Theorem Provers&nl;Daggitt, Kokke, Atkey, Arnaboldi, and Komendantskya, 2022"; data-line:"MachineLearning.bib:160"; searchterm:"Vehicle%3A%20Interfacing%20Neural%20Network%20Verifiers%20with%20Interactive%20Theorem%20Provers%20Daggitt%2C%20Kokke%2C%20Atkey%2C%20Arnaboldi%2C%20and%20Komendantskya%2C%202022"; spellcheck:"false"}
Daggitt, M.&nbsp;L., Kokke, W., Atkey, R., Arnaboldi, L., & Komendantskya, E.&nbsp;(2022). Vehicle: Interfacing Neural Network Verifiers with Interactive Theorem Provers. _arXiv:2202.05207 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.05207](http://arxiv.org/abs/2202.05207){.bib-url}
~ end bibitem

~ begin bibitem {id:"dang_rustbelt_nodate"; cite-year:"n.d."; cite-authors:"Dang et al."; cite-authors-long:"Dang, Jourdan, Kaiser, and Dreyer"; cite-label:"Dang, Jourdan, Kaiser, \& Dreyer, n.d."; caption:"RustBelt Meets Relaxed Memory&nl;Dang, Jourdan, Kaiser, and Dreyer, n.d."; data-line:"FormalBib.bib:6670"; searchterm:"RustBelt%20Meets%20Relaxed%20Memory%20Dang%2C%20Jourdan%2C%20Kaiser%2C%20and%20Dreyer%2C%20n.d."; spellcheck:"false"}
Dang, H.-H., Jourdan, J.-H., Kaiser, J.-O., & Dreyer, D.&nbsp;(n.d.). RustBelt Meets Relaxed Memory, _4_, 29.
~ end bibitem

~ begin bibitem {id:"danvy_abstracting_1990"; cite-year:"1990"; cite-authors:"Danvy and Filinski"; cite-authors-long:"Danvy and Filinski"; cite-label:"Danvy \& Filinski, 1990"; caption:"Abstracting control&nl;Danvy and Filinski, 1990"; data-line:"FormalBib.bib:7100"; searchterm:"Abstracting%20control%20Danvy%20and%20Filinski%2C%201990"; spellcheck:"false"}
Danvy, O., & Filinski, A.&nbsp;(1990). Abstracting control. In _Proceedings of the 1990 ACM conference on LISP and functional programming_ (pp. 151–160). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/91556.91622](https://dx.doi.org/10.1145/91556.91622){.bib-doi}
~ end bibitem

~ begin bibitem {id:"darais_constructive_2016"; cite-year:"2016"; cite-authors:"Darais and Van Horn"; cite-authors-long:"Darais and Van Horn"; cite-label:"Darais \& Van Horn, 2016"; caption:"Constructive Galois Connections: Taming the Galois Connection Framework for Mechanized Metatheory&nl;Darais and Van Horn, 2016"; data-line:"FormalBib.bib:9966"; searchterm:"Constructive%20Galois%20Connections%3A%20Taming%20the%20Galois%20Connection%20Framework%20for%20Mechanized%20Metatheory%20Darais%20and%20Van%20Horn%2C%202016"; spellcheck:"false"}
Darais, D., & Van Horn, D.&nbsp;(2016). Constructive Galois Connections: Taming the Galois Connection Framework for Mechanized Metatheory. _arXiv:1511.06965 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1511.06965](http://arxiv.org/abs/1511.06965){.bib-url}
~ end bibitem

~ begin bibitem {id:"darvas_formal_2016"; cite-year:"2016"; cite-authors:"Darvas et al."; cite-authors-long:"Darvas, Majzik, and Blanco Viñuela"; cite-label:"Darvas, Majzik, \& Blanco Viñuela, 2016"; caption:"Formal Verification of Safety PLC Based Control Software&nl;Darvas, Majzik, and Blanco Viñuela, 2016"; data-line:"Networking.bib:655"; searchterm:"Formal%20Verification%20of%20Safety%20PLC%20Based%20Control%20Software%20Darvas%2C%20Majzik%2C%20and%20Blanco%20Vi%C3%B1uela%2C%202016"; spellcheck:"false"}
Darvas, D., Majzik, I., & Blanco Viñuela, E.&nbsp;(2016). Formal Verification of Safety PLC Based Control Software. In _Proceedings of the 12th International Conference on Integrated Formal Methods - Volume 9681_ (pp. 508–522). Berlin, Heidelberg: Springer-Verlag. https://doi.org/[10.1007/978-3-319-33693-0_32](https://dx.doi.org/10.1007/978-3-319-33693-0_32){.bib-doi}
~ end bibitem

~ begin bibitem {id:"david_cristina_program_2017"; cite-year:"2017"; cite-authors:"David Cristina and Kroening Daniel"; cite-authors-long:"David Cristina and Kroening Daniel"; cite-label:"David Cristina \& Kroening Daniel, 2017"; caption:"Program synthesis: challenges and opportunities&nl;David Cristina and Kroening Daniel, 2017"; data-line:"FormalBib.bib:2279"; searchterm:"Program%20synthesis%3A%20challenges%20and%20opportunities%20David%20Cristina%20and%20Kroening%20Daniel%2C%202017"; spellcheck:"false"}
David Cristina, & Kroening Daniel. (2017). Program synthesis: challenges and opportunities. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150403. https://doi.org/[10.1098/rsta.2015.0403](https://dx.doi.org/10.1098/rsta.2015.0403){.bib-doi}
~ end bibitem

~ begin bibitem {id:"davie_why_2020"; cite-year:"2020"; cite-authors:"Davie"; cite-authors-long:"Davie"; cite-label:"Davie, 2020"; caption:"Why 5G Matters.Systems Approach&nl;Davie, 2020"; data-line:"Networking.bib:621"; searchterm:"Why%205G%20Matters.Systems%20Approach%20Davie%2C%202020"; spellcheck:"false"}
Davie, B.&nbsp;(2020, December 14). Why 5G Matters.Systems Approach. Retrieved January 20, 2021, from <http://www.systemsapproach.org/1/archives/12-2020>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dawes_specifying_nodate"; cite-year:"n.d."; cite-authors:"Dawes"; cite-authors-long:"Dawes"; cite-label:"Dawes, n.d."; caption:"Specifying Properties over Inter-Procedural, Source Code Level Behaviour of Programs&nl;Dawes, n.d."; data-line:"FormalBib.bib:7385"; searchterm:"Specifying%20Properties%20over%20InterProcedural%2C%20Source%20Code%20Level%20Behaviour%20of%20Programs%20Dawes%2C%20n.d."; spellcheck:"false"}
Dawes, J.&nbsp;H.&nbsp;(n.d.). Specifying Properties over Inter-Procedural, Source Code Level Behaviour of Programs, 20.
~ end bibitem

~ begin bibitem {id:"debnath_re-engineering_2021"; cite-year:"2021"; cite-authors:"Debnath et al."; cite-authors-long:"Debnath, Chau, and Chowdhury"; cite-label:"Debnath, Chau, \& Chowdhury, 2021"; caption:"On Re-engineering the X.509 PKI with Executable Specification for Better Implementation Guarantees&nl;Debnath, Chau, and Chowdhury, 2021"; data-line:"Security.bib:1429"; searchterm:"On%20Reengineering%20the%20X.509%20PKI%20with%20Executable%20Specification%20for%20Better%20Implementation%20Guarantees%20Debnath%2C%20Chau%2C%20and%20Chowdhury%2C%202021"; spellcheck:"false"}
Debnath, J., Chau, S.&nbsp;Y., & Chowdhury, O.&nbsp;(2021). On Re-engineering the X.509 PKI with Executable Specification for Better Implementation Guarantees. In _Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security_ (pp. 1388–1404). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3460120.3484793](https://dx.doi.org/10.1145/3460120.3484793){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_deducteamdedukti_2019"; cite-authors:"2019f"; cite-authors-long:"2019f"; cite-label:"\_Deducteam/Dedukti\_, 2019"; caption:"Deducteam/Dedukti&nl;2019f, "; data-line:"FormalBib.bib:6283"; searchterm:"Deducteam%2FDedukti%202019f%2C%20"; spellcheck:"false"}
_Deducteam/Dedukti_. (2019). Deducteam. Retrieved from <https://github.com/Deducteam/Dedukti>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_deducteamholide_2019"; cite-authors:"2019e"; cite-authors-long:"2019e"; cite-label:"\_Deducteam/Holide\_, 2019"; caption:"Deducteam/Holide&nl;2019e, "; data-line:"FormalBib.bib:6293"; searchterm:"Deducteam%2FHolide%202019e%2C%20"; spellcheck:"false"}
_Deducteam/Holide_. (2019). Deducteam. Retrieved from <https://github.com/Deducteam/Holide>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_dedukti_nodate"; cite-authors:"2020i"; cite-authors-long:"2020i"; cite-label:"\&ldquo;Dedukti - a Logical Framework,\&rdquo; n.d."; caption:"Dedukti - a Logical Framework&nl;2020i, "; data-line:"FormalBib.bib:6276"; searchterm:"Dedukti%20%20a%20Logical%20Framework%202020i%2C%20"; spellcheck:"false"}
Dedukti - a Logical Framework. (n.d.). Retrieved January 10, 2020, from <https://deducteam.github.io/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"parigot_tactic_2000"; cite-year:"2000"; cite-authors:"Delahaye"; cite-authors-long:"Delahaye"; cite-label:"Delahaye, 2000"; caption:"A Tactic Language for the System Coq&nl;Delahaye, 2000"; data-line:"FormalBib.bib:2212"; searchterm:"A%20Tactic%20Language%20for%20the%20System%20Coq%20Delahaye%2C%202000"; spellcheck:"false"}
Delahaye, D.&nbsp;(2000). A Tactic Language for the System Coq. In M.&nbsp;Parigot & A.&nbsp;Voronkov (Eds.), _Logic for Programming and Automated Reasoning_ (Vol. 1955, pp. 85–95). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/3-540-44404-1_7](https://dx.doi.org/10.1007/3-540-44404-1_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_fiat:_2015"; cite-year:"2015"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Pit-Claudel, Gross, and Chlipala"; cite-label:"Delaware, Pit-Claudel, Gross, \& Chlipala, 2015"; caption:"Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant&nl;Delaware, Pit-Claudel, Gross, and Chlipala, 2015"; data-line:"FormalBib.bib:2466"; searchterm:"Fiat%3A%20Deductive%20Synthesis%20of%20Abstract%20Data%20Types%20in%20a%20Proof%20Assistant%20Delaware%2C%20PitClaudel%2C%20Gross%2C%20and%20Chlipala%2C%202015"; spellcheck:"false"}
Delaware, B., Pit-Claudel, C., Gross, J., & Chlipala, A.&nbsp;(2015). Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 689–700). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2677006](https://dx.doi.org/10.1145/2676726.2677006){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_narcissus:_2018"; cite-year:"2018"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala"; cite-label:"Delaware, Suriyakarn, Pit\&ndash;Claudel, Ye, \& Chlipala, 2018"; caption:"Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats&nl;Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala, 2018"; data-line:"FormalBib.bib:2345"; searchterm:"Narcissus%3A%20Deriving%20CorrectByConstruction%20Decoders%20and%20Encoders%20from%20Binary%20Formats%20Delaware%2C%20Suriyakarn%2C%20Pit%26ndash%3BClaudel%2C%20Ye%2C%20and%20Chlipala%2C%202018"; spellcheck:"false"}
Delaware, B., Suriyakarn, S., Pit&ndash;Claudel, C., Ye, Q., & Chlipala, A.&nbsp;(2018). Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats. Retrieved from <https://arxiv.org/abs/1803.04870v2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"delignat-lavaud_implementing_2017"; cite-year:"2017"; cite-authors:"Delignat-Lavaud et al."; cite-authors-long:"Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al."; cite-label:"Delignat-Lavaud et al., 2017"; caption:"Implementing and Proving the TLS 1.3 Record Layer&nl;Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al., 2017"; data-line:"FormalBib.bib:2201"; searchterm:"Implementing%20and%20Proving%20the%20TLS%201.3%20Record%20Layer%20DelignatLavaud%2C%20Fournet%2C%20Kohlweiss%2C%20Protzenko%2C%20Rastogi%2C%20Swamy%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Protzenko, J., Rastogi, A., Swamy, N., … Zinzindohoue, J.&nbsp;K.&nbsp;(2017). Implementing and Proving the TLS 1.3 Record Layer. Retrieved from <https://www.microsoft.com/en-us/research/publication/implementing-proving-tls-1-3-record-layer/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"delignat-lavaud_security_nodate"; cite-year:"n.d."; cite-authors:"Delignat-Lavaud et al."; cite-authors-long:"Delignat-Lavaud, Fournet, Parno, Protzenko, Ramananandro, Bosamiya, et al."; cite-label:"Delignat-Lavaud et al., n.d."; caption:"A Security Model and Fully Veriﬁed Implementation for the IETF QUIC Record Layer&nl;Delignat-Lavaud, Fournet, Parno, Protzenko, Ramananandro, Bosamiya, et al., n.d."; data-line:"FormalBib.bib:5302"; searchterm:"A%20Security%20Model%20and%20Fully%20Veri%EF%AC%81ed%20Implementation%20for%20the%20IETF%20QUIC%20Record%20Layer%20DelignatLavaud%2C%20Fournet%2C%20Parno%2C%20Protzenko%2C%20Ramananandro%2C%20Bosamiya%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Delignat-Lavaud, A., Fournet, C., Parno, B., Protzenko, J., Ramananandro, T., Bosamiya, J., … Zhou, Y.&nbsp;(n.d.). A Security Model and Fully Veriﬁed Implementation for the IETF QUIC Record Layer, 17.
~ end bibitem

~ begin bibitem {id:"demeo_agda_2021-1"; cite-year:"2021a"; cite-authors:"DeMeo"; cite-authors-long:"DeMeo"; cite-label:"DeMeo, 2021a"; caption:"The Agda Universal Algebra Library, Part 1: Foundation&nl;DeMeo, 2021a"; data-line:"FormalBib.bib:8174"; searchterm:"The%20Agda%20Universal%20Algebra%20Library%2C%20Part%201%3A%20Foundation%20DeMeo%2C%202021a"; spellcheck:"false"}
DeMeo, W.&nbsp;(2021a). The Agda Universal Algebra Library, Part 1: Foundation. _arXiv:2103.05581 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.05581](http://arxiv.org/abs/2103.05581){.bib-url}
~ end bibitem

~ begin bibitem {id:"demeo_agda_2021"; cite-year:"2021b"; cite-authors:"DeMeo"; cite-authors-long:"DeMeo"; cite-label:"DeMeo, 2021b"; caption:"The Agda Universal Algebra Library, Part 2: Structure&nl;DeMeo, 2021b"; data-line:"FormalBib.bib:8109"; searchterm:"The%20Agda%20Universal%20Algebra%20Library%2C%20Part%202%3A%20Structure%20DeMeo%2C%202021b"; spellcheck:"false"}
DeMeo, W.&nbsp;(2021b). The Agda Universal Algebra Library, Part 2: Structure. _arXiv:2103.09092 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.09092](http://arxiv.org/abs/2103.09092){.bib-url}
~ end bibitem

~ begin bibitem {id:"de_millo_social_1979"; cite-year:"1979"; cite-authors:"De Millo et al."; cite-authors-long:"De Millo, Lipton, and Perlis"; cite-label:"De Millo, Lipton, \& Perlis, 1979"; caption:"Social Processes and Proofs of Theorems and Programs&nl;De Millo, Lipton, and Perlis, 1979"; data-line:"FormalBib.bib:4778"; searchterm:"Social%20Processes%20and%20Proofs%20of%20Theorems%20and%20Programs%20De%20Millo%2C%20Lipton%2C%20and%20Perlis%2C%201979"; spellcheck:"false"}
De Millo, R.&nbsp;A., Lipton, R.&nbsp;J., & Perlis, A.&nbsp;J.&nbsp;(1979). Social Processes and Proofs of Theorems and Programs. _Commun. ACM_, _22_(5), 271–280. https://doi.org/[10.1145/359104.359106](https://dx.doi.org/10.1145/359104.359106){.bib-doi}
~ end bibitem

~ begin bibitem {id:"derakhshan_session_nodate"; cite-year:"n.d."; cite-authors:"Derakhshan et al."; cite-authors-long:"Derakhshan, Balzer, and Jia"; cite-label:"Derakhshan, Balzer, \& Jia, n.d."; caption:"Session Logical Relations for Noninterference&nl;Derakhshan, Balzer, and Jia, n.d."; data-line:"FormalBib.bib:8045"; searchterm:"Session%20Logical%20Relations%20for%20Noninterference%20Derakhshan%2C%20Balzer%2C%20and%20Jia%2C%20n.d."; spellcheck:"false"}
Derakhshan, F., Balzer, S., & Jia, L.&nbsp;(n.d.). Session Logical Relations for Noninterference, 31.
~ end bibitem

~ begin bibitem {id:"devai_embedding_2009"; cite-year:"2009"; cite-authors:"Dévai"; cite-authors-long:"Dévai"; cite-label:"Dévai, 2009"; caption:"Embedding a Proof System in Haskell&nl;Dévai, 2009"; data-line:"FormalBib.bib:6402"; searchterm:"Embedding%20a%20Proof%20System%20in%20Haskell%20D%C3%A9vai%2C%202009"; spellcheck:"false"}
Dévai, G.&nbsp;(2009). Embedding a Proof System in Haskell. In _Central European Functional Programming School_ (pp. 354–371). Springer, Berlin, Heidelberg. https://doi.org/[10.1007/978-3-642-17685-2_10](https://dx.doi.org/10.1007/978-3-642-17685-2_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"devkota_cfgconf_2021"; cite-year:"2021"; cite-authors:"Devkota et al."; cite-authors-long:"Devkota, Legendre, Kunen, Aschwanden, and Isaacs"; cite-label:"Devkota, Legendre, Kunen, Aschwanden, \& Isaacs, 2021"; caption:"CFGConf: Supporting high level requirements for visualizing Control Flow Graphs&nl;Devkota, Legendre, Kunen, Aschwanden, and Isaacs, 2021"; data-line:"LanguageTools.bib:272"; searchterm:"CFGConf%3A%20Supporting%20high%20level%20requirements%20for%20visualizing%20Control%20Flow%20Graphs%20Devkota%2C%20Legendre%2C%20Kunen%2C%20Aschwanden%2C%20and%20Isaacs%2C%202021"; spellcheck:"false"}
Devkota, S., Legendre, M., Kunen, A., Aschwanden, P., & Isaacs, K.&nbsp;E.&nbsp;(2021). CFGConf: Supporting high level requirements for visualizing Control Flow Graphs. _arXiv:2108.03047 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2108.03047](http://arxiv.org/abs/2108.03047){.bib-url}
~ end bibitem

~ begin bibitem {id:"dickerson_rhle_2020"; cite-year:"2020"; cite-authors:"Dickerson et al."; cite-authors-long:"Dickerson, Ye, and Delaware"; cite-label:"Dickerson, Ye, \& Delaware, 2020"; caption:"RHLE: Modular Deductive Verification of Relational &dollar;&bslash;forall&bslash;exists&dollar; Properties&nl;Dickerson, Ye, and Delaware, 2020"; data-line:"FormalBib.bib:440"; searchterm:"RHLE%3A%20Modular%20Deductive%20Verification%20of%20Relational%20%26dollar%3B%26bslash%3Bforall%26bslash%3Bexists%26dollar%3B%20Properties%20Dickerson%2C%20Ye%2C%20and%20Delaware%2C%202020"; spellcheck:"false"}
Dickerson, R., Ye, Q., & Delaware, B.&nbsp;(2020). RHLE: Modular Deductive Verification of Relational &dollar;&bslash;forall&bslash;exists&dollar; Properties. _arXiv:2002.02904 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2002.02904](http://arxiv.org/abs/2002.02904){.bib-url}
~ end bibitem

~ begin bibitem {id:"di_cosmo_linear_2019"; cite-year:"2019"; cite-authors:"Di Cosmo and Miller"; cite-authors-long:"Di Cosmo and Miller"; cite-label:"Di Cosmo \& Miller, 2019"; caption:"Linear Logic&nl;Di Cosmo and Miller, 2019"; data-line:"FormalBib.bib:6121"; searchterm:"Linear%20Logic%20Di%20Cosmo%20and%20Miller%2C%202019"; spellcheck:"false"}
Di Cosmo, R., & Miller, D.&nbsp;(2019). Linear Logic. In E.&nbsp;N.&nbsp;Zalta (Ed.), _The Stanford Encyclopedia of Philosophy_ (Summer 2019). Metaphysics Research Lab, Stanford University. Retrieved from <https://plato.stanford.edu/archives/sum2019/entries/logic-linear/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dietsch_verification_2021"; cite-year:"2021"; cite-authors:"Dietsch et al."; cite-authors-long:"Dietsch, Heizmann, Klumpp, Naouar, Podelski, and Schätzle"; cite-label:"Dietsch et al., 2021"; caption:"Verification of Concurrent Programs Using Petri Net Unfoldings&nl;Dietsch, Heizmann, Klumpp, Naouar, Podelski, and Schätzle, 2021"; data-line:"FormalBib.bib:5386"; searchterm:"Verification%20of%20Concurrent%20Programs%20Using%20Petri%20Net%20Unfoldings%20Dietsch%2C%20Heizmann%2C%20Klumpp%2C%20Naouar%2C%20Podelski%2C%20and%20Sch%C3%A4tzle%2C%202021"; spellcheck:"false"}
Dietsch, D., Heizmann, M., Klumpp, D., Naouar, M., Podelski, A., & Schätzle, C.&nbsp;(2021). Verification of Concurrent Programs Using Petri Net Unfoldings. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 174–195). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_9](https://dx.doi.org/10.1007/978-3-030-67067-2_9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dietz_understanding_nodate"; cite-year:"n.d."; cite-authors:"Dietz et al."; cite-authors-long:"Dietz, Li, Regehr, and Adve"; cite-label:"Dietz, Li, Regehr, \& Adve, n.d."; caption:"Understanding Integer Overﬂow in C/C++&nl;Dietz, Li, Regehr, and Adve, n.d."; data-line:"Security.bib:392"; searchterm:"Understanding%20Integer%20Over%EF%AC%82ow%20in%20C%2FC%2B%2B%20Dietz%2C%20Li%2C%20Regehr%2C%20and%20Adve%2C%20n.d."; spellcheck:"false"}
Dietz, W., Li, P., Regehr, J., & Adve, V.&nbsp;(n.d.). Understanding Integer Overﬂow in C/C++, 11.
~ end bibitem

~ begin bibitem {id:"dijkstra_guarded_1975"; cite-year:"1975"; cite-authors:"Dijkstra"; cite-authors-long:"Dijkstra"; cite-label:"Dijkstra, 1975"; caption:"Guarded Commands, Nondeterminacy and Formal Derivation of Programs&nl;Dijkstra, 1975"; data-line:"FormalBib.bib:2092"; searchterm:"Guarded%20Commands%2C%20Nondeterminacy%20and%20Formal%20Derivation%20of%20Programs%20Dijkstra%2C%201975"; spellcheck:"false"}
Dijkstra, E.&nbsp;W.&nbsp;(1975). Guarded Commands, Nondeterminacy and Formal Derivation of Programs. _Commun. ACM_, _18_(8), 453–457. https://doi.org/[10.1145/360933.360975](https://dx.doi.org/10.1145/360933.360975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dijkstra_political_1978"; cite-year:"1978"; cite-authors:"Dijkstra et al."; cite-authors-long:"Dijkstra, DeMillo, Lipton, and Perlis"; cite-label:"Dijkstra, DeMillo, Lipton, \& Perlis, 1978"; caption:"On a Political Pamphlet from the Middle Ages&nl;Dijkstra, DeMillo, Lipton, and Perlis, 1978"; data-line:"FormalBib.bib:4763"; searchterm:"On%20a%20Political%20Pamphlet%20from%20the%20Middle%20Ages%20Dijkstra%2C%20DeMillo%2C%20Lipton%2C%20and%20Perlis%2C%201978"; spellcheck:"false"}
Dijkstra, E.&nbsp;W., DeMillo, R.&nbsp;A., Lipton, R.&nbsp;J., & Perlis, A.&nbsp;J.&nbsp;(1978). On a Political Pamphlet from the Middle Ages. _SIGSOFT Softw. Eng. Notes_, _3_(2), 14–16. https://doi.org/[10.1145/1005888.1005890](https://dx.doi.org/10.1145/1005888.1005890){.bib-doi}
~ end bibitem

~ begin bibitem {id:"din_lagc_2022"; cite-year:"2022"; cite-authors:"Din et al."; cite-authors-long:"Din, Hähnle, Henrio, Johnsen, Pun, and Tarifa"; cite-label:"Din et al., 2022"; caption:"LAGC Semantics of Concurrent Programming Languages&nl;Din, Hähnle, Henrio, Johnsen, Pun, and Tarifa, 2022"; data-line:"FormalBib.bib:10267"; searchterm:"LAGC%20Semantics%20of%20Concurrent%20Programming%20Languages%20Din%2C%20H%C3%A4hnle%2C%20Henrio%2C%20Johnsen%2C%20Pun%2C%20and%20Tarifa%2C%202022"; spellcheck:"false"}
Din, C.&nbsp;C., Hähnle, R., Henrio, L., Johnsen, E.&nbsp;B., Pun, V.&nbsp;K.&nbsp;I., & Tarifa, S.&nbsp;L.&nbsp;T.&nbsp;(2022). LAGC Semantics of Concurrent Programming Languages. _arXiv:2202.12195 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.12195](http://arxiv.org/abs/2202.12195){.bib-url}
~ end bibitem

~ begin bibitem {id:"ding_velvet_2021"; cite-year:"2021"; cite-authors:"Ding et al."; cite-authors-long:"Ding, Suneja, Zheng, Laredo, Morari, Kaiser, and Ray"; cite-label:"Ding et al., 2021"; caption:"VELVET: a noVel Ensemble Learning approach to automatically locate VulnErable sTatements&nl;Ding, Suneja, Zheng, Laredo, Morari, Kaiser, and Ray, 2021"; data-line:"Security.bib:1454"; searchterm:"VELVET%3A%20a%20noVel%20Ensemble%20Learning%20approach%20to%20automatically%20locate%20VulnErable%20sTatements%20Ding%2C%20Suneja%2C%20Zheng%2C%20Laredo%2C%20Morari%2C%20Kaiser%2C%20and%20Ray%2C%202021"; spellcheck:"false"}
Ding, Y., Suneja, S., Zheng, Y., Laredo, J., Morari, A., Kaiser, G., & Ray, B.&nbsp;(2021). VELVET: a noVel Ensemble Learning approach to automatically locate VulnErable sTatements. _arXiv:2112.10893 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2112.10893](http://arxiv.org/abs/2112.10893){.bib-url}
~ end bibitem

~ begin bibitem {id:"di_accelerating_2016"; cite-year:"2016"; cite-authors:"Di and Sui"; cite-authors-long:"Di and Sui"; cite-label:"Di \& Sui, 2016"; caption:"Accelerating Dynamic Data Race Detection Using Static Thread Interference Analysis&nl;Di and Sui, 2016"; data-line:"LanguageTools.bib:589"; searchterm:"Accelerating%20Dynamic%20Data%20Race%20Detection%20Using%20Static%20Thread%20Interference%20Analysis%20Di%20and%20Sui%2C%202016"; spellcheck:"false"}
Di, P., & Sui, Y.&nbsp;(2016). Accelerating Dynamic Data Race Detection Using Static Thread Interference Analysis. In _Proceedings of the 7th International Workshop on Programming Models and Applications for Multicores and Manycores_ (pp. 30–39). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2883404.2883405](https://dx.doi.org/10.1145/2883404.2883405){.bib-doi}
~ end bibitem

~ begin bibitem {id:"disselkoen_finding_nodate"; cite-year:"n.d."; cite-authors:"Disselkoen et al."; cite-authors-long:"Disselkoen, Cauligi, Tullsen, and Stefan"; cite-label:"Disselkoen, Cauligi, Tullsen, \& Stefan, n.d."; caption:"Finding and Eliminating Timing Side-Channels in Crypto Code with Pitchfork&nl;Disselkoen, Cauligi, Tullsen, and Stefan, n.d."; data-line:"Security.bib:708"; searchterm:"Finding%20and%20Eliminating%20Timing%20SideChannels%20in%20Crypto%20Code%20with%20Pitchfork%20Disselkoen%2C%20Cauligi%2C%20Tullsen%2C%20and%20Stefan%2C%20n.d."; spellcheck:"false"}
Disselkoen, C., Cauligi, S., Tullsen, D., & Stefan, D.&nbsp;(n.d.). Finding and Eliminating Timing Side-Channels in Crypto Code with Pitchfork, 8.
~ end bibitem

~ begin bibitem {id:"distefano_scaling_2019"; cite-year:"2019"; cite-authors:"Distefano et al."; cite-authors-long:"Distefano, Fähndrich, Logozzo, and O’Hearn"; cite-label:"Distefano, Fähndrich, Logozzo, \& O’Hearn, 2019"; caption:"Scaling static analyses at Facebook&nl;Distefano, Fähndrich, Logozzo, and O’Hearn, 2019"; data-line:"FormalBib.bib:9733"; searchterm:"Scaling%20static%20analyses%20at%20Facebook%20Distefano%2C%20F%C3%A4hndrich%2C%20Logozzo%2C%20and%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
Distefano, D., Fähndrich, M., Logozzo, F., & O’Hearn, P.&nbsp;W.&nbsp;(2019). Scaling static analyses at Facebook. _Communications of the ACM_, _62_(8), 62–70. https://doi.org/[10.1145/3338112](https://dx.doi.org/10.1145/3338112){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hermanns_local_2006"; cite-year:"2006"; cite-authors:"Distefano et al."; cite-authors-long:"Distefano, O’Hearn, and Yang"; cite-label:"Distefano, O’Hearn, \& Yang, 2006"; caption:"A Local Shape Analysis Based on Separation Logic&nl;Distefano, O’Hearn, and Yang, 2006"; data-line:"FormalBib.bib:3347"; searchterm:"A%20Local%20Shape%20Analysis%20Based%20on%20Separation%20Logic%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202006"; spellcheck:"false"}
Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2006). A Local Shape Analysis Based on Separation Logic. In H.&nbsp;Hermanns & J.&nbsp;Palsberg (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (Vol. 3920, pp. 287–302). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/11691372_19](https://dx.doi.org/10.1007/11691372_19){.bib-doi}
~ end bibitem

~ begin bibitem {id:"huisman_formal_2021"; cite-year:"2021"; cite-authors:"Djoudi et al."; cite-authors-long:"Djoudi, Hána, and Kosmatov"; cite-label:"Djoudi, Hána, \& Kosmatov, 2021"; caption:"Formal Verification of a JavaCard Virtual Machine with Frama-C&nl;Djoudi, Hána, and Kosmatov, 2021"; data-line:"FormalBib.bib:9488"; searchterm:"Formal%20Verification%20of%20a%20JavaCard%20Virtual%20Machine%20with%20FramaC%20Djoudi%2C%20H%C3%A1na%2C%20and%20Kosmatov%2C%202021"; spellcheck:"false"}
Djoudi, A., Hána, M., & Kosmatov, N.&nbsp;(2021). Formal Verification of a JavaCard Virtual Machine with Frama-C.&nbsp;In M.&nbsp;Huisman, C.&nbsp;Păsăreanu, & N.&nbsp;Zhan (Eds.), _Formal Methods_ (Vol. 13047, pp. 427–444). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-90870-6_23](https://dx.doi.org/10.1007/978-3-030-90870-6_23){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_fresh_2009"; cite-year:"2009"; cite-authors:"Dockins et al."; cite-authors-long:"Dockins, Hobor, and Appel"; cite-label:"Dockins, Hobor, \& Appel, 2009"; caption:"A Fresh Look at Separation Algebras and Share Accounting&nl;Dockins, Hobor, and Appel, 2009"; data-line:"FormalBib.bib:1857"; searchterm:"A%20Fresh%20Look%20at%20Separation%20Algebras%20and%20Share%20Accounting%20Dockins%2C%20Hobor%2C%20and%20Appel%2C%202009"; spellcheck:"false"}
Dockins, R., Hobor, A., & Appel, A.&nbsp;W.&nbsp;(2009). A Fresh Look at Separation Algebras and Share Accounting. In Z.&nbsp;Hu (Ed.), _Programming Languages and Systems_ (Vol. 5904, pp. 161–177). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-10672-9_13](https://dx.doi.org/10.1007/978-3-642-10672-9_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"doenges_petr4_2020"; cite-year:"2020"; cite-authors:"Doenges et al."; cite-authors-long:"Doenges, Arashloo, Bautista, Chang, Ni, Parkinson, et al."; cite-label:"Doenges et al., 2020"; caption:"Petr4: Formal Foundations for P4 Data Planes&nl;Doenges, Arashloo, Bautista, Chang, Ni, Parkinson, et al., 2020"; data-line:"Networking.bib:966"; searchterm:"Petr4%3A%20Formal%20Foundations%20for%20P4%20Data%20Planes%20Doenges%2C%20Arashloo%2C%20Bautista%2C%20Chang%2C%20Ni%2C%20Parkinson%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Doenges, R., Arashloo, M.&nbsp;T., Bautista, S., Chang, A., Ni, N., Parkinson, S., … Foster, N.&nbsp;(2020). Petr4: Formal Foundations for P4 Data Planes. _arXiv:2011.05948 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2011.05948](http://arxiv.org/abs/2011.05948){.bib-url}
~ end bibitem

~ begin bibitem {id:"downey_algorithmic_2010"; cite-year:"2010"; cite-authors:"Downey and Hirschfeldt"; cite-authors-long:"Downey and Hirschfeldt"; cite-label:"Downey \& Hirschfeldt, 2010"; caption:"Algorithmic Randomness and Complexity&nl;Downey and Hirschfeldt, 2010"; data-line:"FormalBib.bib:6786"; searchterm:"Algorithmic%20Randomness%20and%20Complexity%20Downey%20and%20Hirschfeldt%2C%202010"; spellcheck:"false"}
Downey, R.&nbsp;G., & Hirschfeldt, D.&nbsp;R.&nbsp;(2010). _Algorithmic Randomness and Complexity_. New York, NY: Springer New York. https://doi.org/[10.1007/978-0-387-68441-3](https://dx.doi.org/10.1007/978-0-387-68441-3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dral_verified_2022"; cite-year:"2022"; cite-authors:"Dral"; cite-authors-long:"Dral"; cite-label:"Dral, 2022"; caption:"Verified Compiler Optimisations&nl;Dral, 2022"; data-line:"FormalBib.bib:9850"; searchterm:"Verified%20Compiler%20Optimisations%20Dral%2C%202022"; spellcheck:"false"}
Dral, J.&nbsp;(2022). _Verified Compiler Optimisations_ (Masters). Utrecht University.
~ end bibitem

~ begin bibitem {id:"dreyer_concurrent_nodate"; cite-year:"2021"; cite-authors:"Dreyer and O’Hearn"; cite-authors-long:"Dreyer and O’Hearn"; cite-label:"Dreyer \& O’Hearn, n.d."; caption:"Concurrent Incorrectness Separation Logic&nl;Dreyer and O’Hearn, 2021"; data-line:"FormalBib.bib:9287"; searchterm:"Concurrent%20Incorrectness%20Separation%20Logic%20Dreyer%20and%20O%E2%80%99Hearn%2C%202021"; spellcheck:"false"}
Dreyer, D., & O’Hearn, P.&nbsp;W.&nbsp;(n.d.). Concurrent Incorrectness Separation Logic. Retrieved December 7, 2021, from <https://research.fb.com/wp-content/uploads/2021/11/Concurrent-Incorrectness-Separation-Logic.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dross_verifythis_2020"; cite-year:"2020"; cite-authors:"Dross et al."; cite-authors-long:"Dross, Furia, Huisman, Monahan, and Müller"; cite-label:"Dross, Furia, Huisman, Monahan, \& Müller, 2020"; caption:"VerifyThis 2019: A Program Verification Competition (Extended Report)&nl;Dross, Furia, Huisman, Monahan, and Müller, 2020"; data-line:"FormalBib.bib:8489"; searchterm:"VerifyThis%202019%3A%20A%20Program%20Verification%20Competition%20Extended%20Report%20Dross%2C%20Furia%2C%20Huisman%2C%20Monahan%2C%20and%20M%C3%BCller%2C%202020"; spellcheck:"false"}
Dross, C., Furia, C.&nbsp;A., Huisman, M., Monahan, R., & Müller, P.&nbsp;(2020). VerifyThis 2019: A Program Verification Competition (Extended Report). _arXiv:2008.13610 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2008.13610](http://arxiv.org/abs/2008.13610){.bib-url}
~ end bibitem

~ begin bibitem {id:"dsilva_correctness-security_2015"; cite-year:"2015"; cite-authors:"D’Silva et al."; cite-authors-long:"D’Silva, Payer, and Song"; cite-label:"D’Silva, Payer, \& Song, 2015"; caption:"The Correctness-Security Gap in Compiler Optimization&nl;D’Silva, Payer, and Song, 2015"; data-line:"Security.bib:607"; searchterm:"The%20CorrectnessSecurity%20Gap%20in%20Compiler%20Optimization%20D%E2%80%99Silva%2C%20Payer%2C%20and%20Song%2C%202015"; spellcheck:"false"}
D’Silva, V., Payer, M., & Song, D.&nbsp;(2015). The Correctness-Security Gap in Compiler Optimization. In _2015 IEEE Security and Privacy Workshops_ (pp. 73–87). https://doi.org/[10.1109/SPW.2015.33](https://dx.doi.org/10.1109/SPW.2015.33){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dubut_fixed_2022"; cite-year:"2022"; cite-authors:"Dubut and Yamada"; cite-authors-long:"Dubut and Yamada"; cite-label:"Dubut \& Yamada, 2022"; caption:"Fixed Points Theorems for Non-Transitive Relations&nl;Dubut and Yamada, 2022"; data-line:"FormalBib.bib:10037"; searchterm:"Fixed%20Points%20Theorems%20for%20NonTransitive%20Relations%20Dubut%20and%20Yamada%2C%202022"; spellcheck:"false"}
Dubut, J., & Yamada, A.&nbsp;(2022). Fixed Points Theorems for Non-Transitive Relations. _Logical Methods in Computer Science_, _Volume 18, Issue 1_, 6809. https://doi.org/[10.46298/lmcs-18(1:30)2022](https://dx.doi.org/10.46298/lmcs-18%281:30%292022){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dumitrescu_bf4_2020"; cite-year:"2020"; cite-authors:"Dumitrescu et al."; cite-authors-long:"Dumitrescu, Stoenescu, Negreanu, and Raiciu"; cite-label:"Dumitrescu, Stoenescu, Negreanu, \& Raiciu, 2020"; caption:"bf4: towards bug-free P4 programs&nl;Dumitrescu, Stoenescu, Negreanu, and Raiciu, 2020"; data-line:"Networking.bib:745"; searchterm:"bf4%3A%20towards%20bugfree%20P4%20programs%20Dumitrescu%2C%20Stoenescu%2C%20Negreanu%2C%20and%20Raiciu%2C%202020"; spellcheck:"false"}
Dumitrescu, D., Stoenescu, R., Negreanu, L., & Raiciu, C.&nbsp;(2020). bf4: towards bug-free P4 programs. In _Proceedings of the Annual conference of the ACM Special Interest Group on Data Communication on the applications, technologies, architectures, and protocols for computer communication_ (pp. 571–585). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3387514.3405888](https://dx.doi.org/10.1145/3387514.3405888){.bib-doi}
~ end bibitem

~ begin bibitem {id:"easterbrook_formal_1997"; cite-year:"1997"; cite-authors:"S.&nbsp;Easterbrook and Callahan"; cite-authors-long:"S.&nbsp;Easterbrook and Callahan"; cite-label:"S. Easterbrook \& Callahan, 1997"; caption:"Formal methods for V &amp; V of partial specifications: an experience report&nl;S. Easterbrook and Callahan, 1997"; data-line:"FormalBib.bib:6943"; searchterm:"Formal%20methods%20for%20V%20%26amp%3B%20V%20of%20partial%20specifications%3A%20an%20experience%20report%20S.%20Easterbrook%20and%20Callahan%2C%201997"; spellcheck:"false"}
Easterbrook, S., & Callahan, J.&nbsp;(1997). Formal methods for V &amp; V of partial specifications: an experience report. In _Proceedings of ISRE ’97: 3rd IEEE International Symposium on Requirements Engineering_ (pp. 160–168). https://doi.org/[10.1109/ISRE.1997.566865](https://dx.doi.org/10.1109/ISRE.1997.566865){.bib-doi}
~ end bibitem

~ begin bibitem {id:"easterbrook_formal_nodate"; cite-year:"n.d."; cite-authors:"Steve Easterbrook and Callahan"; cite-authors-long:"Steve Easterbrook and Callahan"; cite-label:"Steve Easterbrook \& Callahan, n.d."; caption:"Formal Methods for V&amp;V of partial specifications: An experience report&nl;Steve Easterbrook and Callahan, n.d."; data-line:"FormalBib.bib:6934"; searchterm:"Formal%20Methods%20for%20V%26amp%3BV%20of%20partial%20specifications%3A%20An%20experience%20report%20Steve%20Easterbrook%20and%20Callahan%2C%20n.d."; spellcheck:"false"}
Easterbrook, S., & Callahan, J.&nbsp;(n.d.). Formal Methods for V&amp;V of partial specifications: An experience report, 9.
~ end bibitem

~ begin bibitem {id:"ebner_metaprogramming_2017"; cite-year:"2017"; cite-authors:"Ebner et al."; cite-authors-long:"Ebner, Ullrich, Roesch, Avigad, and Moura"; cite-label:"Ebner, Ullrich, Roesch, Avigad, \& Moura, 2017"; caption:"A Metaprogramming Framework for Formal Verification&nl;Ebner, Ullrich, Roesch, Avigad, and Moura, 2017"; data-line:"FormalBib.bib:3772"; searchterm:"A%20Metaprogramming%20Framework%20for%20Formal%20Verification%20Ebner%2C%20Ullrich%2C%20Roesch%2C%20Avigad%2C%20and%20Moura%2C%202017"; spellcheck:"false"}
Ebner, G., Ullrich, S., Roesch, J., Avigad, J., & Moura, L.&nbsp;de. (2017). A Metaprogramming Framework for Formal Verification. _Proc. ACM Program. Lang._, _1_, 34:1–34:29. https://doi.org/[10.1145/3110278](https://dx.doi.org/10.1145/3110278){.bib-doi}
~ end bibitem

~ begin bibitem {id:"echenim_proof_2022"; cite-year:"2022"; cite-authors:"Echenim and Peltier"; cite-authors-long:"Echenim and Peltier"; cite-label:"Echenim \& Peltier, 2022"; caption:"A Proof Procedure For Separation Logic With Inductive Definitions and Theory Reasoning&nl;Echenim and Peltier, 2022"; data-line:"FormalBib.bib:9866"; searchterm:"A%20Proof%20Procedure%20For%20Separation%20Logic%20With%20Inductive%20Definitions%20and%20Theory%20Reasoning%20Echenim%20and%20Peltier%2C%202022"; spellcheck:"false"}
Echenim, M., & Peltier, N.&nbsp;(2022). A Proof Procedure For Separation Logic With Inductive Definitions and Theory Reasoning. _arXiv:2201.13227 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2201.13227](http://arxiv.org/abs/2201.13227){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_efficient_nodate"; cite-authors:"2021j"; cite-authors-long:"2021j"; cite-label:"\&ldquo;Efficient Fixpoint Computation for Abstract Interpretation - University of California, Davis,\&rdquo; n.d."; caption:"Efficient Fixpoint Computation for Abstract Interpretation - University of California, Davis&nl;2021j, "; data-line:"FormalBib.bib:9223"; searchterm:"Efficient%20Fixpoint%20Computation%20for%20Abstract%20Interpretation%20%20University%20of%20California%2C%20Davis%202021j%2C%20"; spellcheck:"false"}
Efficient Fixpoint Computation for Abstract Interpretation - University of California, Davis. (n.d.). Retrieved November 16, 2021, from <https://video.ucdavis.edu/media/Efficient+Fixpoint+Computation+for+Abstract+Interpretation/1_1trufm5a>{.bib-url}
~ end bibitem

~ begin bibitem {id:"egolf_verbatim_nodate"; cite-year:"n.d."; cite-authors:"Egolf et al."; cite-authors-long:"Egolf, Lasser, and Fisher"; cite-label:"Egolf, Lasser, \& Fisher, n.d."; caption:"Verbatim: A Veriﬁed Lexer Generator&nl;Egolf, Lasser, and Fisher, n.d."; data-line:"LanguageTools.bib:147"; searchterm:"Verbatim%3A%20A%20Veri%EF%AC%81ed%20Lexer%20Generator%20Egolf%2C%20Lasser%2C%20and%20Fisher%2C%20n.d."; spellcheck:"false"}
Egolf, D., Lasser, S., & Fisher, K.&nbsp;(n.d.). Verbatim: A Veriﬁed Lexer Generator, 9.
~ end bibitem

~ begin bibitem {id:"eichholz_dependently-typed_nodate"; cite-year:"2021"; cite-authors:"Eichholz"; cite-authors-long:"Eichholz"; cite-label:"Eichholz, n.d."; caption:"Dependently-Typed Data Plane Programming&nl;Eichholz, 2021"; data-line:"Networking.bib:1019"; searchterm:"DependentlyTyped%20Data%20Plane%20Programming%20Eichholz%2C%202021"; spellcheck:"false"}
Eichholz, M.&nbsp;(n.d.). Dependently-Typed Data Plane Programming. Retrieved December 7, 2021, from <https://ericthewry.github.io/pdfs/pi4.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"eichholz_dependently-typed_2022"; cite-year:"2022"; cite-authors:"Eichholz et al."; cite-authors-long:"Eichholz, Campbell, Krebs, Foster, and Mezini"; cite-label:"Eichholz, Campbell, Krebs, Foster, \& Mezini, 2022"; caption:"Dependently-typed data plane programming&nl;Eichholz, Campbell, Krebs, Foster, and Mezini, 2022"; data-line:"Networking.bib:1027"; searchterm:"Dependentlytyped%20data%20plane%20programming%20Eichholz%2C%20Campbell%2C%20Krebs%2C%20Foster%2C%20and%20Mezini%2C%202022"; spellcheck:"false"}
Eichholz, M., Campbell, E.&nbsp;H., Krebs, M., Foster, N., & Mezini, M.&nbsp;(2022). Dependently-typed data plane programming. _Proceedings of the ACM on Programming Languages_, _6_, 40:1–40:28. https://doi.org/[10.1145/3498701](https://dx.doi.org/10.1145/3498701){.bib-doi}
~ end bibitem

~ begin bibitem {id:"eisenberg_dependent_2016"; cite-year:"2016"; cite-authors:"Eisenberg"; cite-authors-long:"Eisenberg"; cite-label:"Eisenberg, 2016"; caption:"DEPENDENT TYPES IN HASKELL: THEORY AND PRACTICE&nl;Eisenberg, 2016"; data-line:"FormalBib.bib:4812"; searchterm:"DEPENDENT%20TYPES%20IN%20HASKELL%3A%20THEORY%20AND%20PRACTICE%20Eisenberg%2C%202016"; spellcheck:"false"}
Eisenberg, R.&nbsp;A.&nbsp;(2016). _DEPENDENT TYPES IN HASKELL: THEORY AND PRACTICE_ (phdthesis). Pennsylvania, Philadelphia, PA, USA.
~ end bibitem

~ begin bibitem {id:"eisenberg_existential_2021"; cite-year:"2021"; cite-authors:"Eisenberg et al."; cite-authors-long:"Eisenberg, Duboc, Weirich, and Lee"; cite-label:"Eisenberg, Duboc, Weirich, \& Lee, 2021"; caption:"An existential crisis resolved: type inference for first-class existential types&nl;Eisenberg, Duboc, Weirich, and Lee, 2021"; data-line:"FormalBib.bib:7448"; searchterm:"An%20existential%20crisis%20resolved%3A%20type%20inference%20for%20firstclass%20existential%20types%20Eisenberg%2C%20Duboc%2C%20Weirich%2C%20and%20Lee%2C%202021"; spellcheck:"false"}
Eisenberg, R.&nbsp;A., Duboc, G., Weirich, S., & Lee, D.&nbsp;(2021). An existential crisis resolved: type inference for first-class existential types. _Proceedings of the ACM on Programming Languages_, _5_, 64:1–64:29. https://doi.org/[10.1145/3473569](https://dx.doi.org/10.1145/3473569){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ekici_smtcoq:_2017"; cite-year:"2017"; cite-authors:"Ekici et al."; cite-authors-long:"Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett"; cite-label:"Ekici et al., 2017"; caption:"SMTCoq: A Plug-In for Integrating SMT Solvers into Coq&nl;Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett, 2017"; data-line:"FormalBib.bib:2230"; searchterm:"SMTCoq%3A%20A%20PlugIn%20for%20Integrating%20SMT%20Solvers%20into%20Coq%20Ekici%2C%20Mebsout%2C%20Tinelli%2C%20Keller%2C%20Katz%2C%20Reynolds%2C%20and%20Barrett%2C%202017"; spellcheck:"false"}
Ekici, B., Mebsout, A., Tinelli, C., Keller, C., Katz, G., Reynolds, A., & Barrett, C.&nbsp;(2017). SMTCoq: A Plug-In for Integrating SMT Solvers into Coq. In R.&nbsp;Majumdar & V.&nbsp;Kunčak (Eds.), _Computer Aided Verification_ (pp. 126–133). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"eklind_compositional_2015"; cite-year:"2015"; cite-authors:"Eklind"; cite-authors-long:"Eklind"; cite-label:"Eklind, 2015"; caption:"Compositional Decompilation using LLVM IR&nl;Eklind, 2015"; data-line:"LanguageTools.bib:1306"; searchterm:"Compositional%20Decompilation%20using%20LLVM%20IR%20Eklind%2C%202015"; spellcheck:"false"}
Eklind, R.&nbsp;(2015). Compositional Decompilation using LLVM IR, 100.
~ end bibitem

~ begin bibitem {id:"el-beheiry_smltocoq_2021"; cite-year:"2021"; cite-authors:"El-Beheiry et al."; cite-authors-long:"El-Beheiry, Reis, and Karkour"; cite-label:"El-Beheiry, Reis, \& Karkour, 2021"; caption:"SMLtoCoq: Automated Generation of Coq Specifications and Proof Obligations from SML Programs with Contracts&nl;El-Beheiry, Reis, and Karkour, 2021"; data-line:"FormalBib.bib:7652"; searchterm:"SMLtoCoq%3A%20Automated%20Generation%20of%20Coq%20Specifications%20and%20Proof%20Obligations%20from%20SML%20Programs%20with%20Contracts%20ElBeheiry%2C%20Reis%2C%20and%20Karkour%2C%202021"; spellcheck:"false"}
El-Beheiry, L., Reis, G., & Karkour, A.&nbsp;(2021). SMLtoCoq: Automated Generation of Coq Specifications and Proof Obligations from SML Programs with Contracts. _Electronic Proceedings in Theoretical Computer Science_, _337_, 71–87. https://doi.org/[10.4204/EPTCS.337.6](https://dx.doi.org/10.4204/EPTCS.337.6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"el-korashy_secureptrs_2021"; cite-year:"2021"; cite-authors:"El-Korashy et al."; cite-authors-long:"El-Korashy, Blanco, Thibault, Durier, Garg, and Hritcu"; cite-label:"El-Korashy et al., 2021"; caption:"SecurePtrs: Proving Secure Compilation with Data-Flow Back-Translation and Turn-Taking Simulation&nl;El-Korashy, Blanco, Thibault, Durier, Garg, and Hritcu, 2021"; data-line:"Security.bib:1235"; searchterm:"SecurePtrs%3A%20Proving%20Secure%20Compilation%20with%20DataFlow%20BackTranslation%20and%20TurnTaking%20Simulation%20ElKorashy%2C%20Blanco%2C%20Thibault%2C%20Durier%2C%20Garg%2C%20and%20Hritcu%2C%202021"; spellcheck:"false"}
El-Korashy, A., Blanco, R., Thibault, J., Durier, A., Garg, D., & Hritcu, C.&nbsp;(2021). SecurePtrs: Proving Secure Compilation with Data-Flow Back-Translation and Turn-Taking Simulation. _arXiv:2110.01439 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.01439](http://arxiv.org/abs/2110.01439){.bib-url}
~ end bibitem

~ begin bibitem {id:"emre_translating_2021"; cite-year:"2021"; cite-authors:"Emre et al."; cite-authors-long:"Emre, Schroeder, Dewey, and Hardekopf"; cite-label:"Emre, Schroeder, Dewey, \& Hardekopf, 2021"; caption:"Translating C to safer Rust&nl;Emre, Schroeder, Dewey, and Hardekopf, 2021"; data-line:"LanguageTools.bib:834"; searchterm:"Translating%20C%20to%20safer%20Rust%20Emre%2C%20Schroeder%2C%20Dewey%2C%20and%20Hardekopf%2C%202021"; spellcheck:"false"}
Emre, M., Schroeder, R., Dewey, K., & Hardekopf, B.&nbsp;(2021). Translating C to safer Rust. _Proceedings of the ACM on Programming Languages_, _5_, 121:1–121:29. https://doi.org/[10.1145/3485498](https://dx.doi.org/10.1145/3485498){.bib-doi}
~ end bibitem

~ begin bibitem {id:"epstein_computability_1989"; cite-year:"1989"; cite-authors:"Epstein and Carnielli"; cite-authors-long:"Epstein and Carnielli"; cite-label:"Epstein \& Carnielli, 1989"; caption:"Computability: Computable Functions Logic and the Foundations of Math&nl;Epstein and Carnielli, 1989"; data-line:"FormalBib.bib:5937"; searchterm:"Computability%3A%20Computable%20Functions%20Logic%20and%20the%20Foundations%20of%20Math%20Epstein%20and%20Carnielli%2C%201989"; spellcheck:"false"}
Epstein, R.&nbsp;L., & Carnielli, W.&nbsp;A.&nbsp;(1989). _Computability: Computable Functions Logic and the Foundations of Math_ (1 edition). Pacific Grove, Calif: Chapman and Hall/CRC.
~ end bibitem

~ begin bibitem {id:"erickson_beacon_2013"; cite-year:"2013"; cite-authors:"Erickson"; cite-authors-long:"Erickson"; cite-label:"Erickson, 2013"; caption:"The beacon openflow controller&nl;Erickson, 2013"; data-line:"Networking.bib:57"; searchterm:"The%20beacon%20openflow%20controller%20Erickson%2C%202013"; spellcheck:"false"}
Erickson, D.&nbsp;(2013). The beacon openflow controller. In _Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking_ (pp. 13–18). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2491185.2491189](https://dx.doi.org/10.1145/2491185.2491189){.bib-doi}
~ end bibitem

~ begin bibitem {id:"finkbeiner_loop_2022"; cite-year:"2022"; cite-authors:"Ernst"; cite-authors-long:"Ernst"; cite-label:"Ernst, 2022"; caption:"Loop Verification with Invariants and Contracts&nl;Ernst, 2022"; data-line:"FormalBib.bib:9760"; searchterm:"Loop%20Verification%20with%20Invariants%20and%20Contracts%20Ernst%2C%202022"; spellcheck:"false"}
Ernst, G.&nbsp;(2022). Loop Verification with Invariants and Contracts. In B.&nbsp;Finkbeiner & T.&nbsp;Wies (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (Vol. 13182, pp. 69–92). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-94583-1_4](https://dx.doi.org/10.1007/978-3-030-94583-1_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ernst_deductive_nodate"; cite-year:"n.d."; cite-authors:"Ernst et al."; cite-authors-long:"Ernst, Blau, and Murray"; cite-label:"Ernst, Blau, \& Murray, n.d."; caption:"Deductive Verification via the Debug Adapter Protocol&nl;Ernst, Blau, and Murray, n.d."; data-line:"LanguageTools.bib:156"; searchterm:"Deductive%20Verification%20via%20the%20Debug%20Adapter%20Protocol%20Ernst%2C%20Blau%2C%20and%20Murray%2C%20n.d."; spellcheck:"false"}
Ernst, G., Blau, J., & Murray, T.&nbsp;(n.d.). Deductive Verification via the Debug Adapter Protocol, 8.
~ end bibitem

~ begin bibitem {id:"erosa_taming_1994"; cite-year:"1994"; cite-authors:"Erosa and Hendren"; cite-authors-long:"Erosa and Hendren"; cite-label:"Erosa \& Hendren, 1994"; caption:"Taming control flow: a structured approach to eliminating goto statements&nl;Erosa and Hendren, 1994"; data-line:"FormalBib.bib:4261"; searchterm:"Taming%20control%20flow%3A%20a%20structured%20approach%20to%20eliminating%20goto%20statements%20Erosa%20and%20Hendren%2C%201994"; spellcheck:"false"}
Erosa, A.&nbsp;M., & Hendren, L.&nbsp;J.&nbsp;(1994). Taming control flow: a structured approach to eliminating goto statements. In _Proceedings of 1994 IEEE International Conference on Computer Languages (ICCL’94)_ (pp. 229–240). https://doi.org/[10.1109/ICCL.1994.288377](https://dx.doi.org/10.1109/ICCL.1994.288377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_event-b_nodate"; cite-authors:"2020k"; cite-authors-long:"2020k"; cite-label:"\&ldquo;Event-B and the Rodin Platform,\&rdquo; n.d."; caption:"Event-B and the Rodin Platform&nl;2020k, "; data-line:"FormalBib.bib:6507"; searchterm:"EventB%20and%20the%20Rodin%20Platform%202020k%2C%20"; spellcheck:"false"}
Event-B and the Rodin Platform. (n.d.). Retrieved January 10, 2020, from <http://www.event-b.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"everestteam_project_2021"; cite-year:"2021"; cite-authors:"EverestTeam"; cite-authors-long:"EverestTeam"; cite-label:"EverestTeam, 2021"; caption:"Project Everest&nl;EverestTeam, 2021"; data-line:"FormalBib.bib:724"; searchterm:"Project%20Everest%20EverestTeam%2C%202021"; spellcheck:"false"}
EverestTeam. (2021). Project Everest. Retrieved January 21, 2021, from <https://project-everest.github.io/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"fahmideh_software_2021"; cite-year:"2021"; cite-authors:"Fahmideh et al."; cite-authors-long:"Fahmideh, Grundy, Ahmed, Shen, Yan, Mougouei, et al."; cite-label:"Fahmideh et al., 2021"; caption:"Software Engineering for Blockchain Based Software Systems: Foundations, Survey, and Future Directions&nl;Fahmideh, Grundy, Ahmed, Shen, Yan, Mougouei, et al., 2021"; data-line:"Blockchain.bib:42"; searchterm:"Software%20Engineering%20for%20Blockchain%20Based%20Software%20Systems%3A%20Foundations%2C%20Survey%2C%20and%20Future%20Directions%20Fahmideh%2C%20Grundy%2C%20Ahmed%2C%20Shen%2C%20Yan%2C%20Mougouei%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Fahmideh, M., Grundy, J., Ahmed, A., Shen, J., Yan, J., Mougouei, D., … Abedin, B.&nbsp;(2021). Software Engineering for Blockchain Based Software Systems: Foundations, Survey, and Future Directions. _arXiv E-Prints_, _2105_, arXiv:2105.01881. Retrieved from <http://adsabs.harvard.edu/abs/2021arXiv210501881F>{.bib-url}
~ end bibitem

~ begin bibitem {id:"farrell_robotics_2018"; cite-year:"2018"; cite-authors:"Farrell et al."; cite-authors-long:"Farrell, Luckcuck, and Fisher"; cite-label:"Farrell, Luckcuck, \& Fisher, 2018"; caption:"Robotics and Integrated Formal Methods: Necessity meets Opportunity&nl;Farrell, Luckcuck, and Fisher, 2018"; data-line:"FormalBib.bib:6982"; searchterm:"Robotics%20and%20Integrated%20Formal%20Methods%3A%20Necessity%20meets%20Opportunity%20Farrell%2C%20Luckcuck%2C%20and%20Fisher%2C%202018"; spellcheck:"false"}
Farrell, M., Luckcuck, M., & Fisher, M.&nbsp;(2018). Robotics and Integrated Formal Methods: Necessity meets Opportunity. _arXiv:1805.11996 \[cs\]_, _11023_, 161–171. https://doi.org/[10.1007/978-3-319-98938-9_10](https://dx.doi.org/10.1007/978-3-319-98938-9_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fasse_code_nodate"; cite-year:"n.d."; cite-authors:"Fasse"; cite-authors-long:"Fasse"; cite-label:"Fasse, n.d."; caption:"Code Transformations to Increase Prepass Scheduling Opportunities in CompCert&nl;Fasse, n.d."; data-line:"FormalBib.bib:9516"; searchterm:"Code%20Transformations%20to%20Increase%20Prepass%20Scheduling%20Opportunities%20in%20CompCert%20Fasse%2C%20n.d."; spellcheck:"false"}
Fasse, J.&nbsp;(n.d.). Code Transformations to Increase Prepass Scheduling Opportunities in CompCert, 53.
~ end bibitem

~ begin bibitem {id:"de_boer_finding_2020"; cite-year:"2020"; cite-authors:"Fava"; cite-authors-long:"Fava"; cite-label:"Fava, 2020"; caption:"Finding and Fixing a Mismatch Between the Go Memory Model and Data-Race Detector: A Story on Applied Formal Methods&nl;Fava, 2020"; data-line:"FormalBib.bib:8246"; searchterm:"Finding%20and%20Fixing%20a%20Mismatch%20Between%20the%20Go%20Memory%20Model%20and%20DataRace%20Detector%3A%20A%20Story%20on%20Applied%20Formal%20Methods%20Fava%2C%202020"; spellcheck:"false"}
Fava, D.&nbsp;S.&nbsp;(2020). Finding and Fixing a Mismatch Between the Go Memory Model and Data-Race Detector: A Story on Applied Formal Methods. In F.&nbsp;de Boer & A.&nbsp;Cerone (Eds.), _Software Engineering and Formal Methods_ (Vol. 12310, pp. 24–40). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-58768-0_2](https://dx.doi.org/10.1007/978-3-030-58768-0_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"feamster_road_2013"; cite-year:"2013"; cite-authors:"Feamster et al."; cite-authors-long:"Feamster, Rexford, and Zegura"; cite-label:"Feamster, Rexford, \& Zegura, 2013"; caption:"The Road to SDN: An Intellectual History of Programmable Networks&nl;Feamster, Rexford, and Zegura, 2013"; data-line:"Networking.bib:611"; searchterm:"The%20Road%20to%20SDN%3A%20An%20Intellectual%20History%20of%20Programmable%20Networks%20Feamster%2C%20Rexford%2C%20and%20Zegura%2C%202013"; spellcheck:"false"}
Feamster, N., Rexford, J., & Zegura, E.&nbsp;(2013). The Road to SDN: An Intellectual History of Programmable Networks, 13.
~ end bibitem

~ begin bibitem {id:"fei_security_2021"; cite-year:"2021"; cite-authors:"Fei et al."; cite-authors-long:"Fei, Yan, Ding, and Xie"; cite-label:"Fei, Yan, Ding, \& Xie, 2021"; caption:"Security Vulnerabilities of SGX and Countermeasures: A Survey&nl;Fei, Yan, Ding, and Xie, 2021"; data-line:"Security.bib:820"; searchterm:"Security%20Vulnerabilities%20of%20SGX%20and%20Countermeasures%3A%20A%20Survey%20Fei%2C%20Yan%2C%20Ding%2C%20and%20Xie%2C%202021"; spellcheck:"false"}
Fei, S., Yan, Z., Ding, W., & Xie, H.&nbsp;(2021). Security Vulnerabilities of SGX and Countermeasures: A Survey. _ACM Computing Surveys_, _54_(6), 126:1–126:36. https://doi.org/[10.1145/3456631](https://dx.doi.org/10.1145/3456631){.bib-doi}
~ end bibitem

~ begin bibitem {id:"feldman_property-directed_2021"; cite-year:"2021"; cite-authors:"Feldman et al."; cite-authors-long:"Feldman, Sagiv, Shoham, and Wilcox"; cite-label:"Feldman, Sagiv, Shoham, \& Wilcox, 2021"; caption:"Property-Directed Reachability as Abstract Interpretation in the Monotone Theory&nl;Feldman, Sagiv, Shoham, and Wilcox, 2021"; data-line:"FormalBib.bib:8577"; searchterm:"PropertyDirected%20Reachability%20as%20Abstract%20Interpretation%20in%20the%20Monotone%20Theory%20Feldman%2C%20Sagiv%2C%20Shoham%2C%20and%20Wilcox%2C%202021"; spellcheck:"false"}
Feldman, Y.&nbsp;M.&nbsp;Y., Sagiv, M., Shoham, S., & Wilcox, J.&nbsp;R.&nbsp;(2021). Property-Directed Reachability as Abstract Interpretation in the Monotone Theory. _arXiv:2111.00324 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2111.00324](http://arxiv.org/abs/2111.00324){.bib-url}
~ end bibitem

~ begin bibitem {id:"feldman_inferring_2019"; cite-year:"2019"; cite-authors:"Feldman et al."; cite-authors-long:"Feldman, Wilcox, Shoham, and Sagiv"; cite-label:"Feldman, Wilcox, Shoham, \& Sagiv, 2019"; caption:"Inferring Inductive Invariants from Phase Structures&nl;Feldman, Wilcox, Shoham, and Sagiv, 2019"; data-line:"FormalBib.bib:4082"; searchterm:"Inferring%20Inductive%20Invariants%20from%20Phase%20Structures%20Feldman%2C%20Wilcox%2C%20Shoham%2C%20and%20Sagiv%2C%202019"; spellcheck:"false"}
Feldman, Y.&nbsp;M.&nbsp;Y., Wilcox, J.&nbsp;R., Shoham, S., & Sagiv, M.&nbsp;(2019). Inferring Inductive Invariants from Phase Structures. _arXiv:1905.07739 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1905.07739](http://arxiv.org/abs/1905.07739){.bib-url}
~ end bibitem

~ begin bibitem {id:"ferles_practical_2020"; cite-year:"2020"; cite-authors:"Ferles"; cite-authors-long:"Ferles"; cite-label:"Ferles, 2020"; caption:"Practical Formal Methods for Software Analysis and Development&nl;Ferles, 2020"; data-line:"FormalBib.bib:9041"; searchterm:"Practical%20Formal%20Methods%20for%20Software%20Analysis%20and%20Development%20Ferles%2C%202020"; spellcheck:"false"}
Ferles, K.&nbsp;(2020). _Practical Formal Methods for Software Analysis and Development_ (phdthesis). University of Texas at Austin, Austin, Texas.
~ end bibitem

~ begin bibitem {id:"ferles_verifying_2021"; cite-year:"2021"; cite-authors:"Ferles et al."; cite-authors-long:"Ferles, Stephens, and Dillig"; cite-label:"Ferles, Stephens, \& Dillig, 2021"; caption:"Verifying correct usage of context-free API protocols&nl;Ferles, Stephens, and Dillig, 2021"; data-line:"FormalBib.bib:5483"; searchterm:"Verifying%20correct%20usage%20of%20contextfree%20API%20protocols%20Ferles%2C%20Stephens%2C%20and%20Dillig%2C%202021"; spellcheck:"false"}
Ferles, K., Stephens, J., & Dillig, I.&nbsp;(2021). Verifying correct usage of context-free API protocols. _Proceedings of the ACM on Programming Languages_, _5_, 17:1–17:30. https://doi.org/[10.1145/3434298](https://dx.doi.org/10.1145/3434298){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ferrando_incrementally_nodate"; cite-year:"n.d."; cite-authors:"Ferrando"; cite-authors-long:"Ferrando"; cite-label:"Ferrando, n.d."; caption:"Incrementally Predictive Runtime Veriﬁcation&nl;Ferrando, n.d."; data-line:"FormalBib.bib:9420"; searchterm:"Incrementally%20Predictive%20Runtime%20Veri%EF%AC%81cation%20Ferrando%2C%20n.d."; spellcheck:"false"}
Ferrando, A.&nbsp;(n.d.). Incrementally Predictive Runtime Veriﬁcation, 15.
~ end bibitem

~ begin bibitem {id:"ferrando_toward_2021"; cite-year:"2021"; cite-authors:"Ferrando et al."; cite-authors-long:"Ferrando, Dennis, Cardoso, Fisher, Ancona, and Mascardi"; cite-label:"Ferrando et al., 2021"; caption:"Toward a Holistic Approach to Verification and Validation of Autonomous Cognitive Systems&nl;Ferrando, Dennis, Cardoso, Fisher, Ancona, and Mascardi, 2021"; data-line:"FormalBib.bib:257"; searchterm:"Toward%20a%20Holistic%20Approach%20to%20Verification%20and%20Validation%20of%20Autonomous%20Cognitive%20Systems%20Ferrando%2C%20Dennis%2C%20Cardoso%2C%20Fisher%2C%20Ancona%2C%20and%20Mascardi%2C%202021"; spellcheck:"false"}
Ferrando, A., Dennis, L.&nbsp;A., Cardoso, R.&nbsp;C., Fisher, M., Ancona, D., & Mascardi, V.&nbsp;(2021). Toward a Holistic Approach to Verification and Validation of Autonomous Cognitive Systems. _ACM Transactions on Software Engineering and Methodology_, _30_(4), 43:1–43:43. https://doi.org/[10.1145/3447246](https://dx.doi.org/10.1145/3447246){.bib-doi}
~ end bibitem

~ begin bibitem {id:"filinski_representing_1994"; cite-year:"1994"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1994"; caption:"Representing Monads&nl;Filinski, 1994"; data-line:"FormalBib.bib:2019"; searchterm:"Representing%20Monads%20Filinski%2C%201994"; spellcheck:"false"}
Filinski, A.&nbsp;(1994). Representing Monads. In _Proceedings of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 446–457). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/174675.178047](https://dx.doi.org/10.1145/174675.178047){.bib-doi}
~ end bibitem

~ begin bibitem {id:"filinski_representing_1999"; cite-year:"1999"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1999"; caption:"Representing Layered Monads&nl;Filinski, 1999"; data-line:"FormalBib.bib:2002"; searchterm:"Representing%20Layered%20Monads%20Filinski%2C%201999"; spellcheck:"false"}
Filinski, A.&nbsp;(1999). Representing Layered Monads. In _Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 175–188). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/292540.292557](https://dx.doi.org/10.1145/292540.292557){.bib-doi}
~ end bibitem

~ begin bibitem {id:"filliatre_toolchain_nodate"; cite-year:"n.d."; cite-authors:"Filliâtre et al."; cite-authors-long:"Filliâtre, Gondelman, Lourenço, Paskevich, and Pereira"; cite-label:"Filliâtre, Gondelman, Lourenço, Paskevich, \& Pereira, n.d."; caption:"A Toolchain to Produce Verified OCaml Libraries&nl;Filliâtre, Gondelman, Lourenço, Paskevich, and Pereira, n.d."; data-line:"FormalBib.bib:5896"; searchterm:"A%20Toolchain%20to%20Produce%20Verified%20OCaml%20Libraries%20Filli%C3%A2tre%2C%20Gondelman%2C%20Louren%C3%A7o%2C%20Paskevich%2C%20and%20Pereira%2C%20n.d."; spellcheck:"false"}
Filliâtre, J.-C., Gondelman, L., Lourenço, C., Paskevich, A., & Pereira, M.&nbsp;(n.d.). A Toolchain to Produce Verified OCaml Libraries, 13.
~ end bibitem

~ begin bibitem {id:"first_diversity-driven_2022"; cite-year:"2022"; cite-authors:"First"; cite-authors-long:"First"; cite-label:"First, 2022"; caption:"Diversity-Driven Automated Formal Verification&nl;First, 2022"; data-line:"FormalBib.bib:10201"; searchterm:"DiversityDriven%20Automated%20Formal%20Verification%20First%2C%202022"; spellcheck:"false"}
First, E.&nbsp;(2022). Diversity-Driven Automated Formal Verification, 13.
~ end bibitem

~ begin bibitem {id:"fisher_kathleen_hacms_2017"; cite-year:"2017"; cite-authors:"Fisher Kathleen et al."; cite-authors-long:"Fisher Kathleen, Launchbury John, and Richards Raymond"; cite-label:"Fisher Kathleen, Launchbury John, \& Richards Raymond, 2017"; caption:"The HACMS program: using formal methods to eliminate exploitable bugs&nl;Fisher Kathleen, Launchbury John, and Richards Raymond, 2017"; data-line:"FormalBib.bib:2390"; searchterm:"The%20HACMS%20program%3A%20using%20formal%20methods%20to%20eliminate%20exploitable%20bugs%20Fisher%20Kathleen%2C%20Launchbury%20John%2C%20and%20Richards%20Raymond%2C%202017"; spellcheck:"false"}
Fisher Kathleen, Launchbury John, & Richards Raymond. (2017). The HACMS program: using formal methods to eliminate exploitable bugs. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150401. https://doi.org/[10.1098/rsta.2015.0401](https://dx.doi.org/10.1098/rsta.2015.0401){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fleury_optimizing_2019"; cite-year:"2019"; cite-authors:"Fleury"; cite-authors-long:"Fleury"; cite-label:"Fleury, 2019"; caption:"Optimizing a Verified SAT Solver&nl;Fleury, 2019"; data-line:"FormalBib.bib:4338"; searchterm:"Optimizing%20a%20Verified%20SAT%20Solver%20Fleury%2C%202019"; spellcheck:"false"}
Fleury, M.&nbsp;(2019). Optimizing a Verified SAT Solver. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (pp. 148–165). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"noauthor_fm_nodate"; cite-authors:"2019l"; cite-authors-long:"2019l"; cite-label:"\&ldquo;FM folks - richardlford\@gmail.com - Gmail,\&rdquo; n.d."; caption:"FM folks - richardlford@gmail.com - Gmail&nl;2019l, "; data-line:"FormalBib.bib:6877"; searchterm:"FM%20folks%20%20richardlford%40gmail.com%20%20Gmail%202019l%2C%20"; spellcheck:"false"}
FM folks - richardlford@gmail.com - Gmail. (n.d.). Retrieved October 14, 2019, from <https://mail.google.com/mail/u/0/#inbox/FMfcgxwDrlVnZmDccTxHFBnzPRMfbmpn?projector=1&messagePartId=0.1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"fogarty_concoqtion:_2007"; cite-year:"2007"; cite-authors:"Fogarty et al."; cite-authors-long:"Fogarty, Pasalic, Siek, and Taha"; cite-label:"Fogarty, Pasalic, Siek, \& Taha, 2007"; caption:"Concoqtion: Indexed Types Now!&nl;Fogarty, Pasalic, Siek, and Taha, 2007"; data-line:"FormalBib.bib:4195"; searchterm:"Concoqtion%3A%20Indexed%20Types%20Now!%20Fogarty%2C%20Pasalic%2C%20Siek%2C%20and%20Taha%2C%202007"; spellcheck:"false"}
Fogarty, S., Pasalic, E., Siek, J., & Taha, W.&nbsp;(2007). Concoqtion: Indexed Types Now! In _Proceedings of the 2007 ACM SIGPLAN Symposium on Partial Evaluation and Semantics-based Program Manipulation_ (pp. 112–121). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1244381.1244400](https://dx.doi.org/10.1145/1244381.1244400){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ford_specification-based_1997"; cite-year:"1997"; cite-authors:"Ford et al."; cite-authors-long:"Ford, Simon, Bevier, and Smith"; cite-label:"Ford, Simon, Bevier, \& Smith, 1997"; caption:"The specification-based testing of a trusted kernel: MK++&nl;Ford, Simon, Bevier, and Smith, 1997"; data-line:"FormalBib.bib:6612"; searchterm:"The%20specificationbased%20testing%20of%20a%20trusted%20kernel%3A%20MK%2B%2B%20Ford%2C%20Simon%2C%20Bevier%2C%20and%20Smith%2C%201997"; spellcheck:"false"}
Ford, R.&nbsp;L., Simon, R.&nbsp;T., Bevier, W.&nbsp;R., & Smith, L.&nbsp;M.&nbsp;(1997). The specification-based testing of a trusted kernel: MK++. In _First IEEE International Conference on Formal Engineering Methods_ (pp. 151–160). https://doi.org/[10.1109/ICFEM.1997.630422](https://dx.doi.org/10.1109/ICFEM.1997.630422){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_formalization_2019"; cite-authors:"2019b"; cite-authors-long:"2019b"; cite-label:"\_Formalization of the Interaction Tree Datatype in Coq\_, 2019"; caption:"Formalization of the Interaction Tree Datatype in Coq: DeepSpec/InteractionTrees&nl;2019b, "; data-line:"FormalBib.bib:5001"; searchterm:"Formalization%20of%20the%20Interaction%20Tree%20Datatype%20in%20Coq%3A%20DeepSpec%2FInteractionTrees%202019b%2C%20"; spellcheck:"false"}
_Formalization of the Interaction Tree Datatype in Coq: DeepSpec/InteractionTrees_. (2019). DeepSpec. Retrieved from <https://github.com/DeepSpec/InteractionTrees>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_formal_nodate"; cite-authors:"2020m"; cite-authors-long:"2020m"; cite-label:"\&ldquo;\(17\) \(PDF\) Formal Versus Agile,\&rdquo; n.d."; caption:"Formal Versus Agile: Survival of the Fittest.ResearchGate&nl;2020m, "; data-line:"FormalBib.bib:6092"; searchterm:"Formal%20Versus%20Agile%3A%20Survival%20of%20the%20Fittest.ResearchGate%202020m%2C%20"; spellcheck:"false"}
Formal Versus Agile: Survival of the Fittest.ResearchGate. (n.d.). Retrieved January 14, 2020, from <https://www.researchgate.net/publication/224587383_Formal_Versus_Agile_Survival_of_the_Fittest>{.bib-url}
~ end bibitem

~ begin bibitem {id:"fornaia_jscan_2019"; cite-year:"2019"; cite-authors:"Fornaia et al."; cite-authors-long:"Fornaia, Scafiti, and Tramontana"; cite-label:"Fornaia, Scafiti, \& Tramontana, 2019"; caption:"JSCAN: Designing an Easy to use LLVM-Based Static Analysis Framework&nl;Fornaia, Scafiti, and Tramontana, 2019"; data-line:"FormalBib.bib:9807"; searchterm:"JSCAN%3A%20Designing%20an%20Easy%20to%20use%20LLVMBased%20Static%20Analysis%20Framework%20Fornaia%2C%20Scafiti%2C%20and%20Tramontana%2C%202019"; spellcheck:"false"}
Fornaia, A., Scafiti, S., & Tramontana, E.&nbsp;(2019). _JSCAN: Designing an Easy to use LLVM-Based Static Analysis Framework_. https://doi.org/[10.1109/WETICE.2019.00058](https://dx.doi.org/10.1109/WETICE.2019.00058){.bib-doi}
~ end bibitem

~ begin bibitem {id:"forster_constructive_nodate"; cite-year:"n.d."; cite-authors:"Forster et al."; cite-authors-long:"Forster, Jahn, and Smolka"; cite-label:"Forster, Jahn, \& Smolka, n.d."; caption:"A Constructive and Synthetic Theory of Reducibility: Myhill's Isomorphism Theorem and Post's Problem for Many-one and Truth-table Reducibility in Coq (Full Version)&nl;Forster, Jahn, and Smolka, n.d."; data-line:"FormalBib.bib:10192"; searchterm:"A%20Constructive%20and%20Synthetic%20Theory%20of%20Reducibility%3A%20Myhill's%20Isomorphism%20Theorem%20and%20Post's%20Problem%20for%20Manyone%20and%20Truthtable%20Reducibility%20in%20Coq%20Full%20Version%20Forster%2C%20Jahn%2C%20and%20Smolka%2C%20n.d."; spellcheck:"false"}
Forster, Y., Jahn, F., & Smolka, G.&nbsp;(n.d.). A Constructive and Synthetic Theory of Reducibility: Myhill’s Isomorphism Theorem and Post's Problem for Many-one and Truth-table Reducibility in Coq (Full Version), 26.
~ end bibitem

~ begin bibitem {id:"forster_synthetic_nodate"; cite-year:"n.d."; cite-authors:"Forster et al."; cite-authors-long:"Forster, Kunze, and Lauermann"; cite-label:"Forster, Kunze, \& Lauermann, n.d."; caption:"Synthetic Kolmogorov Complexity in Coq&nl;Forster, Kunze, and Lauermann, n.d."; data-line:"FormalBib.bib:10350"; searchterm:"Synthetic%20Kolmogorov%20Complexity%20in%20Coq%20Forster%2C%20Kunze%2C%20and%20Lauermann%2C%20n.d."; spellcheck:"false"}
Forster, Y., Kunze, F., & Lauermann, N.&nbsp;(n.d.). Synthetic Kolmogorov Complexity in Coq, 20.
~ end bibitem

~ begin bibitem {id:"foster_frenetic_2010"; cite-year:"2010"; cite-authors:"N.&nbsp;Foster et al."; cite-authors-long:"N.&nbsp;Foster, Freedman, Harrison, Rexford, Meola, and Walker"; cite-label:"N. Foster et al., 2010"; caption:"Frenetic: a high-level language for OpenFlow networks&nl;N. Foster, Freedman, Harrison, Rexford, Meola, and Walker, 2010"; data-line:"Networking.bib:111"; searchterm:"Frenetic%3A%20a%20highlevel%20language%20for%20OpenFlow%20networks%20N.%20Foster%2C%20Freedman%2C%20Harrison%2C%20Rexford%2C%20Meola%2C%20and%20Walker%2C%202010"; spellcheck:"false"}
Foster, N., Freedman, M.&nbsp;J., Harrison, R., Rexford, J., Meola, M.&nbsp;L., & Walker, D.&nbsp;(2010). Frenetic: a high-level language for OpenFlow networks. In _Proceedings of the Workshop on Programmable Routers for Extensible Services of Tomorrow_ (pp. 1–6). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/1921151.1921160](https://dx.doi.org/10.1145/1921151.1921160){.bib-doi}
~ end bibitem

~ begin bibitem {id:"foster_languages_2013"; cite-year:"2013"; cite-authors:"N.&nbsp;Foster et al."; cite-authors-long:"N.&nbsp;Foster, Guha, Reitblatt, Story, Freedman, Katta, et al."; cite-label:"N. Foster et al., 2013"; caption:"Languages for software-defined networks&nl;N. Foster, Guha, Reitblatt, Story, Freedman, Katta, et al., 2013"; data-line:"Networking.bib:75"; searchterm:"Languages%20for%20softwaredefined%20networks%20N.%20Foster%2C%20Guha%2C%20Reitblatt%2C%20Story%2C%20Freedman%2C%20Katta%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Foster, N., Guha, A., Reitblatt, M., Story, A., Freedman, M.&nbsp;J., Katta, N.&nbsp;P., … Harrison, R.&nbsp;(2013). Languages for software-defined networks. _IEEE Communications Magazine_, _51_(2), 128–134. https://doi.org/[10.1109/MCOM.2013.6461197](https://dx.doi.org/10.1109/MCOM.2013.6461197){.bib-doi}
~ end bibitem

~ begin bibitem {id:"foster_probabilistic_2016"; cite-year:"2016"; cite-authors:"N.&nbsp;Foster et al."; cite-authors-long:"N.&nbsp;Foster, Kozen, Mamouras, Reitblatt, and Silva"; cite-label:"N. Foster, Kozen, Mamouras, Reitblatt, \& Silva, 2016"; caption:"Probabilistic NetKAT&nl;N. Foster, Kozen, Mamouras, Reitblatt, and Silva, 2016"; data-line:"Networking.bib:419"; searchterm:"Probabilistic%20NetKAT%20N.%20Foster%2C%20Kozen%2C%20Mamouras%2C%20Reitblatt%2C%20and%20Silva%2C%202016"; spellcheck:"false"}
Foster, N., Kozen, D., Mamouras, K., Reitblatt, M., & Silva, A.&nbsp;(2016). Probabilistic NetKAT.&nbsp;In P.&nbsp;Thiemann (Ed.), _Programming Languages and Systems_ (pp. 282–309). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-662-49498-1_12](https://dx.doi.org/10.1007/978-3-662-49498-1_12){.bib-doi}
~ end bibitem

~ begin bibitem {id:"foster_coalgebraic_2015"; cite-year:"2015"; cite-authors:"N.&nbsp;Foster et al."; cite-authors-long:"N.&nbsp;Foster, Kozen, Milano, Silva, and Thompson"; cite-label:"N. Foster, Kozen, Milano, Silva, \& Thompson, 2015"; caption:"A Coalgebraic Decision Procedure for NetKAT&nl;N. Foster, Kozen, Milano, Silva, and Thompson, 2015"; data-line:"Networking.bib:247"; searchterm:"A%20Coalgebraic%20Decision%20Procedure%20for%20NetKAT%20N.%20Foster%2C%20Kozen%2C%20Milano%2C%20Silva%2C%20and%20Thompson%2C%202015"; spellcheck:"false"}
Foster, N., Kozen, D., Milano, M., Silva, A., & Thompson, L.&nbsp;(2015). A Coalgebraic Decision Procedure for NetKAT.&nbsp;In _Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 343–355). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2676726.2677011](https://dx.doi.org/10.1145/2676726.2677011){.bib-doi}
~ end bibitem

~ begin bibitem {id:"foster_using_2020"; cite-year:"2020"; cite-authors:"N.&nbsp;Foster et al."; cite-authors-long:"N.&nbsp;Foster, McKeown, Rexford, Parulkar, Peterson, and Sunay"; cite-label:"N. Foster et al., 2020"; caption:"Using deep programmability to put network owners in control&nl;N. Foster, McKeown, Rexford, Parulkar, Peterson, and Sunay, 2020"; data-line:"Networking.bib:981"; searchterm:"Using%20deep%20programmability%20to%20put%20network%20owners%20in%20control%20N.%20Foster%2C%20McKeown%2C%20Rexford%2C%20Parulkar%2C%20Peterson%2C%20and%20Sunay%2C%202020"; spellcheck:"false"}
Foster, N., McKeown, N., Rexford, J., Parulkar, G., Peterson, L., & Sunay, O.&nbsp;(2020). Using deep programmability to put network owners in control. _ACM SIGCOMM Computer Communication Review_, _50_(4), 82–88. https://doi.org/[10.1145/3431832.3431842](https://dx.doi.org/10.1145/3431832.3431842){.bib-doi}
~ end bibitem

~ begin bibitem {id:"foster_formally_2021"; cite-year:"2021"; cite-authors:"S.&nbsp;Foster et al."; cite-authors-long:"S.&nbsp;Foster, Hur, and Woodcock"; cite-label:"S. Foster, Hur, \& Woodcock, 2021"; caption:"Formally Verified Simulations of State-Rich Processes using Interaction Trees in Isabelle/HOL&nl;S. Foster, Hur, and Woodcock, 2021"; data-line:"FormalBib.bib:233"; searchterm:"Formally%20Verified%20Simulations%20of%20StateRich%20Processes%20using%20Interaction%20Trees%20in%20Isabelle%2FHOL%20S.%20Foster%2C%20Hur%2C%20and%20Woodcock%2C%202021"; spellcheck:"false"}
Foster, S., Hur, C.-K., & Woodcock, J.&nbsp;(2021). Formally Verified Simulations of State-Rich Processes using Interaction Trees in Isabelle/HOL.&nbsp;_arXiv:2105.05133 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.05133](http://arxiv.org/abs/2105.05133){.bib-url}
~ end bibitem

~ begin bibitem {id:"fournet_deploying_nodate"; cite-year:"n.d."; cite-authors:"Fournet et al."; cite-authors-long:"Fournet, Hawblitzel, Parno, and Swamy"; cite-label:"Fournet, Hawblitzel, Parno, \& Swamy, n.d."; caption:"Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem&nl;Fournet, Hawblitzel, Parno, and Swamy, n.d."; data-line:"FormalBib.bib:1849"; searchterm:"Deploying%20a%20Veri%EF%AC%81ed%20Secure%20Implementation%20of%20the%20HTTPS%20Ecosystem%20Fournet%2C%20Hawblitzel%2C%20Parno%2C%20and%20Swamy%2C%20n.d."; spellcheck:"false"}
Fournet, C., Hawblitzel, C., Parno, B., & Swamy, N.&nbsp;(n.d.). Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem, 10.
~ end bibitem

~ begin bibitem {id:"franceschino_verified_2021"; cite-year:"2021"; cite-authors:"Franceschino et al."; cite-authors-long:"Franceschino, Pichardie, and Talpin"; cite-label:"Franceschino, Pichardie, \& Talpin, 2021"; caption:"Verified Functional Programming of an Abstract Interpreter&nl;Franceschino, Pichardie, and Talpin, 2021"; data-line:"FormalBib.bib:7672"; searchterm:"Verified%20Functional%20Programming%20of%20an%20Abstract%20Interpreter%20Franceschino%2C%20Pichardie%2C%20and%20Talpin%2C%202021"; spellcheck:"false"}
Franceschino, L., Pichardie, D., & Talpin, J.-P.&nbsp;(2021). Verified Functional Programming of an Abstract Interpreter. _arXiv:2107.09472 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2107.09472](http://arxiv.org/abs/2107.09472){.bib-url}
~ end bibitem

~ begin bibitem {id:"friedman_elementary_2016"; cite-year:"2016"; cite-authors:"Friedman"; cite-authors-long:"Friedman"; cite-label:"Friedman, 2016"; caption:"An elementary illustrated introduction to simplicial sets&nl;Friedman, 2016"; data-line:"FormalBib.bib:5992"; searchterm:"An%20elementary%20illustrated%20introduction%20to%20simplicial%20sets%20Friedman%2C%202016"; spellcheck:"false"}
Friedman, G.&nbsp;(2016). An elementary illustrated introduction to simplicial sets. _arXiv:0809.4221 \[math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[0809.4221](http://arxiv.org/abs/0809.4221){.bib-url}
~ end bibitem

~ begin bibitem {id:"fromherz_steel_nodate"; cite-year:"n.d."; cite-authors:"Fromherz et al."; cite-authors-long:"Fromherz, Rastogi, Swamy, Gibson, Martínez, Merigoux, and Ramananandro"; cite-label:"Fromherz et al., n.d."; caption:"Steel: Proof-oriented Programming in a Dependently Typed Concurrent Separation Logic&nl;Fromherz, Rastogi, Swamy, Gibson, Martínez, Merigoux, and Ramananandro, n.d."; data-line:"FormalBib.bib:7985"; searchterm:"Steel%3A%20Prooforiented%20Programming%20in%20a%20Dependently%20Typed%20Concurrent%20Separation%20Logic%20Fromherz%2C%20Rastogi%2C%20Swamy%2C%20Gibson%2C%20Mart%C3%ADnez%2C%20Merigoux%2C%20and%20Ramananandro%2C%20n.d."; spellcheck:"false"}
Fromherz, A., Rastogi, A., Swamy, N., Gibson, S., Martínez, G., Merigoux, D., & Ramananandro, T.&nbsp;(n.d.). Steel: Proof-oriented Programming in a Dependently Typed Concurrent Separation Logic, _1_(1), 27.
~ end bibitem

~ begin bibitem {id:"frumin_reloc_2021"; cite-year:"2021"; cite-authors:"Frumin et al."; cite-authors-long:"Frumin, Krebbers, and Birkedal"; cite-label:"Frumin, Krebbers, \& Birkedal, 2021"; caption:"ReLoC Reloaded: A Mechanized Relational Logic for Fine-Grained Concurrency and Logical Atomicity&nl;Frumin, Krebbers, and Birkedal, 2021"; data-line:"FormalBib.bib:8682"; searchterm:"ReLoC%20Reloaded%3A%20A%20Mechanized%20Relational%20Logic%20for%20FineGrained%20Concurrency%20and%20Logical%20Atomicity%20Frumin%2C%20Krebbers%2C%20and%20Birkedal%2C%202021"; spellcheck:"false"}
Frumin, D., Krebbers, R., & Birkedal, L.&nbsp;(2021). ReLoC Reloaded: A Mechanized Relational Logic for Fine-Grained Concurrency and Logical Atomicity. _Logical Methods in Computer Science_, _Volume 17, Issue 3_, 6598. https://doi.org/[10.46298/lmcs-17(3:9)2021](https://dx.doi.org/10.46298/lmcs-17%283:9%292021){.bib-doi}
~ end bibitem

~ begin bibitem {id:"felty_keymaera_2015"; cite-year:"2015"; cite-authors:"Fulton et al."; cite-authors-long:"Fulton, Mitsch, Quesel, Völp, and Platzer"; cite-label:"Fulton, Mitsch, Quesel, Völp, \& Platzer, 2015"; caption:"KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems&nl;Fulton, Mitsch, Quesel, Völp, and Platzer, 2015"; data-line:"FormalBib.bib:2780"; searchterm:"KeYmaera%20X%3A%20An%20Axiomatic%20Tactical%20Theorem%20Prover%20for%20Hybrid%20Systems%20Fulton%2C%20Mitsch%2C%20Quesel%2C%20V%C3%B6lp%2C%20and%20Platzer%2C%202015"; spellcheck:"false"}
Fulton, N., Mitsch, S., Quesel, J.-D., Völp, M., & Platzer, A.&nbsp;(2015). KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems. In A.&nbsp;P.&nbsp;Felty & A.&nbsp;Middeldorp (Eds.), _Automated Deduction - CADE-25_ (Vol. 9195, pp. 527–538). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-21401-6_36](https://dx.doi.org/10.1007/978-3-319-21401-6_36){.bib-doi}
~ end bibitem

~ begin bibitem {id:"furia_autoproof:_2017"; cite-year:"2017"; cite-authors:"Furia et al."; cite-authors-long:"Furia, Nordio, Polikarpova, and Tschannen"; cite-label:"Furia, Nordio, Polikarpova, \& Tschannen, 2017"; caption:"AutoProof: auto-active functional verification of object-oriented programs&nl;Furia, Nordio, Polikarpova, and Tschannen, 2017"; data-line:"FormalBib.bib:3912"; searchterm:"AutoProof%3A%20autoactive%20functional%20verification%20of%20objectoriented%20programs%20Furia%2C%20Nordio%2C%20Polikarpova%2C%20and%20Tschannen%2C%202017"; spellcheck:"false"}
Furia, C.&nbsp;A., Nordio, M., Polikarpova, N., & Tschannen, J.&nbsp;(2017). AutoProof: auto-active functional verification of object-oriented programs. _International Journal on Software Tools for Technology Transfer_, _19_(6), 697–716. https://doi.org/[10.1007/s10009-016-0419-0](https://dx.doi.org/10.1007/s10009-016-0419-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fu_label_2021"; cite-year:"2021"; cite-authors:"Fu et al."; cite-authors-long:"Fu, Krause, and Thiemann"; cite-label:"Fu, Krause, \& Thiemann, 2021"; caption:"Label dependent lambda calculus and gradual typing&nl;Fu, Krause, and Thiemann, 2021"; data-line:"FormalBib.bib:8795"; searchterm:"Label%20dependent%20lambda%20calculus%20and%20gradual%20typing%20Fu%2C%20Krause%2C%20and%20Thiemann%2C%202021"; spellcheck:"false"}
Fu, W., Krause, F., & Thiemann, P.&nbsp;(2021). Label dependent lambda calculus and gradual typing. _Proceedings of the ACM on Programming Languages_, _5_, 108:1–108:29. https://doi.org/[10.1145/3485485](https://dx.doi.org/10.1145/3485485){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gabbay_money_2021"; cite-year:"2021"; cite-authors:"Gabbay et al."; cite-authors-long:"Gabbay, Jakobsson, and Sojakova"; cite-label:"Gabbay, Jakobsson, \& Sojakova, 2021"; caption:"Money grows on (proof-)trees: the formal FA1.2 ledger standard&nl;Gabbay, Jakobsson, and Sojakova, 2021"; data-line:"Blockchain.bib:124"; searchterm:"Money%20grows%20on%20prooftrees%3A%20the%20formal%20FA1.2%20ledger%20standard%20Gabbay%2C%20Jakobsson%2C%20and%20Sojakova%2C%202021"; spellcheck:"false"}
Gabbay, M., Jakobsson, A., & Sojakova, K.&nbsp;(2021). Money grows on (proof-)trees: the formal FA1.2 ledger standard. _arXiv:2109.09451 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.09451](http://arxiv.org/abs/2109.09451){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_galois_nodate"; cite-authors:"2020o"; cite-authors-long:"2020o"; cite-label:"\&ldquo;Galois, Inc. Tech Talk,\&rdquo; n.d."; caption:"Galois, Inc. Tech Talk: JaVerT: a JavaScript Verification Toolchain (Dr. Philippa Gardner)&nl;2020o, "; data-line:"FormalBib.bib:6418"; searchterm:"Galois%2C%20Inc.%20Tech%20Talk%3A%20JaVerT%3A%20a%20JavaScript%20Verification%20Toolchain%20Dr.%20Philippa%20Gardner%202020o%2C%20"; spellcheck:"false"}
Galois, Inc. Tech Talk: JaVerT: a JavaScript Verification Toolchain (Dr. Philippa Gardner). (n.d.). Retrieved from <https://www.youtube.com/watch?v=uNVAmCYL1Jo>{.bib-url}
~ end bibitem

~ begin bibitem {id:"garavel_formal_nodate"; cite-year:"2021"; cite-authors:"Garavel"; cite-authors-long:"Garavel"; cite-label:"Garavel, n.d."; caption:"Formal Methos for Safe and Secure Computers Systems&nl;Garavel, 2021"; data-line:"FormalBib.bib:9097"; searchterm:"Formal%20Methos%20for%20Safe%20and%20Secure%20Computers%20Systems%20Garavel%2C%202021"; spellcheck:"false"}
Garavel, H.&nbsp;(n.d.). Formal Methos for Safe and Secure Computers Systems. Retrieved September 24, 2021, from <https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/Studien/formal_methods_study_875/formal_methods_study_875.pdf?__blob=publicationFile&v=1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"garcia_side-channel_nodate"; cite-year:"2022"; cite-authors:"GARCÍA"; cite-authors-long:"GARCÍA"; cite-label:"GARCÍA, n.d."; caption:"Side-Channel Analysis and Cryptography Engineering - Getting OpenSSL Closer to Constant-Time&nl;GARCÍA, 2022"; data-line:"Security.bib:1530"; searchterm:"SideChannel%20Analysis%20and%20Cryptography%20Engineering%20%20Getting%20OpenSSL%20Closer%20to%20ConstantTime%20GARC%C3%8DA%2C%202022"; spellcheck:"false"}
GARCÍA, C.&nbsp;P.&nbsp;(n.d.). _Side-Channel Analysis and Cryptography Engineering - Getting OpenSSL Closer to Constant-Time_ (phdthesis). Retrieved from <https://trepo.tuni.fi/bitstream/handle/10024/137100/978-952-03-2289-2.pdf?sequence=2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"garillot_packaging_2009"; cite-year:"2009"; cite-authors:"Garillot et al."; cite-authors-long:"Garillot, Gonthier, Mahboubi, and Rideau"; cite-label:"Garillot, Gonthier, Mahboubi, \& Rideau, 2009"; caption:"Packaging Mathematical Structures&nl;Garillot, Gonthier, Mahboubi, and Rideau, 2009"; data-line:"FormalBib.bib:6861"; searchterm:"Packaging%20Mathematical%20Structures%20Garillot%2C%20Gonthier%2C%20Mahboubi%2C%20and%20Rideau%2C%202009"; spellcheck:"false"}
Garillot, F., Gonthier, G., Mahboubi, A., & Rideau, L.&nbsp;(2009). Packaging Mathematical Structures. In S.&nbsp;Berghofer, T.&nbsp;Nipkow, C.&nbsp;Urban, & M.&nbsp;Wenzel (Eds.), _Theorem Proving in Higher Order Logics_ (pp. 327–342). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"gasser_building_1988"; cite-year:"1988"; cite-authors:"Gasser"; cite-authors-long:"Gasser"; cite-label:"Gasser, 1988"; caption:"Building a secure computer system&nl;Gasser, 1988"; data-line:"FormalBib.bib:3694"; searchterm:"Building%20a%20secure%20computer%20system%20Gasser%2C%201988"; spellcheck:"false"}
Gasser, M.&nbsp;(1988). _Building a secure computer system_. New York: Van Nostrand Reinhold Co.
~ end bibitem

~ begin bibitem {id:"gauhar_formal_2021"; cite-year:"2021"; cite-authors:"Gauhar et al."; cite-authors-long:"Gauhar, Rashid, Hasan, Bispo, and Cardoso"; cite-label:"Gauhar, Rashid, Hasan, Bispo, \& Cardoso, 2021"; caption:"Formal verification of Matrix based MATLAB models using interactive theorem proving&nl;Gauhar, Rashid, Hasan, Bispo, and Cardoso, 2021"; data-line:"FormalBib.bib:8063"; searchterm:"Formal%20verification%20of%20Matrix%20based%20MATLAB%20models%20using%20interactive%20theorem%20proving%20Gauhar%2C%20Rashid%2C%20Hasan%2C%20Bispo%2C%20and%20Cardoso%2C%202021"; spellcheck:"false"}
Gauhar, A., Rashid, A., Hasan, O., Bispo, J., & Cardoso, J.&nbsp;M.&nbsp;P.&nbsp;(2021). Formal verification of Matrix based MATLAB models using interactive theorem proving. _PeerJ Computer Science_, _7_, e440. https://doi.org/[10.7717/peerj-cs.440](https://dx.doi.org/10.7717/peerj-cs.440){.bib-doi}
~ end bibitem

~ begin bibitem {id:"genkin_lend_nodate"; cite-year:"n.d."; cite-authors:"Genkin et al."; cite-authors-long:"Genkin, Nissan, Schuster, and Tromer"; cite-label:"Genkin, Nissan, Schuster, \& Tromer, n.d."; caption:"Lend Me Your Ear: Passive Remote Physical Side Channels on PCs&nl;Genkin, Nissan, Schuster, and Tromer, n.d."; data-line:"Security.bib:1395"; searchterm:"Lend%20Me%20Your%20Ear%3A%20Passive%20Remote%20Physical%20Side%20Channels%20on%20PCs%20Genkin%2C%20Nissan%2C%20Schuster%2C%20and%20Tromer%2C%20n.d."; spellcheck:"false"}
Genkin, D., Nissan, N., Schuster, R., & Tromer, E.&nbsp;(n.d.). Lend Me Your Ear: Passive Remote Physical Side Channels on PCs, 18.
~ end bibitem

~ begin bibitem {id:"georges_cerise_nodate"; cite-year:"n.d."; cite-authors:"Georges et al."; cite-authors-long:"Georges, Guéneau, Strydonck, Timany, Trieu, Devriese, and Birkedal"; cite-label:"Georges et al., n.d."; caption:"Cerise: Program Verification on a Capability Machine in the Presence of Untrusted Code&nl;Georges, Guéneau, Strydonck, Timany, Trieu, Devriese, and Birkedal, n.d."; data-line:"Security.bib:1225"; searchterm:"Cerise%3A%20Program%20Verification%20on%20a%20Capability%20Machine%20in%20the%20Presence%20of%20Untrusted%20Code%20Georges%2C%20Gu%C3%A9neau%2C%20Strydonck%2C%20Timany%2C%20Trieu%2C%20Devriese%2C%20and%20Birkedal%2C%20n.d."; spellcheck:"false"}
Georges, A.&nbsp;L., Guéneau, A., Strydonck, T.&nbsp;V., Timany, A., Trieu, A., Devriese, D., & Birkedal, L.&nbsp;(n.d.). Cerise: Program Verification on a Capability Machine in the Presence of Untrusted Code, _1_(1), 55.
~ end bibitem

~ begin bibitem {id:"noauthor_ghc_nodate"; cite-authors:"2019p"; cite-authors-long:"2019p"; cite-label:"\&ldquo;GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide,\&rdquo; n.d."; caption:"GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide&nl;2019p, "; data-line:"FormalBib.bib:4608"; searchterm:"GHC%20User%E2%80%99s%20Guide%20%E2%80%94%20Glasgow%20Haskell%20Compiler%208.6.5%20User's%20Guide%202019p%2C%20"; spellcheck:"false"}
GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide. (n.d.). Retrieved May 26, 2019, from <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gheorghiu_provability_2021"; cite-year:"2021"; cite-authors:"Gheorghiu et al."; cite-authors-long:"Gheorghiu, Docherty, and Pym"; cite-label:"Gheorghiu, Docherty, \& Pym, 2021"; caption:"Provability in BI's Sequent Calculus is Decidable&nl;Gheorghiu, Docherty, and Pym, 2021"; data-line:"FormalBib.bib:8218"; searchterm:"Provability%20in%20BI's%20Sequent%20Calculus%20is%20Decidable%20Gheorghiu%2C%20Docherty%2C%20and%20Pym%2C%202021"; spellcheck:"false"}
Gheorghiu, A., Docherty, S., & Pym, D.&nbsp;(2021). Provability in BI’s Sequent Calculus is Decidable. _arXiv:2103.02343 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.02343](http://arxiv.org/abs/2103.02343){.bib-url}
~ end bibitem

~ begin bibitem {id:"giallorenzo_multiparty_2021"; cite-year:"2021"; cite-authors:"Giallorenzo et al."; cite-authors-long:"Giallorenzo, Montesi, Peressotti, Richter, Salvaneschi, and Weisenburger"; cite-label:"Giallorenzo et al., 2021"; caption:"Multiparty Languages: The Choreographic and Multitier Cases&nl;Giallorenzo, Montesi, Peressotti, Richter, Salvaneschi, and Weisenburger, 2021"; data-line:"LanguageTools.bib:137"; searchterm:"Multiparty%20Languages%3A%20The%20Choreographic%20and%20Multitier%20Cases%20Giallorenzo%2C%20Montesi%2C%20Peressotti%2C%20Richter%2C%20Salvaneschi%2C%20and%20Weisenburger%2C%202021"; spellcheck:"false"}
Giallorenzo, S., Montesi, F., Peressotti, M., Richter, D., Salvaneschi, G., & Weisenburger, P.&nbsp;(2021). Multiparty Languages: The Choreographic and Multitier Cases, 28.
~ end bibitem

~ begin bibitem {id:"gilbert_definitional_2019"; cite-year:"2019"; cite-authors:"Gilbert et al."; cite-authors-long:"Gilbert, Cockx, Sozeau, and Tabareau"; cite-label:"Gilbert, Cockx, Sozeau, \& Tabareau, 2019"; caption:"Definitional Proof-irrelevance Without K&nl;Gilbert, Cockx, Sozeau, and Tabareau, 2019"; data-line:"FormalBib.bib:4892"; searchterm:"Definitional%20Proofirrelevance%20Without%20K%20Gilbert%2C%20Cockx%2C%20Sozeau%2C%20and%20Tabareau%2C%202019"; spellcheck:"false"}
Gilbert, G., Cockx, J., Sozeau, M., & Tabareau, N.&nbsp;(2019). Definitional Proof-irrelevance Without K.&nbsp;_Proc. ACM Program. Lang._, _3_, 3:1–3:28. https://doi.org/[10.1145/3290316](https://dx.doi.org/10.1145/3290316){.bib-doi}
~ end bibitem

~ begin bibitem {id:"girard_linear_1995"; cite-year:"1995"; cite-authors:"Girard"; cite-authors-long:"Girard"; cite-label:"Girard, 1995"; caption:"Linear Logic: its syntax and semantics&nl;Girard, 1995"; data-line:"FormalBib.bib:6103"; searchterm:"Linear%20Logic%3A%20its%20syntax%20and%20semantics%20Girard%2C%201995"; spellcheck:"false"}
Girard, J.-Y.&nbsp;(1995). Linear Logic: its syntax and semantics. In J.-Y.&nbsp;Girard, Y.&nbsp;Lafont, & L.&nbsp;Regnier (Eds.), _Advances in Linear Logic_ (pp. 1–42). Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9780511629150.002](https://dx.doi.org/10.1017/CBO9780511629150.002){.bib-doi}
~ end bibitem

~ begin bibitem {id:"giuffrida_safe_2014"; cite-year:"2014"; cite-authors:"C Giuffrida"; cite-authors-long:"C Giuffrida"; cite-label:"C Giuffrida, 2014"; caption:"Safe and automatic live update&nl;C Giuffrida, 2014"; data-line:"FormalBib.bib:6660"; searchterm:"Safe%20and%20automatic%20live%20update%20C%20Giuffrida%2C%202014"; spellcheck:"false"}
Giuffrida, C.&nbsp;(2014). _Safe and automatic live update_ (phdthesis).
~ end bibitem

~ begin bibitem {id:"giuffrida_safe_2013"; cite-year:"2013"; cite-authors:"Cristiano Giuffrida et al."; cite-authors-long:"Cristiano Giuffrida, Kuijsten, Tanenbaum, Giuffrida, Kuijsten, Tanenbaum, et al."; cite-label:"Cristiano Giuffrida et al., 2013"; caption:"Safe and automatic live update for operating systems&nl;Cristiano Giuffrida, Kuijsten, Tanenbaum, Giuffrida, Kuijsten, Tanenbaum, et al., 2013"; data-line:"FormalBib.bib:6645"; searchterm:"Safe%20and%20automatic%20live%20update%20for%20operating%20systems%20Cristiano%20Giuffrida%2C%20Kuijsten%2C%20Tanenbaum%2C%20Giuffrida%2C%20Kuijsten%2C%20Tanenbaum%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Giuffrida, C., Kuijsten, A., Tanenbaum, A.&nbsp;S., Giuffrida, C., Kuijsten, A., Tanenbaum, A.&nbsp;S., … Tanenbaum, A.&nbsp;S.&nbsp;(2013). Safe and automatic live update for operating systems. _ACM SIGARCH Computer Architecture News_, _41_(1), 279–292. https://doi.org/[10.1145/2451116.2451147](https://dx.doi.org/10.1145/2451116.2451147){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gleirscher_formal_2020"; cite-year:"2020"; cite-authors:"Gleirscher and Marmsoler"; cite-authors-long:"Gleirscher and Marmsoler"; cite-label:"Gleirscher \& Marmsoler, 2020"; caption:"Formal methods in dependable systems engineering: a survey of professionals from Europe and North America&nl;Gleirscher and Marmsoler, 2020"; data-line:"FormalBib.bib:9105"; searchterm:"Formal%20methods%20in%20dependable%20systems%20engineering%3A%20a%20survey%20of%20professionals%20from%20Europe%20and%20North%20America%20Gleirscher%20and%20Marmsoler%2C%202020"; spellcheck:"false"}
Gleirscher, M., & Marmsoler, D.&nbsp;(2020). Formal methods in dependable systems engineering: a survey of professionals from Europe and North America. _Empirical Software Engineering_, _25_(6), 4473–4546. https://doi.org/[10.1007/s10664-020-09836-5](https://dx.doi.org/10.1007/s10664-020-09836-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"goguen_unwinding_1984"; cite-year:"1984"; cite-authors:"Goguen and Meseguer"; cite-authors-long:"Goguen and Meseguer"; cite-label:"Goguen \& Meseguer, 1984"; caption:"Unwinding and Inference Control&nl;Goguen and Meseguer, 1984"; data-line:"FormalBib.bib:4684"; searchterm:"Unwinding%20and%20Inference%20Control%20Goguen%20and%20Meseguer%2C%201984"; spellcheck:"false"}
Goguen, J.&nbsp;A., & Meseguer, J.&nbsp;(1984). Unwinding and Inference Control. In _1984 IEEE Symposium on Security and Privacy_ (pp. 75–75). Oakland, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP.1984.10019](https://dx.doi.org/10.1109/SP.1984.10019){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gong_snowboard_nodate"; cite-year:"n.d."; cite-authors:"Gong et al."; cite-authors-long:"Gong, Altınbüken, Fonseca, and Maniatis"; cite-label:"Gong, Altınbüken, Fonseca, \& Maniatis, n.d."; caption:"Snowboard: Finding Kernel Concurrency Bugs through Systematic Inter-thread Communication Analysis&nl;Gong, Altınbüken, Fonseca, and Maniatis, n.d."; data-line:"LanguageTools.bib:932"; searchterm:"Snowboard%3A%20Finding%20Kernel%20Concurrency%20Bugs%20through%20Systematic%20Interthread%20Communication%20Analysis%20Gong%2C%20Alt%C4%B1nb%C3%BCken%2C%20Fonseca%2C%20and%20Maniatis%2C%20n.d."; spellcheck:"false"}
Gong, S., Altınbüken, D., Fonseca, P., & Maniatis, P.&nbsp;(n.d.). Snowboard: Finding Kernel Concurrency Bugs through Systematic Inter-thread Communication Analysis, 18.
~ end bibitem

~ begin bibitem {id:"gonthier_formal_2008"; cite-year:"2008"; cite-authors:"Gonthier"; cite-authors-long:"Gonthier"; cite-label:"Gonthier, 2008"; caption:"Formal Proof—The Four- Color Theorem&nl;Gonthier, 2008"; data-line:"FormalBib.bib:2446"; searchterm:"Formal%20Proof%E2%80%94The%20Four%20Color%20Theorem%20Gonthier%2C%202008"; spellcheck:"false"}
Gonthier, G.&nbsp;(2008). Formal Proof—The Four- Color Theorem, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"gonthier_introduction_2010"; cite-year:"2010"; cite-authors:"Gonthier and Mahboubi"; cite-authors-long:"Gonthier and Mahboubi"; cite-label:"Gonthier \& Mahboubi, 2010"; caption:"An introduction to small scale reflection in Coq&nl;Gonthier and Mahboubi, 2010"; data-line:"FormalBib.bib:1984"; searchterm:"An%20introduction%20to%20small%20scale%20reflection%20in%20Coq%20Gonthier%20and%20Mahboubi%2C%202010"; spellcheck:"false"}
Gonthier, G., & Mahboubi, A.&nbsp;(2010). An introduction to small scale reflection in Coq. _Journal of Formalized Reasoning_, _3_(2), 95–152. https://doi.org/[10.6092/issn.1972-5787/1979](https://dx.doi.org/10.6092/issn.1972-5787/1979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_small_2015"; cite-year:"2015"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Mahboubi, and Tassi"; cite-label:"Gonthier, Mahboubi, \& Tassi, 2015"; caption:"A Small Scale Reflection Extension for the Coq system&nl;Gonthier, Mahboubi, and Tassi, 2015"; data-line:"FormalBib.bib:2978"; searchterm:"A%20Small%20Scale%20Reflection%20Extension%20for%20the%20Coq%20system%20Gonthier%2C%20Mahboubi%2C%20and%20Tassi%2C%202015"; spellcheck:"false"}
Gonthier, G., Mahboubi, A., & Tassi, E.&nbsp;(2015). _A Small Scale Reflection Extension for the Coq system_ (report). Inria Saclay Ile de France. Retrieved from <https://hal.inria.fr/inria-00258384/document>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gonthier_how_2011"; cite-year:"2011"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Ziliani, Nanevski, and Dreyer"; cite-label:"Gonthier, Ziliani, Nanevski, \& Dreyer, 2011"; caption:"How to Make Ad Hoc Proof Automation Less Ad Hoc&nl;Gonthier, Ziliani, Nanevski, and Dreyer, 2011"; data-line:"FormalBib.bib:1966"; searchterm:"How%20to%20Make%20Ad%20Hoc%20Proof%20Automation%20Less%20Ad%20Hoc%20Gonthier%2C%20Ziliani%2C%20Nanevski%2C%20and%20Dreyer%2C%202011"; spellcheck:"false"}
Gonthier, G., Ziliani, B., Nanevski, A., & Dreyer, D.&nbsp;(2011). How to Make Ad Hoc Proof Automation Less Ad Hoc. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 163–175). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034798](https://dx.doi.org/10.1145/2034773.2034798){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_how_2013"; cite-year:"2013"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Ziliani, Nanevski, and Dreyer"; cite-label:"Gonthier, Ziliani, Nanevski, \& Dreyer, 2013"; caption:"How to make ad hoc proof automation less ad hoc&nl;Gonthier, Ziliani, Nanevski, and Dreyer, 2013"; data-line:"FormalBib.bib:6964"; searchterm:"How%20to%20make%20ad%20hoc%20proof%20automation%20less%20ad%20hoc%20Gonthier%2C%20Ziliani%2C%20Nanevski%2C%20and%20Dreyer%2C%202013"; spellcheck:"false"}
Gonthier, G., Ziliani, B., Nanevski, A., & Dreyer, D.&nbsp;(2013). How to make ad hoc proof automation less ad hoc. _Journal of Functional Programming_, _23_(4), 357–401. https://doi.org/[10.1017/S0956796813000051](https://dx.doi.org/10.1017/S0956796813000051){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gorjiara_yashme_2022"; cite-year:"2022"; cite-authors:"Gorjiara et al."; cite-authors-long:"Gorjiara, Xu, and Demsky"; cite-label:"Gorjiara, Xu, \& Demsky, 2022"; caption:"Yashme: Detecting Persistency Races&nl;Gorjiara, Xu, and Demsky, 2022"; data-line:"FormalBib.bib:10182"; searchterm:"Yashme%3A%20Detecting%20Persistency%20Races%20Gorjiara%2C%20Xu%2C%20and%20Demsky%2C%202022"; spellcheck:"false"}
Gorjiara, H., Xu, G.&nbsp;H., & Demsky, B.&nbsp;(2022). Yashme: Detecting Persistency Races, 16.
~ end bibitem

~ begin bibitem {id:"gorogiannis_true_2019"; cite-year:"2019"; cite-authors:"Gorogiannis et al."; cite-authors-long:"Gorogiannis, O’Hearn, and Sergey"; cite-label:"Gorogiannis, O’Hearn, \& Sergey, 2019"; caption:"A true positives theorem for a static race detector&nl;Gorogiannis, O’Hearn, and Sergey, 2019"; data-line:"FormalBib.bib:1581"; searchterm:"A%20true%20positives%20theorem%20for%20a%20static%20race%20detector%20Gorogiannis%2C%20O%E2%80%99Hearn%2C%20and%20Sergey%2C%202019"; spellcheck:"false"}
Gorogiannis, N., O’Hearn, P.&nbsp;W., & Sergey, I.&nbsp;(2019). A true positives theorem for a static race detector. _Proceedings of the ACM on Programming Languages_, _3_, 1–29. https://doi.org/[10.1145/3290370](https://dx.doi.org/10.1145/3290370){.bib-doi}
~ end bibitem

~ begin bibitem {id:"goudsmid_compositional_2021"; cite-year:"2021"; cite-authors:"Goudsmid et al."; cite-authors-long:"Goudsmid, Grumberg, and Sheinvald"; cite-label:"Goudsmid, Grumberg, \& Sheinvald, 2021"; caption:"Compositional Model Checking for Multi-properties&nl;Goudsmid, Grumberg, and Sheinvald, 2021"; data-line:"FormalBib.bib:5370"; searchterm:"Compositional%20Model%20Checking%20for%20Multiproperties%20Goudsmid%2C%20Grumberg%2C%20and%20Sheinvald%2C%202021"; spellcheck:"false"}
Goudsmid, O., Grumberg, O., & Sheinvald, S.&nbsp;(2021). Compositional Model Checking for Multi-properties. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 55–80). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_4](https://dx.doi.org/10.1007/978-3-030-67067-2_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"grannan_rest_nodate"; cite-year:"2022"; cite-authors:"Grannan et al."; cite-authors-long:"Grannan, Vazou, Darulova, and Summers"; cite-label:"Grannan, Vazou, Darulova, \& Summers, n.d."; caption:"REST: Integrating Term Rewriting with Program Verification&nl;Grannan, Vazou, Darulova, and Summers, 2022"; data-line:"FormalBib.bib:10128"; searchterm:"REST%3A%20Integrating%20Term%20Rewriting%20with%20Program%20Verification%20Grannan%2C%20Vazou%2C%20Darulova%2C%20and%20Summers%2C%202022"; spellcheck:"false"}
Grannan, Z., Vazou, N., Darulova, E., & Summers, A.&nbsp;J.&nbsp;(n.d.). REST: Integrating Term Rewriting with Program Verification. Retrieved February 22, 2022, from <https://arxiv.org/pdf/2202.05872.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gratzer_stratified_nodate"; cite-year:"n.d."; cite-authors:"Gratzer and Birkedal"; cite-authors-long:"Gratzer and Birkedal"; cite-label:"Gratzer \& Birkedal, n.d."; caption:"A stratified approach to Löb induction&nl;Gratzer and Birkedal, n.d."; data-line:"FormalBib.bib:10211"; searchterm:"A%20stratified%20approach%20to%20L%C3%B6b%20induction%20Gratzer%20and%20Birkedal%2C%20n.d."; spellcheck:"false"}
Gratzer, D., & Birkedal, L.&nbsp;(n.d.). A stratified approach to Löb induction, 23.
~ end bibitem

~ begin bibitem {id:"gratzer_multimodal_2021"; cite-year:"2021"; cite-authors:"Gratzer et al."; cite-authors-long:"Gratzer, Kavvos, Nuyts, and Birkedal"; cite-label:"Gratzer, Kavvos, Nuyts, \& Birkedal, 2021"; caption:"Multimodal Dependent Type Theory&nl;Gratzer, Kavvos, Nuyts, and Birkedal, 2021"; data-line:"FormalBib.bib:7529"; searchterm:"Multimodal%20Dependent%20Type%20Theory%20Gratzer%2C%20Kavvos%2C%20Nuyts%2C%20and%20Birkedal%2C%202021"; spellcheck:"false"}
Gratzer, D., Kavvos, G.&nbsp;A., Nuyts, A., & Birkedal, L.&nbsp;(2021). Multimodal Dependent Type Theory. _Logical Methods in Computer Science_, _Volume 17, Issue 3_, 7571. https://doi.org/[10.46298/lmcs-17(3:11)2021](https://dx.doi.org/10.46298/lmcs-17%283:11%292021){.bib-doi}
~ end bibitem

~ begin bibitem {id:"griesemer_featherweight_2020"; cite-year:"2020"; cite-authors:"Griesemer et al."; cite-authors-long:"Griesemer, Hu, Kokke, Lange, Taylor, Toninho, et al."; cite-label:"Griesemer et al., 2020"; caption:"Featherweight go&nl;Griesemer, Hu, Kokke, Lange, Taylor, Toninho, et al., 2020"; data-line:"LanguageTools.bib:879"; searchterm:"Featherweight%20go%20Griesemer%2C%20Hu%2C%20Kokke%2C%20Lange%2C%20Taylor%2C%20Toninho%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Griesemer, R., Hu, R., Kokke, W., Lange, J., Taylor, I.&nbsp;L., Toninho, B., … Yoshida, N.&nbsp;(2020). Featherweight go. _Proceedings of the ACM on Programming Languages_, _4_, 1–29. https://doi.org/[10.1145/3428217](https://dx.doi.org/10.1145/3428217){.bib-doi}
~ end bibitem

~ begin bibitem {id:"griffin_verifying_2021"; cite-year:"2021"; cite-authors:"Griffin and Dongol"; cite-authors-long:"Griffin and Dongol"; cite-label:"Griffin \& Dongol, 2021"; caption:"Verifying Secure Speculation in Isabelle/HOL&nl;Griffin and Dongol, 2021"; data-line:"FormalBib.bib:9385"; searchterm:"Verifying%20Secure%20Speculation%20in%20Isabelle%2FHOL%20Griffin%20and%20Dongol%2C%202021"; spellcheck:"false"}
Griffin, M., & Dongol, B.&nbsp;(2021). Verifying Secure Speculation in Isabelle/HOL.&nbsp;In M.&nbsp;Huisman, C.&nbsp;Păsăreanu, & N.&nbsp;Zhan (Eds.), _Formal Methods_ (pp. 43–60). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-90870-6_3](https://dx.doi.org/10.1007/978-3-030-90870-6_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"groote_tools_2021"; cite-year:"2021"; cite-authors:"Groote and Larsen"; cite-authors-long:"Groote and Larsen"; cite-label:"Groote \& Larsen, 2021"; caption:"Tools and Algorithms for the Construction and Analysis of Systems: 27th International Conference, TACAS 2021, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021, Luxembourg City, Luxembourg, March 27 – April 1, 2021, Proceedings, Part II&nl;Groote and Larsen, 2021"; data-line:"FormalBib.bib:10146"; searchterm:"Tools%20and%20Algorithms%20for%20the%20Construction%20and%20Analysis%20of%20Systems%3A%2027th%20International%20Conference%2C%20TACAS%202021%2C%20Held%20as%20Part%20of%20the%20European%20Joint%20Conferences%20on%20Theory%20and%20Practice%20of%20Software%2C%20ETAPS%202021%2C%20Luxembourg%20City%2C%20Luxembourg%2C%20March%2027%20%E2%80%93%20April%201%2C%202021%2C%20Proceedings%2C%20Part%20II%20Groote%20and%20Larsen%2C%202021"; spellcheck:"false"}
Groote, J.&nbsp;F., & Larsen, K.&nbsp;G.&nbsp;(Eds.). (2021). _Tools and Algorithms for the Construction and Analysis of Systems: 27th International Conference, TACAS 2021, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021, Luxembourg City, Luxembourg, March 27 – April 1, 2021, Proceedings, Part II_ (Vol. 12652). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-72013-1](https://dx.doi.org/10.1007/978-3-030-72013-1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gross_experience_2014"; cite-year:"2014"; cite-authors:"J.&nbsp;Gross et al."; cite-authors-long:"J.&nbsp;Gross, Chlipala, and Spivak"; cite-label:"J. Gross, Chlipala, \& Spivak, 2014"; caption:"Experience Implementing a Performant Category-Theory Library in Coq&nl;J. Gross, Chlipala, and Spivak, 2014"; data-line:"FormalBib.bib:6232"; searchterm:"Experience%20Implementing%20a%20Performant%20CategoryTheory%20Library%20in%20Coq%20J.%20Gross%2C%20Chlipala%2C%20and%20Spivak%2C%202014"; spellcheck:"false"}
Gross, J., Chlipala, A., & Spivak, D.&nbsp;I.&nbsp;(2014). Experience Implementing a Performant Category-Theory Library in Coq. _arXiv:1401.7694 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1401.7694](http://arxiv.org/abs/1401.7694){.bib-url}
~ end bibitem

~ begin bibitem {id:"gross_performance_2021"; cite-year:"2021"; cite-authors:"J.&nbsp;S.&nbsp;Gross"; cite-authors-long:"J.&nbsp;S.&nbsp;Gross"; cite-label:"J. S. Gross, 2021"; caption:"Performance Engineering of Proof-Based Software Systems at Scale&nl;J. S. Gross, 2021"; data-line:"FormalBib.bib:8504"; searchterm:"Performance%20Engineering%20of%20ProofBased%20Software%20Systems%20at%20Scale%20J.%20S.%20Gross%2C%202021"; spellcheck:"false"}
Gross, J.&nbsp;S.&nbsp;(2021). Performance Engineering of Proof-Based Software Systems at Scale, 258.
~ end bibitem

~ begin bibitem {id:"p4org_application_working_group_inband_2020"; cite-year:"2020"; cite-authors:"Group"; cite-authors-long:"Group"; cite-label:"Group, 2020"; caption:"Inband Network Telemetry (INT) Dataplane Specification.GitHub&nl;Group, 2020"; data-line:"Networking.bib:515"; searchterm:"Inband%20Network%20Telemetry%20INT%20Dataplane%20Specification.GitHub%20Group%2C%202020"; spellcheck:"false"}
Group, P.&nbsp;or. A.&nbsp;W.&nbsp;(2020, January 6). Inband Network Telemetry (INT) Dataplane Specification.GitHub. Retrieved January 21, 2021, from <https://github.com/p4lang/p4-applications/blob/master/docs/INT_v2_1.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"guarnieri_contract-aware_2020"; cite-year:"2020"; cite-authors:"Guarnieri and Patrignani"; cite-authors-long:"Guarnieri and Patrignani"; cite-label:"Guarnieri \& Patrignani, 2020"; caption:"Contract-Aware Secure Compilation&nl;Guarnieri and Patrignani, 2020"; data-line:"Security.bib:188"; searchterm:"ContractAware%20Secure%20Compilation%20Guarnieri%20and%20Patrignani%2C%202020"; spellcheck:"false"}
Guarnieri, M., & Patrignani, M.&nbsp;(2020). Contract-Aware Secure Compilation. _arXiv:2012.14205 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2012.14205](http://arxiv.org/abs/2012.14205){.bib-url}
~ end bibitem

~ begin bibitem {id:"gude_nox_2008"; cite-year:"2008"; cite-authors:"Gude et al."; cite-authors-long:"Gude, Koponen, Pettit, Pfaff, Casado, McKeown, and Shenker"; cite-label:"Gude et al., 2008"; caption:"NOX: towards an operating system for networks&nl;Gude, Koponen, Pettit, Pfaff, Casado, McKeown, and Shenker, 2008"; data-line:"Networking.bib:129"; searchterm:"NOX%3A%20towards%20an%20operating%20system%20for%20networks%20Gude%2C%20Koponen%2C%20Pettit%2C%20Pfaff%2C%20Casado%2C%20McKeown%2C%20and%20Shenker%2C%202008"; spellcheck:"false"}
Gude, N., Koponen, T., Pettit, J., Pfaff, B., Casado, M., McKeown, N., & Shenker, S.&nbsp;(2008). NOX: towards an operating system for networks. _ACM SIGCOMM Computer Communication Review_, _38_(3), 105–110. https://doi.org/[10.1145/1384609.1384625](https://dx.doi.org/10.1145/1384609.1384625){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gueneau_procrastination_nodate"; cite-year:"n.d."; cite-authors:"Guéneau"; cite-authors-long:"Guéneau"; cite-label:"Guéneau, n.d."; caption:"Procrastination&nl;Guéneau, n.d."; data-line:"FormalBib.bib:4166"; searchterm:"Procrastination%20Gu%C3%A9neau%2C%20n.d."; spellcheck:"false"}
Guéneau, A.&nbsp;(n.d.). Procrastination, 7.
~ end bibitem

~ begin bibitem {id:"gueneau_formal_nodate"; cite-year:"n.d."; cite-authors:"Guéneau et al."; cite-authors-long:"Guéneau, Jourdan, Charguéraud, and Pottier"; cite-label:"Guéneau, Jourdan, Charguéraud, \& Pottier, n.d."; caption:"Formal Proof and Analysis of an Incremental Cycle Detection Algorithm&nl;Guéneau, Jourdan, Charguéraud, and Pottier, n.d."; data-line:"FormalBib.bib:4873"; searchterm:"Formal%20Proof%20and%20Analysis%20of%20an%20Incremental%20Cycle%20Detection%20Algorithm%20Gu%C3%A9neau%2C%20Jourdan%2C%20Chargu%C3%A9raud%2C%20and%20Pottier%2C%20n.d."; spellcheck:"false"}
Guéneau, A., Jourdan, J.-H., Charguéraud, A., & Pottier, F.&nbsp;(n.d.). Formal Proof and Analysis of an Incremental Cycle Detection Algorithm, 23.
~ end bibitem

~ begin bibitem {id:"yang_verified_2017"; cite-year:"2017"; cite-authors:"Guéneau et al."; cite-authors-long:"Guéneau, Myreen, Kumar, and Norrish"; cite-label:"Guéneau, Myreen, Kumar, \& Norrish, 2017"; caption:"Verified Characteristic Formulae for CakeML&nl;Guéneau, Myreen, Kumar, and Norrish, 2017"; data-line:"FormalBib.bib:9551"; searchterm:"Verified%20Characteristic%20Formulae%20for%20CakeML%20Gu%C3%A9neau%2C%20Myreen%2C%20Kumar%2C%20and%20Norrish%2C%202017"; spellcheck:"false"}
Guéneau, A., Myreen, M.&nbsp;O., Kumar, R., & Norrish, M.&nbsp;(2017). Verified Characteristic Formulae for CakeML.&nbsp;In H.&nbsp;Yang (Ed.), _Programming Languages and Systems_ (Vol. 10201, pp. 584–610). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-662-54434-1_22](https://dx.doi.org/10.1007/978-3-662-54434-1_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"guo_precise_2022"; cite-year:"2022"; cite-authors:"Guo et al."; cite-authors-long:"Guo, Zhou, Yao, Shi, and Zhang"; cite-label:"Guo, Zhou, Yao, Shi, \& Zhang, 2022"; caption:"Precise Divide-By-Zero Detection with Affirmative Evidence&nl;Guo, Zhou, Yao, Shi, and Zhang, 2022"; data-line:"FormalBib.bib:10248"; searchterm:"Precise%20DivideByZero%20Detection%20with%20Affirmative%20Evidence%20Guo%2C%20Zhou%2C%20Yao%2C%20Shi%2C%20and%20Zhang%2C%202022"; spellcheck:"false"}
Guo, Y., Zhou, J., Yao, P., Shi, Q., & Zhang, C.&nbsp;(2022). Precise Divide-By-Zero Detection with Affirmative Evidence, 12.
~ end bibitem

~ begin bibitem {id:"gu_deep_2015"; cite-year:"2015"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al."; cite-label:"Gu et al., 2015"; caption:"Deep Specifications and Certified Abstraction Layers&nl;Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al., 2015"; data-line:"FormalBib.bib:1168"; searchterm:"Deep%20Specifications%20and%20Certified%20Abstraction%20Layers%20Gu%2C%20Koenig%2C%20Ramananandro%2C%20Shao%2C%20Wu%2C%20Weng%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Gu, R., Koenig, J., Ramananandro, T., Shao, Z., Wu, X.&nbsp;(Newman), Weng, S.-C., … Guo, Y.&nbsp;(2015). Deep Specifications and Certified Abstraction Layers. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 595–608). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2676975](https://dx.doi.org/10.1145/2676726.2676975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gu_certikos:_2016"; cite-year:"2016"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo"; cite-label:"Gu et al., 2016"; caption:"CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels&nl;Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo, 2016"; data-line:"FormalBib.bib:1118"; searchterm:"CertiKOS%3A%20An%20Extensible%20Architecture%20for%20Building%20Certified%20Concurrent%20OS%20Kernels%20Gu%2C%20Shao%2C%20Chen%2C%20Wu%2C%20Kim%2C%20Sj%C3%B6berg%2C%20and%20Costanzo%2C%202016"; spellcheck:"false"}
Gu, R., Shao, Z., Chen, H., Wu, X., Kim, J., Sjöberg, V., & Costanzo, D.&nbsp;(2016). CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels. In _Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation_ (pp. 653–669). Berkeley, CA, USA: USENIX Association. Retrieved from <http://dl.acm.org/citation.cfm?id=3026877.3026928>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gu_certified_2018"; cite-year:"2018"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al."; cite-label:"Gu et al., 2018"; caption:"Certified Concurrent Abstraction Layers&nl;Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al., 2018"; data-line:"FormalBib.bib:1089"; searchterm:"Certified%20Concurrent%20Abstraction%20Layers%20Gu%2C%20Shao%2C%20Kim%2C%20Wu%2C%20Koenig%2C%20Sj%C3%B6berg%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Gu, R., Shao, Z., Kim, J., Wu, X.&nbsp;(Newman), Koenig, J., Sjöberg, V., … Ramananandro, T.&nbsp;(2018). Certified Concurrent Abstraction Layers. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 646–661). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192381](https://dx.doi.org/10.1145/3192366.3192381){.bib-doi}
~ end bibitem

~ begin bibitem {id:"guttag_larch_1993"; cite-year:"1993"; cite-authors:"Guttag et al."; cite-authors-long:"Guttag, Horning, Garland, Jones, Modet, and Wing"; cite-label:"Guttag et al., 1993"; caption:"Larch: Languages and Tools for Formal Specification&nl;Guttag, Horning, Garland, Jones, Modet, and Wing, 1993"; data-line:"FormalBib.bib:370"; searchterm:"Larch%3A%20Languages%20and%20Tools%20for%20Formal%20Specification%20Guttag%2C%20Horning%2C%20Garland%2C%20Jones%2C%20Modet%2C%20and%20Wing%2C%201993"; spellcheck:"false"}
Guttag, J.&nbsp;V., Horning, J.&nbsp;J., Garland, S.&nbsp;J., Jones, K.&nbsp;D., Modet, A., & Wing, J.&nbsp;M.&nbsp;(1993). _Larch: Languages and Tools for Formal Specification_. New York, NY: Springer New York. https://doi.org/[10.1007/978-1-4612-2704-5](https://dx.doi.org/10.1007/978-1-4612-2704-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_seloger:_2013"; cite-year:"2013"; cite-authors:"C.&nbsp;Haase et al."; cite-authors-long:"C.&nbsp;Haase, Ishtiaq, Ouaknine, and Parkinson"; cite-label:"C. Haase, Ishtiaq, Ouaknine, \& Parkinson, 2013"; caption:"SeLoger: A Tool for Graph-Based Reasoning in Separation Logic&nl;C. Haase, Ishtiaq, Ouaknine, and Parkinson, 2013"; data-line:"FormalBib.bib:3877"; searchterm:"SeLoger%3A%20A%20Tool%20for%20GraphBased%20Reasoning%20in%20Separation%20Logic%20C.%20Haase%2C%20Ishtiaq%2C%20Ouaknine%2C%20and%20Parkinson%2C%202013"; spellcheck:"false"}
Haase, C., Ishtiaq, S., Ouaknine, J., & Parkinson, M.&nbsp;J.&nbsp;(2013). SeLoger: A Tool for Graph-Based Reasoning in Separation Logic. In N.&nbsp;Sharygina & H.&nbsp;Veith (Eds.), _Computer Aided Verification_ (Vol. 8044, pp. 790–795). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39799-8_55](https://dx.doi.org/10.1007/978-3-642-39799-8_55){.bib-doi}
~ end bibitem

~ begin bibitem {id:"haase_separation_2021"; cite-year:"2021"; cite-authors:"D.&nbsp;Haase et al."; cite-authors-long:"D.&nbsp;Haase, Grädel, and Wilke"; cite-label:"D. Haase, Grädel, \& Wilke, 2021"; caption:"Separation logic and logics with team semantics&nl;D. Haase, Grädel, and Wilke, 2021"; data-line:"FormalBib.bib:9335"; searchterm:"Separation%20logic%20and%20logics%20with%20team%20semantics%20D.%20Haase%2C%20Gr%C3%A4del%2C%20and%20Wilke%2C%202021"; spellcheck:"false"}
Haase, D., Grädel, E., & Wilke, R.&nbsp;(2021). Separation logic and logics with team semantics. _Annals of Pure and Applied Logic_, 103063. https://doi.org/[10.1016/j.apal.2021.103063](https://dx.doi.org/10.1016/j.apal.2021.103063){.bib-doi}
~ end bibitem

~ begin bibitem {id:"habib_learning_2021"; cite-year:"2021"; cite-authors:"Habib"; cite-authors-long:"Habib"; cite-label:"Habib, 2021"; caption:"Learning to Find Bugs in Programs and their Documentation&nl;Habib, 2021"; data-line:"Security.bib:578"; searchterm:"Learning%20to%20Find%20Bugs%20in%20Programs%20and%20their%20Documentation%20Habib%2C%202021"; spellcheck:"false"}
Habib, A.&nbsp;(2021). _Learning to Find Bugs in Programs and their Documentation_ (phdthesis). Technische Universität, Darmstadt. https://doi.org/[10.26083/tuprints-00017377](https://dx.doi.org/10.26083/tuprints-00017377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hance_finding_nodate"; cite-year:"n.d."; cite-authors:"Hance et al."; cite-authors-long:"Hance, Heule, Martins, and Parno"; cite-label:"Hance, Heule, Martins, \& Parno, n.d."; caption:"Finding Invariants of Distributed Systems: It’s a Small (Enough) World After All&nl;Hance, Heule, Martins, and Parno, n.d."; data-line:"FormalBib.bib:8054"; searchterm:"Finding%20Invariants%20of%20Distributed%20Systems%3A%20It%E2%80%99s%20a%20Small%20Enough%20World%20After%20All%20Hance%2C%20Heule%2C%20Martins%2C%20and%20Parno%2C%20n.d."; spellcheck:"false"}
Hance, T., Heule, M., Martins, R., & Parno, B.&nbsp;(n.d.). Finding Invariants of Distributed Systems: It’s a Small (Enough) World After All, 17.
~ end bibitem

~ begin bibitem {id:"noauthor_handbook_nodate"; cite-authors:"2019q"; cite-authors-long:"2019q"; cite-label:"\&ldquo;Handbook Of Floating Point Arithmetic Download eBook for Free,\&rdquo; n.d."; caption:"Handbook Of Floating Point Arithmetic Download eBook for Free&nl;2019q, "; data-line:"FormalBib.bib:4526"; searchterm:"Handbook%20Of%20Floating%20Point%20Arithmetic%20Download%20eBook%20for%20Free%202019q%2C%20"; spellcheck:"false"}
Handbook Of Floating Point Arithmetic Download eBook for Free. (n.d.). Retrieved May 26, 2019, from <http://ebook4scaricare.com/gratis/handbook-of-floating-point-arithmetic/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"han_precise_2021"; cite-year:"2021"; cite-authors:"Han et al."; cite-authors-long:"Han, Wesie, and Pak"; cite-label:"Han, Wesie, \& Pak, 2021"; caption:"Precise and Scalable Detection of Use-after-Compacting-Garbage-Collection Bugs&nl;Han, Wesie, and Pak, 2021"; data-line:"Security.bib:697"; searchterm:"Precise%20and%20Scalable%20Detection%20of%20UseafterCompactingGarbageCollection%20Bugs%20Han%2C%20Wesie%2C%20and%20Pak%2C%202021"; spellcheck:"false"}
Han, H., Wesie, A., & Pak, B.&nbsp;(2021). Precise and Scalable Detection of Use-after-Compacting-Garbage-Collection Bugs. _Proceeding of 30th USENIX Security Symposium_, 17.
~ end bibitem

~ begin bibitem {id:"harper_framework_1993"; cite-year:"1993"; cite-authors:"Harper et al."; cite-authors-long:"Harper, Honsell, and Plotkin"; cite-label:"Harper, Honsell, \& Plotkin, 1993"; caption:"A Framework for Defining Logics&nl;Harper, Honsell, and Plotkin, 1993"; data-line:"FormalBib.bib:1912"; searchterm:"A%20Framework%20for%20Defining%20Logics%20Harper%2C%20Honsell%2C%20and%20Plotkin%2C%201993"; spellcheck:"false"}
Harper, R., Honsell, F., & Plotkin, G.&nbsp;(1993). A Framework for Defining Logics. _J.&nbsp;ACM_, _40_(1), 143–184. https://doi.org/[10.1145/138027.138060](https://dx.doi.org/10.1145/138027.138060){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harrison_formal_2008"; cite-year:"2008"; cite-authors:"J.&nbsp;Harrison"; cite-authors-long:"J.&nbsp;Harrison"; cite-label:"J. Harrison, 2008"; caption:"Formal Proof—Theory and Practice&nl;J. Harrison, 2008"; data-line:"FormalBib.bib:2424"; searchterm:"Formal%20Proof%E2%80%94Theory%20and%20Practice%20J.%20Harrison%2C%202008"; spellcheck:"false"}
Harrison, J.&nbsp;(2008). Formal Proof—Theory and Practice, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"harrison_hol_2013"; cite-year:"2013"; cite-authors:"J.&nbsp;Harrison"; cite-authors-long:"J.&nbsp;Harrison"; cite-label:"J. Harrison, 2013"; caption:"The HOL Light Theory of Euclidean Space&nl;J. Harrison, 2013"; data-line:"FormalBib.bib:1896"; searchterm:"The%20HOL%20Light%20Theory%20of%20Euclidean%20Space%20J.%20Harrison%2C%202013"; spellcheck:"false"}
Harrison, J.&nbsp;(2013). The HOL Light Theory of Euclidean Space. _Journal of Automated Reasoning_, _50_(2), 173–190. https://doi.org/[10.1007/s10817-012-9250-9](https://dx.doi.org/10.1007/s10817-012-9250-9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harrison_can_1997"; cite-year:"1997"; cite-authors:"L.&nbsp;Harrison"; cite-authors-long:"L.&nbsp;Harrison"; cite-label:"L. Harrison, 1997"; caption:"Can abstract interpretation become a mainstream compiler technology?&nl;L. Harrison, 1997"; data-line:"FormalBib.bib:4232"; searchterm:"Can%20abstract%20interpretation%20become%20a%20mainstream%20compiler%20technology%3F%20L.%20Harrison%2C%201997"; spellcheck:"false"}
Harrison, L.&nbsp;(1997). Can abstract interpretation become a mainstream compiler technology? In P.&nbsp;Van Hentenryck (Ed.), _Static Analysis_ (pp. 395–395). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"haslbeck_for_nodate"; cite-year:"n.d."; cite-authors:"Haslbeck and Lammich"; cite-authors-long:"Haslbeck and Lammich"; cite-label:"Haslbeck \& Lammich, n.d.-a"; caption:"For a Few Dollars More: Verified Fine-Grained Algorithm Analysis Down to LLVM&nl;Haslbeck and Lammich, n.d."; data-line:"FormalBib.bib:7923"; searchterm:"For%20a%20Few%20Dollars%20More%3A%20Verified%20FineGrained%20Algorithm%20Analysis%20Down%20to%20LLVM%20Haslbeck%20and%20Lammich%2C%20n.d."; spellcheck:"false"}
Haslbeck, M.&nbsp;P.&nbsp;L., & Lammich, P.&nbsp;(n.d.-a). For a Few Dollars More: Verified Fine-Grained Algorithm Analysis Down to LLVM.&nbsp;_J.&nbsp;ACM_, _37_(4), 35.
~ end bibitem

~ begin bibitem {id:"haslbeck_veried_nodate"; cite-year:"n.d."; cite-authors:"Haslbeck and Lammich"; cite-authors-long:"Haslbeck and Lammich"; cite-label:"Haslbeck \& Lammich, n.d.-b"; caption:"Veriﬁed Fine-Grained Algorithm Analysis Down to LLVM&nl;Haslbeck and Lammich, n.d."; data-line:"FormalBib.bib:907"; searchterm:"Veri%EF%AC%81ed%20FineGrained%20Algorithm%20Analysis%20Down%20to%20LLVM%20Haslbeck%20and%20Lammich%2C%20n.d."; spellcheck:"false"}
Haslbeck, M.&nbsp;P.&nbsp;L., & Lammich, P.&nbsp;(n.d.-b). Veriﬁed Fine-Grained Algorithm Analysis Down to LLVM, 28.
~ end bibitem

~ begin bibitem {id:"hatcliff_behavioral_2012"; cite-year:"2012"; cite-authors:"Hatcliff et al."; cite-authors-long:"Hatcliff, Leavens, Leino, Müller, and Parkinson"; cite-label:"Hatcliff, Leavens, Leino, Müller, \& Parkinson, 2012"; caption:"Behavioral Interface Specification Languages&nl;Hatcliff, Leavens, Leino, Müller, and Parkinson, 2012"; data-line:"FormalBib.bib:2623"; searchterm:"Behavioral%20Interface%20Specification%20Languages%20Hatcliff%2C%20Leavens%2C%20Leino%2C%20M%C3%BCller%2C%20and%20Parkinson%2C%202012"; spellcheck:"false"}
Hatcliff, J., Leavens, G.&nbsp;T., Leino, K.&nbsp;R.&nbsp;M., Müller, P., & Parkinson, M.&nbsp;(2012). Behavioral Interface Specification Languages. _ACM Comput. Surv._, _44_(3), 16:1–16:58. https://doi.org/[10.1145/2187671.2187678](https://dx.doi.org/10.1145/2187671.2187678){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hathhorn_defining_2015"; cite-year:"2015"; cite-authors:"Hathhorn et al."; cite-authors-long:"Hathhorn, Ellison, and Roşu"; cite-label:"Hathhorn, Ellison, \& Roşu, 2015"; caption:"Defining the Undefinedness of C&nl;Hathhorn, Ellison, and Roşu, 2015"; data-line:"FormalBib.bib:3809"; searchterm:"Defining%20the%20Undefinedness%20of%20C%20Hathhorn%2C%20Ellison%2C%20and%20Ro%C5%9Fu%2C%202015"; spellcheck:"false"}
Hathhorn, C., Ellison, C., & Roşu, G.&nbsp;(2015). Defining the Undefinedness of C.&nbsp;In _Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 336–345). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2737924.2737979](https://dx.doi.org/10.1145/2737924.2737979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hauser_survey_2021"; cite-year:"2021"; cite-authors:"Hauser et al."; cite-authors-long:"Hauser, Häberle, Merling, Lindner, Gurevich, Zeiger, et al."; cite-label:"Hauser et al., 2021"; caption:"A Survey on Data Plane Programming with P4: Fundamentals, Advances, and Applied Research&nl;Hauser, Häberle, Merling, Lindner, Gurevich, Zeiger, et al., 2021"; data-line:"Networking.bib:474"; searchterm:"A%20Survey%20on%20Data%20Plane%20Programming%20with%20P4%3A%20Fundamentals%2C%20Advances%2C%20and%20Applied%20Research%20Hauser%2C%20H%C3%A4berle%2C%20Merling%2C%20Lindner%2C%20Gurevich%2C%20Zeiger%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Hauser, F., Häberle, M., Merling, D., Lindner, S., Gurevich, V., Zeiger, F., … Menth, M.&nbsp;(2021). A Survey on Data Plane Programming with P4: Fundamentals, Advances, and Applied Research. _arXiv:2101.10632 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.10632](http://arxiv.org/abs/2101.10632){.bib-url}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironfleet:_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al."; cite-label:"Hawblitzel, Howell, et al., 2015"; caption:"IronFleet: Proving Practical Distributed Systems Correct&nl;Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al., 2015"; data-line:"FormalBib.bib:1822"; searchterm:"IronFleet%3A%20Proving%20Practical%20Distributed%20Systems%20Correct%20Hawblitzel%2C%20Howell%2C%20Kapritsos%2C%20Lorch%2C%20Parno%2C%20Roberts%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Howell, J., Kapritsos, M., Lorch, J.&nbsp;R., Parno, B., Roberts, M.&nbsp;L., … Zill, B.&nbsp;(2015). IronFleet: Proving Practical Distributed Systems Correct. In _Proceedings of the 25th Symposium on Operating Systems Principles_ (pp. 1–17). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2815400.2815428](https://dx.doi.org/10.1145/2815400.2815428){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironclad_nodate"; cite-year:"n.d."; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill"; cite-label:"Hawblitzel et al., n.d."; caption:"Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation&nl;Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill, n.d."; data-line:"FormalBib.bib:1840"; searchterm:"Ironclad%20Apps%3A%20EndtoEnd%20Security%20via%20Automated%20FullSystem%20Veri%EF%AC%81cation%20Hawblitzel%2C%20Howell%2C%20Lorch%2C%20Narayan%2C%20Parno%2C%20Zhang%2C%20and%20Zill%2C%20n.d."; spellcheck:"false"}
Hawblitzel, C., Howell, J., Lorch, J.&nbsp;R., Narayan, A., Parno, B., Zhang, D., & Zill, B.&nbsp;(n.d.). Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation, 18.
~ end bibitem

~ begin bibitem {id:"hawblitzel_automated_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Petrank, Qadeer, and Tasiran"; cite-label:"Hawblitzel, Petrank, Qadeer, \& Tasiran, 2015"; caption:"Automated and Modular Refinement Reasoning for Concurrent Programs&nl;Hawblitzel, Petrank, Qadeer, and Tasiran, 2015"; data-line:"FormalBib.bib:1806"; searchterm:"Automated%20and%20Modular%20Refinement%20Reasoning%20for%20Concurrent%20Programs%20Hawblitzel%2C%20Petrank%2C%20Qadeer%2C%20and%20Tasiran%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Petrank, E., Qadeer, S., & Tasiran, S.&nbsp;(2015). Automated and Modular Refinement Reasoning for Concurrent Programs. In _Computer Aided Verification_ (pp. 449–465). Springer, Cham. https://doi.org/[10.1007/978-3-319-21668-3_26](https://dx.doi.org/10.1007/978-3-319-21668-3_26){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_hazel_nodate"; cite-authors:"2019r"; cite-authors-long:"2019r"; cite-label:"\&ldquo;Hazel, a live functional programming environment featuring typed holes.,\&rdquo; n.d."; caption:"Hazel, a live functional programming environment featuring typed holes.&nl;2019r, "; data-line:"FormalBib.bib:4019"; searchterm:"Hazel%2C%20a%20live%20functional%20programming%20environment%20featuring%20typed%20holes.%202019r%2C%20"; spellcheck:"false"}
Hazel, a live functional programming environment featuring typed holes. (n.d.). Retrieved August 30, 2019, from <http://hazel.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_hazel_2019"; cite-authors:"2019d"; cite-authors-long:"2019d"; cite-label:"\_Hazel, a live functional programming environment with typed holes\_, 2019"; caption:"Hazel, a live functional programming environment with typed holes: hazelgrove/hazel&nl;2019d, "; data-line:"FormalBib.bib:4008"; searchterm:"Hazel%2C%20a%20live%20functional%20programming%20environment%20with%20typed%20holes%3A%20hazelgrove%2Fhazel%202019d%2C%20"; spellcheck:"false"}
_Hazel, a live functional programming environment with typed holes: hazelgrove/hazel_. (2019). hazelgrove. Retrieved from <https://github.com/hazelgrove/hazel>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hedin_perspective_nodate"; cite-year:"n.d."; cite-authors:"Hedin and Sabelfeld"; cite-authors-long:"Hedin and Sabelfeld"; cite-label:"Hedin \& Sabelfeld, n.d."; caption:"A Perspective on Information-Flow Control&nl;Hedin and Sabelfeld, n.d."; data-line:"FormalBib.bib:4754"; searchterm:"A%20Perspective%20on%20InformationFlow%20Control%20Hedin%20and%20Sabelfeld%2C%20n.d."; spellcheck:"false"}
Hedin, D., & Sabelfeld, A.&nbsp;(n.d.). A Perspective on Information-Flow Control, 29.
~ end bibitem

~ begin bibitem {id:"hellerstein_keeping_2020"; cite-year:"2020"; cite-authors:"Hellerstein and Alvaro"; cite-authors-long:"Hellerstein and Alvaro"; cite-label:"Hellerstein \& Alvaro, 2020"; caption:"Keeping CALM: when distributed consistency is easy&nl;Hellerstein and Alvaro, 2020"; data-line:"FormalBib.bib:5284"; searchterm:"Keeping%20CALM%3A%20when%20distributed%20consistency%20is%20easy%20Hellerstein%20and%20Alvaro%2C%202020"; spellcheck:"false"}
Hellerstein, J.&nbsp;M., & Alvaro, P.&nbsp;(2020). Keeping CALM: when distributed consistency is easy. _Communications of the ACM_, _63_(9), 72–81. https://doi.org/[10.1145/3369736](https://dx.doi.org/10.1145/3369736){.bib-doi}
~ end bibitem

~ begin bibitem {id:"he_type_2021"; cite-year:"2021"; cite-authors:"He et al."; cite-authors-long:"He, Westbrook, Carmer, Phifer, Robert, Smeltzer, et al."; cite-label:"He et al., 2021"; caption:"A type system for extracting functional specifications from memory-safe imperative programs&nl;He, Westbrook, Carmer, Phifer, Robert, Smeltzer, et al., 2021"; data-line:"FormalBib.bib:8886"; searchterm:"A%20type%20system%20for%20extracting%20functional%20specifications%20from%20memorysafe%20imperative%20programs%20He%2C%20Westbrook%2C%20Carmer%2C%20Phifer%2C%20Robert%2C%20Smeltzer%2C%20et%20al.%2C%202021"; spellcheck:"false"}
He, P., Westbrook, E., Carmer, B., Phifer, C., Robert, V., Smeltzer, K., … Zdancewic, S.&nbsp;(2021). A type system for extracting functional specifications from memory-safe imperative programs. _Proceedings of the ACM on Programming Languages_, _5_, 1–29. https://doi.org/[10.1145/3485512](https://dx.doi.org/10.1145/3485512){.bib-doi}
~ end bibitem

~ begin bibitem {id:"herklotz_vericert_2021"; cite-year:"2021"; cite-authors:"Herklotz"; cite-authors-long:"Herklotz"; cite-label:"Herklotz, 2021"; caption:"Vericert&nl;Herklotz, 2021"; data-line:"FormalBib.bib:5185"; searchterm:"Vericert%20Herklotz%2C%202021"; spellcheck:"false"}
Herklotz, Y.&nbsp;(2021). _Vericert_. Retrieved from <https://github.com/ymherklotz/vericert>{.bib-url}
~ end bibitem

~ begin bibitem {id:"herklotz_formal_2017"; cite-year:"2017"; cite-authors:"Herklotz et al."; cite-authors-long:"Herklotz, Pollard, Ramanathan, and Wickerson"; cite-label:"Herklotz, Pollard, Ramanathan, \& Wickerson, 2017"; caption:"Formal Verification of High-Level Synthesis&nl;Herklotz, Pollard, Ramanathan, and Wickerson, 2017"; data-line:"FormalBib.bib:5197"; searchterm:"Formal%20Verification%20of%20HighLevel%20Synthesis%20Herklotz%2C%20Pollard%2C%20Ramanathan%2C%20and%20Wickerson%2C%202017"; spellcheck:"false"}
Herklotz, Y., Pollard, J., Ramanathan, N., & Wickerson, J.&nbsp;(2017). Formal Verification of High-Level Synthesis, 14.
~ end bibitem

~ begin bibitem {id:"herlihy_linearizability:_1990"; cite-year:"1990"; cite-authors:"Herlihy and Wing"; cite-authors-long:"Herlihy and Wing"; cite-label:"Herlihy \& Wing, 1990"; caption:"Linearizability: A Correctness Condition for Concurrent Objects&nl;Herlihy and Wing, 1990"; data-line:"FormalBib.bib:1135"; searchterm:"Linearizability%3A%20A%20Correctness%20Condition%20for%20Concurrent%20Objects%20Herlihy%20and%20Wing%2C%201990"; spellcheck:"false"}
Herlihy, M.&nbsp;P., & Wing, J.&nbsp;M.&nbsp;(1990). Linearizability: A Correctness Condition for Concurrent Objects. _ACM Trans. Program. Lang. Syst._, _12_(3), 463–492. https://doi.org/[10.1145/78969.78972](https://dx.doi.org/10.1145/78969.78972){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hickman_certifying_2021"; cite-year:"2021"; cite-authors:"Hickman et al."; cite-authors-long:"Hickman, Laursen, and Foster"; cite-label:"Hickman, Laursen, \& Foster, 2021"; caption:"Certifying Differential Equation Solutions from Computer Algebra Systems in Isabelle/HOL&nl;Hickman, Laursen, and Foster, 2021"; data-line:"FormalBib.bib:8359"; searchterm:"Certifying%20Differential%20Equation%20Solutions%20from%20Computer%20Algebra%20Systems%20in%20Isabelle%2FHOL%20Hickman%2C%20Laursen%2C%20and%20Foster%2C%202021"; spellcheck:"false"}
Hickman, T., Laursen, C.&nbsp;P., & Foster, S.&nbsp;(2021). Certifying Differential Equation Solutions from Computer Algebra Systems in Isabelle/HOL.&nbsp;_arXiv:2102.02679 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.02679](http://arxiv.org/abs/2102.02679){.bib-url}
~ end bibitem

~ begin bibitem {id:"hiet_security_2021"; cite-year:"2021"; cite-authors:"Hiet"; cite-authors-long:"Hiet"; cite-label:"Hiet, 2021"; caption:"Security at the Hardware/Software Interface&nl;Hiet, 2021"; data-line:"Security.bib:1469"; searchterm:"Security%20at%20the%20Hardware%2FSoftware%20Interface%20Hiet%2C%202021"; spellcheck:"false"}
Hiet, G.&nbsp;(2021). _Security at the Hardware/Software Interface_ (Habilitation à diriger des recherches). Université de Rennes 1. Retrieved from <https://hal.archives-ouvertes.fr/tel-03511334>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hinton_next_2020"; cite-year:"2020"; cite-authors:"G.&nbsp;Hinton"; cite-authors-long:"G.&nbsp;Hinton"; cite-label:"G. Hinton, 2020"; caption:"The Next Generation of Neural Networks&nl;G. Hinton, 2020"; data-line:"Security.bib:1035"; searchterm:"The%20Next%20Generation%20of%20Neural%20Networks%20G.%20Hinton%2C%202020"; spellcheck:"false"}
Hinton, G.&nbsp;(2020). The Next Generation of Neural Networks. In _Proceedings of the 43rd International ACM SIGIR Conference on Research and Development in Information Retrieval_ (p. 1). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3397271.3402425](https://dx.doi.org/10.1145/3397271.3402425){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hinton_transforming_2011"; cite-year:"2011"; cite-authors:"G.&nbsp;E.&nbsp;Hinton et al."; cite-authors-long:"G.&nbsp;E.&nbsp;Hinton, Krizhevsky, and Wang"; cite-label:"G. E. Hinton, Krizhevsky, \& Wang, 2011"; caption:"Transforming Auto-Encoders&nl;G. E. Hinton, Krizhevsky, and Wang, 2011"; data-line:"MachineLearning.bib:44"; searchterm:"Transforming%20AutoEncoders%20G.%20E.%20Hinton%2C%20Krizhevsky%2C%20and%20Wang%2C%202011"; spellcheck:"false"}
Hinton, G.&nbsp;E., Krizhevsky, A., & Wang, S.&nbsp;D.&nbsp;(2011). Transforming Auto-Encoders. In T.&nbsp;Honkela, W.&nbsp;Duch, M.&nbsp;Girolami, & S.&nbsp;Kaski (Eds.), _Artificial Neural Networks and Machine Learning – ICANN 2011_ (pp. 44–51). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-21735-7_6](https://dx.doi.org/10.1007/978-3-642-21735-7_6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoang_spark_2015"; cite-year:"2015"; cite-authors:"Hoang et al."; cite-authors-long:"Hoang, Moy, Wallenburg, and Chapman"; cite-label:"Hoang, Moy, Wallenburg, \& Chapman, 2015"; caption:"SPARK 2014 and GNATprove&nl;Hoang, Moy, Wallenburg, and Chapman, 2015"; data-line:"FormalBib.bib:4275"; searchterm:"SPARK%202014%20and%20GNATprove%20Hoang%2C%20Moy%2C%20Wallenburg%2C%20and%20Chapman%2C%202015"; spellcheck:"false"}
Hoang, D., Moy, Y., Wallenburg, A., & Chapman, R.&nbsp;(2015). SPARK 2014 and GNATprove. _International Journal on Software Tools for Technology Transfer_, _17_(6), 695–707. https://doi.org/[10.1007/s10009-014-0322-5](https://dx.doi.org/10.1007/s10009-014-0322-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoare_verifying_2003"; cite-year:"2003"; cite-authors:"Hoare"; cite-authors-long:"Hoare"; cite-label:"Hoare, 2003"; caption:"The Verifying Compiler: A Grand Challenge for Computing Research&nl;Hoare, 2003"; data-line:"FormalBib.bib:3973"; searchterm:"The%20Verifying%20Compiler%3A%20A%20Grand%20Challenge%20for%20Computing%20Research%20Hoare%2C%202003"; spellcheck:"false"}
Hoare, T.&nbsp;(2003). The Verifying Compiler: A Grand Challenge for Computing Research. _J.&nbsp;ACM_, _50_(1), 63–69. https://doi.org/[10.1145/602382.602403](https://dx.doi.org/10.1145/602382.602403){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hobor_theory_2010"; cite-year:"2010"; cite-authors:"Hobor et al."; cite-authors-long:"Hobor, Dockins, and Appel"; cite-label:"Hobor, Dockins, \& Appel, 2010"; caption:"A Theory of Indirection via Approximation&nl;Hobor, Dockins, and Appel, 2010"; data-line:"FormalBib.bib:1423"; searchterm:"A%20Theory%20of%20Indirection%20via%20Approximation%20Hobor%2C%20Dockins%2C%20and%20Appel%2C%202010"; spellcheck:"false"}
Hobor, A., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2010). A Theory of Indirection via Approximation. In _Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 171–184). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1706299.1706322](https://dx.doi.org/10.1145/1706299.1706322){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoder_z_2011"; cite-year:"2011"; cite-authors:"Hoder et al."; cite-authors-long:"Hoder, Bjørner, and Moura"; cite-label:"Hoder, Bjørner, \& Moura, 2011"; caption:"μZ– An Efficient Engine for Fixed Points with Constraints&nl;Hoder, Bjørner, and Moura, 2011"; data-line:"FormalBib.bib:4143"; searchterm:"%CE%BCZ%E2%80%93%20An%20Efficient%20Engine%20for%20Fixed%20Points%20with%20Constraints%20Hoder%2C%20Bj%C3%B8rner%2C%20and%20Moura%2C%202011"; spellcheck:"false"}
Hoder, K., Bjørner, N., & Moura, L.&nbsp;de. (2011). μZ– An Efficient Engine for Fixed Points with Constraints. In G.&nbsp;Gopalakrishnan & S.&nbsp;Qadeer (Eds.), _Computer Aided Verification_ (pp. 457–462). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"hofmann_type-based_2021"; cite-year:"2021"; cite-authors:"Hofmann et al."; cite-authors-long:"Hofmann, Leutgeb, Moser, Obwaller, and Zuleger"; cite-label:"Hofmann, Leutgeb, Moser, Obwaller, \& Zuleger, 2021"; caption:"Type-Based Analysis of Logarithmic Amortised Complexity&nl;Hofmann, Leutgeb, Moser, Obwaller, and Zuleger, 2021"; data-line:"FormalBib.bib:469"; searchterm:"TypeBased%20Analysis%20of%20Logarithmic%20Amortised%20Complexity%20Hofmann%2C%20Leutgeb%2C%20Moser%2C%20Obwaller%2C%20and%20Zuleger%2C%202021"; spellcheck:"false"}
Hofmann, M., Leutgeb, L., Moser, G., Obwaller, D., & Zuleger, F.&nbsp;(2021). Type-Based Analysis of Logarithmic Amortised Complexity. _arXiv:2101.12029 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.12029](http://arxiv.org/abs/2101.12029){.bib-url}
~ end bibitem

~ begin bibitem {id:"hogan_elastic_2020"; cite-year:"2020"; cite-authors:"Hogan et al."; cite-authors-long:"Hogan, Landau-Feibish, Tahmasbi Arashloo, Rexford, Walker, and Harrison"; cite-label:"Hogan et al., 2020"; caption:"Elastic Switch Programming with P4All&nl;Hogan, Landau-Feibish, Tahmasbi Arashloo, Rexford, Walker, and Harrison, 2020"; data-line:"Networking.bib:157"; searchterm:"Elastic%20Switch%20Programming%20with%20P4All%20Hogan%2C%20LandauFeibish%2C%20Tahmasbi%20Arashloo%2C%20Rexford%2C%20Walker%2C%20and%20Harrison%2C%202020"; spellcheck:"false"}
Hogan, M., Landau-Feibish, S., Tahmasbi Arashloo, M., Rexford, J., Walker, D., & Harrison, R.&nbsp;(2020). Elastic Switch Programming with P4All. In _Proceedings of the 19th ACM Workshop on Hot Topics in Networks_ (pp. 168–174). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3422604.3425933](https://dx.doi.org/10.1145/3422604.3425933){.bib-doi}
~ end bibitem

~ begin bibitem {id:"holzl_type_2013"; cite-year:"2013"; cite-authors:"Hölzl et al."; cite-authors-long:"Hölzl, Immler, and Huffman"; cite-label:"Hölzl, Immler, \& Huffman, 2013"; caption:"Type Classes and Filters for Mathematical Analysis in Isabelle/HOL&nl;Hölzl, Immler, and Huffman, 2013"; data-line:"FormalBib.bib:3448"; searchterm:"Type%20Classes%20and%20Filters%20for%20Mathematical%20Analysis%20in%20Isabelle%2FHOL%20H%C3%B6lzl%2C%20Immler%2C%20and%20Huffman%2C%202013"; spellcheck:"false"}
Hölzl, J., Immler, F., & Huffman, B.&nbsp;(2013). Type Classes and Filters for Mathematical Analysis in Isabelle/HOL.&nbsp;In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (pp. 279–294). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"honore_much_nodate"; cite-year:"n.d."; cite-authors:"Honoré et al."; cite-authors-long:"Honoré, Kim, Shin, and Shao"; cite-label:"Honoré, Kim, Shin, \& Shao, n.d."; caption:"Much ADO about Failures: A Fault-Aware Model for Compositional Verification of Strongly Consistent Distributed Systems&nl;Honoré, Kim, Shin, and Shao, n.d."; data-line:"LanguageTools.bib:975"; searchterm:"Much%20ADO%20about%20Failures%3A%20A%20FaultAware%20Model%20for%20Compositional%20Verification%20of%20Strongly%20Consistent%20Distributed%20Systems%20Honor%C3%A9%2C%20Kim%2C%20Shin%2C%20and%20Shao%2C%20n.d."; spellcheck:"false"}
Honoré, W., Kim, J., Shin, J.-Y., & Shao, Z.&nbsp;(n.d.). Much ADO about Failures: A Fault-Aware Model for Compositional Verification of Strongly Consistent Distributed Systems, _5_, 42.
~ end bibitem

~ begin bibitem {id:"hood_trusted_2016"; cite-year:"2016"; cite-authors:"Hood"; cite-authors-long:"Hood"; cite-label:"Hood, 2016"; caption:"Trusted, Third-Party Authenticated, Quantum Key Distribution&nl;Hood, 2016"; data-line:"Cryptography.bib:23"; searchterm:"Trusted%2C%20ThirdParty%20Authenticated%2C%20Quantum%20Key%20Distribution%20Hood%2C%202016"; spellcheck:"false"}
Hood, J.&nbsp;(2016). Trusted, Third-Party Authenticated, Quantum Key Distribution. Retrieved from <https://etd.auburn.edu//handle/10415/5373>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hritcu_micro-policies:_2015"; cite-year:"2015"; cite-authors:"Cǎtǎlin Hriţcu"; cite-authors-long:"Cǎtǎlin Hriţcu"; cite-label:"Cǎtǎlin Hriţcu, 2015"; caption:"Micro-Policies: Formally Verified, Tag-Based Security Monitors&nl;Cǎtǎlin Hriţcu, 2015"; data-line:"FormalBib.bib:1489"; searchterm:"MicroPolicies%3A%20Formally%20Verified%2C%20TagBased%20Security%20Monitors%20C%C7%8Et%C7%8Elin%20Hri%C5%A3cu%2C%202015"; spellcheck:"false"}
Hriţcu, C.&nbsp;(2015). Micro-Policies: Formally Verified, Tag-Based Security Monitors. In _Proceedings of the 10th ACM Workshop on Programming Languages and Analysis for Security - PLAS’15_ (pp. 1–1). Prague, Czech Republic: ACM Press. https://doi.org/[10.1145/2786558.2786560](https://dx.doi.org/10.1145/2786558.2786560){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hritcu_quest_nodate"; cite-year:"n.d."; cite-authors:"Cătălin Hriţcu"; cite-authors-long:"Cătălin Hriţcu"; cite-label:"Cătălin Hriţcu, n.d."; caption:"The Quest for Formally Secure Compartmentalizing Compilation&nl;Cătălin Hriţcu, n.d."; data-line:"FormalBib.bib:2054"; searchterm:"The%20Quest%20for%20Formally%20Secure%20Compartmentalizing%20Compilation%20C%C4%83t%C4%83lin%20Hri%C5%A3cu%2C%20n.d."; spellcheck:"false"}
Hriţcu, C.&nbsp;(n.d.). The Quest for Formally Secure Compartmentalizing Compilation, 96.
~ end bibitem

~ begin bibitem {id:"ahrendt_dione_2019"; cite-year:"2019a"; cite-authors:"Hsieh and Mitra"; cite-authors-long:"Hsieh and Mitra"; cite-label:"Hsieh \& Mitra, 2019a"; caption:"Dione: A Protocol Verification System Built with Dafny for I/O Automata&nl;Hsieh and Mitra, 2019a"; data-line:"Networking.bib:878"; searchterm:"Dione%3A%20A%20Protocol%20Verification%20System%20Built%20with%20Dafny%20for%20I%2FO%20Automata%20Hsieh%20and%20Mitra%2C%202019a"; spellcheck:"false"}
Hsieh, C., & Mitra, S.&nbsp;(2019a). Dione: A Protocol Verification System Built with Dafny for I/O Automata. In W.&nbsp;Ahrendt & S.&nbsp;L.&nbsp;Tapia Tarifa (Eds.), _Integrated Formal Methods_ (Vol. 11918, pp. 227–245). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-34968-4_13](https://dx.doi.org/10.1007/978-3-030-34968-4_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hsieh_dione_2019"; cite-year:"2019b"; cite-authors:"Hsieh and Mitra"; cite-authors-long:"Hsieh and Mitra"; cite-label:"Hsieh \& Mitra, 2019b"; caption:"Dione: A Protocol Verification System Built with Dafny for I/O Automata&nl;Hsieh and Mitra, 2019b"; data-line:"Networking.bib:899"; searchterm:"Dione%3A%20A%20Protocol%20Verification%20System%20Built%20with%20Dafny%20for%20I%2FO%20Automata%20Hsieh%20and%20Mitra%2C%202019b"; spellcheck:"false"}
Hsieh, C., & Mitra, S.&nbsp;(2019b). Dione: A Protocol Verification System Built with Dafny for I/O Automata. In W.&nbsp;Ahrendt & S.&nbsp;L.&nbsp;Tapia Tarifa (Eds.), _Integrated Formal Methods_ (pp. 227–245). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-34968-4_13](https://dx.doi.org/10.1007/978-3-030-34968-4_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"huang_taming_nodate"; cite-year:"n.d."; cite-authors:"Huang et al."; cite-authors-long:"Huang, Huang, Payer, Qian, Sampson, Tan, and Jaeger"; cite-label:"Huang et al., n.d."; caption:"The Taming of the Stack: Isolating Stack Data from Memory Errors&nl;Huang, Huang, Payer, Qian, Sampson, Tan, and Jaeger, n.d."; data-line:"Security.bib:1481"; searchterm:"The%20Taming%20of%20the%20Stack%3A%20Isolating%20Stack%20Data%20from%20Memory%20Errors%20Huang%2C%20Huang%2C%20Payer%2C%20Qian%2C%20Sampson%2C%20Tan%2C%20and%20Jaeger%2C%20n.d."; spellcheck:"false"}
Huang, K., Huang, Y., Payer, M., Qian, Z., Sampson, J., Tan, G., & Jaeger, T.&nbsp;(n.d.). The Taming of the Stack: Isolating Stack Data from Memory Errors. _Network and Distributed Systems Security (NDSS) Symposium 2022_, 17.
~ end bibitem

~ begin bibitem {id:"hublet_databank_2021"; cite-year:"2021"; cite-authors:"Hublet"; cite-authors-long:"Hublet"; cite-label:"Hublet, 2021"; caption:"The Databank Model&nl;Hublet, 2021"; data-line:"Security.bib:861"; searchterm:"The%20Databank%20Model%20Hublet%2C%202021"; spellcheck:"false"}
Hublet, F.&nbsp;(2021). The Databank Model, 212 p. https://doi.org/[10.3929/ETHZ-B-000477329](https://dx.doi.org/10.3929/ETHZ-B-000477329){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hughes_why_1989"; cite-year:"1989"; cite-authors:"Hughes"; cite-authors-long:"Hughes"; cite-label:"Hughes, 1989"; caption:"Why Functional Programming Matters&nl;Hughes, 1989"; data-line:"FormalBib.bib:4482"; searchterm:"Why%20Functional%20Programming%20Matters%20Hughes%2C%201989"; spellcheck:"false"}
Hughes, J.&nbsp;(1989). Why Functional Programming Matters. _The Computer Journal_, _32_(2), 98–107. https://doi.org/[10.1093/comjnl/32.2.98](https://dx.doi.org/10.1093/comjnl/32.2.98){.bib-doi}
~ end bibitem

~ begin bibitem {id:"huihui_optimizing_nodate"; cite-year:"2021"; cite-authors:"Huihui and Hongwei"; cite-authors-long:"Huihui and Hongwei"; cite-label:"Huihui \& Hongwei, n.d."; caption:"Optimizing demand-driven null dereference verification via merging branches&nl;Huihui and Hongwei, 2021"; data-line:"LanguageTools.bib:85"; searchterm:"Optimizing%20demanddriven%20null%20dereference%20verification%20via%20merging%20branches%20Huihui%20and%20Hongwei%2C%202021"; spellcheck:"false"}
Huihui, C., & Hongwei, Z.&nbsp;(n.d.). Optimizing demand-driven null dereference verification via merging branches. _Expert Systems_, _n/a_, e12707. https://doi.org/[10.1111/exsy.12707](https://dx.doi.org/10.1111/exsy.12707){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hu_formalizing_2021"; cite-year:"2021"; cite-authors:"Hu and Carette"; cite-authors-long:"Hu and Carette"; cite-label:"Hu \& Carette, 2021"; caption:"Formalizing category theory in Agda&nl;Hu and Carette, 2021"; data-line:"FormalBib.bib:563"; searchterm:"Formalizing%20category%20theory%20in%20Agda%20Hu%20and%20Carette%2C%202021"; spellcheck:"false"}
Hu, J.&nbsp;Z.&nbsp;S., & Carette, J.&nbsp;(2021). Formalizing category theory in Agda. In _Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 327–342). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3437992.3439922](https://dx.doi.org/10.1145/3437992.3439922){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hunt_warren_a._industrial_2017"; cite-year:"2017"; cite-authors:"Hunt Warren A.&nbsp;et al."; cite-authors-long:"Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna"; cite-label:"Hunt Warren A., Kaufmann Matt, Moore J Strother, \& Slobodova Anna, 2017"; caption:"Industrial hardware and software verification with ACL2&nl;Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna, 2017"; data-line:"FormalBib.bib:2246"; searchterm:"Industrial%20hardware%20and%20software%20verification%20with%20ACL2%20Hunt%20Warren%20A.%2C%20Kaufmann%20Matt%2C%20Moore%20J%20Strother%2C%20and%20Slobodova%20Anna%2C%202017"; spellcheck:"false"}
Hunt Warren A., Kaufmann Matt, Moore J Strother, & Slobodova Anna. (2017). Industrial hardware and software verification with ACL2. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150399. https://doi.org/[10.1098/rsta.2015.0399](https://dx.doi.org/10.1098/rsta.2015.0399){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hur_power_2013"; cite-year:"2013"; cite-authors:"Hur et al."; cite-authors-long:"Hur, Neis, Dreyer, and Vafeiadis"; cite-label:"Hur, Neis, Dreyer, \& Vafeiadis, 2013"; caption:"The power of parameterization in coinductive proof&nl;Hur, Neis, Dreyer, and Vafeiadis, 2013"; data-line:"FormalBib.bib:5759"; searchterm:"The%20power%20of%20parameterization%20in%20coinductive%20proof%20Hur%2C%20Neis%2C%20Dreyer%2C%20and%20Vafeiadis%2C%202013"; spellcheck:"false"}
Hur, C.-K., Neis, G., Dreyer, D., & Vafeiadis, V.&nbsp;(2013). The power of parameterization in coinductive proof. In _Proceedings of the 40th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages_ (pp. 193–206). Rome, Italy: Association for Computing Machinery. https://doi.org/[10.1145/2429069.2429093](https://dx.doi.org/10.1145/2429069.2429093){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bobaru_opentheory_2011"; cite-year:"2011"; cite-authors:"Hurd"; cite-authors-long:"Hurd"; cite-label:"Hurd, 2011"; caption:"The OpenTheory Standard Theory Library&nl;Hurd, 2011"; data-line:"FormalBib.bib:6352"; searchterm:"The%20OpenTheory%20Standard%20Theory%20Library%20Hurd%2C%202011"; spellcheck:"false"}
Hurd, J.&nbsp;(2011). The OpenTheory Standard Theory Library. In M.&nbsp;Bobaru, K.&nbsp;Havelund, G.&nbsp;J.&nbsp;Holzmann, & R.&nbsp;Joshi (Eds.), _NASA Formal Methods_ (Vol. 6617, pp. 177–191). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-20398-5_14](https://dx.doi.org/10.1007/978-3-642-20398-5_14){.bib-doi}
~ end bibitem

~ begin bibitem {id:"huyghebaert_semi-automatic_2021"; cite-year:"2021"; cite-authors:"Huyghebaert et al."; cite-authors-long:"Huyghebaert, Keuchel, and Devriese"; cite-label:"Huyghebaert, Keuchel, \& Devriese, 2021"; caption:"Semi-automatic verification of ISA security guarantees in the form of universal contracts&nl;Huyghebaert, Keuchel, and Devriese, 2021"; data-line:"FormalBib.bib:8547"; searchterm:"Semiautomatic%20verification%20of%20ISA%20security%20guarantees%20in%20the%20form%20of%20universal%20contracts%20Huyghebaert%2C%20Keuchel%2C%20and%20Devriese%2C%202021"; spellcheck:"false"}
Huyghebaert, S., Keuchel, S., & Devriese, D.&nbsp;(2021). Semi-automatic verification of ISA security guarantees in the form of universal contracts. _SILM Workshop 2021_, 6. Retrieved from <https://silm-workshop-2021.inria.fr/wp-content/uploads/2021/09/ISAVerif.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate-1"; cite-authors:"2019s"; cite-authors-long:"2019s"; cite-label:"IEEE, n.d."; caption:"IEEE Standard for Universal Verification Methodology Language Reference Manual&nl;2019s, "; data-line:"FormalBib.bib:4507"; searchterm:"IEEE%20Standard%20for%20Universal%20Verification%20Methodology%20Language%20Reference%20Manual%202019s%2C%20"; spellcheck:"false"}
IEEE.&nbsp;(n.d.). _IEEE Standard for Universal Verification Methodology Language Reference Manual_. https://doi.org/[10.1109/IEEESTD.2017.7932212](https://dx.doi.org/10.1109/IEEESTD.2017.7932212){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bourque_guide_2014"; cite-year:"2014"; cite-authors:"IEEE Computer Society"; cite-authors-long:"IEEE Computer Society"; cite-label:"IEEE Computer Society, 2014"; caption:"Guide to the software engineering body of knowledge&nl;IEEE Computer Society, 2014"; data-line:"FormalBib.bib:6634"; searchterm:"Guide%20to%20the%20software%20engineering%20body%20of%20knowledge%20IEEE%20Computer%20Society%2C%202014"; spellcheck:"false"}
IEEE Computer Society. (2014). _Guide to the software engineering body of knowledge_. (P.&nbsp;Bourque & R.&nbsp;E.&nbsp;Fairley, Eds.).
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"\&ldquo;IEEE Std 754™-2008 \(Revision of IEEE Std 754-1985\), IEEE Standard for Floating-Point Arithmetic,\&rdquo; n.d."; caption:"IEEE Std 754™-2008 (Revision of IEEE Std 754-1985), IEEE Standard for Floating-Point Arithmetic&nl;n.d., "; data-line:"FormalBib.bib:4499"; searchterm:"IEEE%20Std%20754%E2%84%A22008%20Revision%20of%20IEEE%20Std%207541985%2C%20IEEE%20Standard%20for%20FloatingPoint%20Arithmetic%20n.d.%2C%20"; spellcheck:"false"}
IEEE Std 754™-2008 (Revision of IEEE Std 754-1985), IEEE Standard for Floating-Point Arithmetic. (n.d.), 70.
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate-2"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"\&ldquo;IEEE Std 1800™-2012 \(Revision of IEEE Std 1800-2009\) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language,\&rdquo; n.d."; caption:"IEEE Std 1800™-2012 (Revision of IEEE Std 1800-2009) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language&nl;n.d., "; data-line:"FormalBib.bib:4518"; searchterm:"IEEE%20Std%201800%E2%84%A22012%20Revision%20of%20IEEE%20Std%2018002009%20IEEE%20Standard%20for%20SystemVerilog%E2%80%94Unified%20Hardware%20Design%2C%20Specification%2C%20and%20Verification%20Language%20n.d.%2C%20"; spellcheck:"false"}
IEEE Std 1800™-2012 (Revision of IEEE Std 1800-2009) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language. (n.d.), 1315.
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate-3"; cite-authors:"2021t"; cite-authors-long:"2021t"; cite-label:"\&ldquo;IEEE Xplore Full-Text PDF:,\&rdquo; n.d."; caption:"IEEE Xplore Full-Text PDF:&nl;2021t, "; data-line:"FormalBib.bib:7794"; searchterm:"IEEE%20Xplore%20FullText%20PDF%3A%202021t%2C%20"; spellcheck:"false"}
IEEE Xplore Full-Text PDF: (n.d.). Retrieved July 16, 2021, from <https://ieeexplore-ieee-org.rsic.army.mil:3443/stamp/stamp.jsp?tp=&arnumber=9470541&tag=1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"immler_verified_2018"; cite-year:"2018"; cite-authors:"Immler"; cite-authors-long:"Immler"; cite-label:"Immler, 2018"; caption:"A Verified ODE Solver and the Lorenz Attractor&nl;Immler, 2018"; data-line:"FormalBib.bib:3493"; searchterm:"A%20Verified%20ODE%20Solver%20and%20the%20Lorenz%20Attractor%20Immler%2C%202018"; spellcheck:"false"}
Immler, F.&nbsp;(2018). A Verified ODE Solver and the Lorenz Attractor. _Journal of Automated Reasoning_, _61_(1), 73–111. https://doi.org/[10.1007/s10817-017-9448-y](https://dx.doi.org/10.1007/s10817-017-9448-y){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_infer_2020"; cite-authors:"2020d"; cite-authors-long:"2020d"; cite-label:"\&ldquo;Infer\&hash;,\&rdquo; 2020"; caption:"Infer&hash;: Interprocedural Memory Safety Analysis For C&hash;..NET Blog&nl;2020d, "; data-line:"FormalBib.bib:865"; searchterm:"Infer%26hash%3B%3A%20Interprocedural%20Memory%20Safety%20Analysis%20For%20C%26hash%3B..NET%20Blog%202020d%2C%20"; spellcheck:"false"}
Infer&hash;: Interprocedural Memory Safety Analysis For C&hash;..NET Blog. (2020, December 8). Retrieved January 20, 2021, from <https://devblogs.microsoft.com/dotnet/infer-interprocedural-memory-safety-analysis-for-c/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_infersharp_2021"; cite-authors:"2021b"; cite-authors-long:"2021b"; cite-label:"\_infersharp\_, 2021"; caption:"infersharp&nl;2021b, "; data-line:"FormalBib.bib:843"; searchterm:"infersharp%202021b%2C%20"; spellcheck:"false"}
_infersharp_. (2021). Microsoft. Retrieved from <https://github.com/microsoft/infersharp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_introduction_nodate"; cite-authors:"2020u"; cite-authors-long:"2020u"; cite-label:"\&ldquo;Introduction to Domain Theory,\&rdquo; n.d."; caption:"Introduction to Domain Theory&nl;2020u, "; data-line:"FormalBib.bib:6136"; searchterm:"Introduction%20to%20Domain%20Theory%202020u%2C%20"; spellcheck:"false"}
Introduction to Domain Theory. (n.d.). Retrieved January 13, 2020, from <http://www.cs.nott.ac.uk/~pszgmh/domains.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"badger_extracting_2019"; cite-year:"2019"; cite-authors:"Ioannidis et al."; cite-authors-long:"Ioannidis, Kaashoek, and Zeldovich"; cite-label:"Ioannidis, Kaashoek, \& Zeldovich, 2019"; caption:"Extracting and Optimizing Formally Verified Code for Systems Programming&nl;Ioannidis, Kaashoek, and Zeldovich, 2019"; data-line:"FormalBib.bib:4319"; searchterm:"Extracting%20and%20Optimizing%20Formally%20Verified%20Code%20for%20Systems%20Programming%20Ioannidis%2C%20Kaashoek%2C%20and%20Zeldovich%2C%202019"; spellcheck:"false"}
Ioannidis, E., Kaashoek, F., & Zeldovich, N.&nbsp;(2019). Extracting and Optimizing Formally Verified Code for Systems Programming. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (Vol. 11460, pp. 228–236). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-20652-9_15](https://dx.doi.org/10.1007/978-3-030-20652-9_15){.bib-doi}
~ end bibitem

~ begin bibitem {id:"iosif_encoding_nodate"; cite-year:"n.d."; cite-authors:"Iosif et al."; cite-authors-long:"Iosif, Serban, Reynolds, and Sighireanu"; cite-label:"Iosif, Serban, Reynolds, \& Sighireanu, n.d."; caption:"Encoding Separation Logic in SMT-LIB v2.5&nl;Iosif, Serban, Reynolds, and Sighireanu, n.d."; data-line:"FormalBib.bib:82"; searchterm:"Encoding%20Separation%20Logic%20in%20SMTLIB%20v2.5%20Iosif%2C%20Serban%2C%20Reynolds%2C%20and%20Sighireanu%2C%20n.d."; spellcheck:"false"}
Iosif, R., Serban, C., Reynolds, A., & Sighireanu, M.&nbsp;(n.d.). Encoding Separation Logic in SMT-LIB v2.5, 8.
~ end bibitem

~ begin bibitem {id:"noauthor_iris_nodate"; cite-authors:"2020v"; cite-authors-long:"2020v"; cite-label:"\&ldquo;Iris / stdpp.GitLab,\&rdquo; n.d."; caption:"Iris / stdpp.GitLab&nl;2020v, "; data-line:"FormalBib.bib:6524"; searchterm:"Iris%20%2F%20stdpp.GitLab%202020v%2C%20"; spellcheck:"false"}
Iris / stdpp.GitLab. (n.d.). Retrieved January 10, 2020, from <https://gitlab.mpi-sws.org/iris/stdpp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_iron_nodate"; cite-authors:"2020w"; cite-authors-long:"2020w"; cite-label:"\&ldquo;Iron: Managing Obligations in Higher-Order Concurrent Separation Logic \(POPL 2019\),\&rdquo; n.d."; caption:"Iron: Managing Obligations in Higher-Order Concurrent Separation Logic (POPL 2019)&nl;2020w, "; data-line:"FormalBib.bib:6060"; searchterm:"Iron%3A%20Managing%20Obligations%20in%20HigherOrder%20Concurrent%20Separation%20Logic%20POPL%202019%202020w%2C%20"; spellcheck:"false"}
Iron: Managing Obligations in Higher-Order Concurrent Separation Logic (POPL 2019). (n.d.). Retrieved January 14, 2020, from <https://iris-project.org/iron/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ishimwe_dynaplex_nodate"; cite-year:"n.d."; cite-authors:"Ishimwe et al."; cite-authors-long:"Ishimwe, Nguyen, and Nguyen"; cite-label:"Ishimwe, Nguyen, \& Nguyen, n.d."; caption:"Dynaplex: Analyzing Program Complexity using Dynamically Inferred Recurrence Relations&nl;Ishimwe, Nguyen, and Nguyen, n.d."; data-line:"Security.bib:1311"; searchterm:"Dynaplex%3A%20Analyzing%20Program%20Complexity%20using%20Dynamically%20Inferred%20Recurrence%20Relations%20Ishimwe%2C%20Nguyen%2C%20and%20Nguyen%2C%20n.d."; spellcheck:"false"}
Ishimwe, D., Nguyen, K., & Nguyen, T.&nbsp;(n.d.). Dynaplex: Analyzing Program Complexity using Dynamically Inferred Recurrence Relations, _5_, 23.
~ end bibitem

~ begin bibitem {id:"ishtiaq_bi_2011"; cite-year:"2011"; cite-authors:"Ishtiaq and O’Hearn"; cite-authors-long:"Ishtiaq and O’Hearn"; cite-label:"Ishtiaq \& O’Hearn, 2011"; caption:"BI As an Assertion Language for Mutable Data Structures&nl;Ishtiaq and O’Hearn, 2011"; data-line:"FormalBib.bib:1646"; searchterm:"BI%20As%20an%20Assertion%20Language%20for%20Mutable%20Data%20Structures%20Ishtiaq%20and%20O%E2%80%99Hearn%2C%202011"; spellcheck:"false"}
Ishtiaq, S., & O’Hearn, P.&nbsp;W.&nbsp;(2011). BI As an Assertion Language for Mutable Data Structures. _SIGPLAN Not._, _46_(4), 84–96. https://doi.org/[10.1145/1988042.1988050](https://dx.doi.org/10.1145/1988042.1988050){.bib-doi}
~ end bibitem

~ begin bibitem {id:"islam_classification_2010"; cite-year:"2010"; cite-authors:"Islam et al."; cite-authors-long:"Islam, Tian, Batten, and Versteeg"; cite-label:"Islam, Tian, Batten, \& Versteeg, 2010"; caption:"Classification of Malware Based on String and Function Feature Selection&nl;Islam, Tian, Batten, and Versteeg, 2010"; data-line:"Security.bib:960"; searchterm:"Classification%20of%20Malware%20Based%20on%20String%20and%20Function%20Feature%20Selection%20Islam%2C%20Tian%2C%20Batten%2C%20and%20Versteeg%2C%202010"; spellcheck:"false"}
Islam, R., Tian, R., Batten, L., & Versteeg, S.&nbsp;(2010). Classification of Malware Based on String and Function Feature Selection. In _2010 Second Cybercrime and Trustworthy Computing Workshop_ (pp. 9–17). https://doi.org/[10.1109/CTC.2010.11](https://dx.doi.org/10.1109/CTC.2010.11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jacobs_introduction_2017"; cite-year:"2017"; cite-authors:"B.&nbsp;Jacobs"; cite-authors-long:"B.&nbsp;Jacobs"; cite-label:"B. Jacobs, 2017"; caption:"Introduction to Coalgebra: Towards Mathematics of States and Observation&nl;B. Jacobs, 2017"; data-line:"FormalBib.bib:5905"; searchterm:"Introduction%20to%20Coalgebra%3A%20Towards%20Mathematics%20of%20States%20and%20Observation%20B.%20Jacobs%2C%202017"; spellcheck:"false"}
Jacobs, B.&nbsp;(2017). _Introduction to Coalgebra: Towards Mathematics of States and Observation_. Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9781316823187](https://dx.doi.org/10.1017/CBO9781316823187){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast/verifast:_2019"; cite-year:"2019"; cite-authors:"B.&nbsp;Jacobs"; cite-authors-long:"B.&nbsp;Jacobs"; cite-label:"B. Jacobs, 2019"; caption:"verifast/verifast: Research prototype tool for modular formal verification of C and Java programs&nl;B. Jacobs, 2019"; data-line:"FormalBib.bib:3073"; searchterm:"verifast%2Fverifast%3A%20Research%20prototype%20tool%20for%20modular%20formal%20verification%20of%20C%20and%20Java%20programs%20B.%20Jacobs%2C%202019"; spellcheck:"false"}
Jacobs, B.&nbsp;(2019). _verifast/verifast: Research prototype tool for modular formal verification of C and Java programs_. verifast. Retrieved from <https://github.com/verifast/verifast>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2008"; cite-year:"2008"; cite-authors:"B.&nbsp;Jacobs and Piessens"; cite-authors-long:"B.&nbsp;Jacobs and Piessens"; cite-label:"B. Jacobs \& Piessens, 2008"; caption:"The VeriFast program verifier&nl;B. Jacobs and Piessens, 2008"; data-line:"FormalBib.bib:3621"; searchterm:"The%20VeriFast%20program%20verifier%20B.%20Jacobs%20and%20Piessens%2C%202008"; spellcheck:"false"}
Jacobs, B., & Piessens, F.&nbsp;(2008). _The VeriFast program verifier_.
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2017"; cite-year:"2017"; cite-authors:"B.&nbsp;Jacobs et al."; cite-authors-long:"B.&nbsp;Jacobs, Smans, and Piessens"; cite-label:"B. Jacobs, Smans, \& Piessens, 2017"; caption:"The VeriFast Program Veriﬁer: A Tutorial&nl;B. Jacobs, Smans, and Piessens, 2017"; data-line:"FormalBib.bib:3612"; searchterm:"The%20VeriFast%20Program%20Veri%EF%AC%81er%3A%20A%20Tutorial%20B.%20Jacobs%2C%20Smans%2C%20and%20Piessens%2C%202017"; spellcheck:"false"}
Jacobs, B., Smans, J., & Piessens, F.&nbsp;(2017). The VeriFast Program Veriﬁer: A Tutorial, 102.
~ end bibitem

~ begin bibitem {id:"jacobs_featherweight_2015"; cite-year:"2015"; cite-authors:"B.&nbsp;Jacobs et al."; cite-authors-long:"B.&nbsp;Jacobs, Vogels, and Piessens"; cite-label:"B. Jacobs, Vogels, \& Piessens, 2015"; caption:"Featherweight VeriFast&nl;B. Jacobs, Vogels, and Piessens, 2015"; data-line:"FormalBib.bib:3629"; searchterm:"Featherweight%20VeriFast%20B.%20Jacobs%2C%20Vogels%2C%20and%20Piessens%2C%202015"; spellcheck:"false"}
Jacobs, B., Vogels, F., & Piessens, F.&nbsp;(2015). Featherweight VeriFast. _Logical Methods in Computer Science_, _11_(3). https://doi.org/[10.2168/LMCS-11(3:19)2015](https://dx.doi.org/10.2168/LMCS-11%283:19%292015){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jacobs_connectivity_nodate"; cite-year:"n.d."; cite-authors:"J.&nbsp;Jacobs et al."; cite-authors-long:"J.&nbsp;Jacobs, Balzer, and Krebbers"; cite-label:"J. Jacobs, Balzer, \& Krebbers, n.d."; caption:"Connectivity Graphs: A Method for Proving Deadlock Freedom Based on Separation Logic&nl;J. Jacobs, Balzer, and Krebbers, n.d."; data-line:"FormalBib.bib:9361"; searchterm:"Connectivity%20Graphs%3A%20A%20Method%20for%20Proving%20Deadlock%20Freedom%20Based%20on%20Separation%20Logic%20J.%20Jacobs%2C%20Balzer%2C%20and%20Krebbers%2C%20n.d."; spellcheck:"false"}
Jacobs, J., Balzer, S., & Krebbers, R.&nbsp;(n.d.). Connectivity Graphs: A Method for Proving Deadlock Freedom Based on Separation Logic, _6_, 33.
~ end bibitem

~ begin bibitem {id:"jain_bird_2021"; cite-year:"2021"; cite-authors:"R.&nbsp;Jain et al."; cite-authors-long:"R.&nbsp;Jain, Purandare, and Sharma"; cite-label:"R. Jain, Purandare, \& Sharma, 2021"; caption:"BiRD: Race Detection in Software Binaries under Relaxed Memory Models&nl;R. Jain, Purandare, and Sharma, 2021"; data-line:"LanguageTools.bib:1376"; searchterm:"BiRD%3A%20Race%20Detection%20in%20Software%20Binaries%20under%20Relaxed%20Memory%20Models%20R.%20Jain%2C%20Purandare%2C%20and%20Sharma%2C%202021"; spellcheck:"false"}
Jain, R., Purandare, R., & Sharma, S.&nbsp;(2021). BiRD: Race Detection in Software Binaries under Relaxed Memory Models. _ACM Transactions on Software Engineering and Methodology_. https://doi.org/[10.1145/3498538](https://dx.doi.org/10.1145/3498538){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jain_b4_nodate"; cite-year:"n.d."; cite-authors:"S.&nbsp;Jain et al."; cite-authors-long:"S.&nbsp;Jain, Kumar, Mandal, Ong, Poutievski, Singh, et al."; cite-label:"S. Jain et al., n.d."; caption:"B4: Experience with a Globally-Deployed Software Deﬁned WAN&nl;S. Jain, Kumar, Mandal, Ong, Poutievski, Singh, et al., n.d."; data-line:"Networking.bib:729"; searchterm:"B4%3A%20Experience%20with%20a%20GloballyDeployed%20Software%20De%EF%AC%81ned%20WAN%20S.%20Jain%2C%20Kumar%2C%20Mandal%2C%20Ong%2C%20Poutievski%2C%20Singh%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Jain, S., Kumar, A., Mandal, S., Ong, J., Poutievski, L., Singh, A., … Vahdat, A.&nbsp;(n.d.). B4: Experience with a Globally-Deployed Software Deﬁned WAN, 12.
~ end bibitem

~ begin bibitem {id:"jaiswal_unified_2021"; cite-year:"2021"; cite-authors:"Jaiswal et al."; cite-authors-long:"Jaiswal, Khedker, and Mycroft"; cite-label:"Jaiswal, Khedker, \& Mycroft, 2021"; caption:"A Unified Model for Context-Sensitive Program Analyses: The Blind Men and the Elephant&nl;Jaiswal, Khedker, and Mycroft, 2021"; data-line:"FormalBib.bib:7740"; searchterm:"A%20Unified%20Model%20for%20ContextSensitive%20Program%20Analyses%3A%20The%20Blind%20Men%20and%20the%20Elephant%20Jaiswal%2C%20Khedker%2C%20and%20Mycroft%2C%202021"; spellcheck:"false"}
Jaiswal, S., Khedker, U.&nbsp;P., & Mycroft, A.&nbsp;(2021). A Unified Model for Context-Sensitive Program Analyses: The Blind Men and the Elephant. _ACM Computing Surveys_, _54_(6), 114:1–114:37. https://doi.org/[10.1145/3456563](https://dx.doi.org/10.1145/3456563){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jang_moebius_2021"; cite-year:"2021"; cite-authors:"Jang et al."; cite-authors-long:"Jang, Gélineau, Monnier, and Pientka"; cite-label:"Jang, Gélineau, Monnier, \& Pientka, 2021"; caption:"Moebius: Metaprogramming using Contextual Types &ndash; The stage where System F can pattern match on itself (Long Version)&nl;Jang, Gélineau, Monnier, and Pientka, 2021"; data-line:"FormalBib.bib:9370"; searchterm:"Moebius%3A%20Metaprogramming%20using%20Contextual%20Types%20%26ndash%3B%20The%20stage%20where%20System%20F%20can%20pattern%20match%20on%20itself%20Long%20Version%20Jang%2C%20G%C3%A9lineau%2C%20Monnier%2C%20and%20Pientka%2C%202021"; spellcheck:"false"}
Jang, J., Gélineau, S., Monnier, S., & Pientka, B.&nbsp;(2021). Moebius: Metaprogramming using Contextual Types &ndash; The stage where System F can pattern match on itself (Long Version). _arXiv:2111.08099 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2111.08099](http://arxiv.org/abs/2111.08099){.bib-url}
~ end bibitem

~ begin bibitem {id:"janson_sponge-based_2022"; cite-year:"2022"; cite-authors:"Janson and Struck"; cite-authors-long:"Janson and Struck"; cite-label:"Janson \& Struck, 2022"; caption:"Sponge-based Authenticated Encryption: Security against Quantum Attackers&nl;Janson and Struck, 2022"; data-line:"Security.bib:1556"; searchterm:"Spongebased%20Authenticated%20Encryption%3A%20Security%20against%20Quantum%20Attackers%20Janson%20and%20Struck%2C%202022"; spellcheck:"false"}
Janson, C., & Struck, P.&nbsp;(2022). _Sponge-based Authenticated Encryption: Security against Quantum Attackers_ (No. 139). Retrieved from <http://eprint.iacr.org/2022/139>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jeannet_apron_nodate"; cite-year:"2019"; cite-authors:"Jeannet and Miné"; cite-authors-long:"Jeannet and Miné"; cite-label:"Jeannet \& Miné, n.d."; caption:"APRON numerical abstract domain library&nl;Jeannet and Miné, 2019"; data-line:"FormalBib.bib:3200"; searchterm:"APRON%20numerical%20abstract%20domain%20library%20Jeannet%20and%20Min%C3%A9%2C%202019"; spellcheck:"false"}
Jeannet, B., & Miné, A.&nbsp;(n.d.). APRON numerical abstract domain library. Retrieved February 1, 2019, from <http://apron.cri.ensmp.fr/library/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jeong_razzer_2019"; cite-year:"2019"; cite-authors:"Jeong et al."; cite-authors-long:"Jeong, Kim, Shivakumar, Lee, and Shin"; cite-label:"Jeong, Kim, Shivakumar, Lee, \& Shin, 2019"; caption:"Razzer: Finding Kernel Race Bugs through Fuzzing&nl;Jeong, Kim, Shivakumar, Lee, and Shin, 2019"; data-line:"Security.bib:1001"; searchterm:"Razzer%3A%20Finding%20Kernel%20Race%20Bugs%20through%20Fuzzing%20Jeong%2C%20Kim%2C%20Shivakumar%2C%20Lee%2C%20and%20Shin%2C%202019"; spellcheck:"false"}
Jeong, D.&nbsp;R., Kim, K., Shivakumar, B., Lee, B., & Shin, I.&nbsp;(2019). Razzer: Finding Kernel Race Bugs through Fuzzing. In _2019 IEEE Symposium on Security and Privacy (SP)_ (pp. 754–768). San Francisco, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP.2019.00017](https://dx.doi.org/10.1109/SP.2019.00017){.bib-doi}
~ end bibitem

~ begin bibitem {id:"joe_leslie-hurd_slowest_2015"; cite-year:"2015"; cite-authors:"Joe Leslie-Hurd"; cite-authors-long:"Joe Leslie-Hurd"; cite-label:"Joe Leslie-Hurd, 2015"; caption:"The Slowest Software Development Methodology in the World.The Robot Mathematician&nl;Joe Leslie-Hurd, 2015"; data-line:"FormalBib.bib:6333"; searchterm:"The%20Slowest%20Software%20Development%20Methodology%20in%20the%20World.The%20Robot%20Mathematician%20Joe%20LeslieHurd%2C%202015"; spellcheck:"false"}
Joe Leslie-Hurd. (2015, July 19). The Slowest Software Development Methodology in the World.The Robot Mathematician. Retrieved January 10, 2020, from <https://gilith.wordpress.com/2015/07/19/the-slowest-software-development-methodology-in-the-world/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jones_function_2013"; cite-year:"2013"; cite-authors:"Jones"; cite-authors-long:"Jones"; cite-label:"Jones, 2013"; caption:"Function Points As a Universal Software Metric&nl;Jones, 2013"; data-line:"FormalBib.bib:6680"; searchterm:"Function%20Points%20As%20a%20Universal%20Software%20Metric%20Jones%2C%202013"; spellcheck:"false"}
Jones, C.&nbsp;(2013). Function Points As a Universal Software Metric. _SIGSOFT Softw. Eng. Notes_, _38_(4), 1–27. https://doi.org/[10.1145/2492248.2492268](https://dx.doi.org/10.1145/2492248.2492268){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jordan_ultimate_nodate-1"; cite-year:"2021a"; cite-authors:"Jordan"; cite-authors-long:"Jordan"; cite-label:"Jordan, n.d.-a"; caption:"The Ultimate Guide to Open RAN: Open RAN Intelligent Controller (RIC) - Part 1&nl;Jordan, 2021a"; data-line:"Networking.bib:867"; searchterm:"The%20Ultimate%20Guide%20to%20Open%20RAN%3A%20Open%20RAN%20Intelligent%20Controller%20RIC%20%20Part%201%20Jordan%2C%202021a"; spellcheck:"false"}
Jordan, E.&nbsp;(n.d.-a). The Ultimate Guide to Open RAN: Open RAN Intelligent Controller (RIC) - Part 1. Retrieved January 14, 2021, from <https://www.thefastmode.com/expert-opinion/18213-the-ultimate-guide-to-open-ran-open-ran-intelligent-controller-ric-part-1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jordan_ultimate_nodate"; cite-year:"2021b"; cite-authors:"Jordan"; cite-authors-long:"Jordan"; cite-label:"Jordan, n.d.-b"; caption:"The Ultimate Guide to Open RAN: Open RAN Intelligent Controller (RIC) - Part 2: Implementations&nl;Jordan, 2021b"; data-line:"Networking.bib:856"; searchterm:"The%20Ultimate%20Guide%20to%20Open%20RAN%3A%20Open%20RAN%20Intelligent%20Controller%20RIC%20%20Part%202%3A%20Implementations%20Jordan%2C%202021b"; spellcheck:"false"}
Jordan, E.&nbsp;(n.d.-b). The Ultimate Guide to Open RAN: Open RAN Intelligent Controller (RIC) - Part 2: Implementations. Retrieved January 14, 2021, from <https://www.thefastmode.com/expert-opinion/18274-the-ultimate-guide-to-open-ran-open-ran-intelligent-controller-ric-part-2-implementations>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jourdan_verasco_2016"; cite-year:"2016"; cite-authors:"Jourdan"; cite-authors-long:"Jourdan"; cite-label:"Jourdan, 2016"; caption:"Verasco: a Formally Verified C Static Analyzer&nl;Jourdan, 2016"; data-line:"Security.bib:758"; searchterm:"Verasco%3A%20a%20Formally%20Verified%20C%20Static%20Analyzer%20Jourdan%2C%202016"; spellcheck:"false"}
Jourdan, J.-H.&nbsp;(2016). _Verasco: a Formally Verified C Static Analyzer_ (phdthesis). L’université Paris Diderot (Paris 7) Sorbonne Paris Cité, Paris, France. Retrieved from <https://jhjourdan.mketjh.fr/thesis_jhjourdan.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"juglaret_beyond_2017"; cite-year:"2017"; cite-authors:"Juglaret et al."; cite-authors-long:"Juglaret, Hritcu, Amorim, Eng, and Pierce"; cite-label:"Juglaret, Hritcu, Amorim, Eng, \& Pierce, 2017"; caption:"Beyond Good and Evil: Formalizing the Security Guarantees of Compartmentalizing Compilation&nl;Juglaret, Hritcu, Amorim, Eng, and Pierce, 2017"; data-line:"Security.bib:121"; searchterm:"Beyond%20Good%20and%20Evil%3A%20Formalizing%20the%20Security%20Guarantees%20of%20Compartmentalizing%20Compilation%20Juglaret%2C%20Hritcu%2C%20Amorim%2C%20Eng%2C%20and%20Pierce%2C%202017"; spellcheck:"false"}
Juglaret, Y., Hritcu, C., Amorim, A.&nbsp;A.&nbsp;de, Eng, B., & Pierce, B.&nbsp;C.&nbsp;(2017). Beyond Good and Evil: Formalizing the Security Guarantees of Compartmentalizing Compilation. _arXiv:1602.04503 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1602.04503](http://arxiv.org/abs/1602.04503){.bib-url}
~ end bibitem

~ begin bibitem {id:"juglaret_towards_2015"; cite-year:"2015"; cite-authors:"Juglaret et al."; cite-authors-long:"Juglaret, Hritcu, Amorim, Pierce, Spector-Zabusky, and Tolmach"; cite-label:"Juglaret et al., 2015"; caption:"Towards a Fully Abstract Compiler Using Micro-Policies: Secure Compilation for Mutually Distrustful Components&nl;Juglaret, Hritcu, Amorim, Pierce, Spector-Zabusky, and Tolmach, 2015"; data-line:"Security.bib:74"; searchterm:"Towards%20a%20Fully%20Abstract%20Compiler%20Using%20MicroPolicies%3A%20Secure%20Compilation%20for%20Mutually%20Distrustful%20Components%20Juglaret%2C%20Hritcu%2C%20Amorim%2C%20Pierce%2C%20SpectorZabusky%2C%20and%20Tolmach%2C%202015"; spellcheck:"false"}
Juglaret, Y., Hritcu, C., Amorim, A.&nbsp;A.&nbsp;de, Pierce, B.&nbsp;C., Spector-Zabusky, A., & Tolmach, A.&nbsp;(2015). Towards a Fully Abstract Compiler Using Micro-Policies: Secure Compilation for Mutually Distrustful Components. _arXiv:1510.00697 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1510.00697](http://arxiv.org/abs/1510.00697){.bib-url}
~ end bibitem

~ begin bibitem {id:"jung_iris_nodate"; cite-year:"2019"; cite-authors:"Jung"; cite-authors-long:"Jung"; cite-label:"Jung, n.d."; caption:"Iris Project&nl;Jung, 2019"; data-line:"FormalBib.bib:3142"; searchterm:"Iris%20Project%20Jung%2C%202019"; spellcheck:"false"}
Jung, R.&nbsp;(n.d.). Iris Project. Retrieved February 1, 2019, from <https://iris-project.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jung_rustbelt:_2017"; cite-year:"2017"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Jourdan, Krebbers, and Dreyer"; cite-label:"Jung, Jourdan, Krebbers, \& Dreyer, 2017"; caption:"RustBelt: securing the foundations of the rust programming language&nl;Jung, Jourdan, Krebbers, and Dreyer, 2017"; data-line:"FormalBib.bib:1597"; searchterm:"RustBelt%3A%20securing%20the%20foundations%20of%20the%20rust%20programming%20language%20Jung%2C%20Jourdan%2C%20Krebbers%2C%20and%20Dreyer%2C%202017"; spellcheck:"false"}
Jung, R., Jourdan, J.-H., Krebbers, R., & Dreyer, D.&nbsp;(2017). RustBelt: securing the foundations of the rust programming language. _Proceedings of the ACM on Programming Languages_, _2_, 1–34. https://doi.org/[10.1145/3158154](https://dx.doi.org/10.1145/3158154){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_safe_2021"; cite-year:"2021"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Jourdan, Krebbers, and Dreyer"; cite-label:"Jung, Jourdan, Krebbers, \& Dreyer, 2021"; caption:"Safe systems programming in Rust&nl;Jung, Jourdan, Krebbers, and Dreyer, 2021"; data-line:"FormalBib.bib:8018"; searchterm:"Safe%20systems%20programming%20in%20Rust%20Jung%2C%20Jourdan%2C%20Krebbers%2C%20and%20Dreyer%2C%202021"; spellcheck:"false"}
Jung, R., Jourdan, J.-H., Krebbers, R., & Dreyer, D.&nbsp;(2021). Safe systems programming in Rust. _Communications of the ACM_, _64_(4), 144–152. https://doi.org/[10.1145/3418295](https://dx.doi.org/10.1145/3418295){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_2018"; cite-year:"2018a"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer"; cite-label:"Jung et al., 2018a"; caption:"Iris from the ground up: A modular foundation for higher-order concurrent separation logic&nl;Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer, 2018a"; data-line:"FormalBib.bib:1687"; searchterm:"Iris%20from%20the%20ground%20up%3A%20A%20modular%20foundation%20for%20higherorder%20concurrent%20separation%20logic%20Jung%2C%20Krebbers%2C%20Jourdan%2C%20Bizjak%2C%20Birkedal%2C%20and%20Dreyer%2C%202018a"; spellcheck:"false"}
Jung, R., Krebbers, R., Jourdan, J.-H., Bizjak, A., Birkedal, L., & Dreyer, D.&nbsp;(2018a). Iris from the ground up: A modular foundation for higher-order concurrent separation logic. _Journal of Functional Programming_, _28_. https://doi.org/[10.1017/S0956796818000151](https://dx.doi.org/10.1017/S0956796818000151){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_2018-1"; cite-year:"2018b"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer"; cite-label:"Jung et al., 2018b"; caption:"Iris from the ground up: A modular foundation for higher-order concurrent separation logic&nl;Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer, 2018b"; data-line:"FormalBib.bib:4615"; searchterm:"Iris%20from%20the%20ground%20up%3A%20A%20modular%20foundation%20for%20higherorder%20concurrent%20separation%20logic%20Jung%2C%20Krebbers%2C%20Jourdan%2C%20Bizjak%2C%20Birkedal%2C%20and%20Dreyer%2C%202018b"; spellcheck:"false"}
Jung, R., Krebbers, R., Jourdan, J.-H., Bizjak, A., Birkedal, L., & Dreyer, D.&nbsp;(2018b). Iris from the ground up: A modular foundation for higher-order concurrent separation logic. _Journal of Functional Programming_, _28_. https://doi.org/[10.1017/S0956796818000151](https://dx.doi.org/10.1017/S0956796818000151){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kachapova_formalizing_2021"; cite-year:"2021"; cite-authors:"Kachapova"; cite-authors-long:"Kachapova"; cite-label:"Kachapova, 2021"; caption:"Formalizing relations in type theory&nl;Kachapova, 2021"; data-line:"FormalBib.bib:8419"; searchterm:"Formalizing%20relations%20in%20type%20theory%20Kachapova%2C%202021"; spellcheck:"false"}
Kachapova, F.&nbsp;(2021). Formalizing relations in type theory. _arXiv:2102.08595 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.08595](http://arxiv.org/abs/2102.08595){.bib-url}
~ end bibitem

~ begin bibitem {id:"kaiser_destruct_nodate"; cite-year:"2019"; cite-authors:"Kaiser and Ziliani"; cite-authors-long:"Kaiser and Ziliani"; cite-label:"Kaiser \& Ziliani, n.d."; caption:"A “destruct” Tactic for Mtac2 - POPL 2018&nl;Kaiser and Ziliani, 2019"; data-line:"FormalBib.bib:3126"; searchterm:"A%20%E2%80%9Cdestruct%E2%80%9D%20Tactic%20for%20Mtac2%20%20POPL%202018%20Kaiser%20and%20Ziliani%2C%202019"; spellcheck:"false"}
Kaiser, J.-O., & Ziliani, B.&nbsp;(n.d.). A &ldquo;destruct&rdquo; Tactic for Mtac2 - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-a-destruct-tactic-for-mtac2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kamburjan_deductive_2021"; cite-year:"2021"; cite-authors:"Kamburjan and Wasser"; cite-authors-long:"Kamburjan and Wasser"; cite-label:"Kamburjan \& Wasser, 2021"; caption:"Deductive Verification of Programs with Underspecified Semantics by Model Extraction&nl;Kamburjan and Wasser, 2021"; data-line:"FormalBib.bib:8942"; searchterm:"Deductive%20Verification%20of%20Programs%20with%20Underspecified%20Semantics%20by%20Model%20Extraction%20Kamburjan%20and%20Wasser%2C%202021"; spellcheck:"false"}
Kamburjan, E., & Wasser, N.&nbsp;(2021). Deductive Verification of Programs with Underspecified Semantics by Model Extraction. _arXiv:2110.01964 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.01964](http://arxiv.org/abs/2110.01964){.bib-url}
~ end bibitem

~ begin bibitem {id:"kanabar_taming_nodate"; cite-year:"n.d."; cite-authors:"Kanabar et al."; cite-authors-long:"Kanabar, Fox, and Myreen"; cite-label:"Kanabar, Fox, \& Myreen, n.d."; caption:"Taming an Authoritative Armv8 ISA Specification: L3 Validation and CakeML Compiler Verification&nl;Kanabar, Fox, and Myreen, n.d."; data-line:"FormalBib.bib:9917"; searchterm:"Taming%20an%20Authoritative%20Armv8%20ISA%20Specification%3A%20L3%20Validation%20and%20CakeML%20Compiler%20Verification%20Kanabar%2C%20Fox%2C%20and%20Myreen%2C%20n.d."; spellcheck:"false"}
Kanabar, H., Fox, A.&nbsp;C.&nbsp;J., & Myreen, M.&nbsp;O.&nbsp;(n.d.). Taming an Authoritative Armv8 ISA Specification: L3 Validation and CakeML Compiler Verification, 21.
~ end bibitem

~ begin bibitem {id:"kang_crellvm:_2018"; cite-year:"2018"; cite-authors:"J.&nbsp;Kang et al."; cite-authors-long:"J.&nbsp;Kang, Kim, Song, Lee, Park, Shin, et al."; cite-label:"J. Kang et al., 2018"; caption:"Crellvm: Verified Credible Compilation for LLVM&nl;J. Kang, Kim, Song, Lee, Park, Shin, et al., 2018"; data-line:"FormalBib.bib:3741"; searchterm:"Crellvm%3A%20Verified%20Credible%20Compilation%20for%20LLVM%20J.%20Kang%2C%20Kim%2C%20Song%2C%20Lee%2C%20Park%2C%20Shin%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Kang, J., Kim, Y., Song, Y., Lee, J., Park, S., Shin, M.&nbsp;D., … Yi, K.&nbsp;(2018). Crellvm: Verified Credible Compilation for LLVM.&nbsp;In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 631–645). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192377](https://dx.doi.org/10.1145/3192366.3192377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kang_formal_2013"; cite-year:"2013"; cite-authors:"M.&nbsp;Kang et al."; cite-authors-long:"M.&nbsp;Kang, Kang, Hwang, Kim, Nam, Shin, and Choi"; cite-label:"M. Kang et al., 2013"; caption:"Formal Modeling and Verification of SDN-OpenFlow&nl;M. Kang, Kang, Hwang, Kim, Nam, Shin, and Choi, 2013"; data-line:"Networking.bib:575"; searchterm:"Formal%20Modeling%20and%20Verification%20of%20SDNOpenFlow%20M.%20Kang%2C%20Kang%2C%20Hwang%2C%20Kim%2C%20Nam%2C%20Shin%2C%20and%20Choi%2C%202013"; spellcheck:"false"}
Kang, M., Kang, E.-Y., Hwang, D.-Y., Kim, B.-J., Nam, K.-H., Shin, M.-K., & Choi, J.-Y.&nbsp;(2013). _Formal Modeling and Verification of SDN-OpenFlow_. https://doi.org/[10.1109/ICST.2013.69](https://dx.doi.org/10.1109/ICST.2013.69){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kastner_program_2015"; cite-year:"2015"; cite-authors:"Daniel Kästner and Pohland"; cite-authors-long:"Daniel Kästner and Pohland"; cite-label:"Daniel Kästner \& Pohland, 2015"; caption:"Program Analysis on Evolving Software&nl;Daniel Kästner and Pohland, 2015"; data-line:"FormalBib.bib:1287"; searchterm:"Program%20Analysis%20on%20Evolving%20Software%20Daniel%20K%C3%A4stner%20and%20Pohland%2C%202015"; spellcheck:"false"}
Kästner, D., & Pohland, J.&nbsp;(2015). Program Analysis on Evolving Software. In M.&nbsp;Roy (Ed.), _CARS 2015 - Critical Automotive applications: Robustness &amp; Safety_. Paris, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01192985>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kastner_astree:_nodate"; cite-year:"n.d."; cite-authors:"D Kästner et al."; cite-authors-long:"D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al."; cite-label:"D Kästner et al., n.d."; caption:"Astree: Proving the Absence of Runtime Errors&nl;D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al., n.d."; data-line:"FormalBib.bib:1259"; searchterm:"Astree%3A%20Proving%20the%20Absence%20of%20Runtime%20Errors%20D%20K%C3%A4stner%2C%20Wilhelm%2C%20Nenova%2C%20Min%C3%A9%2C%20Rival%2C%20Mauborgne%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Kästner, D., Wilhelm, S., Nenova, S., Miné, A., Rival, X., Mauborgne, L., … Cousot, R.&nbsp;(n.d.). Astree: Proving the Absence of Runtime Errors, 9. Retrieved from <https://www.di.ens.fr/~rival/papers/erts10.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kaur_network_2014"; cite-year:"2014"; cite-authors:"Kaur et al."; cite-authors-long:"Kaur, Singh, and Ghumman"; cite-label:"Kaur, Singh, \& Ghumman, 2014"; caption:"Network Programmability Using POX Controller&nl;Kaur, Singh, and Ghumman, 2014"; data-line:"Networking.bib:91"; searchterm:"Network%20Programmability%20Using%20POX%20Controller%20Kaur%2C%20Singh%2C%20and%20Ghumman%2C%202014"; spellcheck:"false"}
Kaur, S., Singh, J., & Ghumman, N.&nbsp;(2014). _Network Programmability Using POX Controller_. https://doi.org/[10.13140/RG.2.1.1950.6961](https://dx.doi.org/10.13140/RG.2.1.1950.6961){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kell_missing_2016"; cite-year:"2016"; cite-authors:"Kell et al."; cite-authors-long:"Kell, Mulligan, and Sewell"; cite-label:"Kell, Mulligan, \& Sewell, 2016"; caption:"The Missing Link: Explaining ELF Static Linking, Semantically&nl;Kell, Mulligan, and Sewell, 2016"; data-line:"FormalBib.bib:5053"; searchterm:"The%20Missing%20Link%3A%20Explaining%20ELF%20Static%20Linking%2C%20Semantically%20Kell%2C%20Mulligan%2C%20and%20Sewell%2C%202016"; spellcheck:"false"}
Kell, S., Mulligan, D.&nbsp;P., & Sewell, P.&nbsp;(2016). The Missing Link: Explaining ELF Static Linking, Semantically. In _Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications_ (pp. 607–623). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2983990.2983996](https://dx.doi.org/10.1145/2983990.2983996){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kennedy_types_2010"; cite-year:"2010"; cite-authors:"Kennedy"; cite-authors-long:"Kennedy"; cite-label:"Kennedy, 2010"; caption:"Types for Units-of-Measure: Theory and Practice&nl;Kennedy, 2010"; data-line:"FormalBib.bib:6544"; searchterm:"Types%20for%20UnitsofMeasure%3A%20Theory%20and%20Practice%20Kennedy%2C%202010"; spellcheck:"false"}
Kennedy, A.&nbsp;(2010). Types for Units-of-Measure: Theory and Practice. In Z.&nbsp;Horváth, R.&nbsp;Plasmeijer, & V.&nbsp;Zsók (Eds.), _Central European Functional Programming School: Third Summer School, CEFP 2009, Budapest, Hungary, May 21-23, 2009 and Komárno, Slovakia, May 25-30, 2009, Revised Selected Lectures_ (pp. 268–305). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-17685-2_8](https://dx.doi.org/10.1007/978-3-642-17685-2_8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"khan_executable_2022"; cite-year:"2022"; cite-authors:"Khan et al."; cite-authors-long:"Khan, Hou, Sanan, Nebhen, Liu, and Tiu"; cite-label:"Khan et al., 2022"; caption:"An Executable Formal Model of the VHDL in Isabelle/HOL&nl;Khan, Hou, Sanan, Nebhen, Liu, and Tiu, 2022"; data-line:"FormalBib.bib:10073"; searchterm:"An%20Executable%20Formal%20Model%20of%20the%20VHDL%20in%20Isabelle%2FHOL%20Khan%2C%20Hou%2C%20Sanan%2C%20Nebhen%2C%20Liu%2C%20and%20Tiu%2C%202022"; spellcheck:"false"}
Khan, W., Hou, Z., Sanan, D., Nebhen, J., Liu, Y., & Tiu, A.&nbsp;(2022). An Executable Formal Model of the VHDL in Isabelle/HOL.&nbsp;_arXiv:2202.04192 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.04192](http://arxiv.org/abs/2202.04192){.bib-url}
~ end bibitem

~ begin bibitem {id:"khayam_jskel_2021"; cite-year:"2021"; cite-authors:"Khayam et al."; cite-authors-long:"Khayam, Noizet, and Schmitt"; cite-label:"Khayam, Noizet, \& Schmitt, 2021"; caption:"JSkel: Towards a Formalization of JavaScript’s Semantics&nl;Khayam, Noizet, and Schmitt, 2021"; data-line:"FormalBib.bib:352"; searchterm:"JSkel%3A%20Towards%20a%20Formalization%20of%20JavaScript%E2%80%99s%20Semantics%20Khayam%2C%20Noizet%2C%20and%20Schmitt%2C%202021"; spellcheck:"false"}
Khayam, A., Noizet, L., & Schmitt, A.&nbsp;(2021). JSkel: Towards a Formalization of JavaScript’s Semantics, 22.
~ end bibitem

~ begin bibitem {id:"kiaei_rewrite_2020"; cite-year:"2020"; cite-authors:"Kiaei et al."; cite-authors-long:"Kiaei, Breunesse, Ahmadi, Schaumont, and Woudenberg"; cite-label:"Kiaei, Breunesse, Ahmadi, Schaumont, \& Woudenberg, 2020"; caption:"Rewrite to Reinforce: Rewriting the Binary to Apply Countermeasures against Fault Injection&nl;Kiaei, Breunesse, Ahmadi, Schaumont, and Woudenberg, 2020"; data-line:"LanguageTools.bib:1361"; searchterm:"Rewrite%20to%20Reinforce%3A%20Rewriting%20the%20Binary%20to%20Apply%20Countermeasures%20against%20Fault%20Injection%20Kiaei%2C%20Breunesse%2C%20Ahmadi%2C%20Schaumont%2C%20and%20Woudenberg%2C%202020"; spellcheck:"false"}
Kiaei, P., Breunesse, C.-B., Ahmadi, M., Schaumont, P., & Woudenberg, J.&nbsp;van. (2020). Rewrite to Reinforce: Rewriting the Binary to Apply Countermeasures against Fault Injection. _arXiv:2011.14067 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2011.14067](http://arxiv.org/abs/2011.14067){.bib-url}
~ end bibitem

~ begin bibitem {id:"kim_experience-driven_2021"; cite-year:"2021"; cite-authors:"H.&nbsp;Kim et al."; cite-authors-long:"H.&nbsp;Kim, Chen, Brassil, and Rexford"; cite-label:"H. Kim, Chen, Brassil, \& Rexford, 2021"; caption:"Experience-Driven Research on Programmable Networks&nl;H. Kim, Chen, Brassil, and Rexford, 2021"; data-line:"Networking.bib:350"; searchterm:"ExperienceDriven%20Research%20on%20Programmable%20Networks%20H.%20Kim%2C%20Chen%2C%20Brassil%2C%20and%20Rexford%2C%202021"; spellcheck:"false"}
Kim, H., Chen, X., Brassil, J., & Rexford, J.&nbsp;(2021). Experience-Driven Research on Programmable Networks. _SIGCOMM Computer Communications Review_, 7.
~ end bibitem

~ begin bibitem {id:"kim_kinetic_nodate"; cite-year:"n.d."; cite-authors:"H.&nbsp;Kim et al."; cite-authors-long:"H.&nbsp;Kim, Reich, Gupta, Shahbaz, Feamster, and Clark"; cite-label:"H. Kim et al., n.d."; caption:"Kinetic: Veriﬁable Dynamic Network Control&nl;H. Kim, Reich, Gupta, Shahbaz, Feamster, and Clark, n.d."; data-line:"Networking.bib:646"; searchterm:"Kinetic%3A%20Veri%EF%AC%81able%20Dynamic%20Network%20Control%20H.%20Kim%2C%20Reich%2C%20Gupta%2C%20Shahbaz%2C%20Feamster%2C%20and%20Clark%2C%20n.d."; spellcheck:"false"}
Kim, H., Reich, J., Gupta, A., Shahbaz, M., Feamster, N., & Clark, R.&nbsp;(n.d.). Kinetic: Veriﬁable Dynamic Network Control, 15.
~ end bibitem

~ begin bibitem {id:"kim_deterministic_2020"; cite-year:"2020a"; cite-authors:"S.&nbsp;K.&nbsp;Kim et al."; cite-authors-long:"S.&nbsp;K.&nbsp;Kim, Venet, and Thakur"; cite-label:"S. K. Kim, Venet, \& Thakur, 2020a"; caption:"Deterministic Parallel Fixpoint Computation&nl;S. K. Kim, Venet, and Thakur, 2020a"; data-line:"FormalBib.bib:9203"; searchterm:"Deterministic%20Parallel%20Fixpoint%20Computation%20S.%20K.%20Kim%2C%20Venet%2C%20and%20Thakur%2C%202020a"; spellcheck:"false"}
Kim, S.&nbsp;K., Venet, A.&nbsp;J., & Thakur, A.&nbsp;V.&nbsp;(2020a). Deterministic Parallel Fixpoint Computation. _Proceedings of the ACM on Programming Languages_, _4_, 1–33. https://doi.org/[10.1145/3371082](https://dx.doi.org/10.1145/3371082){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kim_memory-efficient_2020"; cite-year:"2020b"; cite-authors:"S.&nbsp;K.&nbsp;Kim et al."; cite-authors-long:"S.&nbsp;K.&nbsp;Kim, Venet, and Thakur"; cite-label:"S. K. Kim, Venet, \& Thakur, 2020b"; caption:"Memory-Efficient Fixpoint Computation&nl;S. K. Kim, Venet, and Thakur, 2020b"; data-line:"FormalBib.bib:9189"; searchterm:"MemoryEfficient%20Fixpoint%20Computation%20S.%20K.%20Kim%2C%20Venet%2C%20and%20Thakur%2C%202020b"; spellcheck:"false"}
Kim, S.&nbsp;K., Venet, A.&nbsp;J., & Thakur, A.&nbsp;V.&nbsp;(2020b). Memory-Efficient Fixpoint Computation. _arXiv:2009.05865 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2009.05865](http://arxiv.org/abs/2009.05865){.bib-url}
~ end bibitem

~ begin bibitem {id:"kimura_decidability_2021"; cite-year:"2021"; cite-authors:"Kimura and Tatsuta"; cite-authors-long:"Kimura and Tatsuta"; cite-label:"Kimura \& Tatsuta, 2021"; caption:"Decidability for Entailments of Symbolic Heaps with Arrays&nl;Kimura and Tatsuta, 2021"; data-line:"FormalBib.bib:275"; searchterm:"Decidability%20for%20Entailments%20of%20Symbolic%20Heaps%20with%20Arrays%20Kimura%20and%20Tatsuta%2C%202021"; spellcheck:"false"}
Kimura, D., & Tatsuta, M.&nbsp;(2021). Decidability for Entailments of Symbolic Heaps with Arrays. _Logical Methods in Computer Science_, _17_(2), 33. https://doi.org/[DOI:10.23638/LMCS-17(2:15)2021](https://dx.doi.org/DOI:10.23638/LMCS-17%282:15%292021){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kim_convolutional_2014"; cite-year:"2014"; cite-authors:"Y.&nbsp;Kim"; cite-authors-long:"Y.&nbsp;Kim"; cite-label:"Y. Kim, 2014"; caption:"Convolutional Neural Networks for Sentence Classification&nl;Y. Kim, 2014"; data-line:"Security.bib:1091"; searchterm:"Convolutional%20Neural%20Networks%20for%20Sentence%20Classification%20Y.%20Kim%2C%202014"; spellcheck:"false"}
Kim, Y.&nbsp;(2014). Convolutional Neural Networks for Sentence Classification. _arXiv:1408.5882 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1408.5882](http://arxiv.org/abs/1408.5882){.bib-url}
~ end bibitem

~ begin bibitem {id:"kirschenbaum_verifying_2009"; cite-year:"2009"; cite-authors:"Kirschenbaum et al."; cite-authors-long:"Kirschenbaum, Adcock, Bronish, Smith, Harton, Sitaraman, and Weide"; cite-label:"Kirschenbaum et al., 2009"; caption:"Verifying Component-Based Software: Deep Mathematics or Simple Bookkeeping?&nl;Kirschenbaum, Adcock, Bronish, Smith, Harton, Sitaraman, and Weide, 2009"; data-line:"FormalBib.bib:5858"; searchterm:"Verifying%20ComponentBased%20Software%3A%20Deep%20Mathematics%20or%20Simple%20Bookkeeping%3F%20Kirschenbaum%2C%20Adcock%2C%20Bronish%2C%20Smith%2C%20Harton%2C%20Sitaraman%2C%20and%20Weide%2C%202009"; spellcheck:"false"}
Kirschenbaum, J., Adcock, B., Bronish, D., Smith, H., Harton, H., Sitaraman, M., & Weide, B.&nbsp;W.&nbsp;(2009). Verifying Component-Based Software: Deep Mathematics or Simple Bookkeeping? In S.&nbsp;H.&nbsp;Edwards & G.&nbsp;Kulczycki (Eds.), _Formal Foundations of Reuse and Domain Engineering_ (pp. 31–40). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-04211-9_4](https://dx.doi.org/10.1007/978-3-642-04211-9_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kj_specication_nodate"; cite-year:"n.d."; cite-authors:"Kj et al."; cite-authors-long:"Kj, Madsen, and Battle"; cite-label:"Kj, Madsen, \& Battle, n.d."; caption:"The Speciﬁcation Language Server Protocol: A Proposal for Standardised LSP Extensions&nl;Kj, Madsen, and Battle, n.d."; data-line:"LanguageTools.bib:164"; searchterm:"The%20Speci%EF%AC%81cation%20Language%20Server%20Protocol%3A%20A%20Proposal%20for%20Standardised%20LSP%20Extensions%20Kj%2C%20Madsen%2C%20and%20Battle%2C%20n.d."; spellcheck:"false"}
Kj, J., Madsen, F.&nbsp;P., & Battle, N.&nbsp;(n.d.). The Speciﬁcation Language Server Protocol: A Proposal for Standardised LSP Extensions. _F-IDE2021_, 16.
~ end bibitem

~ begin bibitem {id:"klein_formally_2018"; cite-year:"2018"; cite-authors:"Klein et al."; cite-authors-long:"Klein, Andronick, Fernandez, Kuz, Murray, and Heiser"; cite-label:"Klein et al., 2018"; caption:"Formally verified software in the real world&nl;Klein, Andronick, Fernandez, Kuz, Murray, and Heiser, 2018"; data-line:"FormalBib.bib:6898"; searchterm:"Formally%20verified%20software%20in%20the%20real%20world%20Klein%2C%20Andronick%2C%20Fernandez%2C%20Kuz%2C%20Murray%2C%20and%20Heiser%2C%202018"; spellcheck:"false"}
Klein, G., Andronick, J., Fernandez, M., Kuz, I., Murray, T., & Heiser, G.&nbsp;(2018). Formally verified software in the real world. _Communications of the ACM_, _61_(10), 68–77. https://doi.org/[10.1145/3230627](https://dx.doi.org/10.1145/3230627){.bib-doi}
~ end bibitem

~ begin bibitem {id:"klein_gerwin_provably_2017"; cite-year:"2017"; cite-authors:"Klein Gerwin et al."; cite-authors-long:"Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam"; cite-label:"Klein Gerwin et al., 2017"; caption:"Provably trustworthy systems&nl;Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam, 2017"; data-line:"FormalBib.bib:2329"; searchterm:"Provably%20trustworthy%20systems%20Klein%20Gerwin%2C%20Andronick%20June%2C%20Keller%20Gabriele%2C%20Matichuk%20Daniel%2C%20Murray%20Toby%2C%20and%20O%E2%80%99Connor%20Liam%2C%202017"; spellcheck:"false"}
Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, & O’Connor Liam. (2017). Provably trustworthy systems. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150404. https://doi.org/[10.1098/rsta.2015.0404](https://dx.doi.org/10.1098/rsta.2015.0404){.bib-doi}
~ end bibitem

~ begin bibitem {id:"knaggs_practical_1993"; cite-year:"1993"; cite-authors:"Knaggs"; cite-authors-long:"Knaggs"; cite-label:"Knaggs, 1993"; caption:"Practical and theoretical aspects of FORTH software development&nl;Knaggs, 1993"; data-line:"FormalBib.bib:4371"; searchterm:"Practical%20and%20theoretical%20aspects%20of%20FORTH%20software%20development%20Knaggs%2C%201993"; spellcheck:"false"}
Knaggs, P.&nbsp;J.&nbsp;(1993). Practical and theoretical aspects of FORTH software development.
~ end bibitem

~ begin bibitem {id:"knuppel_how_2021"; cite-year:"2021"; cite-authors:"Knüppel et al."; cite-authors-long:"Knüppel, Schaer, and Schaefer"; cite-label:"Knüppel, Schaer, \& Schaefer, 2021"; caption:"How much Specification is Enough? Mutation Analysis for Software Contracts&nl;Knüppel, Schaer, and Schaefer, 2021"; data-line:"FormalBib.bib:7840"; searchterm:"How%20much%20Specification%20is%20Enough%3F%20Mutation%20Analysis%20for%20Software%20Contracts%20Kn%C3%BCppel%2C%20Schaer%2C%20and%20Schaefer%2C%202021"; spellcheck:"false"}
Knüppel, A., Schaer, L., & Schaefer, I.&nbsp;(2021). How much Specification is Enough? Mutation Analysis for Software Contracts. In _2021 IEEE/ACM 9th International Conference on Formal Methods in Software Engineering (FormaliSE)_ (pp. 42–53). https://doi.org/[10.1109/FormaliSE52586.2021.00011](https://dx.doi.org/10.1109/FormaliSE52586.2021.00011){.bib-doi}
~ end bibitem

~ begin bibitem {id:"koch_mechanizing_nodate"; cite-year:"n.d."; cite-authors:"Koch"; cite-authors-long:"Koch"; cite-label:"Koch, n.d."; caption:"Mechanizing Second-Order Logic in Coq&nl;Koch, n.d."; data-line:"FormalBib.bib:9008"; searchterm:"Mechanizing%20SecondOrder%20Logic%20in%20Coq%20Koch%2C%20n.d."; spellcheck:"false"}
Koch, M.&nbsp;(n.d.). _Mechanizing Second-Order Logic in Coq_ (Bachelor’s Thesis). Saarland University, 8/23/2021.
~ end bibitem

~ begin bibitem {id:"koenig_programming_2016"; cite-year:"2016"; cite-authors:"Jason Koenig and Leino"; cite-authors-long:"Jason Koenig and Leino"; cite-label:"Jason Koenig \& Leino, 2016"; caption:"Programming Language Features for Refinement&nl;Jason Koenig and Leino, 2016"; data-line:"FormalBib.bib:2578"; searchterm:"Programming%20Language%20Features%20for%20Refinement%20Jason%20Koenig%20and%20Leino%2C%202016"; spellcheck:"false"}
Koenig, J., & Leino, R.&nbsp;(2016). Programming Language Features for Refinement. Retrieved from <https://www.microsoft.com/en-us/research/publication/programming-language-features-refinement/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"koenig_compcerto_2021"; cite-year:"2021"; cite-authors:"Jérémie Koenig and Shao"; cite-authors-long:"Jérémie Koenig and Shao"; cite-label:"Jérémie Koenig \& Shao, 2021"; caption:"CompCertO: Compiling Certified Open C Components&nl;Jérémie Koenig and Shao, 2021"; data-line:"FormalBib.bib:7957"; searchterm:"CompCertO%3A%20Compiling%20Certified%20Open%20C%20Components%20J%C3%A9r%C3%A9mie%20Koenig%20and%20Shao%2C%202021"; spellcheck:"false"}
Koenig, J., & Shao, Z.&nbsp;(2021). CompCertO: Compiling Certified Open C Components, 15.
~ end bibitem

~ begin bibitem {id:"koh_c_2019"; cite-year:"2019"; cite-authors:"Koh et al."; cite-authors-long:"Koh, Li, Li, Xia, Beringer, Honoré, et al."; cite-label:"Koh et al., 2019"; caption:"From C to Interaction Trees: Specifying, Verifying, and Testing a Networked Server&nl;Koh, Li, Li, Xia, Beringer, Honoré, et al., 2019"; data-line:"FormalBib.bib:4445"; searchterm:"From%20C%20to%20Interaction%20Trees%3A%20Specifying%2C%20Verifying%2C%20and%20Testing%20a%20Networked%20Server%20Koh%2C%20Li%2C%20Li%2C%20Xia%2C%20Beringer%2C%20Honor%C3%A9%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Koh, N., Li, Y., Li, Y., Xia, L., Beringer, L., Honoré, W., … Zdancewic, S.&nbsp;(2019). From C to Interaction Trees: Specifying, Verifying, and Testing a Networked Server. In _Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 234–248). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3293880.3294106](https://dx.doi.org/10.1145/3293880.3294106){.bib-doi}
~ end bibitem

~ begin bibitem {id:"komel_meta-analysis_2021"; cite-year:"2021"; cite-authors:"Komel"; cite-authors-long:"Komel"; cite-label:"Komel, 2021"; caption:"META-ANALYSIS OF TYPE THEORIES WITH AN APPLICATION TO THE DESIGN OF FORMAL PROOFS&nl;Komel, 2021"; data-line:"FormalBib.bib:9524"; searchterm:"METAANALYSIS%20OF%20TYPE%20THEORIES%20WITH%20AN%20APPLICATION%20TO%20THE%20DESIGN%20OF%20FORMAL%20PROOFS%20Komel%2C%202021"; spellcheck:"false"}
Komel, A.&nbsp;P.&nbsp;(2021). META-ANALYSIS OF TYPE THEORIES WITH AN APPLICATION TO THE DESIGN OF FORMAL PROOFS, 194.
~ end bibitem

~ begin bibitem {id:"konecny_extracting_2022"; cite-year:"2022"; cite-authors:"Konečný et al."; cite-authors-long:"Konečný, Park, and Thies"; cite-label:"Konečný, Park, \& Thies, 2022"; caption:"Extracting efficient exact real number computation from proofs in constructive type theory&nl;Konečný, Park, and Thies, 2022"; data-line:"FormalBib.bib:9880"; searchterm:"Extracting%20efficient%20exact%20real%20number%20computation%20from%20proofs%20in%20constructive%20type%20theory%20Kone%C4%8Dn%C3%BD%2C%20Park%2C%20and%20Thies%2C%202022"; spellcheck:"false"}
Konečný, M., Park, S., & Thies, H.&nbsp;(2022). Extracting efficient exact real number computation from proofs in constructive type theory. _arXiv:2202.00891 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.00891](http://arxiv.org/abs/2202.00891){.bib-url}
~ end bibitem

~ begin bibitem {id:"korczynski_comparison_2019"; cite-year:"2019"; cite-authors:"Korczynski"; cite-authors-long:"Korczynski"; cite-label:"Korczynski, 2019"; caption:"Comparison of the LLVM IR generated by three binary-to-llvm translators&nl;Korczynski, 2019"; data-line:"Security.bib:1184"; searchterm:"Comparison%20of%20the%20LLVM%20IR%20generated%20by%20three%20binarytollvm%20translators%20Korczynski%2C%202019"; spellcheck:"false"}
Korczynski, D.&nbsp;(2019, September 17). Comparison of the LLVM IR generated by three binary-to-llvm translators. Retrieved February 17, 2021, from <https://adalogics.com/blog/binary-to-llvm-comparison>{.bib-url}
~ end bibitem

~ begin bibitem {id:"korencik_decompiling_2019"; cite-year:"2019"; cite-authors:"Korencik and University"; cite-authors-long:"Korencik and University"; cite-label:"Korencik \& University, 2019"; caption:"Decompiling Binaries into LLVM IR Using McSema and Dyninst&nl;Korencik and University, 2019"; data-line:"LanguageTools.bib:655"; searchterm:"Decompiling%20Binaries%20into%20LLVM%20IR%20Using%20McSema%20and%20Dyninst%20Korencik%20and%20University%2C%202019"; spellcheck:"false"}
Korencik, L., & University, M.&nbsp;(2019). _Decompiling Binaries into LLVM IR Using McSema and Dyninst_ (Diploma). Masaryk University. Retrieved from <https://is.muni.cz/th/pxe1j/thesis.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"krebbers_diaframe_nodate"; cite-year:"2021"; cite-authors:"Krebbers"; cite-authors-long:"Krebbers"; cite-label:"Krebbers, n.d."; caption:"Diaframe: Automated Verification of Fine-Grained Concurrent Programs in Iris&nl;Krebbers, 2021"; data-line:"FormalBib.bib:9309"; searchterm:"Diaframe%3A%20Automated%20Verification%20of%20FineGrained%20Concurrent%20Programs%20in%20Iris%20Krebbers%2C%202021"; spellcheck:"false"}
Krebbers, R.&nbsp;(n.d.). Diaframe: Automated Verification of Fine-Grained Concurrent Programs in Iris. Retrieved December 7, 2021, from <https://robbertkrebbers.nl/research/articles/diaframe.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"krebbers_mosel_2018"; cite-year:"2018"; cite-authors:"Krebbers et al."; cite-authors-long:"Krebbers, Jourdan, Jung, Tassarotti, Kaiser, Timany, et al."; cite-label:"Krebbers et al., 2018"; caption:"MoSeL: a general, extensible modal framework for interactive proofs in separation logic&nl;Krebbers, Jourdan, Jung, Tassarotti, Kaiser, Timany, et al., 2018"; data-line:"FormalBib.bib:6164"; searchterm:"MoSeL%3A%20a%20general%2C%20extensible%20modal%20framework%20for%20interactive%20proofs%20in%20separation%20logic%20Krebbers%2C%20Jourdan%2C%20Jung%2C%20Tassarotti%2C%20Kaiser%2C%20Timany%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Krebbers, R., Jourdan, J.-H., Jung, R., Tassarotti, J., Kaiser, J.-O., Timany, A., … Dreyer, D.&nbsp;(2018). MoSeL: a general, extensible modal framework for interactive proofs in separation logic. _Proceedings of the ACM on Programming Languages_, _2_, 1–30. https://doi.org/[10.1145/3236772](https://dx.doi.org/10.1145/3236772){.bib-doi}
~ end bibitem

~ begin bibitem {id:"davenport_computer_2011"; cite-year:"2011a"; cite-authors:"Krebbers and Spitters"; cite-authors-long:"Krebbers and Spitters"; cite-label:"Krebbers \& Spitters, 2011a"; caption:"Computer Certified Efficient Exact Reals in Coq&nl;Krebbers and Spitters, 2011a"; data-line:"FormalBib.bib:4410"; searchterm:"Computer%20Certified%20Efficient%20Exact%20Reals%20in%20Coq%20Krebbers%20and%20Spitters%2C%202011a"; spellcheck:"false"}
Krebbers, R., & Spitters, B.&nbsp;(2011a). Computer Certified Efficient Exact Reals in Coq. In J.&nbsp;H.&nbsp;Davenport, W.&nbsp;M.&nbsp;Farmer, J.&nbsp;Urban, & F.&nbsp;Rabe (Eds.), _Intelligent Computer Mathematics_ (Vol. 6824, pp. 90–106). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-22673-1_7](https://dx.doi.org/10.1007/978-3-642-22673-1_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krebbers_type_2011"; cite-year:"2011b"; cite-authors:"Krebbers and Spitters"; cite-authors-long:"Krebbers and Spitters"; cite-label:"Krebbers \& Spitters, 2011b"; caption:"Type classes for efficient exact real arithmetic in Coq&nl;Krebbers and Spitters, 2011b"; data-line:"FormalBib.bib:3433"; searchterm:"Type%20classes%20for%20efficient%20exact%20real%20arithmetic%20in%20Coq%20Krebbers%20and%20Spitters%2C%202011b"; spellcheck:"false"}
Krebbers, R., & Spitters, B.&nbsp;(2011b). Type classes for efficient exact real arithmetic in Coq. _arXiv:1106.3448 \[cs, Math\]_. https://doi.org/[10.2168/LMCS-9(1:01)2013](https://dx.doi.org/10.2168/LMCS-9%281:01%292013){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krishnan_modelling_2018"; cite-year:"2018"; cite-authors:"Krishnan and Lalithambika"; cite-authors-long:"Krishnan and Lalithambika"; cite-label:"Krishnan \& Lalithambika, 2018"; caption:"Modelling and validating 1553B protocol using the SPIN model checker&nl;Krishnan and Lalithambika, 2018"; data-line:"FormalBib.bib:1614"; searchterm:"Modelling%20and%20validating%201553B%20protocol%20using%20the%20SPIN%20model%20checker%20Krishnan%20and%20Lalithambika%2C%202018"; spellcheck:"false"}
Krishnan, R., & Lalithambika, V.&nbsp;R.&nbsp;(2018). Modelling and validating 1553B protocol using the SPIN model checker. In _2018 10th International Conference on Communication Systems &amp; Networks (COMSNETS)_ (pp. 472–475). Bengaluru: IEEE.&nbsp;https://doi.org/[10.1109/COMSNETS.2018.8328247](https://dx.doi.org/10.1109/COMSNETS.2018.8328247){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kruger_cognicrypt_2017"; cite-year:"2017"; cite-authors:"Kruger et al."; cite-authors-long:"Kruger, Nadi, Reif, Ali, Mezini, Bodden, et al."; cite-label:"Kruger et al., 2017"; caption:"CogniCrypt: Supporting developers in using cryptography&nl;Kruger, Nadi, Reif, Ali, Mezini, Bodden, et al., 2017"; data-line:"LanguageTools.bib:1021"; searchterm:"CogniCrypt%3A%20Supporting%20developers%20in%20using%20cryptography%20Kruger%2C%20Nadi%2C%20Reif%2C%20Ali%2C%20Mezini%2C%20Bodden%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Kruger, S., Nadi, S., Reif, M., Ali, K., Mezini, M., Bodden, E., … Kamath, R.&nbsp;(2017). CogniCrypt: Supporting developers in using cryptography. In _2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)_ (pp. 931–936). Urbana, IL: IEEE.&nbsp;https://doi.org/[10.1109/ASE.2017.8115707](https://dx.doi.org/10.1109/ASE.2017.8115707){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kruger_crysl_2019"; cite-year:"2019"; cite-authors:"Krüger et al."; cite-authors-long:"Krüger, Späth, Ali, Bodden, and Mezini"; cite-label:"Krüger, Späth, Ali, Bodden, \& Mezini, 2019"; caption:"CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs&nl;Krüger, Späth, Ali, Bodden, and Mezini, 2019"; data-line:"Security.bib:351"; searchterm:"CrySL%3A%20An%20Extensible%20Approach%20to%20Validating%20the%20Correct%20Usage%20of%20Cryptographic%20APIs%20Kr%C3%BCger%2C%20Sp%C3%A4th%2C%20Ali%2C%20Bodden%2C%20and%20Mezini%2C%202019"; spellcheck:"false"}
Krüger, S., Späth, J., Ali, K., Bodden, E., & Mezini, M.&nbsp;(2019). CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs. _IEEE Transactions on Software Engineering_, 1–1. https://doi.org/[10.1109/TSE.2019.2948910](https://dx.doi.org/10.1109/TSE.2019.2948910){.bib-doi}
~ end bibitem

~ begin bibitem {id:"MSR:dafny:source"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"n.d.-a"; caption:"Dafny Source Code&nl;n.d., "; data-line:"DafnyRef.bib:11"; searchterm:"Dafny%20Source%20Code%20n.d.%2C%20"; spellcheck:"false"}
K.&nbsp;Rustan M.&nbsp;Leino. (n.d.-a). Dafny Source Code.
~ end bibitem

~ begin bibitem {id:"kubota_foundations_2016"; cite-year:"2016"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, 2016"; caption:"Foundations of Mathematics&nl;Kubota, 2016"; data-line:"FormalBib.bib:3798"; searchterm:"Foundations%20of%20Mathematics%20Kubota%2C%202016"; spellcheck:"false"}
Kubota, K.&nbsp;(2016). Foundations of Mathematics. https://doi.org/[10.4444/100.111](https://dx.doi.org/10.4444/100.111){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kubota_foundations_nodate"; cite-year:"2019"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, n.d."; caption:"Foundations of Mathematics – Owl of Minerva Press&nl;Kubota, 2019"; data-line:"FormalBib.bib:3117"; searchterm:"Foundations%20of%20Mathematics%20%E2%80%93%20Owl%20of%20Minerva%20Press%20Kubota%2C%202019"; spellcheck:"false"}
Kubota, K.&nbsp;(n.d.). Foundations of Mathematics – Owl of Minerva Press. Retrieved February 1, 2019, from <http://owlofminerva.net/foundations-of-mathematics/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kulik_survey_2021"; cite-year:"2021"; cite-authors:"Kulik et al."; cite-authors-long:"Kulik, Dongol, Larsen, Macedo, Schneider, Tran-Jørgensen, and Woodcock"; cite-label:"Kulik et al., 2021"; caption:"A Survey of Practical Formal Methods for Security&nl;Kulik, Dongol, Larsen, Macedo, Schneider, Tran-Jørgensen, and Woodcock, 2021"; data-line:"FormalBib.bib:7133"; searchterm:"A%20Survey%20of%20Practical%20Formal%20Methods%20for%20Security%20Kulik%2C%20Dongol%2C%20Larsen%2C%20Macedo%2C%20Schneider%2C%20TranJ%C3%B8rgensen%2C%20and%20Woodcock%2C%202021"; spellcheck:"false"}
Kulik, T., Dongol, B., Larsen, P.&nbsp;G., Macedo, H.&nbsp;D., Schneider, S., Tran-Jørgensen, P.&nbsp;W.&nbsp;V., & Woodcock, J.&nbsp;(2021). A Survey of Practical Formal Methods for Security. _arXiv:2109.01362 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.01362](http://arxiv.org/abs/2109.01362){.bib-url}
~ end bibitem

~ begin bibitem {id:"kumar_efficient_2021"; cite-year:"2021"; cite-authors:"Kumar et al."; cite-authors-long:"Kumar, Agrawal, and Biswas"; cite-label:"Kumar, Agrawal, \& Biswas, 2021"; caption:"Efficient Data Race Detection of Async-Finish Programs Using Vector Clocks&nl;Kumar, Agrawal, and Biswas, 2021"; data-line:"FormalBib.bib:9474"; searchterm:"Efficient%20Data%20Race%20Detection%20of%20AsyncFinish%20Programs%20Using%20Vector%20Clocks%20Kumar%2C%20Agrawal%2C%20and%20Biswas%2C%202021"; spellcheck:"false"}
Kumar, S., Agrawal, A., & Biswas, S.&nbsp;(2021). Efficient Data Race Detection of Async-Finish Programs Using Vector Clocks. _arXiv:2112.04352 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2112.04352](http://arxiv.org/abs/2112.04352){.bib-url}
~ end bibitem

~ begin bibitem {id:"labrosse_portable_1992"; cite-year:"1992a"; cite-authors:"Labrosse"; cite-authors-long:"Labrosse"; cite-label:"Labrosse, 1992a"; caption:"A Portable Real-Time Kernel in C, 5/92&nl;Labrosse, 1992a"; data-line:"OperatingSystems.bib:42"; searchterm:"A%20Portable%20RealTime%20Kernel%20in%20C%2C%205%2F92%20Labrosse%2C%201992a"; spellcheck:"false"}
Labrosse, J.&nbsp;(1992a). A Portable Real-Time Kernel in C, 5/92. _Embedded Systems Programming_, 12.
~ end bibitem

~ begin bibitem {id:"labrosse_implementing_1992"; cite-year:"1992b"; cite-authors:"Labrosse"; cite-authors-long:"Labrosse"; cite-label:"Labrosse, 1992b"; caption:"Implementing a Real-Time Kernel, 6/92&nl;Labrosse, 1992b"; data-line:"OperatingSystems.bib:33"; searchterm:"Implementing%20a%20RealTime%20Kernel%2C%206%2F92%20Labrosse%2C%201992b"; spellcheck:"false"}
Labrosse, J.&nbsp;(1992b). Implementing a Real-Time Kernel, 6/92, 6.
~ end bibitem

~ begin bibitem {id:"lahav_whats_nodate"; cite-year:"n.d."; cite-authors:"Lahav and Boker"; cite-authors-long:"Lahav and Boker"; cite-label:"Lahav \& Boker, n.d."; caption:"What's Decidable about Causally Consistent Shared Memory?&nl;Lahav and Boker, n.d."; data-line:"LanguageTools.bib:1265"; searchterm:"What's%20Decidable%20about%20Causally%20Consistent%20Shared%20Memory%3F%20Lahav%20and%20Boker%2C%20n.d."; spellcheck:"false"}
Lahav, O., & Boker, U.&nbsp;(n.d.). What’s Decidable about Causally Consistent Shared Memory?, _0_(0), 54.
~ end bibitem

~ begin bibitem {id:"lahiri_symdiff:_2012"; cite-year:"2012"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Hawblitzel, Kawaguchi, and Rebêlo"; cite-label:"Lahiri, Hawblitzel, Kawaguchi, \& Rebêlo, 2012"; caption:"SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs&nl;Lahiri, Hawblitzel, Kawaguchi, and Rebêlo, 2012"; data-line:"FormalBib.bib:1757"; searchterm:"SYMDIFF%3A%20A%20LanguageAgnostic%20Semantic%20Diff%20Tool%20for%20Imperative%20Programs%20Lahiri%2C%20Hawblitzel%2C%20Kawaguchi%2C%20and%20Reb%C3%AAlo%2C%202012"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Hawblitzel, C., Kawaguchi, M., & Rebêlo, H.&nbsp;(2012). SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs. In P.&nbsp;Madhusudan & S.&nbsp;A.&nbsp;Seshia (Eds.), _Computer Aided Verification_ (pp. 712–717). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"lahiri_automatic_2015"; cite-year:"2015"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Sinha, and Hawblitzel"; cite-label:"Lahiri, Sinha, \& Hawblitzel, 2015"; caption:"Automatic Rootcausing for Program Equivalence Failures in Binaries&nl;Lahiri, Sinha, and Hawblitzel, 2015"; data-line:"FormalBib.bib:1791"; searchterm:"Automatic%20Rootcausing%20for%20Program%20Equivalence%20Failures%20in%20Binaries%20Lahiri%2C%20Sinha%2C%20and%20Hawblitzel%2C%202015"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Sinha, R., & Hawblitzel, C.&nbsp;(2015). Automatic Rootcausing for Program Equivalence Failures in Binaries. In D.&nbsp;Kroening & C.&nbsp;S.&nbsp;Păsăreanu (Eds.), _Computer Aided Verification_ (pp. 362–379). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"noauthor_lambdapi_2020"; cite-authors:"2020c"; cite-authors-long:"2020c"; cite-label:"\_Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting\_, 2020"; caption:"Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting&nl;2020c, "; data-line:"FormalBib.bib:6213"; searchterm:"Lambdapi%2C%20a%20proof%20assistant%20based%20on%20the%20%CE%BB%CE%A0calculus%20modulo%20rewriting%202020c%2C%20"; spellcheck:"false"}
_Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting_. (2020). Deducteam. Retrieved from <https://github.com/Deducteam/lambdapi>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_specifying_nodate"; cite-year:"2019"; cite-authors:"Lamport"; cite-authors-long:"Lamport"; cite-label:"Lamport, n.d."; caption:"Specifying Systems&nl;Lamport, 2019"; data-line:"FormalBib.bib:3109"; searchterm:"Specifying%20Systems%20Lamport%2C%202019"; spellcheck:"false"}
Lamport, L.&nbsp;(n.d.). Specifying Systems. Retrieved February 1, 2019, from <https://lamport.azurewebsites.net/tla/book.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_if_2018"; cite-year:"2018"; cite-authors:"Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic"; cite-authors-long:"Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic"; cite-label:"Lamport \& Distributed Computing \&bslash;\&amp; Education Column by Juraj Hromkovic, 2018"; caption:"If You’re Not Writing a Program, Don’t Use a Programming Language&nl;Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic, 2018"; data-line:"FormalBib.bib:5170"; searchterm:"If%20You%E2%80%99re%20Not%20Writing%20a%20Program%2C%20Don%E2%80%99t%20Use%20a%20Programming%20Language%20Lamport%20and%20Distributed%20Computing%20%26bslash%3B%26amp%3B%20Education%20Column%20by%20Juraj%20Hromkovic%2C%202018"; spellcheck:"false"}
Lamport, L., & Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic, S.&nbsp;S.&nbsp;(2018). If You’re Not Writing a Program, Don’t Use a Programming Language. _Bulletin of EATCS_, _2_(125). Retrieved from <http://eatcs.org/beatcs/index.php/beatcs/article/view>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_pretending_2005"; cite-year:"2005"; cite-authors:"Lamport and Schneider"; cite-authors-long:"Lamport and Schneider"; cite-label:"Lamport \& Schneider, 2005"; caption:"Pretending Atomicity, Digital Systems Research Center: Report 44&nl;Lamport and Schneider, 2005"; data-line:"FormalBib.bib:6601"; searchterm:"Pretending%20Atomicity%2C%20Digital%20Systems%20Research%20Center%3A%20Report%2044%20Lamport%20and%20Schneider%2C%202005"; spellcheck:"false"}
Lamport, L., & Schneider, F.&nbsp;B.&nbsp;(2005, December 27). Pretending Atomicity, Digital Systems Research Center: Report 44. Retrieved December 30, 2019, from <https://web.archive.org/web/20051227134748/http://gatekeeper.research.compaq.com/pub/DEC/SRC/research-reports/abstracts/src-rr-044.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lampson_abcds_2001"; cite-year:"2001"; cite-authors:"Lampson"; cite-authors-long:"Lampson"; cite-label:"Lampson, 2001"; caption:"The ABCD's of Paxos&nl;Lampson, 2001"; data-line:"FormalBib.bib:3595"; searchterm:"The%20ABCD's%20of%20Paxos%20Lampson%2C%202001"; spellcheck:"false"}
Lampson, B.&nbsp;(2001). The ABCD’s of Paxos. In _Proceedings of the Twentieth Annual ACM Symposium on Principles of Distributed Computing_ (p. 13 – ). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/383962.383969](https://dx.doi.org/10.1145/383962.383969){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lanzinger_scalability_2021"; cite-year:"2021"; cite-authors:"Lanzinger et al."; cite-authors-long:"Lanzinger, Weigl, Ulbrich, and Dietl"; cite-label:"Lanzinger, Weigl, Ulbrich, \& Dietl, 2021"; caption:"Scalability and precision by combining expressive type systems and deductive verification&nl;Lanzinger, Weigl, Ulbrich, and Dietl, 2021"; data-line:"FormalBib.bib:8751"; searchterm:"Scalability%20and%20precision%20by%20combining%20expressive%20type%20systems%20and%20deductive%20verification%20Lanzinger%2C%20Weigl%2C%20Ulbrich%2C%20and%20Dietl%2C%202021"; spellcheck:"false"}
Lanzinger, F., Weigl, A., Ulbrich, M., & Dietl, W.&nbsp;(2021). Scalability and precision by combining expressive type systems and deductive verification. _Proceedings of the ACM on Programming Languages_, _5_, 143:1–143:29. https://doi.org/[10.1145/3485520](https://dx.doi.org/10.1145/3485520){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lasser_costar_2021"; cite-year:"2021"; cite-authors:"Lasser et al."; cite-authors-long:"Lasser, Casinghino, Fisher, and Roux"; cite-label:"Lasser, Casinghino, Fisher, \& Roux, 2021"; caption:"CoStar: a verified ALL(\*) parser&nl;Lasser, Casinghino, Fisher, and Roux, 2021"; data-line:"LanguageTools.bib:372"; searchterm:"CoStar%3A%20a%20verified%20ALL%5C*%20parser%20Lasser%2C%20Casinghino%2C%20Fisher%2C%20and%20Roux%2C%202021"; spellcheck:"false"}
Lasser, S., Casinghino, C., Fisher, K., & Roux, C.&nbsp;(2021). CoStar: a verified ALL(\*) parser. In _Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation_ (pp. 420–434). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3453483.3454053](https://dx.doi.org/10.1145/3453483.3454053){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lattner_mlir_2020"; cite-year:"2020"; cite-authors:"Lattner et al."; cite-authors-long:"Lattner, Amini, Bondhugula, Cohen, Davis, Pienaar, et al."; cite-label:"Lattner et al., 2020"; caption:"MLIR: A Compiler Infrastructure for the End of Moore's Law&nl;Lattner, Amini, Bondhugula, Cohen, Davis, Pienaar, et al., 2020"; data-line:"LanguageTools.bib:785"; searchterm:"MLIR%3A%20A%20Compiler%20Infrastructure%20for%20the%20End%20of%20Moore's%20Law%20Lattner%2C%20Amini%2C%20Bondhugula%2C%20Cohen%2C%20Davis%2C%20Pienaar%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Lattner, C., Amini, M., Bondhugula, U., Cohen, A., Davis, A., Pienaar, J., … Zinenko, O.&nbsp;(2020). MLIR: A Compiler Infrastructure for the End of Moore’s Law. _arXiv:2002.11054 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2002.11054](http://arxiv.org/abs/2002.11054){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_lean_nodate"; cite-authors:"2019y"; cite-authors-long:"2019y"; cite-label:"\&ldquo;Lean Forward: Usable Computer-Checked Proofs and Computations,\&rdquo; n.d."; caption:"Lean Forward: Usable Computer-Checked Proofs and Computations&nl;2019y, "; data-line:"FormalBib.bib:2954"; searchterm:"Lean%20Forward%3A%20Usable%20ComputerChecked%20Proofs%20and%20Computations%202019y%2C%20"; spellcheck:"false"}
Lean Forward: Usable Computer-Checked Proofs and Computations. (n.d.). Retrieved February 8, 2019, from <https://lean-forward.github.io/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lee_instruction2vec_2021"; cite-year:"2021"; cite-authors:"Lee"; cite-authors-long:"Lee"; cite-label:"Lee, 2021"; caption:"instruction2vec&nl;Lee, 2021"; data-line:"Security.bib:1105"; searchterm:"instruction2vec%20Lee%2C%202021"; spellcheck:"false"}
Lee, Y.&nbsp;(2021). _instruction2vec_. Retrieved from <https://github.com/firmcode/instruction2vec>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lee_instruction2vec_2019"; cite-year:"2019"; cite-authors:"Lee et al."; cite-authors-long:"Lee, Kwon, Choi, Lim, Baek, and Park"; cite-label:"Lee et al., 2019"; caption:"Instruction2vec: Efficient Preprocessor of Assembly Code to Detect Software Weakness with CNN&nl;Lee, Kwon, Choi, Lim, Baek, and Park, 2019"; data-line:"Security.bib:1116"; searchterm:"Instruction2vec%3A%20Efficient%20Preprocessor%20of%20Assembly%20Code%20to%20Detect%20Software%20Weakness%20with%20CNN%20Lee%2C%20Kwon%2C%20Choi%2C%20Lim%2C%20Baek%2C%20and%20Park%2C%202019"; spellcheck:"false"}
Lee, Y., Kwon, H., Choi, S.-H., Lim, S.-H., Baek, S.&nbsp;H., & Park, K.-W.&nbsp;(2019). Instruction2vec: Efficient Preprocessor of Assembly Code to Detect Software Weakness with CNN.&nbsp;_Applied Sciences_, _9_(19), 4086. https://doi.org/[10.3390/app9194086](https://dx.doi.org/10.3390/app9194086){.bib-doi}
~ end bibitem

~ begin bibitem {id:"leger_exploring_2021"; cite-year:"2021"; cite-authors:"Leger et al."; cite-authors-long:"Leger, Darling, Jones, Matzen, Stracuzzi, Wilson, et al."; cite-label:"Leger et al., 2021"; caption:"Exploring Explicit Uncertainty for Binary Analysis (EUBA).&nl;Leger, Darling, Jones, Matzen, Stracuzzi, Wilson, et al., 2021"; data-line:"Security.bib:1491"; searchterm:"Exploring%20Explicit%20Uncertainty%20for%20Binary%20Analysis%20EUBA.%20Leger%2C%20Darling%2C%20Jones%2C%20Matzen%2C%20Stracuzzi%2C%20Wilson%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Leger, M., Darling, M., Jones, S., Matzen, L., Stracuzzi, D., Wilson, A., … Williams, J.&nbsp;(2021). _Exploring Explicit Uncertainty for Binary Analysis (EUBA)._ (No. {SAND}2021-14600, 1832314, 701941) (pp. SAND2021–SAND14600, 1832314, 701941). https://doi.org/[10.2172/1832314](https://dx.doi.org/10.2172/1832314){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lehmann_storm_2021"; cite-year:"2021"; cite-authors:"Lehmann et al."; cite-authors-long:"Lehmann, Kunkel, Brown, Yang, Vazou, Polikarpova, et al."; cite-label:"Lehmann et al., 2021"; caption:"STORM: Reﬁnement Types for Secure Web Applications&nl;Lehmann, Kunkel, Brown, Yang, Vazou, Polikarpova, et al., 2021"; data-line:"Security.bib:2"; searchterm:"STORM%3A%20Re%EF%AC%81nement%20Types%20for%20Secure%20Web%20Applications%20Lehmann%2C%20Kunkel%2C%20Brown%2C%20Yang%2C%20Vazou%2C%20Polikarpova%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Lehmann, N., Kunkel, R., Brown, J., Yang, J., Vazou, N., Polikarpova, N., … Jhala, R.&nbsp;(2021). STORM: Reﬁnement Types for Secure Web Applications. _Proceedings of Symposium on Operating Systems Design and Implementation (OSDI)_, 19.
~ end bibitem

~ begin bibitem {id:"leijen_mimalloc_2019"; cite-year:"2019"; cite-authors:"Leijen et al."; cite-authors-long:"Leijen, Zorn, and Moura"; cite-label:"Leijen, Zorn, \& Moura, 2019"; caption:"Mimalloc: Free List Sharding in Action&nl;Leijen, Zorn, and Moura, 2019"; data-line:"FormalBib.bib:5603"; searchterm:"Mimalloc%3A%20Free%20List%20Sharding%20in%20Action%20Leijen%2C%20Zorn%2C%20and%20Moura%2C%202019"; spellcheck:"false"}
Leijen, D., Zorn, B., & Moura, L.&nbsp;de. (2019). Mimalloc: Free List Sharding in Action. In A.&nbsp;W.&nbsp;Lin (Ed.), _Programming Languages and Systems_ (pp. 244–265). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-34175-6_13](https://dx.doi.org/10.1007/978-3-030-34175-6_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"LEINO:Dafny:DynamicFrames"; cite-year:"2009"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-label:"K. Rustan M. Leino, 2009"; caption:"Dynamic-frame specifications in Dafny&nl;K. Rustan M. Leino, 2009"; data-line:"DafnyRef.bib:42"; searchterm:"Dynamicframe%20specifications%20in%20Dafny%20K.%20Rustan%20M.%20Leino%2C%202009"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M.&nbsp;(2009). Dynamic-frame specifications in Dafny. JML seminar, Dagstuhl, Germany.
~ end bibitem

~ begin bibitem {id:"MSR:dafny:quickref"; cite-year:"n.d."; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-label:"K. Rustan M. Leino, n.d.-a"; caption:"Dafny Quick Reference&nl;K. Rustan M. Leino, n.d."; data-line:"DafnyRef.bib:16"; searchterm:"Dafny%20Quick%20Reference%20K.%20Rustan%20M.%20Leino%2C%20n.d."; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M.&nbsp;(n.d.-a). Dafny Quick Reference.
~ end bibitem

~ begin bibitem {id:"MSR:dafny:main"; cite-year:"n.d."; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-label:"K. Rustan M. Leino, n.d.-b"; caption:"Main Microsoft Research Dafny Web page&nl;K. Rustan M. Leino, n.d."; data-line:"DafnyRef.bib:6"; searchterm:"Main%20Microsoft%20Research%20Dafny%20Web%20page%20K.%20Rustan%20M.%20Leino%2C%20n.d."; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M.&nbsp;(n.d.-b). Main Microsoft Research Dafny Web page.
~ end bibitem

~ begin bibitem {id:"Rise4fun:dafny"; cite-year:"n.d."; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino"; cite-label:"K. Rustan M. Leino, n.d.-c"; caption:"Try Dafny In Your Browser&nl;K. Rustan M. Leino, n.d."; data-line:"DafnyRef.bib:1"; searchterm:"Try%20Dafny%20In%20Your%20Browser%20K.%20Rustan%20M.%20Leino%2C%20n.d."; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M.&nbsp;(n.d.-c). Try Dafny In Your Browser.
~ end bibitem

~ begin bibitem {id:"leino_assertional_2015"; cite-year:"2015"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-label:"K. Rustan M. Leino \& Lucio, 2015"; caption:"An Assertional Proof of the Stability and Correctness of Natural Mergesort&nl;K. Rustan M. Leino and Lucio, 2015"; data-line:"FormalBib.bib:2680"; searchterm:"An%20Assertional%20Proof%20of%20the%20Stability%20and%20Correctness%20of%20Natural%20Mergesort%20K.%20Rustan%20M.%20Leino%20and%20Lucio%2C%202015"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Lucio, P.&nbsp;(2015). An Assertional Proof of the Stability and Correctness of Natural Mergesort. _ACM Trans. Comput. Logic_, _17_(1), 6:1–6:22. https://doi.org/[10.1145/2814571](https://dx.doi.org/10.1145/2814571){.bib-doi}
~ end bibitem

~ begin bibitem {id:"LEINO:Dafny:Coinduction"; cite-year:"2014"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino and Moskal"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino and Moskal"; cite-label:"K. Rustan M. Leino \& Moskal, 2014"; caption:"Co-induction Simply: Automatic Co-inductive Proofs in a Program Verifier&nl;K. Rustan M. Leino and Moskal, 2014"; data-line:"DafnyRef.bib:35"; searchterm:"Coinduction%20Simply%3A%20Automatic%20Coinductive%20Proofs%20in%20a%20Program%20Verifier%20K.%20Rustan%20M.%20Leino%20and%20Moskal%2C%202014"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Moskal, M.&nbsp;(2014). Co-induction Simply: Automatic Co-inductive Proofs in a Program Verifier. Manuscript KRML 230.
~ end bibitem

~ begin bibitem {id:"chaudhuri_trigger_2016"; cite-year:"2016"; cite-authors:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-authors-long:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-label:"K. R. M. Leino \& Pit-Claudel, 2016"; caption:"Trigger Selection Strategies to Stabilize Program Verifiers&nl;K. R. M. Leino and Pit-Claudel, 2016"; data-line:"FormalBib.bib:2919"; searchterm:"Trigger%20Selection%20Strategies%20to%20Stabilize%20Program%20Verifiers%20K.%20R.%20M.%20Leino%20and%20PitClaudel%2C%202016"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Pit-Claudel, C.&nbsp;(2016). Trigger Selection Strategies to Stabilize Program Verifiers. In S.&nbsp;Chaudhuri & A.&nbsp;Farzan (Eds.), _Computer Aided Verification_ (Vol. 9779, pp. 361–381). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-41528-4_20](https://dx.doi.org/10.1007/978-3-319-41528-4_20){.bib-doi}
~ end bibitem

~ begin bibitem {id:"LEINO:Dafny:Calc"; cite-year:"2013"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino and Polikarpova"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino and Polikarpova"; cite-label:"K. Rustan M. Leino \& Polikarpova, 2013"; caption:"Verified Calculations&nl;K. Rustan M. Leino and Polikarpova, 2013"; data-line:"DafnyRef.bib:28"; searchterm:"Verified%20Calculations%20K.%20Rustan%20M.%20Leino%20and%20Polikarpova%2C%202013"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Polikarpova, N.&nbsp;(2013). Verified Calculations. Manuscript KRML 231.
~ end bibitem

~ begin bibitem {id:"leino_compiling_2016"; cite-year:"2016a"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016a"; caption:"Compiling Hilbert's epsilon Operator&nl;R. Leino, 2016a"; data-line:"FormalBib.bib:2565"; searchterm:"Compiling%20Hilbert's%20epsilon%20Operator%20R.%20Leino%2C%202016a"; spellcheck:"false"}
Leino, R.&nbsp;(2016a). Compiling Hilbert’s epsilon Operator. _LPAR-20. 20th International Conferences on Logic for Programming, Artificial Intelligence and Reasoning_, _35_. Retrieved from <https://www.microsoft.com/en-us/research/publication/compiling-hilberts-%cf%b5-operator/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_well-founded_2016"; cite-year:"2016b"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016b"; caption:"Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial&nl;R. Leino, 2016b"; data-line:"FormalBib.bib:2529"; searchterm:"WellFounded%20Functions%20and%20Extreme%20Predicates%20in%20Dafny%3A%20A%20Tutorial%20R.%20Leino%2C%202016b"; spellcheck:"false"}
Leino, R.&nbsp;(2016b). Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial, _40_. Retrieved from <https://www.microsoft.com/en-us/research/publication/well-founded-functions-extreme-predicates-dafny-tutorial/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_dafny_2021"; cite-year:"2021"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2021"; caption:"Dafny&nl;R. Leino, 2021"; data-line:"FormalBib.bib:733"; searchterm:"Dafny%20R.%20Leino%2C%202021"; spellcheck:"false"}
Leino, R.&nbsp;(2021). _Dafny_. Dafny. Retrieved from <https://github.com/dafny-lang/dafny>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_co-induction_2013"; cite-year:"2013"; cite-authors:"R.&nbsp;Leino and Moskal"; cite-authors-long:"R.&nbsp;Leino and Moskal"; cite-label:"R. Leino \& Moskal, 2013"; caption:"Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier&nl;R. Leino and Moskal, 2013"; data-line:"FormalBib.bib:2652"; searchterm:"CoInduction%20Simply%3A%20Automatic%20CoInductive%20Proofs%20in%20a%20Program%20Verifier%20R.%20Leino%20and%20Moskal%2C%202013"; spellcheck:"false"}
Leino, R., & Moskal, M.&nbsp;(2013). Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier. Retrieved from <https://www.microsoft.com/en-us/research/publication/co-induction-simply-automatic-co-inductive-proofs-in-a-program-verifier/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verification_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino et al."; cite-authors-long:"R.&nbsp;Leino, Müller, and Smans"; cite-label:"R. Leino, Müller, \& Smans, 2016"; caption:"Verification of Concurrent Programs with Chalice&nl;R. Leino, Müller, and Smans, 2016"; data-line:"FormalBib.bib:2612"; searchterm:"Verification%20of%20Concurrent%20Programs%20with%20Chalice%20R.%20Leino%2C%20M%C3%BCller%2C%20and%20Smans%2C%202016"; spellcheck:"false"}
Leino, R., Müller, P., & Smans, J.&nbsp;(2016). Verification of Concurrent Programs with Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/verification-concurrent-programs-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verified_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Polikarpova"; cite-authors-long:"R.&nbsp;Leino and Polikarpova"; cite-label:"R. Leino \& Polikarpova, 2016"; caption:"Verified Calculations&nl;R. Leino and Polikarpova, 2016"; data-line:"FormalBib.bib:2542"; searchterm:"Verified%20Calculations%20R.%20Leino%20and%20Polikarpova%2C%202016"; spellcheck:"false"}
Leino, R., & Polikarpova, N.&nbsp;(2016). Verified Calculations. Retrieved from <https://www.microsoft.com/en-us/research/publication/verified-calculations/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_fine-grained_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Wüstholz"; cite-authors-long:"R.&nbsp;Leino and Wüstholz"; cite-label:"R. Leino \& Wüstholz, 2016"; caption:"Fine-grained Caching of Verification Results&nl;R. Leino and Wüstholz, 2016"; data-line:"FormalBib.bib:2589"; searchterm:"Finegrained%20Caching%20of%20Verification%20Results%20R.%20Leino%20and%20W%C3%BCstholz%2C%202016"; spellcheck:"false"}
Leino, R., & Wüstholz, V.&nbsp;(2016). Fine-grained Caching of Verification Results, _9206_. Retrieved from <https://www.microsoft.com/en-us/research/publication/fine-grained-caching-verification-results/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_stepwise_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Yessenov"; cite-authors-long:"R.&nbsp;Leino and Yessenov"; cite-label:"R. Leino \& Yessenov, 2016"; caption:"Stepwise Refinement of Heap-Manipulating Code in Chalice&nl;R. Leino and Yessenov, 2016"; data-line:"FormalBib.bib:2601"; searchterm:"Stepwise%20Refinement%20of%20HeapManipulating%20Code%20in%20Chalice%20R.%20Leino%20and%20Yessenov%2C%202016"; spellcheck:"false"}
Leino, R., & Yessenov, K.&nbsp;(2016). Stepwise Refinement of Heap-Manipulating Code in Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/stepwise-refinement-heap-manipulating-code-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leinster_higher_2003"; cite-year:"2003"; cite-authors:"Leinster"; cite-authors-long:"Leinster"; cite-label:"Leinster, 2003"; caption:"Higher Operads, Higher Categories&nl;Leinster, 2003"; data-line:"FormalBib.bib:6006"; searchterm:"Higher%20Operads%2C%20Higher%20Categories%20Leinster%2C%202003"; spellcheck:"false"}
Leinster, T.&nbsp;(2003). Higher Operads, Higher Categories. _arXiv:math/0305049_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[math/0305049](http://arxiv.org/abs/math/0305049){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_lem_2019"; cite-authors:"2019a"; cite-authors-long:"2019a"; cite-label:"\_Lem semantic definition language.\_, 2019"; caption:"Lem semantic definition language.&nl;2019a, "; data-line:"FormalBib.bib:5024"; searchterm:"Lem%20semantic%20definition%20language.%202019a%2C%20"; spellcheck:"false"}
_Lem semantic definition language._ (2019). REMS.&nbsp;Retrieved from <https://github.com/rems-project/lem>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lepigre_vip_nodate"; cite-year:"n.d."; cite-authors:"Lepigre et al."; cite-authors-long:"Lepigre, Sammler, Memarian, Krebbers, Dreyer, and Sewell"; cite-label:"Lepigre et al., n.d."; caption:"VIP: Verifying Real-World C Idioms with Integer-Pointer Casts&nl;Lepigre, Sammler, Memarian, Krebbers, Dreyer, and Sewell, n.d."; data-line:"FormalBib.bib:9429"; searchterm:"VIP%3A%20Verifying%20RealWorld%20C%20Idioms%20with%20IntegerPointer%20Casts%20Lepigre%2C%20Sammler%2C%20Memarian%2C%20Krebbers%2C%20Dreyer%2C%20and%20Sewell%2C%20n.d."; spellcheck:"false"}
Lepigre, R., Sammler, M., Memarian, K., Krebbers, R., Dreyer, D., & Sewell, P.&nbsp;(n.d.). VIP: Verifying Real-World C Idioms with Integer-Pointer Casts, _6_, 32.
~ end bibitem

~ begin bibitem {id:"le_compositional_2021"; cite-year:"2021"; cite-authors:"Le"; cite-authors-long:"Le"; cite-label:"Le, 2021"; caption:"Compositional Satisfiability Solving in Separation Logic&nl;Le, 2021"; data-line:"FormalBib.bib:5337"; searchterm:"Compositional%20Satisfiability%20Solving%20in%20Separation%20Logic%20Le%2C%202021"; spellcheck:"false"}
Le, Q.&nbsp;L.&nbsp;(2021). Compositional Satisfiability Solving in Separation Logic. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 578–602). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_26](https://dx.doi.org/10.1007/978-3-030-67067-2_26){.bib-doi}
~ end bibitem

~ begin bibitem {id:"le_finding_nodate-1"; cite-year:"n.d."; cite-authors:"Le et al."; cite-authors-long:"Le, Raad, Villard, Berdine, Dreyer, and O’Hearn"; cite-label:"Le et al., n.d.-a"; caption:"Finding Real Bugs in Big Programs Appendix&nl;Le, Raad, Villard, Berdine, Dreyer, and O’Hearn, n.d."; data-line:"FormalBib.bib:9750"; searchterm:"Finding%20Real%20Bugs%20in%20Big%20Programs%20Appendix%20Le%2C%20Raad%2C%20Villard%2C%20Berdine%2C%20Dreyer%2C%20and%20O%E2%80%99Hearn%2C%20n.d."; spellcheck:"false"}
Le, Q.&nbsp;L., Raad, A., Villard, J., Berdine, J., Dreyer, D., & O’Hearn, P.&nbsp;W.&nbsp;(n.d.-a). Finding Real Bugs in Big Programs Appendix, _1_(1), 6.
~ end bibitem

~ begin bibitem {id:"le_finding_nodate"; cite-year:"n.d."; cite-authors:"Le et al."; cite-authors-long:"Le, Raad, Villard, Berdine, Dreyer, and O’Hearn"; cite-label:"Le et al., n.d.-b"; caption:"Finding Real Bugs in Big Programs with Incorrectness Logic&nl;Le, Raad, Villard, Berdine, Dreyer, and O’Hearn, n.d."; data-line:"FormalBib.bib:7243"; searchterm:"Finding%20Real%20Bugs%20in%20Big%20Programs%20with%20Incorrectness%20Logic%20Le%2C%20Raad%2C%20Villard%2C%20Berdine%2C%20Dreyer%2C%20and%20O%E2%80%99Hearn%2C%20n.d."; spellcheck:"false"}
Le, Q.&nbsp;L., Raad, A., Villard, J., Berdine, J., Dreyer, D., & O’Hearn, P.&nbsp;W.&nbsp;(n.d.-b). Finding Real Bugs in Big Programs with Incorrectness Logic, _1_(1), 31.
~ end bibitem

~ begin bibitem {id:"leroy_ocaml_nodate"; cite-year:"2019"; cite-authors:"Leroy"; cite-authors-long:"Leroy"; cite-label:"Leroy, n.d."; caption:"OCaml Home Page&nl;Leroy, 2019"; data-line:"FormalBib.bib:3065"; searchterm:"OCaml%20Home%20Page%20Leroy%2C%202019"; spellcheck:"false"}
Leroy, X.&nbsp;(n.d.). OCaml Home Page. Retrieved February 1, 2019, from <https://ocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lescuyer_provencore:_2015"; cite-year:"2015"; cite-authors:"Lescuyer"; cite-authors-long:"Lescuyer"; cite-label:"Lescuyer, 2015"; caption:"ProvenCore: Towards a Verified Isolation Micro-Kernel&nl;Lescuyer, 2015"; data-line:"FormalBib.bib:4664"; searchterm:"ProvenCore%3A%20Towards%20a%20Verified%20Isolation%20MicroKernel%20Lescuyer%2C%202015"; spellcheck:"false"}
Lescuyer, S.&nbsp;(2015). _ProvenCore: Towards a Verified Isolation Micro-Kernel_. Retrieved from <https://zenodo.org/record/47990#.XOrmF-tKi24>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lescuyer_provencore:_nodate"; cite-year:"n.d."; cite-authors:"Lescuyer"; cite-authors-long:"Lescuyer"; cite-label:"Lescuyer, n.d."; caption:"ProvenCore: Towards a Verified Isolation Micro-Kernel&nl;Lescuyer, n.d."; data-line:"FormalBib.bib:4676"; searchterm:"ProvenCore%3A%20Towards%20a%20Verified%20Isolation%20MicroKernel%20Lescuyer%2C%20n.d."; spellcheck:"false"}
Lescuyer, S.&nbsp;(n.d.). ProvenCore: Towards a Verified Isolation Micro-Kernel, 69.
~ end bibitem

~ begin bibitem {id:"noauthor_temps_nodate"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"\&ldquo;Le Temps des Cerises: Efficient Temporal Stack Safety on Capability Machines using Directed Capabilities,\&rdquo; n.d."; caption:"Le Temps des Cerises: Efficient Temporal Stack Safety on Capability Machines using Directed Capabilities&nl;n.d., "; data-line:"FormalBib.bib:10281"; searchterm:"Le%20Temps%20des%20Cerises%3A%20Efficient%20Temporal%20Stack%20Safety%20on%20Capability%20Machines%20using%20Directed%20Capabilities%20n.d.%2C%20"; spellcheck:"false"}
Le Temps des Cerises: Efficient Temporal Stack Safety on Capability Machines using Directed Capabilities. (n.d.), _1_, 30.
~ end bibitem

~ begin bibitem {id:"letouzey_certified_nodate"; cite-year:"2019"; cite-authors:"Letouzey"; cite-authors-long:"Letouzey"; cite-label:"Letouzey, n.d."; caption:"Certified functional programming : Program extraction within Coq proof assistant.ResearchGate&nl;Letouzey, 2019"; data-line:"FormalBib.bib:3760"; searchterm:"Certified%20functional%20programming%20%3A%20Program%20extraction%20within%20Coq%20proof%20assistant.ResearchGate%20Letouzey%2C%202019"; spellcheck:"false"}
Letouzey, P.&nbsp;(n.d.). Certified functional programming : Program extraction within Coq proof assistant.ResearchGate. Retrieved February 1, 2019, from <https://www.researchgate.net/publication/280790704_Certified_functional_programming_Program_extraction_within_Coq_proof_assistant>{.bib-url}
~ end bibitem

~ begin bibitem {id:"liew_floating-point_2017"; cite-year:"2017"; cite-authors:"Liew et al."; cite-authors-long:"Liew, Schemmel, Cadar, Donaldson, Zahl, and Wehrle"; cite-label:"Liew et al., 2017"; caption:"Floating-point symbolic execution: A case study in N-version programming&nl;Liew, Schemmel, Cadar, Donaldson, Zahl, and Wehrle, 2017"; data-line:"LanguageTools.bib:636"; searchterm:"Floatingpoint%20symbolic%20execution%3A%20A%20case%20study%20in%20Nversion%20programming%20Liew%2C%20Schemmel%2C%20Cadar%2C%20Donaldson%2C%20Zahl%2C%20and%20Wehrle%2C%202017"; spellcheck:"false"}
Liew, D., Schemmel, D., Cadar, C., Donaldson, A.&nbsp;F., Zahl, R., & Wehrle, K.&nbsp;(2017). Floating-point symbolic execution: A case study in N-version programming. In _2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)_ (pp. 601–612). Urbana, IL: IEEE.&nbsp;https://doi.org/[10.1109/ASE.2017.8115670](https://dx.doi.org/10.1109/ASE.2017.8115670){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_deriving_nodate"; cite-year:"n.d."; cite-authors:"J.&nbsp;M.&nbsp;Li and Appel"; cite-authors-long:"J.&nbsp;M.&nbsp;Li and Appel"; cite-label:"J. M. Li \& Appel, n.d."; caption:"Deriving Efficient Program Transformations from Rewrite Rules&nl;J. M. Li and Appel, n.d."; data-line:"FormalBib.bib:7776"; searchterm:"Deriving%20Efficient%20Program%20Transformations%20from%20Rewrite%20Rules%20J.%20M.%20Li%20and%20Appel%2C%20n.d."; spellcheck:"false"}
Li, J.&nbsp;M., & Appel, A.&nbsp;W.&nbsp;(n.d.). Deriving Efficient Program Transformations from Rewrite Rules, _5_, 29.
~ end bibitem

~ begin bibitem {id:"li_incremental_2021"; cite-year:"2021"; cite-authors:"J.&nbsp;Li et al."; cite-authors-long:"J.&nbsp;Li, Miller, Zhuo, Chen, Howell, and Anderson"; cite-label:"J. Li et al., 2021"; caption:"An Incremental Path Towards a Safer OS Kernel&nl;J. Li, Miller, Zhuo, Chen, Howell, and Anderson, 2021"; data-line:"OperatingSystems.bib:23"; searchterm:"An%20Incremental%20Path%20Towards%20a%20Safer%20OS%20Kernel%20J.%20Li%2C%20Miller%2C%20Zhuo%2C%20Chen%2C%20Howell%2C%20and%20Anderson%2C%202021"; spellcheck:"false"}
Li, J., Miller, S., Zhuo, D., Chen, A., Howell, J., & Anderson, T.&nbsp;(2021). An Incremental Path Towards a Safer OS Kernel, 8.
~ end bibitem

~ begin bibitem {id:"li_verification_2020"; cite-year:"2020"; cite-authors:"Liyi Li"; cite-authors-long:"Liyi Li"; cite-label:"Liyi Li, 2020"; caption:"A VERIFICATION FRAMEWORK SUITABLE FOR PROVING LARGE LANGUAGE TRANSLATIONS&nl;Liyi Li, 2020"; data-line:"FormalBib.bib:8207"; searchterm:"A%20VERIFICATION%20FRAMEWORK%20SUITABLE%20FOR%20PROVING%20LARGE%20LANGUAGE%20TRANSLATIONS%20Liyi%20Li%2C%202020"; spellcheck:"false"}
Li, L.&nbsp;(2020). _A VERIFICATION FRAMEWORK SUITABLE FOR PROVING LARGE LANGUAGE TRANSLATIONS_ (phdthesis). University of Illinois at Urbana-Champaign.
~ end bibitem

~ begin bibitem {id:"li_potential_2015"; cite-year:"2015"; cite-authors:"Li Li et al."; cite-authors-long:"Li Li, Allix, Li, Bartel, Bissyande, and Klein"; cite-label:"Li Li et al., 2015"; caption:"Potential Component Leaks in Android Apps: An Investigation into a New Feature Set for Malware Detection&nl;Li Li, Allix, Li, Bartel, Bissyande, and Klein, 2015"; data-line:"Security.bib:1341"; searchterm:"Potential%20Component%20Leaks%20in%20Android%20Apps%3A%20An%20Investigation%20into%20a%20New%20Feature%20Set%20for%20Malware%20Detection%20Li%20Li%2C%20Allix%2C%20Li%2C%20Bartel%2C%20Bissyande%2C%20and%20Klein%2C%202015"; spellcheck:"false"}
Li, L., Allix, K., Li, D., Bartel, A., Bissyande, T.&nbsp;F., & Klein, J.&nbsp;(2015). Potential Component Leaks in Android Apps: An Investigation into a New Feature Set for Malware Detection. In _2015 IEEE International Conference on Software Quality, Reliability and Security_ (pp. 195–200). Vancouver, BC, Canada: IEEE.&nbsp;https://doi.org/[10.1109/QRS.2015.36](https://dx.doi.org/10.1109/QRS.2015.36){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_formal_2022"; cite-year:"2022"; cite-authors:"Liyi Li et al."; cite-authors-long:"Liyi Li, Liu, Postol, Lampropoulos, Van Horn, and Hicks"; cite-label:"Liyi Li et al., 2022"; caption:"A Formal Model of Checked C&nl;Liyi Li, Liu, Postol, Lampropoulos, Van Horn, and Hicks, 2022"; data-line:"FormalBib.bib:9903"; searchterm:"A%20Formal%20Model%20of%20Checked%20C%20Liyi%20Li%2C%20Liu%2C%20Postol%2C%20Lampropoulos%2C%20Van%20Horn%2C%20and%20Hicks%2C%202022"; spellcheck:"false"}
Li, L., Liu, Y., Postol, D.&nbsp;L., Lampropoulos, L., Van Horn, D., & Hicks, M.&nbsp;(2022). A Formal Model of Checked C.&nbsp;_arXiv:2201.13394 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2201.13394](http://arxiv.org/abs/2201.13394){.bib-url}
~ end bibitem

~ begin bibitem {id:"lin_symbolic_2020"; cite-year:"2020"; cite-authors:"Y.-Y.&nbsp;Lin and Tzevelekos"; cite-authors-long:"Y.-Y.&nbsp;Lin and Tzevelekos"; cite-label:"Y.-Y. Lin \& Tzevelekos, 2020"; caption:"Symbolic Execution Game Semantics&nl;Y.-Y. Lin and Tzevelekos, 2020"; data-line:"FormalBib.bib:5777"; searchterm:"Symbolic%20Execution%20Game%20Semantics%20Y.Y.%20Lin%20and%20Tzevelekos%2C%202020"; spellcheck:"false"}
Lin, Y.-Y., & Tzevelekos, N.&nbsp;(2020). Symbolic Execution Game Semantics. _arXiv:2002.09115 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2002.09115](http://arxiv.org/abs/2002.09115){.bib-url}
~ end bibitem

~ begin bibitem {id:"lin_interactive_2021"; cite-year:"2021"; cite-authors:"Z.&nbsp;Lin et al."; cite-authors-long:"Z.&nbsp;Lin, Chen, and Roşu"; cite-label:"Z. Lin, Chen, \& Roşu, 2021"; caption:"An Interactive Theorem Prover for Matching Logic with Proof Object Generation&nl;Z. Lin, Chen, and Roşu, 2021"; data-line:"FormalBib.bib:8957"; searchterm:"An%20Interactive%20Theorem%20Prover%20for%20Matching%20Logic%20with%20Proof%20Object%20Generation%20Z.%20Lin%2C%20Chen%2C%20and%20Ro%C5%9Fu%2C%202021"; spellcheck:"false"}
Lin, Z., Chen, X., & Roşu, G.&nbsp;(2021). An Interactive Theorem Prover for Matching Logic with Proof Object Generation, 12.
~ end bibitem

~ begin bibitem {id:"lin_making_nodate"; cite-year:"n.d."; cite-authors:"Z.&nbsp;Lin et al."; cite-authors-long:"Z.&nbsp;Lin, Chen, Trinh, Wang, and Roşu"; cite-label:"Z. Lin, Chen, Trinh, Wang, \& Roşu, n.d.-a"; caption:"Making Formal Verification Trustworthy via Proof Generation&nl;Z. Lin, Chen, Trinh, Wang, and Roşu, n.d."; data-line:"FormalBib.bib:9317"; searchterm:"Making%20Formal%20Verification%20Trustworthy%20via%20Proof%20Generation%20Z.%20Lin%2C%20Chen%2C%20Trinh%2C%20Wang%2C%20and%20Ro%C5%9Fu%2C%20n.d."; spellcheck:"false"}
Lin, Z., Chen, X., Trinh, M.-T., Wang, J., & Roşu, G.&nbsp;(n.d.-a). Making Formal Verification Trustworthy via Proof Generation, 15.
~ end bibitem

~ begin bibitem {id:"lin_trustworthy_nodate"; cite-year:"n.d."; cite-authors:"Z.&nbsp;Lin et al."; cite-authors-long:"Z.&nbsp;Lin, Chen, Trinh, Wang, and Roşu"; cite-label:"Z. Lin, Chen, Trinh, Wang, \& Roşu, n.d.-b"; caption:"Trustworthy Program Veriﬁcation via Proof Generation&nl;Z. Lin, Chen, Trinh, Wang, and Roşu, n.d."; data-line:"FormalBib.bib:7299"; searchterm:"Trustworthy%20Program%20Veri%EF%AC%81cation%20via%20Proof%20Generation%20Z.%20Lin%2C%20Chen%2C%20Trinh%2C%20Wang%2C%20and%20Ro%C5%9Fu%2C%20n.d."; spellcheck:"false"}
Lin, Z., Chen, X., Trinh, M.-T., Wang, J., & Roşu, G.&nbsp;(n.d.-b). Trustworthy Program Veriﬁcation via Proof Generation, 43.
~ end bibitem

~ begin bibitem {id:"lin_translation_nodate"; cite-year:"n.d."; cite-authors:"Z.&nbsp;Lin et al."; cite-authors-long:"Z.&nbsp;Lin, Kasampalis, and Adve"; cite-label:"Z. Lin, Kasampalis, \& Adve, n.d."; caption:"A Translation Validation Algorithm for LLVM Register Allocators&nl;Z. Lin, Kasampalis, and Adve, n.d."; data-line:"LanguageTools.bib:1284"; searchterm:"A%20Translation%20Validation%20Algorithm%20for%20LLVM%20Register%20Allocators%20Z.%20Lin%2C%20Kasampalis%2C%20and%20Adve%2C%20n.d."; spellcheck:"false"}
Lin, Z., Kasampalis, T., & Adve, V.&nbsp;(n.d.). A Translation Validation Algorithm for LLVM Register Allocators, 11.
~ end bibitem

~ begin bibitem {id:"li_towards_nodate"; cite-year:"n.d."; cite-authors:"P.&nbsp;Li"; cite-authors-long:"P.&nbsp;Li"; cite-label:"P. Li, n.d."; caption:"TOWARDS PRACTICAL INFORMATION FLOW ANALYSIS&nl;P. Li, n.d."; data-line:"Security.bib:1404"; searchterm:"TOWARDS%20PRACTICAL%20INFORMATION%20FLOW%20ANALYSIS%20P.%20Li%2C%20n.d."; spellcheck:"false"}
Li, P.&nbsp;(n.d.). TOWARDS PRACTICAL INFORMATION FLOW ANALYSIS, 226.
~ end bibitem

~ begin bibitem {id:"li_towards_2021-1"; cite-year:"2021"; cite-authors:"P.&nbsp;Li and Zhang"; cite-authors-long:"P.&nbsp;Li and Zhang"; cite-label:"P. Li \& Zhang, 2021"; caption:"Towards a General-Purpose Dynamic Information Flow Policy&nl;P. Li and Zhang, 2021"; data-line:"Security.bib:1297"; searchterm:"Towards%20a%20GeneralPurpose%20Dynamic%20Information%20Flow%20Policy%20P.%20Li%20and%20Zhang%2C%202021"; spellcheck:"false"}
Li, P., & Zhang, D.&nbsp;(2021). Towards a General-Purpose Dynamic Information Flow Policy. _arXiv:2109.08096 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.08096](http://arxiv.org/abs/2109.08096){.bib-url}
~ end bibitem

~ begin bibitem {id:"li_memory_2021"; cite-year:"2021"; cite-authors:"S.&nbsp;Li et al."; cite-authors-long:"S.&nbsp;Li, Qiao, and Yang"; cite-label:"S. Li, Qiao, \& Yang, 2021"; caption:"Memory State Verification Based on Inductive and Deductive Reasoning&nl;S. Li, Qiao, and Yang, 2021"; data-line:"FormalBib.bib:91"; searchterm:"Memory%20State%20Verification%20Based%20on%20Inductive%20and%20Deductive%20Reasoning%20S.%20Li%2C%20Qiao%2C%20and%20Yang%2C%202021"; spellcheck:"false"}
Li, S., Qiao, L., & Yang, M.&nbsp;(2021). Memory State Verification Based on Inductive and Deductive Reasoning. _IEEE Transactions on Reliability_, 1–14. https://doi.org/[10.1109/TR.2021.3074709](https://dx.doi.org/10.1109/TR.2021.3074709){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_secure_nodate"; cite-year:"n.d."; cite-authors:"S.-W.&nbsp;Li et al."; cite-authors-long:"S.-W.&nbsp;Li, Li, Gu, Nieh, and Hui"; cite-label:"S.-W. Li, Li, Gu, Nieh, \& Hui, n.d."; caption:"A Secure and Formally Verified Linux KVM Hypervisor&nl;S.-W. Li, Li, Gu, Nieh, and Hui, n.d."; data-line:"FormalBib.bib:7976"; searchterm:"A%20Secure%20and%20Formally%20Verified%20Linux%20KVM%20Hypervisor%20S.W.%20Li%2C%20Li%2C%20Gu%2C%20Nieh%2C%20and%20Hui%2C%20n.d."; spellcheck:"false"}
Li, S.-W., Li, X., Gu, R., Nieh, J., & Hui, J.&nbsp;Z.&nbsp;(n.d.). A Secure and Formally Verified Linux KVM Hypervisor, 18.
~ end bibitem

~ begin bibitem {id:"li_path-sensitive_2022"; cite-year:"2022"; cite-authors:"T.&nbsp;Li et al."; cite-authors-long:"T.&nbsp;Li, Bai, Sui, and Hu"; cite-label:"T. Li, Bai, Sui, \& Hu, 2022"; caption:"Path-sensitive and alias-aware typestate analysis for detecting OS bugs&nl;T. Li, Bai, Sui, and Hu, 2022"; data-line:"FormalBib.bib:10308"; searchterm:"Pathsensitive%20and%20aliasaware%20typestate%20analysis%20for%20detecting%20OS%20bugs%20T.%20Li%2C%20Bai%2C%20Sui%2C%20and%20Hu%2C%202022"; spellcheck:"false"}
Li, T., Bai, J.-J., Sui, Y., & Hu, S.-M.&nbsp;(2022). Path-sensitive and alias-aware typestate analysis for detecting OS bugs. In _Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems_ (pp. 859–872). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3503222.3507770](https://dx.doi.org/10.1145/3503222.3507770){.bib-doi}
~ end bibitem

~ begin bibitem {id:"liu_when_2021"; cite-year:"2021"; cite-authors:"B.&nbsp;Liu et al."; cite-authors-long:"B.&nbsp;Liu, Liu, Li, Tsai, Da Silva, and Huang"; cite-label:"B. Liu et al., 2021"; caption:"When threads meet events: efficient and precise static race detection with origins&nl;B. Liu, Liu, Li, Tsai, Da Silva, and Huang, 2021"; data-line:"LanguageTools.bib:391"; searchterm:"When%20threads%20meet%20events%3A%20efficient%20and%20precise%20static%20race%20detection%20with%20origins%20B.%20Liu%2C%20Liu%2C%20Li%2C%20Tsai%2C%20Da%20Silva%2C%20and%20Huang%2C%202021"; spellcheck:"false"}
Liu, B., Liu, P., Li, Y., Tsai, C.-C., Da Silva, D., & Huang, J.&nbsp;(2021). When threads meet events: efficient and precise static race detection with origins. In _Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation_ (pp. 725–739). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3453483.3454073](https://dx.doi.org/10.1145/3453483.3454073){.bib-doi}
~ end bibitem

~ begin bibitem {id:"liu_kubo_nodate"; cite-year:"n.d."; cite-authors:"Changming Liu et al."; cite-authors-long:"Changming Liu, Chen, and Lu"; cite-label:"Changming Liu, Chen, \& Lu, n.d."; caption:"KUBO: Precise and Scalable Detection of User-triggerable Undeﬁned Behavior Bugs in OS Kernel&nl;Changming Liu, Chen, and Lu, n.d."; data-line:"LanguageTools.bib:776"; searchterm:"KUBO%3A%20Precise%20and%20Scalable%20Detection%20of%20Usertriggerable%20Unde%EF%AC%81ned%20Behavior%20Bugs%20in%20OS%20Kernel%20Changming%20Liu%2C%20Chen%2C%20and%20Lu%2C%20n.d."; spellcheck:"false"}
Liu, C., Chen, Y., & Lu, L.&nbsp;(n.d.). KUBO: Precise and Scalable Detection of User-triggerable Undeﬁned Behavior Bugs in OS Kernel, 15.
~ end bibitem

~ begin bibitem {id:"liu_survey_nodate"; cite-year:"2021"; cite-authors:"Chao Liu et al."; cite-authors-long:"Chao Liu, Zhang, Chai, Loo, and Chen"; cite-label:"Chao Liu, Zhang, Chai, Loo, \& Chen, n.d."; caption:"A survey on blockchain-enabled smart grids: Advances, applications and challenges&nl;Chao Liu, Zhang, Chai, Loo, and Chen, 2021"; data-line:"Blockchain.bib:16"; searchterm:"A%20survey%20on%20blockchainenabled%20smart%20grids%3A%20Advances%2C%20applications%20and%20challenges%20Chao%20Liu%2C%20Zhang%2C%20Chai%2C%20Loo%2C%20and%20Chen%2C%202021"; spellcheck:"false"}
Liu, C., Zhang, X., Chai, K.&nbsp;K., Loo, J., & Chen, Y.&nbsp;(n.d.). A survey on blockchain-enabled smart grids: Advances, applications and challenges. _IET Smart Cities_, _n/a_. https://doi.org/[10.1049/smc2.12010](https://dx.doi.org/10.1049/smc2.12010){.bib-doi}
~ end bibitem

~ begin bibitem {id:"liu_secure_2018"; cite-year:"2018"; cite-authors:"J.&nbsp;Liu et al."; cite-authors-long:"J.&nbsp;Liu, Corbett-Davies, Ferraiuolo, Ivanov, Luo, Suh, et al."; cite-label:"J. Liu, Corbett-Davies, et al., 2018"; caption:"Secure Autonomous Cyber-Physical Systems Through Verifiable Information Flow Control&nl;J. Liu, Corbett-Davies, Ferraiuolo, Ivanov, Luo, Suh, et al., 2018"; data-line:"Networking.bib:808"; searchterm:"Secure%20Autonomous%20CyberPhysical%20Systems%20Through%20Verifiable%20Information%20Flow%20Control%20J.%20Liu%2C%20CorbettDavies%2C%20Ferraiuolo%2C%20Ivanov%2C%20Luo%2C%20Suh%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Liu, J., Corbett-Davies, J., Ferraiuolo, A., Ivanov, A., Luo, M., Suh, G.&nbsp;E., … Campbell, M.&nbsp;(2018). Secure Autonomous Cyber-Physical Systems Through Verifiable Information Flow Control. In _Proceedings of the 2018 Workshop on Cyber-Physical Systems Security and PrivaCy_ (pp. 48–59). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3264888.3264889](https://dx.doi.org/10.1145/3264888.3264889){.bib-doi}
~ end bibitem

~ begin bibitem {id:"liu_p4v_2018"; cite-year:"2018"; cite-authors:"J.&nbsp;Liu et al."; cite-authors-long:"J.&nbsp;Liu, Hallahan, Schlesinger, Sharif, Lee, Soulé, et al."; cite-label:"J. Liu, Hallahan, et al., 2018"; caption:"p4v: practical verification for programmable data planes&nl;J. Liu, Hallahan, Schlesinger, Sharif, Lee, Soulé, et al., 2018"; data-line:"Networking.bib:710"; searchterm:"p4v%3A%20practical%20verification%20for%20programmable%20data%20planes%20J.%20Liu%2C%20Hallahan%2C%20Schlesinger%2C%20Sharif%2C%20Lee%2C%20Soul%C3%A9%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Liu, J., Hallahan, W., Schlesinger, C., Sharif, M., Lee, J., Soulé, R., … Foster, N.&nbsp;(2018). p4v: practical verification for programmable data planes. In _Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication_ (pp. 490–503). Budapest Hungary: ACM.&nbsp;https://doi.org/[10.1145/3230543.3230582](https://dx.doi.org/10.1145/3230543.3230582){.bib-doi}
~ end bibitem

~ begin bibitem {id:"liu_virtual_2019"; cite-year:"2019"; cite-authors:"M.&nbsp;Liu et al."; cite-authors-long:"M.&nbsp;Liu, Rieg, Shao, Gu, Costanzo, Kim, and Yoon"; cite-label:"M. Liu et al., 2019"; caption:"Virtual timeline: a formal abstraction for verifying preemptive schedulers with temporal isolation&nl;M. Liu, Rieg, Shao, Gu, Costanzo, Kim, and Yoon, 2019"; data-line:"FormalBib.bib:6584"; searchterm:"Virtual%20timeline%3A%20a%20formal%20abstraction%20for%20verifying%20preemptive%20schedulers%20with%20temporal%20isolation%20M.%20Liu%2C%20Rieg%2C%20Shao%2C%20Gu%2C%20Costanzo%2C%20Kim%2C%20and%20Yoon%2C%202019"; spellcheck:"false"}
Liu, M., Rieg, L., Shao, Z., Gu, R., Costanzo, D., Kim, J.-E., & Yoon, M.-K.&nbsp;(2019). Virtual timeline: a formal abstraction for verifying preemptive schedulers with temporal isolation. _Proceedings of the ACM on Programming Languages_, _4_, 1–31. https://doi.org/[10.1145/3371088](https://dx.doi.org/10.1145/3371088){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_program_nodate"; cite-year:"n.d."; cite-authors:"Yao Li and Weirich"; cite-authors-long:"Yao Li and Weirich"; cite-label:"Yao Li \& Weirich, n.d."; caption:"Program Adverbs: Structures for Embedding Eﬀectful Programs&nl;Yao Li and Weirich, n.d."; data-line:"FormalBib.bib:8514"; searchterm:"Program%20Adverbs%3A%20Structures%20for%20Embedding%20E%EF%AC%80ectful%20Programs%20Yao%20Li%20and%20Weirich%2C%20n.d."; spellcheck:"false"}
Li, Y., & Weirich, S.&nbsp;(n.d.). Program Adverbs: Structures for Embedding Eﬀectful Programs, 31.
~ end bibitem

~ begin bibitem {id:"li_reasoning_2021"; cite-year:"2021"; cite-authors:"Yao Li et al."; cite-authors-long:"Yao Li, Xia, and Weirich"; cite-label:"Yao Li, Xia, \& Weirich, 2021"; caption:"Reasoning about the garden of forking paths&nl;Yao Li, Xia, and Weirich, 2021"; data-line:"FormalBib.bib:8081"; searchterm:"Reasoning%20about%20the%20garden%20of%20forking%20paths%20Yao%20Li%2C%20Xia%2C%20and%20Weirich%2C%202021"; spellcheck:"false"}
Li, Y., Xia, L., & Weirich, S.&nbsp;(2021). Reasoning about the garden of forking paths. _arXiv:2103.07543 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.07543](http://arxiv.org/abs/2103.07543){.bib-url}
~ end bibitem

~ begin bibitem {id:"li_fast_2020"; cite-year:"2020"; cite-authors:"Yuanbo Li et al."; cite-authors-long:"Yuanbo Li, Zhang, and Reps"; cite-label:"Yuanbo Li, Zhang, \& Reps, 2020"; caption:"Fast graph simplification for interleaved Dyck-reachability&nl;Yuanbo Li, Zhang, and Reps, 2020"; data-line:"LanguageTools.bib:1077"; searchterm:"Fast%20graph%20simplification%20for%20interleaved%20Dyckreachability%20Yuanbo%20Li%2C%20Zhang%2C%20and%20Reps%2C%202020"; spellcheck:"false"}
Li, Y., Zhang, Q., & Reps, T.&nbsp;(2020). Fast graph simplification for interleaved Dyck-reachability. In _Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 780–793). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3385412.3386021](https://dx.doi.org/10.1145/3385412.3386021){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_complexity_2021"; cite-year:"2021"; cite-authors:"Yuanbo Li et al."; cite-authors-long:"Yuanbo Li, Zhang, and Reps"; cite-label:"Yuanbo Li, Zhang, \& Reps, 2021"; caption:"On the complexity of bidirected interleaved Dyck-reachability&nl;Yuanbo Li, Zhang, and Reps, 2021"; data-line:"LanguageTools.bib:1171"; searchterm:"On%20the%20complexity%20of%20bidirected%20interleaved%20Dyckreachability%20Yuanbo%20Li%2C%20Zhang%2C%20and%20Reps%2C%202021"; spellcheck:"false"}
Li, Y., Zhang, Q., & Reps, T.&nbsp;(2021). On the complexity of bidirected interleaved Dyck-reachability. _Proceedings of the ACM on Programming Languages_, _5_, 59:1–59:28. https://doi.org/[10.1145/3434340](https://dx.doi.org/10.1145/3434340){.bib-doi}
~ end bibitem

~ begin bibitem {id:"li_towards_2021"; cite-year:"2021"; cite-authors:"Zhen Li et al."; cite-authors-long:"Zhen Li, Tang, Zou, Chen, Xu, Zhang, et al."; cite-label:"Zhen Li et al., 2021"; caption:"Towards Making Deep Learning-based Vulnerability Detectors Robust&nl;Zhen Li, Tang, Zou, Chen, Xu, Zhang, et al., 2021"; data-line:"Security.bib:735"; searchterm:"Towards%20Making%20Deep%20Learningbased%20Vulnerability%20Detectors%20Robust%20Zhen%20Li%2C%20Tang%2C%20Zou%2C%20Chen%2C%20Xu%2C%20Zhang%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Li, Z., Tang, J., Zou, D., Chen, Q., Xu, S., Zhang, C., … Jin, H.&nbsp;(2021). Towards Making Deep Learning-based Vulnerability Detectors Robust. _arXiv:2108.00669 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2108.00669](http://arxiv.org/abs/2108.00669){.bib-url}
~ end bibitem

~ begin bibitem {id:"li_mirchecker_nodate"; cite-year:"n.d."; cite-authors:"Zhuohua Li et al."; cite-authors-long:"Zhuohua Li, Wang, Sun, and Lui"; cite-label:"Zhuohua Li, Wang, Sun, \& Lui, n.d."; caption:"MirChecker: Detecting Bugs in Rust Programs via Static Analysis&nl;Zhuohua Li, Wang, Sun, and Lui, n.d."; data-line:"FormalBib.bib:8523"; searchterm:"MirChecker%3A%20Detecting%20Bugs%20in%20Rust%20Programs%20via%20Static%20Analysis%20Zhuohua%20Li%2C%20Wang%2C%20Sun%2C%20and%20Lui%2C%20n.d."; spellcheck:"false"}
Li, Z., Wang, J., Sun, M., & Lui, J.&nbsp;C.&nbsp;S.&nbsp;(n.d.). MirChecker: Detecting Bugs in Rust Programs via Static Analysis, 14.
~ end bibitem

~ begin bibitem {id:"noauthor_local_nodate"; cite-authors:"2021z"; cite-authors-long:"2021z"; cite-label:"\&ldquo;Local Reasoning About the Presence of Bugs: Incorrectness Separation Logic,\&rdquo; n.d."; caption:"Local Reasoning About the Presence of Bugs: Incorrectness Separation Logic&nl;2021z, "; data-line:"FormalBib.bib:7202"; searchterm:"Local%20Reasoning%20About%20the%20Presence%20of%20Bugs%3A%20Incorrectness%20Separation%20Logic%202021z%2C%20"; spellcheck:"false"}
Local Reasoning About the Presence of Bugs: Incorrectness Separation Logic. (n.d.). Retrieved September 8, 2021, from <http://plv.mpi-sws.org/ISL/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lombardi_commutative_2015"; cite-year:"2015"; cite-authors:"Lombardi and Quitté"; cite-authors-long:"Lombardi and Quitté"; cite-label:"Lombardi \& Quitté, 2015"; caption:"Commutative algebra: Constructive methods. Finite projective modules&nl;Lombardi and Quitté, 2015"; data-line:"FormalBib.bib:6385"; searchterm:"Commutative%20algebra%3A%20Constructive%20methods.%20Finite%20projective%20modules%20Lombardi%20and%20Quitt%C3%A9%2C%202015"; spellcheck:"false"}
Lombardi, H., & Quitté, C.&nbsp;(2015). Commutative algebra: Constructive methods. Finite projective modules. _arXiv:1605.04832 \[math\]_, _20_. https://doi.org/[10.1007/978-94-017-9944-7](https://dx.doi.org/10.1007/978-94-017-9944-7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"longley_higher-order_2015"; cite-year:"2015"; cite-authors:"Longley and Normann"; cite-authors-long:"Longley and Normann"; cite-label:"Longley \& Normann, 2015"; caption:"Higher-Order Computability&nl;Longley and Normann, 2015"; data-line:"FormalBib.bib:6772"; searchterm:"HigherOrder%20Computability%20Longley%20and%20Normann%2C%202015"; spellcheck:"false"}
Longley, J., & Normann, D.&nbsp;(2015). _Higher-Order Computability_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-662-47992-6](https://dx.doi.org/10.1007/978-3-662-47992-6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"loring_practical_nodate"; cite-year:"n.d."; cite-authors:"Loring"; cite-authors-long:"Loring"; cite-label:"Loring, n.d."; caption:"Practical Dynamic Symbolic Execution for JavaScript&nl;Loring, n.d."; data-line:"FormalBib.bib:7759"; searchterm:"Practical%20Dynamic%20Symbolic%20Execution%20for%20JavaScript%20Loring%2C%20n.d."; spellcheck:"false"}
Loring, B.&nbsp;W.&nbsp;(n.d.). Practical Dynamic Symbolic Execution for JavaScript, 222.
~ end bibitem

~ begin bibitem {id:"losa_formal_2020"; cite-year:"2020"; cite-authors:"Losa and Dodds"; cite-authors-long:"Losa and Dodds"; cite-label:"Losa \& Dodds, 2020"; caption:"On the Formal Verification of the Stellar Consensus Protocol&nl;Losa and Dodds, 2020"; data-line:"Blockchain.bib:71"; searchterm:"On%20the%20Formal%20Verification%20of%20the%20Stellar%20Consensus%20Protocol%20Losa%20and%20Dodds%2C%202020"; spellcheck:"false"}
Losa, G., & Dodds, M.&nbsp;(2020). On the Formal Verification of the Stellar Consensus Protocol, 9.
~ end bibitem

~ begin bibitem {id:"lubin_how_2021"; cite-year:"2021"; cite-authors:"Lubin and Chasins"; cite-authors-long:"Lubin and Chasins"; cite-label:"Lubin \& Chasins, 2021"; caption:"How statically-typed functional programmers write code&nl;Lubin and Chasins, 2021"; data-line:"FormalBib.bib:8768"; searchterm:"How%20staticallytyped%20functional%20programmers%20write%20code%20Lubin%20and%20Chasins%2C%202021"; spellcheck:"false"}
Lubin, J., & Chasins, S.&nbsp;E.&nbsp;(2021). How statically-typed functional programmers write code. _Proceedings of the ACM on Programming Languages_, _5_, 155:1–155:30. https://doi.org/[10.1145/3485532](https://dx.doi.org/10.1145/3485532){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lu_eagle_2021"; cite-year:"2021"; cite-authors:"Lu et al."; cite-authors-long:"Lu, He, and Xue"; cite-label:"Lu, He, \& Xue, 2021"; caption:"Eagle: CFL-Reachability-Based Precision-Preserving Acceleration of Object-Sensitive Pointer Analysis with Partial Context Sensitivity&nl;Lu, He, and Xue, 2021"; data-line:"Security.bib:787"; searchterm:"Eagle%3A%20CFLReachabilityBased%20PrecisionPreserving%20Acceleration%20of%20ObjectSensitive%20Pointer%20Analysis%20with%20Partial%20Context%20Sensitivity%20Lu%2C%20He%2C%20and%20Xue%2C%202021"; spellcheck:"false"}
Lu, J., He, D., & Xue, J.&nbsp;(2021). Eagle: CFL-Reachability-Based Precision-Preserving Acceleration of Object-Sensitive Pointer Analysis with Partial Context Sensitivity. _ACM Transactions on Software Engineering and Methodology_, _30_(4), 46:1–46:46. https://doi.org/[10.1145/3450492](https://dx.doi.org/10.1145/3450492){.bib-doi}
~ end bibitem

~ begin bibitem {id:"luo_c11tester_2021"; cite-year:"2021"; cite-authors:"W.&nbsp;Luo and Demsky"; cite-authors-long:"W.&nbsp;Luo and Demsky"; cite-label:"W. Luo \& Demsky, 2021"; caption:"C11Tester: A Race Detector for C/C++ Atomics Technical Report&nl;W. Luo and Demsky, 2021"; data-line:"FormalBib.bib:8474"; searchterm:"C11Tester%3A%20A%20Race%20Detector%20for%20C%2FC%2B%2B%20Atomics%20Technical%20Report%20W.%20Luo%20and%20Demsky%2C%202021"; spellcheck:"false"}
Luo, W., & Demsky, B.&nbsp;(2021). C11Tester: A Race Detector for C/C++ Atomics Technical Report. _arXiv:2102.07901 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.07901](http://arxiv.org/abs/2102.07901){.bib-url}
~ end bibitem

~ begin bibitem {id:"luo_extended_nodate"; cite-year:"2019"; cite-authors:"Z.&nbsp;Luo"; cite-authors-long:"Z.&nbsp;Luo"; cite-label:"Z. Luo, n.d."; caption:"An Extended Calculus of Constructions&nl;Z. Luo, 2019"; data-line:"FormalBib.bib:3733"; searchterm:"An%20Extended%20Calculus%20of%20Constructions%20Z.%20Luo%2C%202019"; spellcheck:"false"}
Luo, Z.&nbsp;(n.d.). An Extended Calculus of Constructions. Retrieved February 1, 2019, from <http://www.lfcs.inf.ed.ac.uk/reports/90/ECS-LFCS-90-118/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"magrino_efficient_2019"; cite-year:"2019"; cite-authors:"Magrino et al."; cite-authors-long:"Magrino, Liu, Foster, Gehrke, and Myers"; cite-label:"Magrino, Liu, Foster, Gehrke, \& Myers, 2019"; caption:"Efficient, Consistent Distributed Computation with Predictive Treaties&nl;Magrino, Liu, Foster, Gehrke, and Myers, 2019"; data-line:"Networking.bib:791"; searchterm:"Efficient%2C%20Consistent%20Distributed%20Computation%20with%20Predictive%20Treaties%20Magrino%2C%20Liu%2C%20Foster%2C%20Gehrke%2C%20and%20Myers%2C%202019"; spellcheck:"false"}
Magrino, T., Liu, J., Foster, N., Gehrke, J., & Myers, A.&nbsp;C.&nbsp;(2019). Efficient, Consistent Distributed Computation with Predictive Treaties. In _Proceedings of the Fourteenth EuroSys Conference 2019_ (pp. 1–16). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3302424.3303987](https://dx.doi.org/10.1145/3302424.3303987){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mahboubi_machine-checked_nodate"; cite-year:"n.d."; cite-authors:"Mahboubi"; cite-authors-long:"Mahboubi"; cite-label:"Mahboubi, n.d."; caption:"Machine-checked computer-aided mathematics&nl;Mahboubi, n.d."; data-line:"Mathematics.bib:2"; searchterm:"Machinechecked%20computeraided%20mathematics%20Mahboubi%2C%20n.d."; spellcheck:"false"}
Mahboubi, A.&nbsp;(n.d.). Machine-checked computer-aided mathematics, 111.
~ end bibitem

~ begin bibitem {id:"maillardspan_dijkstra_2019"; cite-year:"2019"; cite-authors:"Maillard &bslash;textless&rcurly;/span &bslash;textgreater&rcurly; et al."; cite-authors-long:"Maillard &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Ahman &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Atkey &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Martínez &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Hritcu &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Rivas &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, and Tanter &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;"; cite-label:"Maillard \&bslash;textless\&rcurly;/span \&bslash;textgreater\&rcurly; et al., 2019"; caption:"Dijkstra Monads for All&nl;Maillard &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Ahman &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Atkey &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Martínez &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Hritcu &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, Rivas &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, and Tanter &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;, 2019"; data-line:"FormalBib.bib:5437"; searchterm:"Dijkstra%20Monads%20for%20All%20Maillard%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20Ahman%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20Atkey%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20Mart%C3%ADnez%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20Hritcu%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20Rivas%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%20and%20Tanter%20%26bslash%3Btextless%26rcurly%3B%2Fspan%20%26bslash%3Btextgreater%26rcurly%3B%2C%202019"; spellcheck:"false"}
Maillard &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Kenji, Ahman &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Danel, Atkey &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Robert, Martínez &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Guido, Hritcu &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Catalin, Rivas &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Exequiel, & Tanter &bslash;textless&rcurly;/span &bslash;textgreater&rcurly;,  &lcurly;&bslash;textless&rcurly;span itemprop=&ldquo;author&rdquo; itemtype=&ldquo;http://schema org/Person&rdquo;&lcurly;&bslash;textgreater&rcurly;Éric. (2019). Dijkstra Monads for All. In _24th ACM SIGPLAN International Conference on Functional Programming (ICFP)_. Retrieved from <https://arxiv.org/abs/1903.01237>{.bib-url}
~ end bibitem

~ begin bibitem {id:"maillard_multiverse_nodate"; cite-year:"n.d."; cite-authors:"Maillard et al."; cite-authors-long:"Maillard, Margulies, Sozeau, Tabareau, and Tanter"; cite-label:"Maillard, Margulies, Sozeau, Tabareau, \& Tanter, n.d."; caption:"The Multiverse: Logical Modularity for Proof Assistants&nl;Maillard, Margulies, Sozeau, Tabareau, and Tanter, n.d."; data-line:"FormalBib.bib:7562"; searchterm:"The%20Multiverse%3A%20Logical%20Modularity%20for%20Proof%20Assistants%20Maillard%2C%20Margulies%2C%20Sozeau%2C%20Tabareau%2C%20and%20Tanter%2C%20n.d."; spellcheck:"false"}
Maillard, K., Margulies, N., Sozeau, M., Tabareau, N., & Tanter, É. (n.d.). The Multiverse: Logical Modularity for Proof Assistants, 28.
~ end bibitem

~ begin bibitem {id:"majumder_hir_2021"; cite-year:"2021"; cite-authors:"Majumder and Bondhugula"; cite-authors-long:"Majumder and Bondhugula"; cite-label:"Majumder \& Bondhugula, 2021"; caption:"HIR: An MLIR-based Intermediate Representation for Hardware Accelerator Description&nl;Majumder and Bondhugula, 2021"; data-line:"FormalBib.bib:8307"; searchterm:"HIR%3A%20An%20MLIRbased%20Intermediate%20Representation%20for%20Hardware%20Accelerator%20Description%20Majumder%20and%20Bondhugula%2C%202021"; spellcheck:"false"}
Majumder, K., & Bondhugula, U.&nbsp;(2021). HIR: An MLIR-based Intermediate Representation for Hardware Accelerator Description. _arXiv:2103.00194 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.00194](http://arxiv.org/abs/2103.00194){.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_picard_2013"; cite-year:"2013"; cite-authors:"Makarov and Spitters"; cite-authors-long:"Makarov and Spitters"; cite-label:"Makarov \& Spitters, 2013"; caption:"The Picard Algorithm for Ordinary Differential Equations in Coq&nl;Makarov and Spitters, 2013"; data-line:"FormalBib.bib:4389"; searchterm:"The%20Picard%20Algorithm%20for%20Ordinary%20Differential%20Equations%20in%20Coq%20Makarov%20and%20Spitters%2C%202013"; spellcheck:"false"}
Makarov, E., & Spitters, B.&nbsp;(2013). The Picard Algorithm for Ordinary Differential Equations in Coq. In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (Vol. 7998, pp. 463–468). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39634-2_34](https://dx.doi.org/10.1007/978-3-642-39634-2_34){.bib-doi}
~ end bibitem

~ begin bibitem {id:"malecha_towards_2020"; cite-year:"2020"; cite-authors:"Malecha et al."; cite-authors-long:"Malecha, Anand, and Stewart"; cite-label:"Malecha, Anand, \& Stewart, 2020"; caption:"Towards an Axiomatic Basis for C++&nl;Malecha, Anand, and Stewart, 2020"; data-line:"FormalBib.bib:498"; searchterm:"Towards%20an%20Axiomatic%20Basis%20for%20C%2B%2B%20Malecha%2C%20Anand%2C%20and%20Stewart%2C%202020"; spellcheck:"false"}
Malecha, G., Anand, A., & Stewart, G.&nbsp;(2020). Towards an Axiomatic Basis for C++. _The Coq Workshop 2020_, 3.
~ end bibitem

~ begin bibitem {id:"malecha_towards_2016"; cite-year:"2016"; cite-authors:"Malecha et al."; cite-authors-long:"Malecha, Ricketts, Alvarez, and Lerner"; cite-label:"Malecha, Ricketts, Alvarez, \& Lerner, 2016"; caption:"Towards foundational verification of cyber-physical systems&nl;Malecha, Ricketts, Alvarez, and Lerner, 2016"; data-line:"FormalBib.bib:6713"; searchterm:"Towards%20foundational%20verification%20of%20cyberphysical%20systems%20Malecha%2C%20Ricketts%2C%20Alvarez%2C%20and%20Lerner%2C%202016"; spellcheck:"false"}
Malecha, G., Ricketts, D., Alvarez, M.&nbsp;M., & Lerner, S.&nbsp;(2016). Towards foundational verification of cyber-physical systems. In _2016 Science of Security for Cyber-Physical Systems Workshop (SOSCYPS)_ (pp. 1–5). https://doi.org/[10.1109/SOSCYPS.2016.7580000](https://dx.doi.org/10.1109/SOSCYPS.2016.7580000){.bib-doi}
~ end bibitem

~ begin bibitem {id:"manna_temporal_1995"; cite-year:"1995"; cite-authors:"Manna and Pnueli"; cite-authors-long:"Manna and Pnueli"; cite-label:"Manna \& Pnueli, 1995"; caption:"Temporal Verification of Reactive Systems: Safety&nl;Manna and Pnueli, 1995"; data-line:"FormalBib.bib:4066"; searchterm:"Temporal%20Verification%20of%20Reactive%20Systems%3A%20Safety%20Manna%20and%20Pnueli%2C%201995"; spellcheck:"false"}
Manna, Z., & Pnueli, A.&nbsp;(1995). _Temporal Verification of Reactive Systems: Safety_. New York: Springer-Verlag. Retrieved from <https://www.springer.com/gp/book/9780387944593>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mansky_verifying_nodate"; cite-year:"n.d."; cite-authors:"Mansky"; cite-authors-long:"Mansky"; cite-label:"Mansky, n.d."; caption:"Verifying Concurrent Programs with VST&nl;Mansky, n.d."; data-line:"FormalBib.bib:4437"; searchterm:"Verifying%20Concurrent%20Programs%20with%20VST%20Mansky%2C%20n.d."; spellcheck:"false"}
Mansky, W.&nbsp;(n.d.). Verifying Concurrent Programs with VST, 15.
~ end bibitem

~ begin bibitem {id:"marsik_introducing_2021"; cite-year:"2021"; cite-authors:"Maršík et al."; cite-authors-long:"Maršík, Amblard, and Groote"; cite-label:"Maršík, Amblard, \& Groote, 2021"; caption:"Introducing ⦇ λ ⦈, a λ-calculus for Effectful Computation&nl;Maršík, Amblard, and Groote, 2021"; data-line:"FormalBib.bib:8343"; searchterm:"Introducing%20%E2%A6%87%20%CE%BB%20%E2%A6%88%2C%20a%20%CE%BBcalculus%20for%20Effectful%20Computation%20Mar%C5%A1%C3%ADk%2C%20Amblard%2C%20and%20Groote%2C%202021"; spellcheck:"false"}
Maršík, J., Amblard, M., & Groote, P.&nbsp;de. (2021). Introducing ⦇ λ ⦈, a λ-calculus for Effectful Computation. _Theoretical Computer Science_. https://doi.org/[10.1016/j.tcs.2021.02.038](https://dx.doi.org/10.1016/j.tcs.2021.02.038){.bib-doi}
~ end bibitem

~ begin bibitem {id:"martin-dorel_proving_2016"; cite-year:"2016"; cite-authors:"Martin-Dorel and Melquiond"; cite-authors-long:"Martin-Dorel and Melquiond"; cite-label:"Martin-Dorel \& Melquiond, 2016"; caption:"Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq&nl;Martin-Dorel and Melquiond, 2016"; data-line:"FormalBib.bib:3537"; searchterm:"Proving%20Tight%20Bounds%20on%20Univariate%20Expressions%20with%20Elementary%20Functions%20in%20Coq%20MartinDorel%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Martin-Dorel, É., & Melquiond, G.&nbsp;(2016). Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq. _Journal of Automated Reasoning_, _57_(3), 187–217. https://doi.org/[10.1007/s10817-015-9350-4](https://dx.doi.org/10.1007/s10817-015-9350-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"martinez_meta-fstar:_2018"; cite-year:"2018"; cite-authors:"Martínez et al."; cite-authors-long:"Martínez, Ahman, Dumitrescu, Giannarakis, Hawblitzel, Hritcu, et al."; cite-label:"Martínez et al., 2018"; caption:"Meta-Fstar: Proof Automation with SMT, Tactics, and Metaprograms&nl;Martínez, Ahman, Dumitrescu, Giannarakis, Hawblitzel, Hritcu, et al., 2018"; data-line:"FormalBib.bib:5242"; searchterm:"MetaFstar%3A%20Proof%20Automation%20with%20SMT%2C%20Tactics%2C%20and%20Metaprograms%20Mart%C3%ADnez%2C%20Ahman%2C%20Dumitrescu%2C%20Giannarakis%2C%20Hawblitzel%2C%20Hritcu%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Martínez, G., Ahman, D., Dumitrescu, V., Giannarakis, N., Hawblitzel, C., Hritcu, C., … Swamy, N.&nbsp;(2018). Meta-Fstar: Proof Automation with SMT, Tactics, and Metaprograms. _arXiv:1803.06547 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1803.06547](http://arxiv.org/abs/1803.06547){.bib-url}
~ end bibitem

~ begin bibitem {id:"martin_mastering_2013"; cite-year:"2013"; cite-authors:"Martin et al."; cite-authors-long:"Martin, Hoffman, and Cedilnik"; cite-label:"Martin, Hoffman, \& Cedilnik, 2013"; caption:"Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts&nl;Martin, Hoffman, and Cedilnik, 2013"; data-line:"FormalBib.bib:931"; searchterm:"Mastering%20CMake%3A%20a%20crossplatform%20build%20system%20%3B%20covers%20installing%20and%20running%20CMake%20%3B%20details%20converting%20existing%20build%20processes%20to%20CMake%20%3B%20create%20powerful%20crossplatform%20build%20scripts%20Martin%2C%20Hoffman%2C%20and%20Cedilnik%2C%202013"; spellcheck:"false"}
Martin, K., Hoffman, B., & Cedilnik, A.&nbsp;(2013). _Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts_ (6. ed). Clifton Park, NY: Kitware.
~ end bibitem

~ begin bibitem {id:"marty_lio_2020"; cite-year:"2020"; cite-authors:"Marty et al."; cite-authors-long:"Marty, Franceschino, Talpin, and Vazou"; cite-label:"Marty, Franceschino, Talpin, \& Vazou, 2020"; caption:"LIO\*: Low Level Information Flow Control in F\*&nl;Marty, Franceschino, Talpin, and Vazou, 2020"; data-line:"Security.bib:772"; searchterm:"LIO%5C*%3A%20Low%20Level%20Information%20Flow%20Control%20in%20F%5C*%20Marty%2C%20Franceschino%2C%20Talpin%2C%20and%20Vazou%2C%202020"; spellcheck:"false"}
Marty, J.-J., Franceschino, L., Talpin, J.-P., & Vazou, N.&nbsp;(2020). LIO\*: Low Level Information Flow Control in F\*. _arXiv:2004.12885 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2004.12885](http://arxiv.org/abs/2004.12885){.bib-url}
~ end bibitem

~ begin bibitem {id:"masuda_unied_nodate"; cite-year:"n.d."; cite-authors:"Masuda and Kameyama"; cite-authors-long:"Masuda and Kameyama"; cite-label:"Masuda \& Kameyama, n.d."; caption:"Uniﬁed Program Generation and Veriﬁcation: A Case Study on Number-Theoretic Transform&nl;Masuda and Kameyama, n.d."; data-line:"FormalBib.bib:10299"; searchterm:"Uni%EF%AC%81ed%20Program%20Generation%20and%20Veri%EF%AC%81cation%3A%20A%20Case%20Study%20on%20NumberTheoretic%20Transform%20Masuda%20and%20Kameyama%2C%20n.d."; spellcheck:"false"}
Masuda, M., & Kameyama, Y.&nbsp;(n.d.). Uniﬁed Program Generation and Veriﬁcation: A Case Study on Number-Theoretic Transform, 19.
~ end bibitem

~ begin bibitem {id:"noauthor_matita_nodate"; cite-authors:"2020aa"; cite-authors-long:"2020aa"; cite-label:"\&ldquo;Matita - Interactive Theorem Prover,\&rdquo; n.d."; caption:"Matita - Interactive Theorem Prover&nl;2020aa, "; data-line:"FormalBib.bib:6205"; searchterm:"Matita%20%20Interactive%20Theorem%20Prover%202020aa%2C%20"; spellcheck:"false"}
Matita - Interactive Theorem Prover. (n.d.). Retrieved January 13, 2020, from <http://matita.cs.unibo.it/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"matsushita_rusthorn_2020"; cite-year:"2020"; cite-authors:"Matsushita et al."; cite-authors-long:"Matsushita, Tsukada, and Kobayashi"; cite-label:"Matsushita, Tsukada, \& Kobayashi, 2020"; caption:"RustHorn: CHC-based Verification for Rust Programs (full version)&nl;Matsushita, Tsukada, and Kobayashi, 2020"; data-line:"FormalBib.bib:5791"; searchterm:"RustHorn%3A%20CHCbased%20Verification%20for%20Rust%20Programs%20full%20version%20Matsushita%2C%20Tsukada%2C%20and%20Kobayashi%2C%202020"; spellcheck:"false"}
Matsushita, Y., Tsukada, T., & Kobayashi, N.&nbsp;(2020). RustHorn: CHC-based Verification for Rust Programs (full version). _arXiv:2002.09002 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2002.09002](http://arxiv.org/abs/2002.09002){.bib-url}
~ end bibitem

~ begin bibitem {id:"ma_detecting_nodate"; cite-year:"n.d."; cite-authors:"Ma et al."; cite-authors-long:"Ma, Yan, Wang, Yan, Zhang, and Qiu"; cite-label:"Ma et al., n.d."; caption:"Detecting Memory-Related Bugs by Tracking Heap Memory Management of C++ Smart Pointers&nl;Ma, Yan, Wang, Yan, Zhang, and Qiu, n.d."; data-line:"LanguageTools.bib:941"; searchterm:"Detecting%20MemoryRelated%20Bugs%20by%20Tracking%20Heap%20Memory%20Management%20of%20C%2B%2B%20Smart%20Pointers%20Ma%2C%20Yan%2C%20Wang%2C%20Yan%2C%20Zhang%2C%20and%20Qiu%2C%20n.d."; spellcheck:"false"}
Ma, X., Yan, J., Wang, W., Yan, J., Zhang, J., & Qiu, Z.&nbsp;(n.d.). Detecting Memory-Related Bugs by Tracking Heap Memory Management of C++ Smart Pointers, 12.
~ end bibitem

~ begin bibitem {id:"mazuera-rozo_taxonomy_2022"; cite-year:"2022"; cite-authors:"Mazuera-Rozo et al."; cite-authors-long:"Mazuera-Rozo, Escobar-Velásquez, Espitia-Acero, Vega-Guzmán, Trubiani, Linares-Vásquez, and Bavota"; cite-label:"Mazuera-Rozo et al., 2022"; caption:"Taxonomy of security weaknesses in Java and Kotlin Android apps&nl;Mazuera-Rozo, Escobar-Velásquez, Espitia-Acero, Vega-Guzmán, Trubiani, Linares-Vásquez, and Bavota, 2022"; data-line:"Security.bib:1513"; searchterm:"Taxonomy%20of%20security%20weaknesses%20in%20Java%20and%20Kotlin%20Android%20apps%20MazueraRozo%2C%20EscobarVel%C3%A1squez%2C%20EspitiaAcero%2C%20VegaGuzm%C3%A1n%2C%20Trubiani%2C%20LinaresV%C3%A1squez%2C%20and%20Bavota%2C%202022"; spellcheck:"false"}
Mazuera-Rozo, A., Escobar-Velásquez, C., Espitia-Acero, J., Vega-Guzmán, D., Trubiani, C., Linares-Vásquez, M., & Bavota, G.&nbsp;(2022). Taxonomy of security weaknesses in Java and Kotlin Android apps. _Journal of Systems and Software_, 111233. https://doi.org/[10.1016/j.jss.2022.111233](https://dx.doi.org/10.1016/j.jss.2022.111233){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mcbride_applicative_2008"; cite-year:"2008"; cite-authors:"Mcbride and Paterson"; cite-authors-long:"Mcbride and Paterson"; cite-label:"Mcbride \& Paterson, 2008"; caption:"Applicative programming with effects&nl;Mcbride and Paterson, 2008"; data-line:"FormalBib.bib:7512"; searchterm:"Applicative%20programming%20with%20effects%20Mcbride%20and%20Paterson%2C%202008"; spellcheck:"false"}
Mcbride, C., & Paterson, R.&nbsp;(2008). Applicative programming with effects. _Journal of Functional Programming_, _18_(1). https://doi.org/[10.1017/S0956796807006326](https://dx.doi.org/10.1017/S0956796807006326){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mccauley_enabling_2019"; cite-year:"2019"; cite-authors:"McCauley et al."; cite-authors-long:"McCauley, Harchol, Panda, Raghavan, and Shenker"; cite-label:"McCauley, Harchol, Panda, Raghavan, \& Shenker, 2019"; caption:"Enabling a permanent revolution in internet architecture&nl;McCauley, Harchol, Panda, Raghavan, and Shenker, 2019"; data-line:"Networking.bib:315"; searchterm:"Enabling%20a%20permanent%20revolution%20in%20internet%20architecture%20McCauley%2C%20Harchol%2C%20Panda%2C%20Raghavan%2C%20and%20Shenker%2C%202019"; spellcheck:"false"}
McCauley, J., Harchol, Y., Panda, A., Raghavan, B., & Shenker, S.&nbsp;(2019). Enabling a permanent revolution in internet architecture. In _Proceedings of the ACM Special Interest Group on Data Communication_ (pp. 1–14). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3341302.3342075](https://dx.doi.org/10.1145/3341302.3342075){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mckinna_why_2006"; cite-year:"2006"; cite-authors:"McKinna"; cite-authors-long:"McKinna"; cite-label:"McKinna, 2006"; caption:"Why Dependent Types Matter&nl;McKinna, 2006"; data-line:"FormalBib.bib:4975"; searchterm:"Why%20Dependent%20Types%20Matter%20McKinna%2C%202006"; spellcheck:"false"}
McKinna, J.&nbsp;(2006). Why Dependent Types Matter. In _Conference Record of the 33rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 1–1). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1111037.1111038](https://dx.doi.org/10.1145/1111037.1111038){.bib-doi}
~ end bibitem

~ begin bibitem {id:"medina-martinez_database_2021"; cite-year:"2021"; cite-authors:"Medina-Martínez et al."; cite-authors-long:"Medina-Martínez, Bárcenas, Molero-Castillo, Velázquez-Mena, and Aldeco-Pérez"; cite-label:"Medina-Martínez, Bárcenas, Molero-Castillo, Velázquez-Mena, \& Aldeco-Pérez, 2021"; caption:"Database Management System Verification with Separation Logics&nl;Medina-Martínez, Bárcenas, Molero-Castillo, Velázquez-Mena, and Aldeco-Pérez, 2021"; data-line:"FormalBib.bib:9642"; searchterm:"Database%20Management%20System%20Verification%20with%20Separation%20Logics%20MedinaMart%C3%ADnez%2C%20B%C3%A1rcenas%2C%20MoleroCastillo%2C%20Vel%C3%A1zquezMena%2C%20and%20AldecoP%C3%A9rez%2C%202021"; spellcheck:"false"}
Medina-Martínez, D., Bárcenas, E., Molero-Castillo, G., Velázquez-Mena, A., & Aldeco-Pérez, R.&nbsp;(2021). Database Management System Verification with Separation Logics. _Programming and Computer Software_, _47_(8), 654–672. https://doi.org/[10.1134/S036176882108017X](https://dx.doi.org/10.1134/S036176882108017X){.bib-doi}
~ end bibitem

~ begin bibitem {id:"melquiond_why3_nodate"; cite-year:"2019"; cite-authors:"Melquiond"; cite-authors-long:"Melquiond"; cite-label:"Melquiond, n.d."; caption:"Why3&nl;Melquiond, 2019"; data-line:"FormalBib.bib:3192"; searchterm:"Why3%20Melquiond%2C%202019"; spellcheck:"false"}
Melquiond, G.&nbsp;(n.d.). Why3. Retrieved February 1, 2019, from <http://why3.lri.fr/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"memarian_exploring_2019"; cite-year:"2019"; cite-authors:"Memarian et al."; cite-authors-long:"Memarian, Gomes, Davis, Kell, Richardson, Watson, and Sewell"; cite-label:"Memarian et al., 2019"; caption:"Exploring C Semantics and Pointer Provenance&nl;Memarian, Gomes, Davis, Kell, Richardson, Watson, and Sewell, 2019"; data-line:"FormalBib.bib:5127"; searchterm:"Exploring%20C%20Semantics%20and%20Pointer%20Provenance%20Memarian%2C%20Gomes%2C%20Davis%2C%20Kell%2C%20Richardson%2C%20Watson%2C%20and%20Sewell%2C%202019"; spellcheck:"false"}
Memarian, K., Gomes, V.&nbsp;B.&nbsp;F., Davis, B., Kell, S., Richardson, A., Watson, R.&nbsp;N.&nbsp;M., & Sewell, P.&nbsp;(2019). Exploring C Semantics and Pointer Provenance. _Proc. ACM Program. Lang._, _3_, 67:1–67:32. https://doi.org/[10.1145/3290380](https://dx.doi.org/10.1145/3290380){.bib-doi}
~ end bibitem

~ begin bibitem {id:"menon_shakti-t:_2017"; cite-year:"2017"; cite-authors:"Menon et al."; cite-authors-long:"Menon, Murugan, Rebeiro, Gala, and Veezhinathan"; cite-label:"Menon, Murugan, Rebeiro, Gala, \& Veezhinathan, 2017"; caption:"Shakti-T: A RISC-V Processor with Light Weight Security Extensions&nl;Menon, Murugan, Rebeiro, Gala, and Veezhinathan, 2017"; data-line:"FormalBib.bib:4631"; searchterm:"ShaktiT%3A%20A%20RISCV%20Processor%20with%20Light%20Weight%20Security%20Extensions%20Menon%2C%20Murugan%2C%20Rebeiro%2C%20Gala%2C%20and%20Veezhinathan%2C%202017"; spellcheck:"false"}
Menon, A., Murugan, S., Rebeiro, C., Gala, N., & Veezhinathan, K.&nbsp;(2017). Shakti-T: A RISC-V Processor with Light Weight Security Extensions. In _Proceedings of the Hardware and Architectural Support for Security and Privacy_ (pp. 2:1–2:8). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3092627.3092629](https://dx.doi.org/10.1145/3092627.3092629){.bib-doi}
~ end bibitem

~ begin bibitem {id:"merigoux_steel_2020"; cite-year:"2020"; cite-authors:"Merigoux and Fromherz"; cite-authors-long:"Merigoux and Fromherz"; cite-label:"Merigoux \& Fromherz, 2020"; caption:"Steel: scaling up memory reasoning for F\* (ADSL 2020) - POPL 2020&nl;Merigoux and Fromherz, 2020"; data-line:"FormalBib.bib:683"; searchterm:"Steel%3A%20scaling%20up%20memory%20reasoning%20for%20F%5C*%20ADSL%202020%20%20POPL%202020%20Merigoux%20and%20Fromherz%2C%202020"; spellcheck:"false"}
Merigoux, D., & Fromherz, A.&nbsp;(2020, January). Steel: scaling up memory reasoning for F\* (ADSL 2020) - POPL 2020. Retrieved January 22, 2021, from <https://popl20.sigplan.org/details/adsl-2020-papers/8/Steel-scaling-up-memory-reasoning-for-F->{.bib-url}
~ end bibitem

~ begin bibitem {id:"merigoux_hacspec_nodate"; cite-year:"n.d."; cite-authors:"Merigoux et al."; cite-authors-long:"Merigoux, Kiefer, and Bhargavan"; cite-label:"Merigoux, Kiefer, \& Bhargavan, n.d."; caption:"Hacspec: succinct, executable, verifiable specifications for high-assurance cryptography embedded in Rust&nl;Merigoux, Kiefer, and Bhargavan, n.d."; data-line:"FormalBib.bib:8036"; searchterm:"Hacspec%3A%20succinct%2C%20executable%2C%20verifiable%20specifications%20for%20highassurance%20cryptography%20embedded%20in%20Rust%20Merigoux%2C%20Kiefer%2C%20and%20Bhargavan%2C%20n.d."; spellcheck:"false"}
Merigoux, D., Kiefer, F., & Bhargavan, K.&nbsp;(n.d.). Hacspec: succinct, executable, verifiable specifications for high-assurance cryptography embedded in Rust, 17.
~ end bibitem

~ begin bibitem {id:"meseguer_symbolic_nodate"; cite-year:"n.d."; cite-authors:"Meseguer"; cite-authors-long:"Meseguer"; cite-label:"Meseguer, n.d."; caption:"Symbolic Computation in Maude: Some Tapas&nl;Meseguer, n.d."; data-line:"FormalBib.bib:5571"; searchterm:"Symbolic%20Computation%20in%20Maude%3A%20Some%20Tapas%20Meseguer%2C%20n.d."; spellcheck:"false"}
Meseguer, J.&nbsp;(n.d.). Symbolic Computation in Maude: Some Tapas, 26.
~ end bibitem

~ begin bibitem {id:"messadi_precursor_2021"; cite-year:"2021"; cite-authors:"Messadi et al."; cite-authors-long:"Messadi, Neumann, Weichbrodt, Almstedt, Mahhouk, and Kapitza"; cite-label:"Messadi et al., 2021"; caption:"Precursor: a fast, client-centric and trusted key-value store using RDMA and Intel SGX&nl;Messadi, Neumann, Weichbrodt, Almstedt, Mahhouk, and Kapitza, 2021"; data-line:"Security.bib:1250"; searchterm:"Precursor%3A%20a%20fast%2C%20clientcentric%20and%20trusted%20keyvalue%20store%20using%20RDMA%20and%20Intel%20SGX%20Messadi%2C%20Neumann%2C%20Weichbrodt%2C%20Almstedt%2C%20Mahhouk%2C%20and%20Kapitza%2C%202021"; spellcheck:"false"}
Messadi, I., Neumann, S., Weichbrodt, N., Almstedt, L., Mahhouk, M., & Kapitza, R.&nbsp;(2021). Precursor: a fast, client-centric and trusted key-value store using RDMA and Intel SGX.&nbsp;In _Proceedings of the 22nd International Middleware Conference_ (pp. 1–13). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3464298.3476129](https://dx.doi.org/10.1145/3464298.3476129){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_metis_nodate"; cite-authors:"2020ab"; cite-authors-long:"2020ab"; cite-label:"\&ldquo;Metis Theorem Prover - Gilith,\&rdquo; n.d."; caption:"Metis Theorem Prover - Gilith&nl;2020ab, "; data-line:"FormalBib.bib:6371"; searchterm:"Metis%20Theorem%20Prover%20%20Gilith%202020ab%2C%20"; spellcheck:"false"}
Metis Theorem Prover - Gilith. (n.d.). Retrieved January 10, 2020, from <http://www.gilith.com/metis/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"meyer_concept_2021"; cite-year:"2021"; cite-authors:"Meyer et al."; cite-authors-long:"Meyer, Arkadova, Kogtenkov, and Naumchev"; cite-label:"Meyer, Arkadova, Kogtenkov, \& Naumchev, 2021"; caption:"The concept of class invariant in object-oriented programming&nl;Meyer, Arkadova, Kogtenkov, and Naumchev, 2021"; data-line:"FormalBib.bib:9151"; searchterm:"The%20concept%20of%20class%20invariant%20in%20objectoriented%20programming%20Meyer%2C%20Arkadova%2C%20Kogtenkov%2C%20and%20Naumchev%2C%202021"; spellcheck:"false"}
Meyer, B., Arkadova, A., Kogtenkov, A., & Naumchev, A.&nbsp;(2021). The concept of class invariant in object-oriented programming. _arXiv:2109.06557 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.06557](http://arxiv.org/abs/2109.06557){.bib-url}
~ end bibitem

~ begin bibitem {id:"mikolov_efficient_2013"; cite-year:"2013"; cite-authors:"Mikolov et al."; cite-authors-long:"Mikolov, Chen, Corrado, and Dean"; cite-label:"Mikolov, Chen, Corrado, \& Dean, 2013"; caption:"Efficient Estimation of Word Representations in Vector Space&nl;Mikolov, Chen, Corrado, and Dean, 2013"; data-line:"Security.bib:1170"; searchterm:"Efficient%20Estimation%20of%20Word%20Representations%20in%20Vector%20Space%20Mikolov%2C%20Chen%2C%20Corrado%2C%20and%20Dean%2C%202013"; spellcheck:"false"}
Mikolov, T., Chen, K., Corrado, G., & Dean, J.&nbsp;(2013). Efficient Estimation of Word Representations in Vector Space. _arXiv:1301.3781 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1301.3781](http://arxiv.org/abs/1301.3781){.bib-url}
~ end bibitem

~ begin bibitem {id:"mikolov_distributed_2013"; cite-year:"2013"; cite-authors:"Mikolov et al."; cite-authors-long:"Mikolov, Sutskever, Chen, Corrado, and Dean"; cite-label:"Mikolov, Sutskever, Chen, Corrado, \& Dean, 2013"; caption:"Distributed Representations of Words and Phrases and their Compositionality&nl;Mikolov, Sutskever, Chen, Corrado, and Dean, 2013"; data-line:"Security.bib:1145"; searchterm:"Distributed%20Representations%20of%20Words%20and%20Phrases%20and%20their%20Compositionality%20Mikolov%2C%20Sutskever%2C%20Chen%2C%20Corrado%2C%20and%20Dean%2C%202013"; spellcheck:"false"}
Mikolov, T., Sutskever, I., Chen, K., Corrado, G., & Dean, J.&nbsp;(2013). Distributed Representations of Words and Phrases and their Compositionality. _arXiv:1310.4546 \[cs, Stat\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1310.4546](http://arxiv.org/abs/1310.4546){.bib-url}
~ end bibitem

~ begin bibitem {id:"mikolov_linguistic_2013"; cite-year:"2013"; cite-authors:"Mikolov et al."; cite-authors-long:"Mikolov, Yih, and Zweig"; cite-label:"Mikolov, Yih, \& Zweig, 2013"; caption:"Linguistic Regularities in Continuous Space Word Representations&nl;Mikolov, Yih, and Zweig, 2013"; data-line:"Security.bib:1159"; searchterm:"Linguistic%20Regularities%20in%20Continuous%20Space%20Word%20Representations%20Mikolov%2C%20Yih%2C%20and%20Zweig%2C%202013"; spellcheck:"false"}
Mikolov, T., Yih, S.&nbsp;W., & Zweig, G.&nbsp;(2013). Linguistic Regularities in Continuous Space Word Representations. Retrieved from <https://www.microsoft.com/en-us/research/publication/linguistic-regularities-in-continuous-space-word-representations/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"milner_models_1973"; cite-year:"1973"; cite-authors:"Milner"; cite-authors-long:"Milner"; cite-label:"Milner, 1973"; caption:"Models of LCF&nl;Milner, 1973"; data-line:"FormalBib.bib:70"; searchterm:"Models%20of%20LCF%20Milner%2C%201973"; spellcheck:"false"}
Milner, R.&nbsp;(1973). _Models of LCF_ (No. {STAN}-{CS}-73-332, Memo {AIM}-186) (p. 19). Stanford University: Stanford University. Retrieved from <http://i.stanford.edu/pub/cstr/reports/cs/tr/73/332/CS-TR-73-332.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mine_octagon_2007"; cite-year:"2007"; cite-authors:"Miné"; cite-authors-long:"Miné"; cite-label:"Miné, 2007"; caption:"The Octagon Abstract Domain&nl;Miné, 2007"; data-line:"FormalBib.bib:7155"; searchterm:"The%20Octagon%20Abstract%20Domain%20Min%C3%A9%2C%202007"; spellcheck:"false"}
Miné, A.&nbsp;(2007). The Octagon Abstract Domain. _arXiv:cs/0703084_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[cs/0703084](http://arxiv.org/abs/cs/0703084){.bib-url}
~ end bibitem

~ begin bibitem {id:"mine_static_nodate"; cite-year:"n.d."; cite-authors:"Miné et al."; cite-authors-long:"Miné, Mastroeni, Møller, Chailloux, Logozzo, Müller, et al."; cite-label:"Miné et al., n.d."; caption:"Static Type and Value Analysis by Abstract Interpretation of Python Programs with Native C Libraries&nl;Miné, Mastroeni, Møller, Chailloux, Logozzo, Müller, et al., n.d."; data-line:"LanguageTools.bib:1276"; searchterm:"Static%20Type%20and%20Value%20Analysis%20by%20Abstract%20Interpretation%20of%20Python%20Programs%20with%20Native%20C%20Libraries%20Min%C3%A9%2C%20Mastroeni%2C%20M%C3%B8ller%2C%20Chailloux%2C%20Logozzo%2C%20M%C3%BCller%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Miné, A., Mastroeni, I., Møller, A., Chailloux, E., Logozzo, F., Müller, P., … Verona, U.&nbsp;di. (n.d.). Static Type and Value Analysis by Abstract Interpretation of Python Programs with Native C Libraries, 271.
~ end bibitem

~ begin bibitem {id:"mine_taking_2016"; cite-year:"2016"; cite-authors:"Miné et al."; cite-authors-long:"Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al."; cite-label:"Miné et al., 2016"; caption:"Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée&nl;Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al., 2016"; data-line:"FormalBib.bib:1246"; searchterm:"Taking%20Static%20Analysis%20to%20the%20Next%20Level%3A%20Proving%20the%20Absence%20of%20RunTime%20Errors%20and%20Data%20Races%20with%20Astr%C3%A9e%20Min%C3%A9%2C%20Mauborgne%2C%20Rival%2C%20Feret%2C%20Cousot%2C%20K%C3%A4stner%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Miné, A., Mauborgne, L., Rival, X., Feret, J., Cousot, P., Kästner, D., … Ferdinand, C.&nbsp;(2016). Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée. In _8th European Congress on Embedded Real Time Software and Systems (ERTS 2016)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01271552>{.bib-url}
~ end bibitem

~ begin bibitem {id:"minsky_real_nodate"; cite-year:"2019"; cite-authors:"Minsky et al."; cite-authors-long:"Minsky, Madhavapeddy, and Hickey"; cite-label:"Minsky, Madhavapeddy, \& Hickey, n.d."; caption:"Real World OCaml&nl;Minsky, Madhavapeddy, and Hickey, 2019"; data-line:"FormalBib.bib:3057"; searchterm:"Real%20World%20OCaml%20Minsky%2C%20Madhavapeddy%2C%20and%20Hickey%2C%202019"; spellcheck:"false"}
Minsky, Y., Madhavapeddy, A., & Hickey, J.&nbsp;(n.d.). Real World OCaml. Retrieved February 1, 2019, from <http://dev.realworldocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mirliaz_flow-insensitive-complete_2021"; cite-year:"2021"; cite-authors:"Mirliaz and Pichardie"; cite-authors-long:"Mirliaz and Pichardie"; cite-label:"Mirliaz \& Pichardie, 2021"; caption:"A Flow-Insensitive-Complete Program Representation&nl;Mirliaz and Pichardie, 2021"; data-line:"FormalBib.bib:8699"; searchterm:"A%20FlowInsensitiveComplete%20Program%20Representation%20Mirliaz%20and%20Pichardie%2C%202021"; spellcheck:"false"}
Mirliaz, S., & Pichardie, D.&nbsp;(2021). _A Flow-Insensitive-Complete Program Representation_. Retrieved from <https://hal.archives-ouvertes.fr/hal-03384612>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mirman_differentiable_nodate"; cite-year:"n.d."; cite-authors:"Mirman et al."; cite-authors-long:"Mirman, Gehr, and Vechev"; cite-label:"Mirman, Gehr, \& Vechev, n.d."; caption:"Differentiable Abstract Interpretation for Provably Robust Neural Networks&nl;Mirman, Gehr, and Vechev, n.d."; data-line:"MachineLearning.bib:128"; searchterm:"Differentiable%20Abstract%20Interpretation%20for%20Provably%20Robust%20Neural%20Networks%20Mirman%2C%20Gehr%2C%20and%20Vechev%2C%20n.d."; spellcheck:"false"}
Mirman, M., Gehr, T., & Vechev, M.&nbsp;(n.d.). Differentiable Abstract Interpretation for Provably Robust Neural Networks, 13.
~ end bibitem

~ begin bibitem {id:"mirman_provable_2020"; cite-year:"2020"; cite-authors:"Mirman et al."; cite-authors-long:"Mirman, Singh, and Vechev"; cite-label:"Mirman, Singh, \& Vechev, 2020"; caption:"A Provable Defense for Deep Residual Networks&nl;Mirman, Singh, and Vechev, 2020"; data-line:"MachineLearning.bib:114"; searchterm:"A%20Provable%20Defense%20for%20Deep%20Residual%20Networks%20Mirman%2C%20Singh%2C%20and%20Vechev%2C%202020"; spellcheck:"false"}
Mirman, M., Singh, G., & Vechev, M.&nbsp;(2020). A Provable Defense for Deep Residual Networks. _arXiv:1903.12519 \[cs, Stat\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1903.12519](http://arxiv.org/abs/1903.12519){.bib-url}
~ end bibitem

~ begin bibitem {id:"mitchell_what_2015"; cite-year:"2015"; cite-authors:"Mitchell"; cite-authors-long:"Mitchell"; cite-label:"Mitchell, 2015"; caption:"What is OpenFlow and why should you care?&nl;Mitchell, 2015"; data-line:"Networking.bib:564"; searchterm:"What%20is%20OpenFlow%20and%20why%20should%20you%20care%3F%20Mitchell%2C%202015"; spellcheck:"false"}
Mitchell, S.&nbsp;(2015, December 16). What is OpenFlow and why should you care? Retrieved January 21, 2021, from <https://itbrief.co.nz/story/what-openflow-and-why-should-you-care>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mitsch_implicit_nodate"; cite-year:"n.d."; cite-authors:"Mitsch"; cite-authors-long:"Mitsch"; cite-label:"Mitsch, n.d."; caption:"Implicit and Explicit Proof Management in KeYmaera X&nl;Mitsch, n.d."; data-line:"FormalBib.bib:113"; searchterm:"Implicit%20and%20Explicit%20Proof%20Management%20in%20KeYmaera%20X%20Mitsch%2C%20n.d."; spellcheck:"false"}
Mitsch, S.&nbsp;(n.d.). Implicit and Explicit Proof Management in KeYmaera X, 15.
~ end bibitem

~ begin bibitem {id:"mitsch_modelplex_2016"; cite-year:"2016"; cite-authors:"Mitsch and Platzer"; cite-authors-long:"Mitsch and Platzer"; cite-label:"Mitsch \& Platzer, 2016"; caption:"ModelPlex: verified runtime validation of verified cyber-physical system models&nl;Mitsch and Platzer, 2016"; data-line:"FormalBib.bib:508"; searchterm:"ModelPlex%3A%20verified%20runtime%20validation%20of%20verified%20cyberphysical%20system%20models%20Mitsch%20and%20Platzer%2C%202016"; spellcheck:"false"}
Mitsch, S., & Platzer, A.&nbsp;(2016). ModelPlex: verified runtime validation of verified cyber-physical system models. _Formal Methods in System Design_, _49_(1), 33–74. https://doi.org/[10.1007/s10703-016-0241-z](https://dx.doi.org/10.1007/s10703-016-0241-z){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mi_general_2021"; cite-year:"2021"; cite-authors:"Mi et al."; cite-authors-long:"Mi, Zhuang, Zang, and Chen"; cite-label:"Mi, Zhuang, Zang, \& Chen, 2021"; caption:"General and Fast Inter-Process Communication via Bypassing Privileged Software&nl;Mi, Zhuang, Zang, and Chen, 2021"; data-line:"FormalBib.bib:9295"; searchterm:"General%20and%20Fast%20InterProcess%20Communication%20via%20Bypassing%20Privileged%20Software%20Mi%2C%20Zhuang%2C%20Zang%2C%20and%20Chen%2C%202021"; spellcheck:"false"}
Mi, Z., Zhuang, H., Zang, B., & Chen, H.&nbsp;(2021). General and Fast Inter-Process Communication via Bypassing Privileged Software. _IEEE Transactions on Computers_, 1–1. https://doi.org/[10.1109/TC.2021.3130751](https://dx.doi.org/10.1109/TC.2021.3130751){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mokhov_algebraic_2017"; cite-year:"2017"; cite-authors:"Mokhov"; cite-authors-long:"Mokhov"; cite-label:"Mokhov, 2017"; caption:"Algebraic Graphs with Class (Functional Pearl)&nl;Mokhov, 2017"; data-line:"FormalBib.bib:1948"; searchterm:"Algebraic%20Graphs%20with%20Class%20Functional%20Pearl%20Mokhov%2C%202017"; spellcheck:"false"}
Mokhov, A.&nbsp;(2017). Algebraic Graphs with Class (Functional Pearl). In _Proceedings of the 10th ACM SIGPLAN International Symposium on Haskell_ (pp. 2–13). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3122955.3122956](https://dx.doi.org/10.1145/3122955.3122956){.bib-doi}
~ end bibitem

~ begin bibitem {id:"molina_evospex_2021"; cite-year:"2021"; cite-authors:"Molina et al."; cite-authors-long:"Molina, Ponzio, Aguirre, and Frias"; cite-label:"Molina, Ponzio, Aguirre, \& Frias, 2021"; caption:"EvoSpex: An Evolutionary Algorithm for Learning Postconditions&nl;Molina, Ponzio, Aguirre, and Frias, 2021"; data-line:"FormalBib.bib:8292"; searchterm:"EvoSpex%3A%20An%20Evolutionary%20Algorithm%20for%20Learning%20Postconditions%20Molina%2C%20Ponzio%2C%20Aguirre%2C%20and%20Frias%2C%202021"; spellcheck:"false"}
Molina, F., Ponzio, P., Aguirre, N., & Frias, M.&nbsp;(2021). EvoSpex: An Evolutionary Algorithm for Learning Postconditions. _arXiv:2102.13569 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.13569](http://arxiv.org/abs/2102.13569){.bib-url}
~ end bibitem

~ begin bibitem {id:"moller_static_nodate"; cite-year:"n.d."; cite-authors:"Møller and Schwartzbach"; cite-authors-long:"Møller and Schwartzbach"; cite-label:"Møller \& Schwartzbach, n.d."; caption:"Static Program Analysis&nl;Møller and Schwartzbach, n.d."; data-line:"LanguageTools.bib:475"; searchterm:"Static%20Program%20Analysis%20M%C3%B8ller%20and%20Schwartzbach%2C%20n.d."; spellcheck:"false"}
Møller, A., & Schwartzbach, M.&nbsp;I.&nbsp;(n.d.). _Static Program Analysis_.
~ end bibitem

~ begin bibitem {id:"moll_decompilation_nodate"; cite-year:"2022"; cite-authors:"Moll"; cite-authors-long:"Moll"; cite-label:"Moll, n.d."; caption:"Decompilation of LLVM IR&nl;Moll, 2022"; data-line:"LanguageTools.bib:1316"; searchterm:"Decompilation%20of%20LLVM%20IR%20Moll%2C%202022"; spellcheck:"false"}
Moll, S.&nbsp;(n.d.). _Decompilation of LLVM IR_ (Bachelor’s Thesis). Saarland University. Retrieved from <https://compilers.cs.uni-saarland.de/publications/theses/moll_bsc.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"monniaux_parallel_2005"; cite-year:"2005"; cite-authors:"Monniaux"; cite-authors-long:"Monniaux"; cite-label:"Monniaux, 2005"; caption:"The parallel implementation of the Astr&bslash;'&lcurly;e&rcurly;e static analyzer&nl;Monniaux, 2005"; data-line:"FormalBib.bib:1270"; searchterm:"The%20parallel%20implementation%20of%20the%20Astr%26bslash%3B'%26lcurly%3Be%26rcurly%3Be%20static%20analyzer%20Monniaux%2C%202005"; spellcheck:"false"}
Monniaux, D.&nbsp;(2005). The parallel implementation of the Astr&bslash;’&lcurly;e&rcurly;e static analyzer. _arXiv:cs/0701191_, _3780_, 86–96. https://doi.org/[10.1007/11575467_7](https://dx.doi.org/10.1007/11575467_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"monniaux_simple_2021"; cite-year:"2021"; cite-authors:"Monniaux and Six"; cite-authors-long:"Monniaux and Six"; cite-label:"Monniaux \& Six, 2021"; caption:"Simple, Light, Yet Formally Verified, Global Common Subexpression Elimination and Loop-Invariant Code Motion&nl;Monniaux and Six, 2021"; data-line:"FormalBib.bib:309"; searchterm:"Simple%2C%20Light%2C%20Yet%20Formally%20Verified%2C%20Global%20Common%20Subexpression%20Elimination%20and%20LoopInvariant%20Code%20Motion%20Monniaux%20and%20Six%2C%202021"; spellcheck:"false"}
Monniaux, D., & Six, C.&nbsp;(2021). _Simple, Light, Yet Formally Verified, Global Common Subexpression Elimination and Loop-Invariant Code Motion_. Retrieved from <https://hal.archives-ouvertes.fr/hal-03212087>{.bib-url}
~ end bibitem

~ begin bibitem {id:"montagu_theory_2013"; cite-year:"2013"; cite-authors:"Montagu et al."; cite-authors-long:"Montagu, Pierce, and Pollack"; cite-label:"Montagu, Pierce, \& Pollack, 2013"; caption:"A Theory of Information-Flow Labels&nl;Montagu, Pierce, and Pollack, 2013"; data-line:"FormalBib.bib:4651"; searchterm:"A%20Theory%20of%20InformationFlow%20Labels%20Montagu%2C%20Pierce%2C%20and%20Pollack%2C%202013"; spellcheck:"false"}
Montagu, B., Pierce, B.&nbsp;C., & Pollack, R.&nbsp;(2013). A Theory of Information-Flow Labels. In _2013 IEEE 26th Computer Security Foundations Symposium_ (pp. 3–17). https://doi.org/[10.1109/CSF.2013.8](https://dx.doi.org/10.1109/CSF.2013.8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"monteiro_model_2021"; cite-year:"2021"; cite-authors:"Monteiro et al."; cite-authors-long:"Monteiro, Gadelha, and Cordeiro"; cite-label:"Monteiro, Gadelha, \& Cordeiro, 2021"; caption:"Model Checking C++ Programs&nl;Monteiro, Gadelha, and Cordeiro, 2021"; data-line:"FormalBib.bib:7801"; searchterm:"Model%20Checking%20C%2B%2B%20Programs%20Monteiro%2C%20Gadelha%2C%20and%20Cordeiro%2C%202021"; spellcheck:"false"}
Monteiro, F.&nbsp;R., Gadelha, M.&nbsp;R., & Cordeiro, L.&nbsp;C.&nbsp;(2021). Model Checking C++ Programs. _arXiv:2107.01093 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2107.01093](http://arxiv.org/abs/2107.01093){.bib-url}
~ end bibitem

~ begin bibitem {id:"morrisett_ipdl_2021"; cite-year:"2021"; cite-authors:"Morrisett et al."; cite-authors-long:"Morrisett, Shi, Sojakova, Fan, and Gancher"; cite-label:"Morrisett, Shi, Sojakova, Fan, \& Gancher, 2021"; caption:"IPDL: A Simple Framework for Formally Verifying Distributed Cryptographic Protocols&nl;Morrisett, Shi, Sojakova, Fan, and Gancher, 2021"; data-line:"Security.bib:1065"; searchterm:"IPDL%3A%20A%20Simple%20Framework%20for%20Formally%20Verifying%20Distributed%20Cryptographic%20Protocols%20Morrisett%2C%20Shi%2C%20Sojakova%2C%20Fan%2C%20and%20Gancher%2C%202021"; spellcheck:"false"}
Morrisett, G., Shi, E., Sojakova, K., Fan, X., & Gancher, J.&nbsp;(2021). _IPDL: A Simple Framework for Formally Verifying Distributed Cryptographic Protocols_ (No. 147). Retrieved from <http://eprint.iacr.org/2021/147>{.bib-url}
~ end bibitem

~ begin bibitem {id:"morshtein_verifying_nodate"; cite-year:"n.d."; cite-authors:"Morshtein and Ettinger"; cite-authors-long:"Morshtein and Ettinger"; cite-label:"Morshtein \& Ettinger, n.d."; caption:"Verifying Time Complexity of Binary Search using Dafny&nl;Morshtein and Ettinger, n.d."; data-line:"FormalBib.bib:121"; searchterm:"Verifying%20Time%20Complexity%20of%20Binary%20Search%20using%20Dafny%20Morshtein%20and%20Ettinger%2C%20n.d."; spellcheck:"false"}
Morshtein, S., & Ettinger, R.&nbsp;(n.d.). Verifying Time Complexity of Binary Search using Dafny, 16.
~ end bibitem

~ begin bibitem {id:"moscato_provably_2019"; cite-year:"2019"; cite-authors:"Moscato et al."; cite-authors-long:"Moscato, Titolo, Feliú, and Muñoz"; cite-label:"Moscato, Titolo, Feliú, \& Muñoz, 2019"; caption:"Provably Correct Floating-Point Implementation of a Point-in-Polygon Algorithm&nl;Moscato, Titolo, Feliú, and Muñoz, 2019"; data-line:"FormalBib.bib:6884"; searchterm:"Provably%20Correct%20FloatingPoint%20Implementation%20of%20a%20PointinPolygon%20Algorithm%20Moscato%2C%20Titolo%2C%20Feli%C3%BA%2C%20and%20Mu%C3%B1oz%2C%202019"; spellcheck:"false"}
Moscato, M.&nbsp;M., Titolo, L., Feliú, M.&nbsp;A., & Muñoz, C.&nbsp;A.&nbsp;(2019). Provably Correct Floating-Point Implementation of a Point-in-Polygon Algorithm. In M.&nbsp;H.&nbsp;ter Beek, A.&nbsp;McIver, & J.&nbsp;N.&nbsp;Oliveira (Eds.), _Formal Methods – The Next 30 Years_ (pp. 21–37). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"moskal_programming_2009"; cite-year:"2009"; cite-authors:"Moskal"; cite-authors-long:"Moskal"; cite-label:"Moskal, 2009"; caption:"Programming with triggers&nl;Moskal, 2009"; data-line:"FormalBib.bib:7610"; searchterm:"Programming%20with%20triggers%20Moskal%2C%202009"; spellcheck:"false"}
Moskal, M.&nbsp;(2009). Programming with triggers. In _Proceedings of the 7th International Workshop on Satisfiability Modulo Theories_ (pp. 20–29). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/1670412.1670416](https://dx.doi.org/10.1145/1670412.1670416){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mosses_fundamental_2021"; cite-year:"2021"; cite-authors:"Mosses"; cite-authors-long:"Mosses"; cite-label:"Mosses, 2021"; caption:"Fundamental Constructs in Programming Languages&nl;Mosses, 2021"; data-line:"FormalBib.bib:7570"; searchterm:"Fundamental%20Constructs%20in%20Programming%20Languages%20Mosses%2C%202021"; spellcheck:"false"}
Mosses, P.&nbsp;D.&nbsp;(2021). Fundamental Constructs in Programming Languages. _arXiv:2107.10545 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2107.10545](http://arxiv.org/abs/2107.10545){.bib-url}
~ end bibitem

~ begin bibitem {id:"Linz:Coco"; cite-year:"2013"; cite-authors:"M&ouml;ssenb&ouml;ck et al."; cite-authors-long:"M&ouml;ssenb&ouml;ck, L&ouml;berbauer, and W&ouml;&szlig;"; cite-label:"M\&ouml;ssenb\&ouml;ck, L\&ouml;berbauer, \& W\&ouml;\&szlig;, 2013"; caption:"The Compiler Generator Coco/R&nl;M&ouml;ssenb&ouml;ck, L&ouml;berbauer, and W&ouml;&szlig;, 2013"; data-line:"DafnyRef.bib:21"; searchterm:"The%20Compiler%20Generator%20Coco%2FR%20M%26ouml%3Bssenb%26ouml%3Bck%2C%20L%26ouml%3Bberbauer%2C%20and%20W%26ouml%3B%26szlig%3B%2C%202013"; spellcheck:"false"}
M&ouml;ssenb&ouml;ck, H., L&ouml;berbauer, M., & W&ouml;&szlig;, A.&nbsp;(2013). The Compiler Generator Coco/R.&nbsp;Open source from University of Linz.
~ end bibitem

~ begin bibitem {id:"mit_programming_languages_and_verification_group_fiat-crypto_2021"; cite-year:"2021"; cite-authors:"\ and Group"; cite-authors-long:"\ and Group"; cite-label:"\\ \& Group, 2021"; caption:"Fiat-Crypto&nl;\ and Group, 2021"; data-line:"FormalBib.bib:635"; searchterm:"FiatCrypto%20%5C%20and%20Group%2C%202021"; spellcheck:"false"}
\ M.&nbsp;P.&nbsp;L., & Group,  &rcurly; V.&nbsp;(2021). _Fiat-Crypto_. Programming Languages and Verification Group at MIT CSAIL.&nbsp;Retrieved from <https://github.com/mit-plv/fiat-crypto>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mullen_oeuf:_2018"; cite-year:"2018a"; cite-authors:"Mullen et al."; cite-authors-long:"Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman"; cite-label:"Mullen, Pernsteiner, Wilcox, Tatlock, \& Grossman, 2018a"; caption:"ŒUf: Minimizing the Coq Extraction TCB&nl;Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman, 2018a"; data-line:"FormalBib.bib:4046"; searchterm:"%C5%92Uf%3A%20Minimizing%20the%20Coq%20Extraction%20TCB%20Mullen%2C%20Pernsteiner%2C%20Wilcox%2C%20Tatlock%2C%20and%20Grossman%2C%202018a"; spellcheck:"false"}
Mullen, E., Pernsteiner, S., Wilcox, J.&nbsp;R., Tatlock, Z., & Grossman, D.&nbsp;(2018a). ŒUf: Minimizing the Coq Extraction TCB.&nbsp;In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 172–185). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167089](https://dx.doi.org/10.1145/3167089){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mullen_oeuf:_2018-1"; cite-year:"2018b"; cite-authors:"Mullen et al."; cite-authors-long:"Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman"; cite-label:"Mullen, Pernsteiner, Wilcox, Tatlock, \& Grossman, 2018b"; caption:"ŒUf: Minimizing the Coq Extraction TCB&nl;Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman, 2018b"; data-line:"FormalBib.bib:4175"; searchterm:"%C5%92Uf%3A%20Minimizing%20the%20Coq%20Extraction%20TCB%20Mullen%2C%20Pernsteiner%2C%20Wilcox%2C%20Tatlock%2C%20and%20Grossman%2C%202018b"; spellcheck:"false"}
Mullen, E., Pernsteiner, S., Wilcox, J.&nbsp;R., Tatlock, Z., & Grossman, D.&nbsp;(2018b). ŒUf: Minimizing the Coq Extraction TCB.&nbsp;In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 172–185). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167089](https://dx.doi.org/10.1145/3167089){.bib-doi}
~ end bibitem

~ begin bibitem {id:"muller_first_2021"; cite-year:"2021"; cite-authors:"Müller and Shankar"; cite-authors-long:"Müller and Shankar"; cite-label:"Müller \& Shankar, 2021"; caption:"The First Fifteen Years of the Verified Software Project&nl;Müller and Shankar, 2021"; data-line:"FormalBib.bib:8983"; searchterm:"The%20First%20Fifteen%20Years%20of%20the%20Verified%20Software%20Project%20M%C3%BCller%20and%20Shankar%2C%202021"; spellcheck:"false"}
Müller, P., & Shankar, N.&nbsp;(2021). The First Fifteen Years of the Verified Software Project. In _Theories of Programming: The Life and Works of Tony Hoare_ (1st ed., Vol. 39, pp. 93–124). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3477355.3477362](https://dx.doi.org/10.1145/3477355.3477362){.bib-doi}
~ end bibitem

~ begin bibitem {id:"muller_concise_2020"; cite-year:"2020"; cite-authors:"Müller et al."; cite-authors-long:"Müller, Wolf, and Schwerhoff"; cite-label:"Müller, Wolf, \& Schwerhoff, 2020"; caption:"Concise Outlines for a Complex Logic: A Proof Outline Checker for TaDA&nl;Müller, Wolf, and Schwerhoff, 2020"; data-line:"FormalBib.bib:825"; searchterm:"Concise%20Outlines%20for%20a%20Complex%20Logic%3A%20A%20Proof%20Outline%20Checker%20for%20TaDA%20M%C3%BCller%2C%20Wolf%2C%20and%20Schwerhoff%2C%202020"; spellcheck:"false"}
Müller, P., Wolf, F.&nbsp;A., & Schwerhoff, M.&nbsp;(2020). _Concise Outlines for a Complex Logic: A Proof Outline Checker for TaDA_ (Working Paper) (p. 2010.07080). Cornell University. https://doi.org/[10.3929/ethz-b-000456825](https://dx.doi.org/10.3929/ethz-b-000456825){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mulligan_lem:_2014"; cite-year:"2014"; cite-authors:"Mulligan et al."; cite-authors-long:"Mulligan, Owens, Gray, Ridge, and Sewell"; cite-label:"Mulligan, Owens, Gray, Ridge, \& Sewell, 2014"; caption:"Lem: Reusable Engineering of Real-world Semantics&nl;Mulligan, Owens, Gray, Ridge, and Sewell, 2014"; data-line:"FormalBib.bib:5033"; searchterm:"Lem%3A%20Reusable%20Engineering%20of%20Realworld%20Semantics%20Mulligan%2C%20Owens%2C%20Gray%2C%20Ridge%2C%20and%20Sewell%2C%202014"; spellcheck:"false"}
Mulligan, D.&nbsp;P., Owens, S., Gray, K.&nbsp;E., Ridge, T., & Sewell, P.&nbsp;(2014). Lem: Reusable Engineering of Real-world Semantics. In _Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming_ (pp. 175–188). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2628136.2628143](https://dx.doi.org/10.1145/2628136.2628143){.bib-doi}
~ end bibitem

~ begin bibitem {id:"murawski_invitation_2016"; cite-year:"2016"; cite-authors:"Murawski and Tzevelekos"; cite-authors-long:"Murawski and Tzevelekos"; cite-label:"Murawski \& Tzevelekos, 2016"; caption:"An Invitation to Game Semantics&nl;Murawski and Tzevelekos, 2016"; data-line:"FormalBib.bib:1152"; searchterm:"An%20Invitation%20to%20Game%20Semantics%20Murawski%20and%20Tzevelekos%2C%202016"; spellcheck:"false"}
Murawski, A.&nbsp;S., & Tzevelekos, N.&nbsp;(2016). An Invitation to Game Semantics. _ACM SIGLOG News_, _3_(2), 56–67. https://doi.org/[10.1145/2948896.2948902](https://dx.doi.org/10.1145/2948896.2948902){.bib-doi}
~ end bibitem

~ begin bibitem {id:"murphy_validating_2021"; cite-year:"2021"; cite-authors:"Murphy et al."; cite-authors-long:"Murphy, Viger, Sandro, Shahin, and Chechik"; cite-label:"Murphy, Viger, Sandro, Shahin, \& Chechik, 2021"; caption:"Validating Safety Arguments with Lean&nl;Murphy, Viger, Sandro, Shahin, and Chechik, 2021"; data-line:"FormalBib.bib:9230"; searchterm:"Validating%20Safety%20Arguments%20with%20Lean%20Murphy%2C%20Viger%2C%20Sandro%2C%20Shahin%2C%20and%20Chechik%2C%202021"; spellcheck:"false"}
Murphy, L., Viger, T., Sandro, A.&nbsp;D., Shahin, R., & Chechik, M.&nbsp;(2021). Validating Safety Arguments with Lean. In R.&nbsp;Calinescu & C.&nbsp;S.&nbsp;Păsăreanu (Eds.), _Software Engineering and Formal Methods_ (pp. 23–43). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-92124-8_2](https://dx.doi.org/10.1007/978-3-030-92124-8_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"murray_incremental_2021"; cite-year:"2021"; cite-authors:"Murray et al."; cite-authors-long:"Murray, Yan, and Ernst"; cite-label:"Murray, Yan, \& Ernst, 2021"; caption:"Incremental Vulnerability Detection via Back-Propagating Symbolic Execution of Insecurity Separation Logic&nl;Murray, Yan, and Ernst, 2021"; data-line:"Security.bib:806"; searchterm:"Incremental%20Vulnerability%20Detection%20via%20BackPropagating%20Symbolic%20Execution%20of%20Insecurity%20Separation%20Logic%20Murray%2C%20Yan%2C%20and%20Ernst%2C%202021"; spellcheck:"false"}
Murray, T., Yan, P., & Ernst, G.&nbsp;(2021). Incremental Vulnerability Detection via Back-Propagating Symbolic Execution of Insecurity Separation Logic. _arXiv:2107.05225 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2107.05225](http://arxiv.org/abs/2107.05225){.bib-url}
~ end bibitem

~ begin bibitem {id:"myreen_minimalistic_2021"; cite-year:"2021b"; cite-authors:"Myreen"; cite-authors-long:"Myreen"; cite-label:"Myreen, 2021a"; caption:"A minimalistic verified bootstrapped compiler (proof pearl)&nl;Myreen, 2021b"; data-line:"Security.bib:717"; searchterm:"A%20minimalistic%20verified%20bootstrapped%20compiler%20proof%20pearl%20Myreen%2C%202021b"; spellcheck:"false"}
Myreen, M.&nbsp;O.&nbsp;(2021a). A minimalistic verified bootstrapped compiler (proof pearl). In _Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 32–45). Virtual Denmark: ACM.&nbsp;https://doi.org/[10.1145/3437992.3439915](https://dx.doi.org/10.1145/3437992.3439915){.bib-doi}
~ end bibitem

~ begin bibitem {id:"myreen_minimalistic_2021-1"; cite-year:"2021c"; cite-authors:"Myreen"; cite-authors-long:"Myreen"; cite-label:"Myreen, 2021b"; caption:"A minimalistic verified bootstrapped compiler (proof pearl)&nl;Myreen, 2021c"; data-line:"FormalBib.bib:9571"; searchterm:"A%20minimalistic%20verified%20bootstrapped%20compiler%20proof%20pearl%20Myreen%2C%202021c"; spellcheck:"false"}
Myreen, M.&nbsp;O.&nbsp;(2021b). A minimalistic verified bootstrapped compiler (proof pearl). In _Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 32–45). Virtual Denmark: ACM.&nbsp;https://doi.org/[10.1145/3437992.3439915](https://dx.doi.org/10.1145/3437992.3439915){.bib-doi}
~ end bibitem

~ begin bibitem {id:"myreen_cakeml_2021"; cite-year:"2021a"; cite-authors:"Myreen"; cite-authors-long:"Myreen"; cite-label:"Myreen, 2021c"; caption:"The CakeML Project's Quest for Ever Stronger Correctness Theorems&nl;Myreen, 2021a"; data-line:"FormalBib.bib:7864"; searchterm:"The%20CakeML%20Project's%20Quest%20for%20Ever%20Stronger%20Correctness%20Theorems%20Myreen%2C%202021a"; spellcheck:"false"}
Myreen, M.&nbsp;O.&nbsp;(2021c). The CakeML Project’s Quest for Ever Stronger Correctness Theorems, 10.
~ end bibitem

~ begin bibitem {id:"hutchison_practical_2010"; cite-year:"2010"; cite-authors:"Naeem et al."; cite-authors-long:"Naeem, Lhoták, and Rodriguez"; cite-label:"Naeem, Lhoták, \& Rodriguez, 2010"; caption:"Practical Extensions to the IFDS Algorithm&nl;Naeem, Lhoták, and Rodriguez, 2010"; data-line:"LanguageTools.bib:999"; searchterm:"Practical%20Extensions%20to%20the%20IFDS%20Algorithm%20Naeem%2C%20Lhot%C3%A1k%2C%20and%20Rodriguez%2C%202010"; spellcheck:"false"}
Naeem, N.&nbsp;A., Lhoták, O., & Rodriguez, J.&nbsp;(2010). Practical Extensions to the IFDS Algorithm. In R.&nbsp;Gupta (Ed.), _Compiler Construction_ (Vol. 6011, pp. 124–144). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-11970-5_8](https://dx.doi.org/10.1007/978-3-642-11970-5_8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"namjoshi_witnessing_2019"; cite-year:"2019"; cite-authors:"Namjoshi and Tabajara"; cite-authors-long:"Namjoshi and Tabajara"; cite-label:"Namjoshi \& Tabajara, 2019"; caption:"Witnessing Secure Compilation&nl;Namjoshi and Tabajara, 2019"; data-line:"Security.bib:216"; searchterm:"Witnessing%20Secure%20Compilation%20Namjoshi%20and%20Tabajara%2C%202019"; spellcheck:"false"}
Namjoshi, K.&nbsp;S., & Tabajara, L.&nbsp;M.&nbsp;(2019). Witnessing Secure Compilation. _arXiv:1911.05866 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1911.05866](http://arxiv.org/abs/1911.05866){.bib-url}
~ end bibitem

~ begin bibitem {id:"namjoshi_self-certifying_2021"; cite-year:"2021"; cite-authors:"Namjoshi and Xue"; cite-authors-long:"Namjoshi and Xue"; cite-label:"Namjoshi \& Xue, 2021"; caption:"A Self-certifying Compilation Framework for WebAssembly&nl;Namjoshi and Xue, 2021"; data-line:"FormalBib.bib:5354"; searchterm:"A%20Selfcertifying%20Compilation%20Framework%20for%20WebAssembly%20Namjoshi%20and%20Xue%2C%202021"; spellcheck:"false"}
Namjoshi, K.&nbsp;S., & Xue, A.&nbsp;(2021). A Self-certifying Compilation Framework for WebAssembly. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 127–148). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_7](https://dx.doi.org/10.1007/978-3-030-67067-2_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017-1"; cite-year:"2017a"; cite-authors:"Nelson et al."; cite-authors-long:"Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"Nelson et al., 2017a"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel&nl;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017a"; data-line:"FormalBib.bib:1721"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017a"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017a). Hyperkernel: Push-Button Verification of an OS Kernel. In _Proceedings of the 26th Symposium on Operating Systems Principles_ (pp. 252–269). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017"; cite-year:"2017b"; cite-authors:"Nelson et al."; cite-authors-long:"Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"Nelson et al., 2017b"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel - Slides&nl;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017b"; data-line:"FormalBib.bib:1703"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20%20Slides%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017b"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017b). Hyperkernel: Push-Button Verification of an OS Kernel - Slides. In _Proceedings of the 26th Symposium on Operating Systems Principles&nbsp;- SOSP ’17_ (pp. 252–269). Shanghai, China: ACM Press. https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"neumann_risks_nodate"; cite-year:"2021"; cite-authors:"Neumann"; cite-authors-long:"Neumann"; cite-label:"Neumann, n.d."; caption:"The RISKS Digest&nl;Neumann, 2021"; data-line:"Security.bib:1330"; searchterm:"The%20RISKS%20Digest%20Neumann%2C%202021"; spellcheck:"false"}
Neumann, P.&nbsp;G.&nbsp;(n.d.). The RISKS Digest. _The RISKS Digest_. Retrieved from <http://catless.ncl.ac.uk/risks/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"new_gradual_2021"; cite-year:"2021"; cite-authors:"New et al."; cite-authors-long:"New, Licata, and Ahmed"; cite-label:"New, Licata, \& Ahmed, 2021"; caption:"Gradual type theory&nl;New, Licata, and Ahmed, 2021"; data-line:"FormalBib.bib:8592"; searchterm:"Gradual%20type%20theory%20New%2C%20Licata%2C%20and%20Ahmed%2C%202021"; spellcheck:"false"}
New, M.&nbsp;S., Licata, D.&nbsp;R., & Ahmed, A.&nbsp;(2021). Gradual type theory. _Journal of Functional Programming_, _31_, e21. https://doi.org/[10.1017/S0956796821000125](https://dx.doi.org/10.1017/S0956796821000125){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nguyen_regvd_2021"; cite-year:"2021"; cite-authors:"Nguyen et al."; cite-authors-long:"Nguyen, Nguyen, Nguyen, Le, Tran, and Phung"; cite-label:"Nguyen et al., 2021"; caption:"ReGVD: Revisiting Graph Neural Networks for Vulnerability Detection&nl;Nguyen, Nguyen, Nguyen, Le, Tran, and Phung, 2021"; data-line:"Security.bib:1210"; searchterm:"ReGVD%3A%20Revisiting%20Graph%20Neural%20Networks%20for%20Vulnerability%20Detection%20Nguyen%2C%20Nguyen%2C%20Nguyen%2C%20Le%2C%20Tran%2C%20and%20Phung%2C%202021"; spellcheck:"false"}
Nguyen, V.-A., Nguyen, D.&nbsp;Q., Nguyen, V., Le, T., Tran, Q.&nbsp;H., & Phung, D.&nbsp;(2021). ReGVD: Revisiting Graph Neural Networks for Vulnerability Detection. _arXiv:2110.07317 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.07317](http://arxiv.org/abs/2110.07317){.bib-url}
~ end bibitem

~ begin bibitem {id:"nienhuis_operational_2016"; cite-year:"2016"; cite-authors:"Nienhuis et al."; cite-authors-long:"Nienhuis, Memarian, and Sewell"; cite-label:"Nienhuis, Memarian, \& Sewell, 2016"; caption:"An Operational Semantics for C/C++11 Concurrency&nl;Nienhuis, Memarian, and Sewell, 2016"; data-line:"FormalBib.bib:5073"; searchterm:"An%20Operational%20Semantics%20for%20C%2FC%2B%2B11%20Concurrency%20Nienhuis%2C%20Memarian%2C%20and%20Sewell%2C%202016"; spellcheck:"false"}
Nienhuis, K., Memarian, K., & Sewell, P.&nbsp;(2016). An Operational Semantics for C/C++11 Concurrency. In _Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications_ (pp. 111–128). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2983990.2983997](https://dx.doi.org/10.1145/2983990.2983997){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nie_roosterize_2021"; cite-year:"2021"; cite-authors:"Nie et al."; cite-authors-long:"Nie, Palmskog, Li, and Gligoric"; cite-label:"Nie, Palmskog, Li, \& Gligoric, 2021"; caption:"Roosterize: Suggesting Lemma Names for Coq Verification Projects Using Deep Learning&nl;Nie, Palmskog, Li, and Gligoric, 2021"; data-line:"FormalBib.bib:8267"; searchterm:"Roosterize%3A%20Suggesting%20Lemma%20Names%20for%20Coq%20Verification%20Projects%20Using%20Deep%20Learning%20Nie%2C%20Palmskog%2C%20Li%2C%20and%20Gligoric%2C%202021"; spellcheck:"false"}
Nie, P., Palmskog, K., Li, J.&nbsp;J., & Gligoric, M.&nbsp;(2021). Roosterize: Suggesting Lemma Names for Coq Verification Projects Using Deep Learning. _arXiv:2103.01346 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.01346](http://arxiv.org/abs/2103.01346){.bib-url}
~ end bibitem

~ begin bibitem {id:"nipkow_functional_nodate"; cite-year:"n.d."; cite-authors:"Nipkow et al."; cite-authors-long:"Nipkow, Blanchette, Eberl, Gómez-Londoño, Lammich, Sternagel, et al."; cite-label:"Nipkow et al., n.d."; caption:"Functional Algorithms, Veriﬁed!&nl;Nipkow, Blanchette, Eberl, Gómez-Londoño, Lammich, Sternagel, et al., n.d."; data-line:"FormalBib.bib:105"; searchterm:"Functional%20Algorithms%2C%20Veri%EF%AC%81ed!%20Nipkow%2C%20Blanchette%2C%20Eberl%2C%20G%C3%B3mezLondo%C3%B1o%2C%20Lammich%2C%20Sternagel%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Nipkow, T., Blanchette, J., Eberl, M., Gómez-Londoño, A., Lammich, P., Sternagel, C., … Zhan, B.&nbsp;(n.d.). Functional Algorithms, Veriﬁed!, 276.
~ end bibitem

~ begin bibitem {id:"oak_language_nodate"; cite-year:"n.d."; cite-authors:"Oak et al."; cite-authors-long:"Oak, Ahmadian, Balliu, and Salvaneschi"; cite-label:"Oak, Ahmadian, Balliu, \& Salvaneschi, n.d."; caption:"Language Support for Secure Software Development with Enclaves&nl;Oak, Ahmadian, Balliu, and Salvaneschi, n.d."; data-line:"Security.bib:150"; searchterm:"Language%20Support%20for%20Secure%20Software%20Development%20with%20Enclaves%20Oak%2C%20Ahmadian%2C%20Balliu%2C%20and%20Salvaneschi%2C%20n.d."; spellcheck:"false"}
Oak, A., Ahmadian, A.&nbsp;M., Balliu, M., & Salvaneschi, G.&nbsp;(n.d.). Language Support for Secure Software Development with Enclaves, 16.
~ end bibitem

~ begin bibitem {id:"ocallahan_engineering_2017"; cite-year:"2017"; cite-authors:"O’Callahan et al."; cite-authors-long:"O’Callahan, Jones, Froyd, Huey, Noll, and Partush"; cite-label:"O’Callahan et al., 2017"; caption:"Engineering Record And Replay For Deployability: Extended Technical Report&nl;O’Callahan, Jones, Froyd, Huey, Noll, and Partush, 2017"; data-line:"LanguageTools.bib:950"; searchterm:"Engineering%20Record%20And%20Replay%20For%20Deployability%3A%20Extended%20Technical%20Report%20O%E2%80%99Callahan%2C%20Jones%2C%20Froyd%2C%20Huey%2C%20Noll%2C%20and%20Partush%2C%202017"; spellcheck:"false"}
O’Callahan, R., Jones, C., Froyd, N., Huey, K., Noll, A., & Partush, N.&nbsp;(2017). Engineering Record And Replay For Deployability: Extended Technical Report. _arXiv:1705.05937 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1705.05937](http://arxiv.org/abs/1705.05937){.bib-url}
~ end bibitem

~ begin bibitem {id:"oconnor_using_2019"; cite-year:"2019"; cite-authors:"O’Connor et al."; cite-authors-long:"O’Connor, Tseng, Pudelko, Cascone, Endurthi, Wang, et al."; cite-label:"O’Connor et al., 2019"; caption:"Using P4 on Fixed-Pipeline and Programmable Stratum Switches&nl;O’Connor, Tseng, Pudelko, Cascone, Endurthi, Wang, et al., 2019"; data-line:"Networking.bib:825"; searchterm:"Using%20P4%20on%20FixedPipeline%20and%20Programmable%20Stratum%20Switches%20O%E2%80%99Connor%2C%20Tseng%2C%20Pudelko%2C%20Cascone%2C%20Endurthi%2C%20Wang%2C%20et%20al.%2C%202019"; spellcheck:"false"}
O’Connor, B., Tseng, Y., Pudelko, M., Cascone, C., Endurthi, A., Wang, Y., … Vahdat, A.&nbsp;(2019). Using P4 on Fixed-Pipeline and Programmable Stratum Switches. In _2019 ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS)_ (pp. 1–2). https://doi.org/[10.1109/ANCS.2019.8901885](https://dx.doi.org/10.1109/ANCS.2019.8901885){.bib-doi}
~ end bibitem

~ begin bibitem {id:"oconnor_cogent_2021"; cite-year:"2021"; cite-authors:"L.&nbsp;O’Connor et al."; cite-authors-long:"L.&nbsp;O’Connor, Chen, Rizkallah, Jackson, Amani, Klein, et al."; cite-label:"L. O’Connor et al., 2021"; caption:"Cogent: uniqueness types and certifying compilation&nl;L. O’Connor, Chen, Rizkallah, Jackson, Amani, Klein, et al., 2021"; data-line:"FormalBib.bib:8634"; searchterm:"Cogent%3A%20uniqueness%20types%20and%20certifying%20compilation%20L.%20O%E2%80%99Connor%2C%20Chen%2C%20Rizkallah%2C%20Jackson%2C%20Amani%2C%20Klein%2C%20et%20al.%2C%202021"; spellcheck:"false"}
O’Connor, L., Chen, Z., Rizkallah, C., Jackson, V., Amani, S., Klein, G., … Keller, G.&nbsp;(2021). Cogent: uniqueness types and certifying compilation. _Journal of Functional Programming_, _31_, e25. https://doi.org/[10.1017/S095679682100023X](https://dx.doi.org/10.1017/S095679682100023X){.bib-doi}
~ end bibitem

~ begin bibitem {id:"oconnor_computer-verified_2010"; cite-year:"2010"; cite-authors:"R.&nbsp;O’Connor and Spitters"; cite-authors-long:"R.&nbsp;O’Connor and Spitters"; cite-label:"R. O’Connor \& Spitters, 2010"; caption:"A computer-verified monadic functional implementation of the integral&nl;R. O’Connor and Spitters, 2010"; data-line:"FormalBib.bib:6814"; searchterm:"A%20computerverified%20monadic%20functional%20implementation%20of%20the%20integral%20R.%20O%E2%80%99Connor%20and%20Spitters%2C%202010"; spellcheck:"false"}
O’Connor, R., & Spitters, B.&nbsp;(2010). A computer-verified monadic functional implementation of the integral. _Theoretical Computer Science_, _411_(37), 3386–3402. https://doi.org/[10.1016/j.tcs.2010.05.031](https://dx.doi.org/10.1016/j.tcs.2010.05.031){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_categorical_2015"; cite-year:"2015"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2015"; caption:"From Categorical Logic to Facebook Engineering&nl;P. O’Hearn, 2015"; data-line:"FormalBib.bib:1518"; searchterm:"From%20Categorical%20Logic%20to%20Facebook%20Engineering%20P.%20O%E2%80%99Hearn%2C%202015"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2015). From Categorical Logic to Facebook Engineering. In _Proceedings of the 2015 30th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)_ (pp. 17–20). Washington, DC, USA: IEEE Computer Society. https://doi.org/[10.1109/LICS.2015.11](https://dx.doi.org/10.1109/LICS.2015.11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_separation_2019"; cite-year:"2019"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2019"; caption:"Separation logic&nl;P. O’Hearn, 2019"; data-line:"FormalBib.bib:7209"; searchterm:"Separation%20logic%20P.%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2019). Separation logic. _Communications of the ACM_, _62_(2), 86–95. https://doi.org/[10.1145/3211968](https://dx.doi.org/10.1145/3211968){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_local_2001"; cite-year:"2001"; cite-authors:"O’Hearn et al."; cite-authors-long:"O’Hearn, Reynolds, and Yang"; cite-label:"O’Hearn, Reynolds, \& Yang, 2001"; caption:"Local Reasoning about Programs that Alter Data Structures&nl;O’Hearn, Reynolds, and Yang, 2001"; data-line:"FormalBib.bib:3366"; searchterm:"Local%20Reasoning%20about%20Programs%20that%20Alter%20Data%20Structures%20O%E2%80%99Hearn%2C%20Reynolds%2C%20and%20Yang%2C%202001"; spellcheck:"false"}
O’Hearn, P., Reynolds, J., & Yang, H.&nbsp;(2001). Local Reasoning about Programs that Alter Data Structures. In L.&nbsp;Fribourg (Ed.), _Computer Science Logic_ (pp. 1–19). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"ohearn_continuous_2018"; cite-year:"2018"; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, 2018"; caption:"Continuous Reasoning: Scaling the impact of formal methods&nl;P. W. O’Hearn, 2018"; data-line:"FormalBib.bib:1563"; searchterm:"Continuous%20Reasoning%3A%20Scaling%20the%20impact%20of%20formal%20methods%20P.%20W.%20O%E2%80%99Hearn%2C%202018"; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(2018). Continuous Reasoning: Scaling the impact of formal methods. In _Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science&nbsp;- LICS ’18_ (pp. 13–25). Oxford, United Kingdom: ACM Press. https://doi.org/[10.1145/3209108.3209109](https://dx.doi.org/10.1145/3209108.3209109){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_incorrectness_2019"; cite-year:"2019"; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, 2019"; caption:"Incorrectness logic&nl;P. W. O’Hearn, 2019"; data-line:"FormalBib.bib:7226"; searchterm:"Incorrectness%20logic%20P.%20W.%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(2019). Incorrectness logic. _Proceedings of the ACM on Programming Languages_, _4_, 10:1–10:32. https://doi.org/[10.1145/3371078](https://dx.doi.org/10.1145/3371078){.bib-doi}
~ end bibitem

~ begin bibitem {id:"onf_sdn_2021"; cite-year:"2021"; cite-authors:"ONF"; cite-authors-long:"ONF"; cite-label:"ONF, 2021"; caption:"SDN Technical Specifications.Open Networking Foundation&nl;ONF, 2021"; data-line:"Networking.bib:527"; searchterm:"SDN%20Technical%20Specifications.Open%20Networking%20Foundation%20ONF%2C%202021"; spellcheck:"false"}
ONF.&nbsp;(2021). SDN Technical Specifications.Open Networking Foundation. Retrieved January 21, 2021, from <https://opennetworking.org/software-defined-standards/specifications/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ongaro_search_2014"; cite-year:"2014"; cite-authors:"Ongaro and Ousterhout"; cite-authors-long:"Ongaro and Ousterhout"; cite-label:"Ongaro \& Ousterhout, 2014"; caption:"In Search of an Understandable Consensus Algorithm&nl;Ongaro and Ousterhout, 2014"; data-line:"FormalBib.bib:8381"; searchterm:"In%20Search%20of%20an%20Understandable%20Consensus%20Algorithm%20Ongaro%20and%20Ousterhout%2C%202014"; spellcheck:"false"}
Ongaro, D., & Ousterhout, J.&nbsp;(2014). In Search of an Understandable Consensus Algorithm, 18.
~ end bibitem

~ begin bibitem {id:"noauthor_open_nodate-1"; cite-authors:"2021ad"; cite-authors-long:"2021ad"; cite-label:"\&ldquo;Open Compute Project.Open Compute Project,\&rdquo; n.d."; caption:"Open Compute Project.Open Compute Project&nl;2021ad, "; data-line:"Networking.bib:601"; searchterm:"Open%20Compute%20Project.Open%20Compute%20Project%202021ad%2C%20"; spellcheck:"false"}
Open Compute Project.Open Compute Project. (n.d.). Retrieved January 20, 2021, from <https://www.opencompute.org>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_opentheory_nodate"; cite-authors:"2020ae"; cite-authors-long:"2020ae"; cite-label:"\&ldquo;OpenTheory Project - Gilith,\&rdquo; n.d."; caption:"OpenTheory Project - Gilith&nl;2020ae, "; data-line:"FormalBib.bib:6378"; searchterm:"OpenTheory%20Project%20%20Gilith%202020ae%2C%20"; spellcheck:"false"}
OpenTheory Project - Gilith. (n.d.). Retrieved January 10, 2020, from <http://www.gilith.com/opentheory/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_open_nodate-2"; cite-authors:"2021af"; cite-authors-long:"2021af"; cite-label:"\&ldquo;Open vSwitch,\&rdquo; n.d."; caption:"Open vSwitch&nl;2021af, "; data-line:"Networking.bib:738"; searchterm:"Open%20vSwitch%202021af%2C%20"; spellcheck:"false"}
Open vSwitch. (n.d.). Retrieved January 14, 2021, from <https://www.openvswitch.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_open_nodate"; cite-authors:"2021ag"; cite-authors-long:"2021ag"; cite-label:"\&ldquo;Open vSwitch 2.15.90 documentation,\&rdquo; n.d."; caption:"Open vSwitch 2.15.90 documentation&nl;2021ag, "; data-line:"Networking.bib:594"; searchterm:"Open%20vSwitch%202.15.90%20documentation%202021ag%2C%20"; spellcheck:"false"}
Open vSwitch 2.15.90 documentation. (n.d.). Retrieved January 20, 2021, from <https://docs.openvswitch.org/en/latest/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_o-ran_nodate"; cite-authors:"2021ah"; cite-authors-long:"2021ah"; cite-label:"\&ldquo;O-RAN ALLIANCE.O-RAN ALLIANCE,\&rdquo; n.d."; caption:"O-RAN ALLIANCE.O-RAN ALLIANCE&nl;2021ah, "; data-line:"Networking.bib:847"; searchterm:"ORAN%20ALLIANCE.ORAN%20ALLIANCE%202021ah%2C%20"; spellcheck:"false"}
O-RAN ALLIANCE.O-RAN ALLIANCE.&nbsp;(n.d.). Retrieved January 14, 2021, from <https://www.o-ran.org>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ozdemir_unifying_2020"; cite-year:"2020"; cite-authors:"Ozdemir et al."; cite-authors-long:"Ozdemir, Brown, and Wahby"; cite-label:"Ozdemir, Brown, \& Wahby, 2020"; caption:"Unifying Compilers for SNARKs, SMT, and More&nl;Ozdemir, Brown, and Wahby, 2020"; data-line:"FormalBib.bib:877"; searchterm:"Unifying%20Compilers%20for%20SNARKs%2C%20SMT%2C%20and%20More%20Ozdemir%2C%20Brown%2C%20and%20Wahby%2C%202020"; spellcheck:"false"}
Ozdemir, A., Brown, F., & Wahby, R.&nbsp;S.&nbsp;(2020). _Unifying Compilers for SNARKs, SMT, and More_ (No. 1586). Retrieved from <http://eprint.iacr.org/2020/1586>{.bib-url}
~ end bibitem

~ begin bibitem {id:"padon_ivy:_2016"; cite-year:"2016"; cite-authors:"Padon et al."; cite-authors-long:"Padon, McMillan, Panda, Sagiv, and Shoham"; cite-label:"Padon, McMillan, Panda, Sagiv, \& Shoham, 2016"; caption:"Ivy: Safety Verification by Interactive Generalization&nl;Padon, McMillan, Panda, Sagiv, and Shoham, 2016"; data-line:"FormalBib.bib:4026"; searchterm:"Ivy%3A%20Safety%20Verification%20by%20Interactive%20Generalization%20Padon%2C%20McMillan%2C%20Panda%2C%20Sagiv%2C%20and%20Shoham%2C%202016"; spellcheck:"false"}
Padon, O., McMillan, K.&nbsp;L., Panda, A., Sagiv, M., & Shoham, S.&nbsp;(2016). Ivy: Safety Verification by Interactive Generalization. In _Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 614–630). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2908080.2908118](https://dx.doi.org/10.1145/2908080.2908118){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pakin_comprehensive_nodate"; cite-year:"n.d."; cite-authors:"Pakin"; cite-authors-long:"Pakin"; cite-label:"Pakin, n.d."; caption:"The Comprehensive LaTeX Symbol List&nl;Pakin, n.d."; data-line:"FormalBib.bib:3789"; searchterm:"The%20Comprehensive%20LaTeX%20Symbol%20List%20Pakin%2C%20n.d."; spellcheck:"false"}
Pakin, S.&nbsp;(n.d.). The Comprehensive LaTeX Symbol List, 358.
~ end bibitem

~ begin bibitem {id:"palit_dynpta_nodate"; cite-year:"n.d."; cite-authors:"Palit et al."; cite-authors-long:"Palit, Moon, Monrose, and Polychronakis"; cite-label:"Palit, Moon, Monrose, \& Polychronakis, n.d."; caption:"DynPTA: Combining Static and Dynamic Analysis for Practical Selective Data Protection&nl;Palit, Moon, Monrose, and Polychronakis, n.d."; data-line:"Security.bib:420"; searchterm:"DynPTA%3A%20Combining%20Static%20and%20Dynamic%20Analysis%20for%20Practical%20Selective%20Data%20Protection%20Palit%2C%20Moon%2C%20Monrose%2C%20and%20Polychronakis%2C%20n.d."; spellcheck:"false"}
Palit, T., Moon, J.&nbsp;F., Monrose, F., & Polychronakis, M.&nbsp;(n.d.). DynPTA: Combining Static and Dynamic Analysis for Practical Selective Data Protection, 19.
~ end bibitem

~ begin bibitem {id:"panchenko_bolt_2019"; cite-year:"2019"; cite-authors:"Panchenko et al."; cite-authors-long:"Panchenko, Auler, Nell, and Ottoni"; cite-label:"Panchenko, Auler, Nell, \& Ottoni, 2019"; caption:"BOLT: a practical binary optimizer for data centers and beyond&nl;Panchenko, Auler, Nell, and Ottoni, 2019"; data-line:"LanguageTools.bib:337"; searchterm:"BOLT%3A%20a%20practical%20binary%20optimizer%20for%20data%20centers%20and%20beyond%20Panchenko%2C%20Auler%2C%20Nell%2C%20and%20Ottoni%2C%202019"; spellcheck:"false"}
Panchenko, M., Auler, R., Nell, B., & Ottoni, G.&nbsp;(2019). BOLT: a practical binary optimizer for data centers and beyond. In _Proceedings of the 2019 IEEE/ACM International Symposium on Code Generation and Optimization_ (pp. 2–14). Washington, DC, USA: IEEE Press.
~ end bibitem

~ begin bibitem {id:"paraskevopoulou_compiling_2021"; cite-year:"2021"; cite-authors:"Paraskevopoulou and Grover"; cite-authors-long:"Paraskevopoulou and Grover"; cite-label:"Paraskevopoulou \& Grover, 2021"; caption:"Compiling with continuations, correctly&nl;Paraskevopoulou and Grover, 2021"; data-line:"FormalBib.bib:8734"; searchterm:"Compiling%20with%20continuations%2C%20correctly%20Paraskevopoulou%20and%20Grover%2C%202021"; spellcheck:"false"}
Paraskevopoulou, Z., & Grover, A.&nbsp;(2021). Compiling with continuations, correctly. _Proceedings of the ACM on Programming Languages_, _5_, 114:1–114:29. https://doi.org/[10.1145/3485491](https://dx.doi.org/10.1145/3485491){.bib-doi}
~ end bibitem

~ begin bibitem {id:"paraskevopoulou_compositional_nodate"; cite-year:"n.d."; cite-authors:"Paraskevopoulou et al."; cite-authors-long:"Paraskevopoulou, Li, and Appel"; cite-label:"Paraskevopoulou, Li, \& Appel, n.d."; caption:"Compositional Optimizations for CertiCoq&nl;Paraskevopoulou, Li, and Appel, n.d."; data-line:"FormalBib.bib:7785"; searchterm:"Compositional%20Optimizations%20for%20CertiCoq%20Paraskevopoulou%2C%20Li%2C%20and%20Appel%2C%20n.d."; spellcheck:"false"}
Paraskevopoulou, Z., Li, J.&nbsp;M., & Appel, A.&nbsp;W.&nbsp;(n.d.). Compositional Optimizations for CertiCoq, _5_, 30.
~ end bibitem

~ begin bibitem {id:"parkinson_relationship_2012"; cite-year:"2012"; cite-authors:"Parkinson and Summers"; cite-authors-long:"Parkinson and Summers"; cite-label:"Parkinson \& Summers, 2012"; caption:"THE RELATIONSHIP BETWEEN SEPARATION LOGIC AND IMPLICIT DYNAMIC FRAMES&nl;Parkinson and Summers, 2012"; data-line:"FormalBib.bib:7628"; searchterm:"THE%20RELATIONSHIP%20BETWEEN%20SEPARATION%20LOGIC%20AND%20IMPLICIT%20DYNAMIC%20FRAMES%20Parkinson%20and%20Summers%2C%202012"; spellcheck:"false"}
Parkinson, M.&nbsp;J., & Summers, A.&nbsp;J.&nbsp;(2012). THE RELATIONSHIP BETWEEN SEPARATION LOGIC AND IMPLICIT DYNAMIC FRAMES.&nbsp;_Logic Methods in Computer Science_, _802_(3), 54. https://doi.org/[10.2168/LMCS-8(3:1)2012](https://dx.doi.org/10.2168/LMCS-8%283:1%292012){.bib-doi}
~ end bibitem

~ begin bibitem {id:"parkinson_relationship_nodate"; cite-year:"n.d."; cite-authors:"Parkinson and Summers"; cite-authors-long:"Parkinson and Summers"; cite-label:"Parkinson \& Summers, n.d."; caption:"The Relationship between Separation Logic and Implicit Dynamic Frames&nl;Parkinson and Summers, n.d."; data-line:"FormalBib.bib:2553"; searchterm:"The%20Relationship%20between%20Separation%20Logic%20and%20Implicit%20Dynamic%20Frames%20Parkinson%20and%20Summers%2C%20n.d."; spellcheck:"false"}
Parkinson, M.&nbsp;J., & Summers, A.&nbsp;J.&nbsp;(n.d.). The Relationship between Separation Logic and Implicit Dynamic Frames. _LNCS_, _6602_, 439–458.
~ end bibitem

~ begin bibitem {id:"parr_adaptive_nodate"; cite-year:"n.d."; cite-authors:"Parr et al."; cite-authors-long:"Parr, Harwell, and Fisher"; cite-label:"Parr, Harwell, \& Fisher, n.d."; caption:"Adaptive LL(\*) Parsing: The Power of Dynamic Analysis&nl;Parr, Harwell, and Fisher, n.d."; data-line:"LanguageTools.bib:55"; searchterm:"Adaptive%20LL%5C*%20Parsing%3A%20The%20Power%20of%20Dynamic%20Analysis%20Parr%2C%20Harwell%2C%20and%20Fisher%2C%20n.d."; spellcheck:"false"}
Parr, T., Harwell, S., & Fisher, K.&nbsp;(n.d.). Adaptive LL(\*) Parsing: The Power of Dynamic Analysis, 19.
~ end bibitem

~ begin bibitem {id:"passmore_imandra_2020"; cite-year:"2020"; cite-authors:"Passmore et al."; cite-authors-long:"Passmore, Cruanes, Ignatovich, Aitken, Bray, Kagan, et al."; cite-label:"Passmore et al., 2020"; caption:"The Imandra Automated Reasoning System (System Description)&nl;Passmore, Cruanes, Ignatovich, Aitken, Bray, Kagan, et al., 2020"; data-line:"FormalBib.bib:8443"; searchterm:"The%20Imandra%20Automated%20Reasoning%20System%20System%20Description%20Passmore%2C%20Cruanes%2C%20Ignatovich%2C%20Aitken%2C%20Bray%2C%20Kagan%2C%20et%20al.%2C%202020"; spellcheck:"false"}
Passmore, G., Cruanes, S., Ignatovich, D., Aitken, D., Bray, M., Kagan, E., … Mometto, N.&nbsp;(2020). The Imandra Automated Reasoning System (System Description). In N.&nbsp;Peltier & V.&nbsp;Sofronie-Stokkermans (Eds.), _Automated Reasoning_ (pp. 464–471). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-51054-1_30](https://dx.doi.org/10.1007/978-3-030-51054-1_30){.bib-doi}
~ end bibitem

~ begin bibitem {id:"patel_verifying_2021"; cite-year:"2021"; cite-authors:"Patel et al."; cite-authors-long:"Patel, Krishna, Shasha, and Wies"; cite-label:"Patel, Krishna, Shasha, \& Wies, 2021"; caption:"Verifying Concurrent Multicopy Search Structures&nl;Patel, Krishna, Shasha, and Wies, 2021"; data-line:"FormalBib.bib:9175"; searchterm:"Verifying%20Concurrent%20Multicopy%20Search%20Structures%20Patel%2C%20Krishna%2C%20Shasha%2C%20and%20Wies%2C%202021"; spellcheck:"false"}
Patel, N., Krishna, S., Shasha, D., & Wies, T.&nbsp;(2021). Verifying Concurrent Multicopy Search Structures. _arXiv:2109.05631 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.05631](http://arxiv.org/abs/2109.05631){.bib-url}
~ end bibitem

~ begin bibitem {id:"patrignani_formal_2019"; cite-year:"2019"; cite-authors:"Patrignani et al."; cite-authors-long:"Patrignani, Ahmed, and Clarke"; cite-label:"Patrignani, Ahmed, \& Clarke, 2019"; caption:"Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation and Related Work&nl;Patrignani, Ahmed, and Clarke, 2019"; data-line:"Security.bib:272"; searchterm:"Formal%20Approaches%20to%20Secure%20Compilation%3A%20A%20Survey%20of%20Fully%20Abstract%20Compilation%20and%20Related%20Work%20Patrignani%2C%20Ahmed%2C%20and%20Clarke%2C%202019"; spellcheck:"false"}
Patrignani, M., Ahmed, A., & Clarke, D.&nbsp;(2019). Formal Approaches to Secure Compilation: A Survey of Fully Abstract Compilation and Related Work. _ACM Computing Surveys_, _51_(6), 125:1–125:36. https://doi.org/[10.1145/3280984](https://dx.doi.org/10.1145/3280984){.bib-doi}
~ end bibitem

~ begin bibitem {id:"patrignani_robustly_2021"; cite-year:"2021"; cite-authors:"Patrignani and Garg"; cite-authors-long:"Patrignani and Garg"; cite-label:"Patrignani \& Garg, 2021"; caption:"Robustly Safe Compilation, an Efficient Form of Secure Compilation&nl;Patrignani and Garg, 2021"; data-line:"Security.bib:545"; searchterm:"Robustly%20Safe%20Compilation%2C%20an%20Efficient%20Form%20of%20Secure%20Compilation%20Patrignani%20and%20Garg%2C%202021"; spellcheck:"false"}
Patrignani, M., & Garg, D.&nbsp;(2021). Robustly Safe Compilation, an Efficient Form of Secure Compilation. _ACM Transactions on Programming Languages and Systems_, _43_(1), 1–41. https://doi.org/[10.1145/3436809](https://dx.doi.org/10.1145/3436809){.bib-doi}
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate-1"; cite-year:"n.d."; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-a"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation&nl;Patterson and Ahmed, n.d."; data-line:"FormalBib.bib:3706"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20Patterson%20and%20Ahmed%2C%20n.d."; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-a). On Compositional Compiler Correctness and Fully Abstract Compilation, 3. Retrieved from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate"; cite-year:"2019"; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-b"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018&nl;Patterson and Ahmed, 2019"; data-line:"FormalBib.bib:3093"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20%20POPL%202018%20Patterson%20and%20Ahmed%2C%202019"; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-b). On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"paulson_inductive_2021"; cite-year:"2021"; cite-authors:"L.&nbsp;Paulson"; cite-authors-long:"L.&nbsp;Paulson"; cite-label:"L. Paulson, 2021"; caption:"The Inductive Approach to Verifying Cryptographic Protocols&nl;L. Paulson, 2021"; data-line:"Networking.bib:30"; searchterm:"The%20Inductive%20Approach%20to%20Verifying%20Cryptographic%20Protocols%20L.%20Paulson%2C%202021"; spellcheck:"false"}
Paulson, L.&nbsp;(2021). _The Inductive Approach to Verifying Cryptographic Protocols_.
~ end bibitem

~ begin bibitem {id:"paulson_foundation_2000"; cite-year:"2000"; cite-authors:"L.&nbsp;C.&nbsp;Paulson"; cite-authors-long:"L.&nbsp;C.&nbsp;Paulson"; cite-label:"L. C. Paulson, 2000"; caption:"The Foundation of a Generic Theorem Prover&nl;L. C. Paulson, 2000"; data-line:"FormalBib.bib:1673"; searchterm:"The%20Foundation%20of%20a%20Generic%20Theorem%20Prover%20L.%20C.%20Paulson%2C%202000"; spellcheck:"false"}
Paulson, L.&nbsp;C.&nbsp;(2000). The Foundation of a Generic Theorem Prover. _arXiv:cs/9301105_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[cs/9301105](http://arxiv.org/abs/cs/9301105){.bib-url}
~ end bibitem

~ begin bibitem {id:"peng_how_2021"; cite-year:"2021"; cite-authors:"Peng et al."; cite-authors-long:"Peng, Zheng, Li, Ke, He, and Liu"; cite-label:"Peng et al., 2021"; caption:"How could Neural Networks understand Programs?&nl;Peng, Zheng, Li, Ke, He, and Liu, 2021"; data-line:"MachineLearning.bib:2"; searchterm:"How%20could%20Neural%20Networks%20understand%20Programs%3F%20Peng%2C%20Zheng%2C%20Li%2C%20Ke%2C%20He%2C%20and%20Liu%2C%202021"; spellcheck:"false"}
Peng, D., Zheng, S., Li, Y., Ke, G., He, D., & Liu, T.-Y.&nbsp;(2021). How could Neural Networks understand Programs? _arXiv:2105.04297 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.04297](http://arxiv.org/abs/2105.04297){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_perceus_2020"; cite-authors:"2020a"; cite-authors-long:"2020a"; cite-label:"\&ldquo;Perceus: Garbage Free Reference Counting with ReuseMicrosoft Technical Report, MSR-TR-2020-42, Jan 11, 2021, v3.,\&rdquo; 2020"; caption:"Perceus: Garbage Free Reference Counting with ReuseMicrosoft Technical Report, MSR-TR-2020-42, Jan 11, 2021, v3.&nl;2020a, "; data-line:"LanguageTools.bib:36"; searchterm:"Perceus%3A%20Garbage%20Free%20Reference%20Counting%20with%20ReuseMicrosoft%20Technical%20Report%2C%20MSRTR202042%2C%20Jan%2011%2C%202021%2C%20v3.%202020a%2C%20"; spellcheck:"false"}
Perceus: Garbage Free Reference Counting with ReuseMicrosoft Technical Report, MSR-TR-2020-42, Jan 11, 2021, v3. (2020), 41.
~ end bibitem

~ begin bibitem {id:"pereira_wave_2009"; cite-year:"2009"; cite-authors:"Pereira and Berlin"; cite-authors-long:"Pereira and Berlin"; cite-label:"Pereira \& Berlin, 2009"; caption:"Wave Propagation and Deep Propagation for Pointer Analysis&nl;Pereira and Berlin, 2009"; data-line:"LanguageTools.bib:607"; searchterm:"Wave%20Propagation%20and%20Deep%20Propagation%20for%20Pointer%20Analysis%20Pereira%20and%20Berlin%2C%202009"; spellcheck:"false"}
Pereira, F.&nbsp;M.&nbsp;Q., & Berlin, D.&nbsp;(2009). Wave Propagation and Deep Propagation for Pointer Analysis. In _Proceedings of the 7th annual IEEE/ACM International Symposium on Code Generation and Optimization_ (pp. 126–135). USA: IEEE Computer Society. https://doi.org/[10.1109/CGO.2009.9](https://dx.doi.org/10.1109/CGO.2009.9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"perez-lopez_puppetmaster_nodate"; cite-year:"n.d."; cite-authors:"Perez-Lopez"; cite-authors-long:"Perez-Lopez"; cite-label:"Perez-Lopez, n.d."; caption:"Puppetmaster: a certified hardware architecture for task parallelism&nl;Perez-Lopez, n.d."; data-line:"Hardware.bib:19"; searchterm:"Puppetmaster%3A%20a%20certified%20hardware%20architecture%20for%20task%20parallelism%20PerezLopez%2C%20n.d."; spellcheck:"false"}
Perez-Lopez, Á. R.&nbsp;(n.d.). Puppetmaster: a certified hardware architecture for task parallelism, 49.
~ end bibitem

~ begin bibitem {id:"petcher_foundational_2015"; cite-year:"2015"; cite-authors:"Petcher and Morrisett"; cite-authors-long:"Petcher and Morrisett"; cite-label:"Petcher \& Morrisett, 2015"; caption:"The Foundational Cryptography Framework&nl;Petcher and Morrisett, 2015"; data-line:"FormalBib.bib:2407"; searchterm:"The%20Foundational%20Cryptography%20Framework%20Petcher%20and%20Morrisett%2C%202015"; spellcheck:"false"}
Petcher, A., & Morrisett, G.&nbsp;(2015). The Foundational Cryptography Framework. In R.&nbsp;Focardi & A.&nbsp;Myers (Eds.), _Principles of Security and Trust_ (pp. 53–72). Springer Berlin Heidelberg. Retrieved from <http://www.cs.cornell.edu/~jgm/papers/FCF.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"peterson_democratizing_2019"; cite-year:"2019"; cite-authors:"Peterson et al."; cite-authors-long:"Peterson, Anderson, Katti, McKeown, Parulkar, Rexford, et al."; cite-label:"Peterson et al., 2019"; caption:"Democratizing the Network Edge&nl;Peterson, Anderson, Katti, McKeown, Parulkar, Rexford, et al., 2019"; data-line:"Networking.bib:692"; searchterm:"Democratizing%20the%20Network%20Edge%20Peterson%2C%20Anderson%2C%20Katti%2C%20McKeown%2C%20Parulkar%2C%20Rexford%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Peterson, L., Anderson, T., Katti, S., McKeown, N., Parulkar, G., Rexford, J., … Vahdat, A.&nbsp;(2019). Democratizing the Network Edge. _ACM SIGCOMM Computer Communication Review_, _49_(2), 31–36. https://doi.org/[10.1145/3336937.3336942](https://dx.doi.org/10.1145/3336937.3336942){.bib-doi}
~ end bibitem

~ begin bibitem {id:"peterson_computer_2020"; cite-year:"2020"; cite-authors:"Peterson and Davie"; cite-authors-long:"Peterson and Davie"; cite-label:"Peterson \& Davie, 2020"; caption:"Computer Networks: A Systems Approach — Computer Networks: A Systems Approach Version 6.2-dev documentation&nl;Peterson and Davie, 2020"; data-line:"FormalBib.bib:772"; searchterm:"Computer%20Networks%3A%20A%20Systems%20Approach%20%E2%80%94%20Computer%20Networks%3A%20A%20Systems%20Approach%20Version%206.2dev%20documentation%20Peterson%20and%20Davie%2C%202020"; spellcheck:"false"}
Peterson, L., & Davie, B.&nbsp;(2020). Computer Networks: A Systems Approach — Computer Networks: A Systems Approach Version 6.2-dev documentation. Retrieved December 31, 2020, from <https://book.systemsapproach.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"peterson_software-defined_2020"; cite-year:"2020"; cite-authors:"Peterson et al."; cite-authors-long:"Peterson, Davie, Cascone, O’Connor, and Vachuska"; cite-label:"Peterson, Davie, Cascone, O’Connor, \& Vachuska, 2020"; caption:"Software-Defined Networks: A Systems Approach&nl;Peterson, Davie, Cascone, O’Connor, and Vachuska, 2020"; data-line:"FormalBib.bib:763"; searchterm:"SoftwareDefined%20Networks%3A%20A%20Systems%20Approach%20Peterson%2C%20Davie%2C%20Cascone%2C%20O%E2%80%99Connor%2C%20and%20Vachuska%2C%202020"; spellcheck:"false"}
Peterson, L., Davie, B., Cascone, C., O’Connor, B., & Vachuska, T.&nbsp;(2020). Software-Defined Networks: A Systems Approach. Retrieved December 31, 2020, from <https://sdn.systemsapproach.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"peterson_5g_2020"; cite-year:"2020"; cite-authors:"Peterson and Sunay"; cite-authors-long:"Peterson and Sunay"; cite-label:"Peterson \& Sunay, 2020"; caption:"5G Mobile Networks: A Systems Approach&nl;Peterson and Sunay, 2020"; data-line:"FormalBib.bib:754"; searchterm:"5G%20Mobile%20Networks%3A%20A%20Systems%20Approach%20Peterson%20and%20Sunay%2C%202020"; spellcheck:"false"}
Peterson, L., & Sunay, O.&nbsp;(2020). 5G Mobile Networks: A Systems Approach. Retrieved December 31, 2020, from <https://5g.systemsapproach.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_your_2015"; cite-year:"2015"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2015"; caption:"Your Proof Fails? Testing Helps to Find the Reason&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2015"; data-line:"FormalBib.bib:2125"; searchterm:"Your%20Proof%20Fails%3F%20Testing%20Helps%20to%20Find%20the%20Reason%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202015"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2015). Your Proof Fails? Testing Helps to Find the Reason. _arXiv:1508.01691 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1508.01691](http://arxiv.org/abs/1508.01691){.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_how_2018"; cite-year:"2018"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2018"; caption:"How testing helps to diagnose proof failures&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2018"; data-line:"FormalBib.bib:2140"; searchterm:"How%20testing%20helps%20to%20diagnose%20proof%20failures%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202018"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2018). How testing helps to diagnose proof failures. _Formal Aspects of Computing_, _30_(6), 629–657. https://doi.org/[10.1007/s00165-018-0456-4](https://dx.doi.org/10.1007/s00165-018-0456-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pichardie_building_2008"; cite-year:"2008"; cite-authors:"Pichardie"; cite-authors-long:"Pichardie"; cite-label:"Pichardie, 2008"; caption:"Building Certified Static Analysers by Modular Construction of Well-founded Lattices&nl;Pichardie, 2008"; data-line:"FormalBib.bib:9981"; searchterm:"Building%20Certified%20Static%20Analysers%20by%20Modular%20Construction%20of%20Wellfounded%20Lattices%20Pichardie%2C%202008"; spellcheck:"false"}
Pichardie, D.&nbsp;(2008). Building Certified Static Analysers by Modular Construction of Well-founded Lattices. _Electronic Notes in Theoretical Computer Science_, _212_, 225–239. https://doi.org/[10.1016/j.entcs.2008.04.064](https://dx.doi.org/10.1016/j.entcs.2008.04.064){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pickard_calculating_2021"; cite-year:"2021"; cite-authors:"Pickard and Hutton"; cite-authors-long:"Pickard and Hutton"; cite-label:"Pickard \& Hutton, 2021"; caption:"Calculating dependently-typed compilers (functional pearl)&nl;Pickard and Hutton, 2021"; data-line:"FormalBib.bib:7325"; searchterm:"Calculating%20dependentlytyped%20compilers%20functional%20pearl%20Pickard%20and%20Hutton%2C%202021"; spellcheck:"false"}
Pickard, M., & Hutton, G.&nbsp;(2021). Calculating dependently-typed compilers (functional pearl). _Proceedings of the ACM on Programming Languages_, _5_, 1–27. https://doi.org/[10.1145/3473587](https://dx.doi.org/10.1145/3473587){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pimpalkhare_medleysolver_nodate"; cite-year:"n.d."; cite-authors:"Pimpalkhare et al."; cite-authors-long:"Pimpalkhare, Mora, Polgreen, and Seshia"; cite-label:"Pimpalkhare, Mora, Polgreen, \& Seshia, n.d."; caption:"MedleySolver: Online SMT Algorithm Selection&nl;Pimpalkhare, Mora, Polgreen, and Seshia, n.d."; data-line:"FormalBib.bib:61"; searchterm:"MedleySolver%3A%20Online%20SMT%20Algorithm%20Selection%20Pimpalkhare%2C%20Mora%2C%20Polgreen%2C%20and%20Seshia%2C%20n.d."; spellcheck:"false"}
Pimpalkhare, N., Mora, F., Polgreen, E., & Seshia, S.&nbsp;A.&nbsp;(n.d.). MedleySolver: Online SMT Algorithm Selection, 18.
~ end bibitem

~ begin bibitem {id:"pit-claudel_relational_nodate"; cite-year:"n.d."; cite-authors:"Pit-Claudel"; cite-authors-long:"Pit-Claudel"; cite-label:"Pit-Claudel, n.d."; caption:"Relational compilation: functional-to-imperative code generation for performance-critical applications&nl;Pit-Claudel, n.d."; data-line:"FormalBib.bib:9940"; searchterm:"Relational%20compilation%3A%20functionaltoimperative%20code%20generation%20for%20performancecritical%20applications%20PitClaudel%2C%20n.d."; spellcheck:"false"}
Pit-Claudel, C.&nbsp;(n.d.). Relational compilation: functional-to-imperative code generation for performance-critical applications, 160.
~ end bibitem

~ begin bibitem {id:"pit-claudel_extensible_nodate"; cite-year:"n.d."; cite-authors:"Pit-Claudel et al."; cite-authors-long:"Pit-Claudel, Wang, Delaware, Gross, and Chlipala"; cite-label:"Pit-Claudel, Wang, Delaware, Gross, \& Chlipala, n.d."; caption:"Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs&nl;Pit-Claudel, Wang, Delaware, Gross, and Chlipala, n.d."; data-line:"FormalBib.bib:962"; searchterm:"Extensible%20Extraction%20of%20Ef%EF%AC%81cient%20Imperative%20Programs%20with%20Foreign%20Functions%2C%20Manually%20Managed%20Memory%2C%20and%20Proofs%20PitClaudel%2C%20Wang%2C%20Delaware%2C%20Gross%2C%20and%20Chlipala%2C%20n.d."; spellcheck:"false"}
Pit-Claudel, C., Wang, P., Delaware, B., Gross, J., & Chlipala, A.&nbsp;(n.d.). Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs, 14. Retrieved from <http://pit-claudel.fr/clement/papers/fiat-to-facade.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"pizzuti_generating_2021"; cite-year:"2021"; cite-authors:"Pizzuti et al."; cite-authors-long:"Pizzuti, Steuwer, and Dubach"; cite-label:"Pizzuti, Steuwer, \& Dubach, 2021"; caption:"Generating high performance code for irregular data structures using dependent types&nl;Pizzuti, Steuwer, and Dubach, 2021"; data-line:"FormalBib.bib:7412"; searchterm:"Generating%20high%20performance%20code%20for%20irregular%20data%20structures%20using%20dependent%20types%20Pizzuti%2C%20Steuwer%2C%20and%20Dubach%2C%202021"; spellcheck:"false"}
Pizzuti, F., Steuwer, M., & Dubach, C.&nbsp;(2021). Generating high performance code for irregular data structures using dependent types. In _Proceedings of the 9th ACM SIGPLAN International Workshop on Functional High-Performance and Numerical Computing_ (pp. 37–49). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3471873.3472977](https://dx.doi.org/10.1145/3471873.3472977){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2008"; cite-year:"2008"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2008"; caption:"Differential Dynamic Logic for Hybrid Systems&nl;André Platzer, 2008"; data-line:"FormalBib.bib:2835"; searchterm:"Differential%20Dynamic%20Logic%20for%20Hybrid%20Systems%20Andr%C3%A9%20Platzer%2C%202008"; spellcheck:"false"}
Platzer, A.&nbsp;(2008). Differential Dynamic Logic for Hybrid Systems. _Journal of Automated Reasoning_, _41_(2), 143–189. https://doi.org/[10.1007/s10817-008-9103-8](https://dx.doi.org/10.1007/s10817-008-9103-8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2015"; cite-year:"2015"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2015"; caption:"Differential Game Logic&nl;André Platzer, 2015"; data-line:"FormalBib.bib:2851"; searchterm:"Differential%20Game%20Logic%20Andr%C3%A9%20Platzer%2C%202015"; spellcheck:"false"}
Platzer, A.&nbsp;(2015). Differential Game Logic. _ACM Trans. Comput. Logic_, _17_(1), 1:1–1:51. https://doi.org/[10.1145/2817824](https://dx.doi.org/10.1145/2817824){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_complete_2017"; cite-year:"2017"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2017"; caption:"A Complete Uniform Substitution Calculus for Differential Dynamic Logic&nl;André Platzer, 2017"; data-line:"FormalBib.bib:2747"; searchterm:"A%20Complete%20Uniform%20Substitution%20Calculus%20for%20Differential%20Dynamic%20Logic%20Andr%C3%A9%20Platzer%2C%202017"; spellcheck:"false"}
Platzer, A.&nbsp;(2017). A Complete Uniform Substitution Calculus for Differential Dynamic Logic. _Journal of Automated Reasoning_, _59_(2), 219–265. https://doi.org/[10.1007/s10817-016-9385-1](https://dx.doi.org/10.1007/s10817-016-9385-1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2018"; cite-year:"2018a"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018a"; caption:"Differential Equations &amp; Differential Invariants&nl;André Platzer, 2018a"; data-line:"FormalBib.bib:2868"; searchterm:"Differential%20Equations%20%26amp%3B%20Differential%20Invariants%20Andr%C3%A9%20Platzer%2C%202018a"; spellcheck:"false"}
Platzer, A.&nbsp;(2018a). Differential Equations &amp; Differential Invariants. In A.&nbsp;Platzer, _Logical Foundations of Cyber-Physical Systems_ (pp. 287–322). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0_10](https://dx.doi.org/10.1007/978-3-319-63588-0_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018-1"; cite-year:"2018"; cite-authors:"Andre Platzer"; cite-authors-long:"Andre Platzer"; cite-label:"Andre Platzer, 2018"; caption:"Logical Foundations of Cyber-Physical Systems&nl;Andre Platzer, 2018"; data-line:"FormalBib.bib:2800"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20Andre%20Platzer%2C%202018"; spellcheck:"false"}
Platzer, A.&nbsp;(2018). _Logical Foundations of Cyber-Physical Systems_. Springer International Publishing. Retrieved from <https://www.springer.com/gp/book/9783319635873>{.bib-url}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018"; cite-year:"2018b"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018b"; caption:"Logical Foundations of Cyber-Physical Systems - Slides&nl;André Platzer, 2018b"; data-line:"FormalBib.bib:2766"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20%20Slides%20Andr%C3%A9%20Platzer%2C%202018b"; spellcheck:"false"}
Platzer, A.&nbsp;(2018b). _Logical Foundations of Cyber-Physical Systems - Slides_. Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0](https://dx.doi.org/10.1007/978-3-319-63588-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_keymaera_nodate"; cite-year:"2019"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, n.d."; caption:"KeYmaera X: Documentation&nl;André Platzer, 2019"; data-line:"FormalBib.bib:3331"; searchterm:"KeYmaera%20X%3A%20Documentation%20Andr%C3%A9%20Platzer%2C%202019"; spellcheck:"false"}
Platzer, A.&nbsp;(n.d.). KeYmaera X: Documentation. Retrieved January 31, 2019, from <http://www.ls.cs.cmu.edu/KeYmaeraX/documentation.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"plotkin_lcf_1977"; cite-year:"1977"; cite-authors:"Plotkin"; cite-authors-long:"Plotkin"; cite-label:"Plotkin, 1977"; caption:"LCF considered as a programming language&nl;Plotkin, 1977"; data-line:"Security.bib:159"; searchterm:"LCF%20considered%20as%20a%20programming%20language%20Plotkin%2C%201977"; spellcheck:"false"}
Plotkin, G.&nbsp;D.&nbsp;(1977). LCF considered as a programming language. _Theoretical Computer Science_, _5_(3), 223–255. https://doi.org/[10.1016/0304-3975(77)90044-5](https://dx.doi.org/10.1016/0304-3975%2877%2990044-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"poettering_sok_2021"; cite-year:"2021"; cite-authors:"Poettering et al."; cite-authors-long:"Poettering, Rösler, Schwenk, and Stebila"; cite-label:"Poettering, Rösler, Schwenk, \& Stebila, 2021"; caption:"SoK: Game-based Security Models for Group Key Exchange&nl;Poettering, Rösler, Schwenk, and Stebila, 2021"; data-line:"Security.bib:319"; searchterm:"SoK%3A%20Gamebased%20Security%20Models%20for%20Group%20Key%20Exchange%20Poettering%2C%20R%C3%B6sler%2C%20Schwenk%2C%20and%20Stebila%2C%202021"; spellcheck:"false"}
Poettering, B., Rösler, P., Schwenk, J., & Stebila, D.&nbsp;(2021). _SoK: Game-based Security Models for Group Key Exchange_ (No. 305). Retrieved from <https://eprint.iacr.org/2021/305>{.bib-url}
~ end bibitem

~ begin bibitem {id:"poial_forth_nodate"; cite-year:"n.d."; cite-authors:"Poial"; cite-authors-long:"Poial"; cite-label:"Poial, n.d."; caption:"Forth and Formal Language Theory&nl;Poial, n.d."; data-line:"FormalBib.bib:4590"; searchterm:"Forth%20and%20Formal%20Language%20Theory%20Poial%2C%20n.d."; spellcheck:"false"}
Poial, J.&nbsp;(n.d.). Forth and Formal Language Theory, 6.
~ end bibitem

~ begin bibitem {id:"polikarpova_synthesis_2021"; cite-year:"2021"; cite-authors:"Polikarpova"; cite-authors-long:"Polikarpova"; cite-label:"Polikarpova, 2021"; caption:"Synthesis of Safe Pointer-Manipulating Programs&nl;Polikarpova, 2021"; data-line:"FormalBib.bib:7884"; searchterm:"Synthesis%20of%20Safe%20PointerManipulating%20Programs%20Polikarpova%2C%202021"; spellcheck:"false"}
Polikarpova, N.&nbsp;(2021). Synthesis of Safe Pointer-Manipulating Programs. In L.&nbsp;Cohen & C.&nbsp;Kaliszyk (Eds.), _12th International Conference on Interactive Theorem Proving (ITP 2021)_ (Vol. 193, pp. 2:1–2:1). Dagstuhl, Germany: Schloss Dagstuhl – Leibniz-Zentrum für Informatik. https://doi.org/[10.4230/LIPIcs.ITP.2021.2](https://dx.doi.org/10.4230/LIPIcs.ITP.2021.2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"polikarpova_structuring_2019"; cite-year:"2019"; cite-authors:"Polikarpova and Sergey"; cite-authors-long:"Polikarpova and Sergey"; cite-label:"Polikarpova \& Sergey, 2019"; caption:"Structuring the Synthesis of Heap-manipulating Programs&nl;Polikarpova and Sergey, 2019"; data-line:"FormalBib.bib:2697"; searchterm:"Structuring%20the%20Synthesis%20of%20Heapmanipulating%20Programs%20Polikarpova%20and%20Sergey%2C%202019"; spellcheck:"false"}
Polikarpova, N., & Sergey, I.&nbsp;(2019). Structuring the Synthesis of Heap-manipulating Programs. _Proc. ACM Program. Lang._, _3_, 72:1–72:30. https://doi.org/[10.1145/3290385](https://dx.doi.org/10.1145/3290385){.bib-doi}
~ end bibitem

~ begin bibitem {id:"polikarpova_fully_2018"; cite-year:"2018"; cite-authors:"Polikarpova et al."; cite-authors-long:"Polikarpova, Tschannen, and Furia"; cite-label:"Polikarpova, Tschannen, \& Furia, 2018"; caption:"A fully verified container library&nl;Polikarpova, Tschannen, and Furia, 2018"; data-line:"FormalBib.bib:5823"; searchterm:"A%20fully%20verified%20container%20library%20Polikarpova%2C%20Tschannen%2C%20and%20Furia%2C%202018"; spellcheck:"false"}
Polikarpova, N., Tschannen, J., & Furia, C.&nbsp;A.&nbsp;(2018). A fully verified container library. _Formal Aspects of Computing_, _30_(5), 495–523. https://doi.org/[10.1007/s00165-017-0435-1](https://dx.doi.org/10.1007/s00165-017-0435-1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"porncharoenwase_formal_2022"; cite-year:"2022"; cite-authors:"Porncharoenwase et al."; cite-authors-long:"Porncharoenwase, Nelson, Wang, and Torlak"; cite-label:"Porncharoenwase, Nelson, Wang, \& Torlak, 2022"; caption:"A formal foundation for symbolic evaluation with merging&nl;Porncharoenwase, Nelson, Wang, and Torlak, 2022"; data-line:"FormalBib.bib:9686"; searchterm:"A%20formal%20foundation%20for%20symbolic%20evaluation%20with%20merging%20Porncharoenwase%2C%20Nelson%2C%20Wang%2C%20and%20Torlak%2C%202022"; spellcheck:"false"}
Porncharoenwase, S., Nelson, L., Wang, X., & Torlak, E.&nbsp;(2022). A formal foundation for symbolic evaluation with merging. _Proceedings of the ACM on Programming Languages_, _6_, 1–28. https://doi.org/[10.1145/3498709](https://dx.doi.org/10.1145/3498709){.bib-doi}
~ end bibitem

~ begin bibitem {id:"potteiger_moving_2022"; cite-year:"2022"; cite-authors:"Potteiger et al."; cite-authors-long:"Potteiger, Dubey, Cai, Koutsoukos, and Zhang"; cite-label:"Potteiger, Dubey, Cai, Koutsoukos, \& Zhang, 2022"; caption:"Moving target defense for the security and resilience of mixed time and event triggered cyber-physical systems&nl;Potteiger, Dubey, Cai, Koutsoukos, and Zhang, 2022"; data-line:"Security.bib:1539"; searchterm:"Moving%20target%20defense%20for%20the%20security%20and%20resilience%20of%20mixed%20time%20and%20event%20triggered%20cyberphysical%20systems%20Potteiger%2C%20Dubey%2C%20Cai%2C%20Koutsoukos%2C%20and%20Zhang%2C%202022"; spellcheck:"false"}
Potteiger, B., Dubey, A., Cai, F., Koutsoukos, X., & Zhang, Z.&nbsp;(2022). Moving target defense for the security and resilience of mixed time and event triggered cyber-physical systems. _Journal of Systems Architecture_, 102420. https://doi.org/[10.1016/j.sysarc.2022.102420](https://dx.doi.org/10.1016/j.sysarc.2022.102420){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pottier_menhir_nodate"; cite-year:"2019"; cite-authors:"Pottier and REgis-Gianas"; cite-authors-long:"Pottier and REgis-Gianas"; cite-label:"Pottier \& REgis-Gianas, n.d."; caption:"Menhir Reference Manual (version 20181113)&nl;Pottier and REgis-Gianas, 2019"; data-line:"FormalBib.bib:3085"; searchterm:"Menhir%20Reference%20Manual%20version%2020181113%20Pottier%20and%20REgisGianas%2C%202019"; spellcheck:"false"}
Pottier, F., & REgis-Gianas, Y.&nbsp;(n.d.). Menhir Reference Manual (version 20181113). Retrieved February 1, 2019, from <http://gallium.inria.fr/~fpottier/menhir/manual.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"power_formal_nodate"; cite-year:"n.d."; cite-authors:"Power and Sinclair"; cite-authors-long:"Power and Sinclair"; cite-label:"Power \& Sinclair, n.d."; caption:"A Formal Model of Forth Control Words in the Pi-Calculus&nl;Power and Sinclair, n.d."; data-line:"FormalBib.bib:4583"; searchterm:"A%20Formal%20Model%20of%20Forth%20Control%20Words%20in%20the%20PiCalculus%20Power%20and%20Sinclair%2C%20n.d."; spellcheck:"false"}
Power, J.&nbsp;F., & Sinclair, D.&nbsp;(n.d.). _A Formal Model of Forth Control Words in the Pi-Calculus_.
~ end bibitem

~ begin bibitem {id:"protzenko_formally_2019"; cite-year:"2019"; cite-authors:"Protzenko et al."; cite-authors-long:"Protzenko, Beurdouche, Merigoux, and Bhargavan"; cite-label:"Protzenko, Beurdouche, Merigoux, \& Bhargavan, 2019"; caption:"Formally Verified Cryptographic Web Applications in WebAssembly&nl;Protzenko, Beurdouche, Merigoux, and Bhargavan, 2019"; data-line:"FormalBib.bib:6726"; searchterm:"Formally%20Verified%20Cryptographic%20Web%20Applications%20in%20WebAssembly%20Protzenko%2C%20Beurdouche%2C%20Merigoux%2C%20and%20Bhargavan%2C%202019"; spellcheck:"false"}
Protzenko, J., Beurdouche, B., Merigoux, D., & Bhargavan, K.&nbsp;(2019). Formally Verified Cryptographic Web Applications in WebAssembly. In _2019 IEEE Symposium on Security and Privacy (SP)_ (pp. 1256–1274). San Francisco, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP.2019.00064](https://dx.doi.org/10.1109/SP.2019.00064){.bib-doi}
~ end bibitem

~ begin bibitem {id:"protzenko_verified_2017"; cite-year:"2017"; cite-authors:"Protzenko et al."; cite-authors-long:"Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al."; cite-label:"Protzenko et al., 2017"; caption:"Verified Low-level Programming Embedded in Fstar&nl;Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al., 2017"; data-line:"FormalBib.bib:5225"; searchterm:"Verified%20Lowlevel%20Programming%20Embedded%20in%20Fstar%20Protzenko%2C%20Zinzindohou%C3%A9%2C%20Rastogi%2C%20Ramananandro%2C%20Wang%2C%20ZanellaB%C3%A9guelin%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Protzenko, J., Zinzindohoué, J.-K., Rastogi, A., Ramananandro, T., Wang, P., Zanella-Béguelin, S., … Swamy, N.&nbsp;(2017). Verified Low-level Programming Embedded in Fstar. _Proc. ACM Program. Lang._, _1_, 17:1–17:29. https://doi.org/[10.1145/3110261](https://dx.doi.org/10.1145/3110261){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_provable_nodate"; cite-authors:"2021ai"; cite-authors-long:"2021ai"; cite-label:"\&ldquo;Provable Security - Amazon Web Services \(AWS\).Amazon Web Services, Inc.,\&rdquo; n.d."; caption:"Provable Security - Amazon Web Services (AWS).Amazon Web Services, Inc.&nl;2021ai, "; data-line:"Networking.bib:781"; searchterm:"Provable%20Security%20%20Amazon%20Web%20Services%20AWS.Amazon%20Web%20Services%2C%20Inc.%202021ai%2C%20"; spellcheck:"false"}
Provable Security - Amazon Web Services (AWS).Amazon Web Services, Inc. (n.d.). Retrieved January 14, 2021, from <https://aws.amazon.com/security/provable-security/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"pujet_observational_2022"; cite-year:"2022"; cite-authors:"Pujet and Tabareau"; cite-authors-long:"Pujet and Tabareau"; cite-label:"Pujet \& Tabareau, 2022"; caption:"Observational Equality: Now For Good&nl;Pujet and Tabareau, 2022"; data-line:"FormalBib.bib:8999"; searchterm:"Observational%20Equality%3A%20Now%20For%20Good%20Pujet%20and%20Tabareau%2C%202022"; spellcheck:"false"}
Pujet, L., & Tabareau, N.&nbsp;(2022). Observational Equality: Now For Good, 29.
~ end bibitem

~ begin bibitem {id:"pulte_simplifying_2017"; cite-year:"2017"; cite-authors:"Pulte et al."; cite-authors-long:"Pulte, Flur, Deacon, French, Sarkar, and Sewell"; cite-label:"Pulte et al., 2017"; caption:"Simplifying ARM Concurrency: Multicopy-atomic Axiomatic and Operational Models for ARMv8&nl;Pulte, Flur, Deacon, French, Sarkar, and Sewell, 2017"; data-line:"FormalBib.bib:5092"; searchterm:"Simplifying%20ARM%20Concurrency%3A%20Multicopyatomic%20Axiomatic%20and%20Operational%20Models%20for%20ARMv8%20Pulte%2C%20Flur%2C%20Deacon%2C%20French%2C%20Sarkar%2C%20and%20Sewell%2C%202017"; spellcheck:"false"}
Pulte, C., Flur, S., Deacon, W., French, J., Sarkar, S., & Sewell, P.&nbsp;(2017). Simplifying ARM Concurrency: Multicopy-atomic Axiomatic and Operational Models for ARMv8. _Proc. ACM Program. Lang._, _2_, 19:1–19:29. https://doi.org/[10.1145/3158107](https://dx.doi.org/10.1145/3158107){.bib-doi}
~ end bibitem

~ begin bibitem {id:"punchihewa_safe_2021"; cite-year:"2021"; cite-authors:"Punchihewa and Wu"; cite-authors-long:"Punchihewa and Wu"; cite-label:"Punchihewa \& Wu, 2021"; caption:"Safe mutation with algebraic effects&nl;Punchihewa and Wu, 2021"; data-line:"FormalBib.bib:7430"; searchterm:"Safe%20mutation%20with%20algebraic%20effects%20Punchihewa%20and%20Wu%2C%202021"; spellcheck:"false"}
Punchihewa, H., & Wu, N.&nbsp;(2021). Safe mutation with algebraic effects. In _Proceedings of the 14th ACM SIGPLAN International Symposium on Haskell_ (pp. 122–135). Virtual Republic of Korea: ACM.&nbsp;https://doi.org/[10.1145/3471874.3472988](https://dx.doi.org/10.1145/3471874.3472988){.bib-doi}
~ end bibitem

~ begin bibitem {id:"qian_client-server_nodate"; cite-year:"n.d."; cite-authors:"Qian et al."; cite-authors-long:"Qian, Kavvos, and Birkedal"; cite-label:"Qian, Kavvos, \& Birkedal, n.d."; caption:"Client-Server Sessions in Linear Logic&nl;Qian, Kavvos, and Birkedal, n.d."; data-line:"FormalBib.bib:8322"; searchterm:"ClientServer%20Sessions%20in%20Linear%20Logic%20Qian%2C%20Kavvos%2C%20and%20Birkedal%2C%20n.d."; spellcheck:"false"}
Qian, Z., Kavvos, G.&nbsp;A., & Birkedal, L.&nbsp;(n.d.). Client-Server Sessions in Linear Logic, _1_(1), 28.
~ end bibitem

~ begin bibitem {id:"noauthor_qsharp-language_2021"; cite-authors:"2021c"; cite-authors-long:"2021c"; cite-label:"\_qsharp-language\_, 2021"; caption:"qsharp-language&nl;2021c, "; data-line:"FormalBib.bib:854"; searchterm:"qsharplanguage%202021c%2C%20"; spellcheck:"false"}
_qsharp-language_. (2021). Microsoft. Retrieved from <https://github.com/microsoft/qsharp-language>{.bib-url}
~ end bibitem

~ begin bibitem {id:"quines_type_nodate"; cite-year:"2021"; cite-authors:"Quines"; cite-authors-long:"Quines"; cite-label:"Quines, n.d."; caption:"Type Theory by Example&nl;Quines, 2021"; data-line:"FormalBib.bib:9089"; searchterm:"Type%20Theory%20by%20Example%20Quines%2C%202021"; spellcheck:"false"}
Quines, C.&nbsp;(n.d.). Type Theory by Example. Retrieved September 24, 2021, from <https://www.cjquines.com/files/typetheory.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"qureshi_formal_nodate"; cite-year:"n.d."; cite-authors:"Qureshi"; cite-authors-long:"Qureshi"; cite-label:"Qureshi, n.d."; caption:"Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems&nl;Qureshi, n.d."; data-line:"FormalBib.bib:1507"; searchterm:"Formal%20Modelling%20and%20Analysis%20of%20MissionCritical%20Software%20in%20Military%20Avionics%20Systems%20Qureshi%2C%20n.d."; spellcheck:"false"}
Qureshi, Z.&nbsp;H.&nbsp;(n.d.). Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems. _11th Australian Workshop on Safety Related Programmable Systems (SCS’06)_, 11. Retrieved from <http://crpit.com/confpapers/CRPITV69Qureshi.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"qu_relational_2021"; cite-year:"2021"; cite-authors:"Qu et al."; cite-authors-long:"Qu, Gaboardi, and Garg"; cite-label:"Qu, Gaboardi, \& Garg, 2021"; caption:"Relational cost analysis in a functional-imperative setting&nl;Qu, Gaboardi, and Garg, 2021"; data-line:"FormalBib.bib:8560"; searchterm:"Relational%20cost%20analysis%20in%20a%20functionalimperative%20setting%20Qu%2C%20Gaboardi%2C%20and%20Garg%2C%202021"; spellcheck:"false"}
Qu, W., Gaboardi, M., & Garg, D.&nbsp;(2021). Relational cost analysis in a functional-imperative setting. _Journal of Functional Programming_, _31_, e27. https://doi.org/[10.1017/S0956796821000071](https://dx.doi.org/10.1017/S0956796821000071){.bib-doi}
~ end bibitem

~ begin bibitem {id:"raad_local_nodate"; cite-year:"n.d."; cite-authors:"Raad et al."; cite-authors-long:"Raad, Berdine, Dang, Dreyer, O’Hearn, and Villard"; cite-label:"Raad et al., n.d."; caption:"Local Reasoning about the Presence of Bugs: Incorrectness Separation Logic&nl;Raad, Berdine, Dang, Dreyer, O’Hearn, and Villard, n.d."; data-line:"FormalBib.bib:7192"; searchterm:"Local%20Reasoning%20about%20the%20Presence%20of%20Bugs%3A%20Incorrectness%20Separation%20Logic%20Raad%2C%20Berdine%2C%20Dang%2C%20Dreyer%2C%20O%E2%80%99Hearn%2C%20and%20Villard%2C%20n.d."; spellcheck:"false"}
Raad, A., Berdine, J., Dang, H.-H., Dreyer, D., O’Hearn, P., & Villard, J.&nbsp;(n.d.). Local Reasoning about the Presence of Bugs: Incorrectness Separation Logic, 41.
~ end bibitem

~ begin bibitem {id:"rakotomalala_verifying_2021"; cite-year:"2021"; cite-authors:"Rakotomalala et al."; cite-authors-long:"Rakotomalala, Roux, and Boyer"; cite-label:"Rakotomalala, Roux, \& Boyer, 2021"; caption:"Verifying min-plus Computations with Coq (extended version with appendix)&nl;Rakotomalala, Roux, and Boyer, 2021"; data-line:"FormalBib.bib:130"; searchterm:"Verifying%20minplus%20Computations%20with%20Coq%20extended%20version%20with%20appendix%20Rakotomalala%2C%20Roux%2C%20and%20Boyer%2C%202021"; spellcheck:"false"}
Rakotomalala, L., Roux, P., & Boyer, M.&nbsp;(2021). Verifying min-plus Computations with Coq (extended version with appendix). In _13th NASA Formal Methods Symposium (NFM 2021)_. virtual, United States. Retrieved from <https://hal.archives-ouvertes.fr/hal-03176024>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ramsey_applicative_2006"; cite-year:"2006"; cite-authors:"Ramsey and Dias"; cite-authors-long:"Ramsey and Dias"; cite-label:"Ramsey \& Dias, 2006"; caption:"An Applicative Control-Flow Graph Based on Huet's Zipper&nl;Ramsey and Dias, 2006"; data-line:"FormalBib.bib:1929"; searchterm:"An%20Applicative%20ControlFlow%20Graph%20Based%20on%20Huet's%20Zipper%20Ramsey%20and%20Dias%2C%202006"; spellcheck:"false"}
Ramsey, N., & Dias, J.&nbsp;(2006). An Applicative Control-Flow Graph Based on Huet’s Zipper. _Electronic Notes in Theoretical Computer Science_, _148_(2), 105–126. https://doi.org/[10.1016/j.entcs.2005.11.042](https://dx.doi.org/10.1016/j.entcs.2005.11.042){.bib-doi}
~ end bibitem

~ begin bibitem {id:"rand_formally_nodate"; cite-year:"n.d."; cite-authors:"Rand"; cite-authors-long:"Rand"; cite-label:"Rand, n.d."; caption:"Formally Verified Quantum Programming&nl;Rand, n.d."; data-line:"FormalBib.bib:4429"; searchterm:"Formally%20Verified%20Quantum%20Programming%20Rand%2C%20n.d."; spellcheck:"false"}
Rand, R.&nbsp;(n.d.). Formally Verified Quantum Programming, 222.
~ end bibitem

~ begin bibitem {id:"rastogi_programming_nodate"; cite-year:"n.d."; cite-authors:"Rastogi"; cite-authors-long:"Rastogi"; cite-label:"Rastogi, n.d."; caption:"Programming and Proving with Indexed Effects&nl;Rastogi, n.d."; data-line:"FormalBib.bib:7714"; searchterm:"Programming%20and%20Proving%20with%20Indexed%20Effects%20Rastogi%2C%20n.d."; spellcheck:"false"}
Rastogi, A.&nbsp;(n.d.). Programming and Proving with Indexed Effects, 28.
~ end bibitem

~ begin bibitem {id:"rastogi_layered_nodate"; cite-year:"n.d."; cite-authors:"Rastogi et al."; cite-authors-long:"Rastogi, Martínez, Fromherz, Ramananandro, and Swamy"; cite-label:"Rastogi, Martínez, Fromherz, Ramananandro, \& Swamy, n.d."; caption:"Layered Indexed Effects&nl;Rastogi, Martínez, Fromherz, Ramananandro, and Swamy, n.d."; data-line:"FormalBib.bib:714"; searchterm:"Layered%20Indexed%20Effects%20Rastogi%2C%20Mart%C3%ADnez%2C%20Fromherz%2C%20Ramananandro%2C%20and%20Swamy%2C%20n.d."; spellcheck:"false"}
Rastogi, A., Martínez, G., Fromherz, A., Ramananandro, T., & Swamy, N.&nbsp;(n.d.). Layered Indexed Effects. _Unpublished_, _1_, 28.
~ end bibitem

~ begin bibitem {id:"rastogi_wys_2019"; cite-year:"2019"; cite-authors:"Rastogi et al."; cite-authors-long:"Rastogi, Swamy, and Hicks"; cite-label:"Rastogi, Swamy, \& Hicks, 2019"; caption:"Wys\*: A DSL for Verified Secure Multi-party Computations&nl;Rastogi, Swamy, and Hicks, 2019"; data-line:"FormalBib.bib:10359"; searchterm:"Wys%5C*%3A%20A%20DSL%20for%20Verified%20Secure%20Multiparty%20Computations%20Rastogi%2C%20Swamy%2C%20and%20Hicks%2C%202019"; spellcheck:"false"}
Rastogi, A., Swamy, N., & Hicks, M.&nbsp;(2019). Wys\*: A DSL for Verified Secure Multi-party Computations. In _Principles of Security and Trust (POST 2019)_. Retrieved from <https://www.microsoft.com/en-us/research/publication/wys-a-dsl-for-verified-secure-multi-party-computations/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"recto_secure_nodate"; cite-year:"n.d."; cite-authors:"Recto et al."; cite-authors-long:"Recto, Algehed, and Myers"; cite-label:"Recto, Algehed, \& Myers, n.d."; caption:"Secure Information Flow for Concurrent Programs with Expressive Synchronization&nl;Recto, Algehed, and Myers, n.d."; data-line:"Security.bib:1268"; searchterm:"Secure%20Information%20Flow%20for%20Concurrent%20Programs%20with%20Expressive%20Synchronization%20Recto%2C%20Algehed%2C%20and%20Myers%2C%20n.d."; spellcheck:"false"}
Recto, R., Algehed, M., & Myers, A.&nbsp;C.&nbsp;(n.d.). Secure Information Flow for Concurrent Programs with Expressive Synchronization, 28.
~ end bibitem

~ begin bibitem {id:"redmond_toward_2021"; cite-year:"2021"; cite-authors:"Redmond et al."; cite-authors-long:"Redmond, Shen, and Kuper"; cite-label:"Redmond, Shen, \& Kuper, 2021"; caption:"Toward Hole-Driven Development with Liquid Haskell&nl;Redmond, Shen, and Kuper, 2021"; data-line:"LanguageTools.bib:865"; searchterm:"Toward%20HoleDriven%20Development%20with%20Liquid%20Haskell%20Redmond%2C%20Shen%2C%20and%20Kuper%2C%202021"; spellcheck:"false"}
Redmond, P., Shen, G., & Kuper, L.&nbsp;(2021). Toward Hole-Driven Development with Liquid Haskell. _arXiv:2110.04461 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.04461](http://arxiv.org/abs/2110.04461){.bib-url}
~ end bibitem

~ begin bibitem {id:"reich_modular_2013"; cite-year:"2013"; cite-authors:"Reich et al."; cite-authors-long:"Reich, Monsanto, Foster, Rexford, and Walker"; cite-label:"Reich, Monsanto, Foster, Rexford, \& Walker, 2013"; caption:"Modular SDN Programming with Pyretic&nl;Reich, Monsanto, Foster, Rexford, and Walker, 2013"; data-line:"Networking.bib:100"; searchterm:"Modular%20SDN%20Programming%20with%20Pyretic%20Reich%2C%20Monsanto%2C%20Foster%2C%20Rexford%2C%20and%20Walker%2C%202013"; spellcheck:"false"}
Reich, J., Monsanto, C., Foster, N., Rexford, J., & Walker, D.&nbsp;(2013). Modular SDN Programming with Pyretic, _38_(5), 8.
~ end bibitem

~ begin bibitem {id:"reitblatt_formal_2017"; cite-year:"2017"; cite-authors:"Reitblatt"; cite-authors-long:"Reitblatt"; cite-label:"Reitblatt, 2017"; caption:"Formal Reasoning in Software-defined Networks&nl;Reitblatt, 2017"; data-line:"Networking.bib:405"; searchterm:"Formal%20Reasoning%20in%20Softwaredefined%20Networks%20Reitblatt%2C%202017"; spellcheck:"false"}
Reitblatt, M.&nbsp;(2017). Formal Reasoning in Software-defined Networks. https://doi.org/[10.7298/X45M63PH](https://dx.doi.org/10.7298/X45M63PH){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_rems:_nodate"; cite-authors:"2019aj"; cite-authors-long:"2019aj"; cite-label:"\&ldquo;REMS: Rigorous Engineering of Mainsteam Systems, Papers,\&rdquo; n.d."; caption:"REMS: Rigorous Engineering of Mainsteam Systems, Papers&nl;2019aj, "; data-line:"FormalBib.bib:6627"; searchterm:"REMS%3A%20Rigorous%20Engineering%20of%20Mainsteam%20Systems%2C%20Papers%202019aj%2C%20"; spellcheck:"false"}
REMS: Rigorous Engineering of Mainsteam Systems, Papers. (n.d.). Retrieved December 27, 2019, from <https://www.cl.cam.ac.uk/~pes20/rems/rems-all.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"reps_precise_1995"; cite-year:"1995"; cite-authors:"Reps et al."; cite-authors-long:"Reps, Horwitz, and Sagiv"; cite-label:"Reps, Horwitz, \& Sagiv, 1995"; caption:"Precise interprocedural dataflow analysis via graph reachability&nl;Reps, Horwitz, and Sagiv, 1995"; data-line:"LanguageTools.bib:1200"; searchterm:"Precise%20interprocedural%20dataflow%20analysis%20via%20graph%20reachability%20Reps%2C%20Horwitz%2C%20and%20Sagiv%2C%201995"; spellcheck:"false"}
Reps, T., Horwitz, S., & Sagiv, M.&nbsp;(1995). Precise interprocedural dataflow analysis via graph reachability. In _Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages_ (pp. 49–61). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/199448.199462](https://dx.doi.org/10.1145/199448.199462){.bib-doi}
~ end bibitem

~ begin bibitem {id:"reps_precise_nodate"; cite-year:"2021"; cite-authors:"Reps et al."; cite-authors-long:"Reps, Horwitz, and Sagiv"; cite-label:"Reps, Horwitz, \& Sagiv, n.d."; caption:"Precise Interprocedural Dataflow Analysis with Applications to Constant Propagation&nl;Reps, Horwitz, and Sagiv, 2021"; data-line:"LanguageTools.bib:1188"; searchterm:"Precise%20Interprocedural%20Dataflow%20Analysis%20with%20Applications%20to%20Constant%20Propagation%20Reps%2C%20Horwitz%2C%20and%20Sagiv%2C%202021"; spellcheck:"false"}
Reps, T., Horwitz, S., & Sagiv, M.&nbsp;(n.d.). Precise Interprocedural Dataflow Analysis with Applications to Constant Propagation. https://doi.org/[10.1016/0304-3975(96)00072-2](https://dx.doi.org/10.1016/0304-3975%2896%2900072-2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"artho_decision_2016"; cite-year:"2016"; cite-authors:"Reynolds et al."; cite-authors-long:"Reynolds, Iosif, Serban, and King"; cite-label:"Reynolds, Iosif, Serban, \& King, 2016"; caption:"A Decision Procedure for Separation Logic in SMT&nl;Reynolds, Iosif, Serban, and King, 2016"; data-line:"FormalBib.bib:581"; searchterm:"A%20Decision%20Procedure%20for%20Separation%20Logic%20in%20SMT%20Reynolds%2C%20Iosif%2C%20Serban%2C%20and%20King%2C%202016"; spellcheck:"false"}
Reynolds, A., Iosif, R., Serban, C., & King, T.&nbsp;(2016). A Decision Procedure for Separation Logic in SMT.&nbsp;In C.&nbsp;Artho, A.&nbsp;Legay, & D.&nbsp;Peled (Eds.), _Automated Technology for Verification and Analysis_ (Vol. 9938, pp. 244–261). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-46520-3_16](https://dx.doi.org/10.1007/978-3-319-46520-3_16){.bib-doi}
~ end bibitem

~ begin bibitem {id:"riecke_frenetic_2016"; cite-year:"2016"; cite-authors:"Riecke"; cite-authors-long:"Riecke"; cite-label:"Riecke, 2016"; caption:"Frenetic Programmers Guide.GitHub&nl;Riecke, 2016"; data-line:"Networking.bib:539"; searchterm:"Frenetic%20Programmers%20Guide.GitHub%20Riecke%2C%202016"; spellcheck:"false"}
Riecke, C.&nbsp;(2016, July 13). Frenetic Programmers Guide.GitHub. Retrieved January 13, 2021, from <https://github.com/frenetic-lang/manual>{.bib-url}
~ end bibitem

~ begin bibitem {id:"riehl_category_2017"; cite-year:"2017"; cite-authors:"Riehl"; cite-authors-long:"Riehl"; cite-label:"Riehl, 2017"; caption:"Category Theory in Context&nl;Riehl, 2017"; data-line:"FormalBib.bib:6030"; searchterm:"Category%20Theory%20in%20Context%20Riehl%2C%202017"; spellcheck:"false"}
Riehl, E.&nbsp;(2017). _Category Theory in Context_. Dover Publications.
~ end bibitem

~ begin bibitem {id:"riganelli_proactive_2022"; cite-year:"2022"; cite-authors:"Riganelli et al."; cite-authors-long:"Riganelli, Fagadau, Micucci, and Mariani"; cite-label:"Riganelli, Fagadau, Micucci, \& Mariani, 2022"; caption:"Proactive Libraries: Enforcing Correct Behaviors in Android Apps&nl;Riganelli, Fagadau, Micucci, and Mariani, 2022"; data-line:"LanguageTools.bib:1463"; searchterm:"Proactive%20Libraries%3A%20Enforcing%20Correct%20Behaviors%20in%20Android%20Apps%20Riganelli%2C%20Fagadau%2C%20Micucci%2C%20and%20Mariani%2C%202022"; spellcheck:"false"}
Riganelli, O., Fagadau, I.&nbsp;D., Micucci, D., & Mariani, L.&nbsp;(2022). Proactive Libraries: Enforcing Correct Behaviors in Android Apps. _arXiv:2202.11999 \[cs\]_. https://doi.org/[10.1145/3510454.3516837](https://dx.doi.org/10.1145/3510454.3516837){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ringer_proof_nodate"; cite-year:"n.d."; cite-authors:"Talia Ringer"; cite-authors-long:"Talia Ringer"; cite-label:"Talia Ringer, n.d."; caption:"Proof Repair - Talia Ringer Thesis&nl;Talia Ringer, n.d."; data-line:"FormalBib.bib:7290"; searchterm:"Proof%20Repair%20%20Talia%20Ringer%20Thesis%20Talia%20Ringer%2C%20n.d."; spellcheck:"false"}
Ringer, T.&nbsp;(n.d.). _Proof Repair - Talia Ringer Thesis_ (phdthesis).
~ end bibitem

~ begin bibitem {id:"ringer_qed_2019"; cite-year:"2019"; cite-authors:"Talia Ringer et al."; cite-authors-long:"Talia Ringer, Palmskog, Sergey, Gligoric, and Tatlock"; cite-label:"Talia Ringer, Palmskog, Sergey, Gligoric, \& Tatlock, 2019"; caption:"QED at Large: A Survey of Engineering of Formally Verified Software&nl;Talia Ringer, Palmskog, Sergey, Gligoric, and Tatlock, 2019"; data-line:"FormalBib.bib:3990"; searchterm:"QED%20at%20Large%3A%20A%20Survey%20of%20Engineering%20of%20Formally%20Verified%20Software%20Talia%20Ringer%2C%20Palmskog%2C%20Sergey%2C%20Gligoric%2C%20and%20Tatlock%2C%202019"; spellcheck:"false"}
Ringer, T., Palmskog, K., Sergey, I., Gligoric, M., & Tatlock, Z.&nbsp;(2019). QED at Large: A Survey of Engineering of Formally Verified Software. _Foundations and Trends® in Programming Languages_, _5_(2), 102–281. https://doi.org/[10.1561/2500000045](https://dx.doi.org/10.1561/2500000045){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ringer_qed_2019-1"; cite-year:"2019"; cite-authors:"T.&nbsp;Ringer et al."; cite-authors-long:"T.&nbsp;Ringer, Palmskog, Sergey, Gligoric, and Tatlock"; cite-label:"T. Ringer, Palmskog, Sergey, Gligoric, \& Tatlock, 2019"; caption:"QED at Large: A Survey of Engineering of Formally Verified Software&nl;T. Ringer, Palmskog, Sergey, Gligoric, and Tatlock, 2019"; data-line:"FormalBib.bib:7036"; searchterm:"QED%20at%20Large%3A%20A%20Survey%20of%20Engineering%20of%20Formally%20Verified%20Software%20T.%20Ringer%2C%20Palmskog%2C%20Sergey%2C%20Gligoric%2C%20and%20Tatlock%2C%202019"; spellcheck:"false"}
Ringer, T., Palmskog, K., Sergey, I., Gligoric, M., & Tatlock, Z.&nbsp;(2019). _QED at Large: A Survey of Engineering of Formally Verified Software_. now. Retrieved from <http://ieeexplore.ieee.org/document/8824174>{.bib-url}
~ end bibitem

~ begin bibitem {id:"robles_methodology_nodate"; cite-year:"n.d."; cite-authors:"Robles et al."; cite-authors-long:"Robles, Kosmatov, Prevosto, Rilling, and Paris-Saclay"; cite-label:"Robles, Kosmatov, Prevosto, Rilling, \& Paris-Saclay, n.d."; caption:"Methodology for Speciﬁcation and Veriﬁcation of High-Level Requirements with MetAcsl&nl;Robles, Kosmatov, Prevosto, Rilling, and Paris-Saclay, n.d."; data-line:"FormalBib.bib:289"; searchterm:"Methodology%20for%20Speci%EF%AC%81cation%20and%20Veri%EF%AC%81cation%20of%20HighLevel%20Requirements%20with%20MetAcsl%20Robles%2C%20Kosmatov%2C%20Prevosto%2C%20Rilling%2C%20and%20ParisSaclay%2C%20n.d."; spellcheck:"false"}
Robles, V., Kosmatov, N., Prevosto, V., Rilling, L., & Paris-Saclay, U.&nbsp;(n.d.). Methodology for Speciﬁcation and Veriﬁcation of High-Level Requirements with MetAcsl, 14.
~ end bibitem

~ begin bibitem {id:"da_rocha_pinto_tada:_2014"; cite-year:"2014"; cite-authors:"Rocha Pinto et al."; cite-authors-long:"Rocha Pinto, Dinsdale-Young, and Gardner"; cite-label:"Rocha Pinto, Dinsdale-Young, \& Gardner, 2014"; caption:"TaDA: A Logic for Time and Data Abstraction&nl;Rocha Pinto, Dinsdale-Young, and Gardner, 2014"; data-line:"FormalBib.bib:4465"; searchterm:"TaDA%3A%20A%20Logic%20for%20Time%20and%20Data%20Abstraction%20Rocha%20Pinto%2C%20DinsdaleYoung%2C%20and%20Gardner%2C%202014"; spellcheck:"false"}
Rocha Pinto, P.&nbsp;da, Dinsdale-Young, T., & Gardner, P.&nbsp;(2014). TaDA: A Logic for Time and Data Abstraction. In R.&nbsp;Jones (Ed.), _ECOOP 2014 – Object-Oriented Programming_ (pp. 207–231). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"ross_exterminators_2005"; cite-year:"2005a"; cite-authors:"Ross"; cite-authors-long:"Ross"; cite-label:"Ross, 2005a"; caption:"The exterminators \[software bugs\]&nl;Ross, 2005a"; data-line:"FormalBib.bib:3899"; searchterm:"The%20exterminators%20%5C%5Bsoftware%20bugs%5C%5D%20Ross%2C%202005a"; spellcheck:"false"}
Ross, P.&nbsp;E.&nbsp;(2005a). The exterminators \[software bugs\]. _IEEE Spectrum_, _42_(9), 36–41. https://doi.org/[10.1109/MSPEC.2005.1502527](https://dx.doi.org/10.1109/MSPEC.2005.1502527){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ross_exterminators_2005-1"; cite-year:"2005b"; cite-authors:"Ross"; cite-authors-long:"Ross"; cite-label:"Ross, 2005b"; caption:"The exterminators \[software bugs&nl;Ross, 2005b"; data-line:"FormalBib.bib:7066"; searchterm:"The%20exterminators%20%5C%5Bsoftware%20bugs%20Ross%2C%202005b"; spellcheck:"false"}
Ross, P.&nbsp;E.&nbsp;(2005b). The exterminators \[software bugs. _IEEE Spectrum_, _42_(9), 36–41. https://doi.org/[10.1109/MSPEC.2005.1502527](https://dx.doi.org/10.1109/MSPEC.2005.1502527){.bib-doi}
~ end bibitem

~ begin bibitem {id:"rosu_guarded_2017"; cite-year:"2017a"; cite-authors:"Rosu"; cite-authors-long:"Rosu"; cite-label:"Rosu, 2017a"; caption:"Guarded Matching Logic is Decidable&nl;Rosu, 2017a"; data-line:"FormalBib.bib:9278"; searchterm:"Guarded%20Matching%20Logic%20is%20Decidable%20Rosu%2C%202017a"; spellcheck:"false"}
Rosu, G.&nbsp;(2017a, July). Guarded Matching Logic is Decidable. Retrieved December 7, 2021, from <https://www.ideals.illinois.edu/bitstream/handle/2142/112795/rodrigues-chen-rosu-2022-tr-decidability.pdf?sequence=2&isAllowed=y>{.bib-url}
~ end bibitem

~ begin bibitem {id:"rosu_matching_2017"; cite-year:"2017b"; cite-authors:"Rosu"; cite-authors-long:"Rosu"; cite-label:"Rosu, 2017b"; caption:"Matching logic · Formal Systems Laboratory&nl;Rosu, 2017b"; data-line:"FormalBib.bib:173"; searchterm:"Matching%20logic%20%C2%B7%20Formal%20Systems%20Laboratory%20Rosu%2C%202017b"; spellcheck:"false"}
Rosu, G.&nbsp;(2017b, December). Matching logic · Formal Systems Laboratory. Retrieved May 24, 2021, from <https://fsl.cs.illinois.edu/publications/rosu-2017-lmcs.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"roy_learning_2021"; cite-year:"2021"; cite-authors:"Roy et al."; cite-authors-long:"Roy, Hsu, and Albarghouthi"; cite-label:"Roy, Hsu, \& Albarghouthi, 2021"; caption:"Learning Differentially Private Mechanisms&nl;Roy, Hsu, and Albarghouthi, 2021"; data-line:"Mathematics.bib:10"; searchterm:"Learning%20Differentially%20Private%20Mechanisms%20Roy%2C%20Hsu%2C%20and%20Albarghouthi%2C%202021"; spellcheck:"false"}
Roy, S., Hsu, J., & Albarghouthi, A.&nbsp;(2021). Learning Differentially Private Mechanisms. _arXiv:2101.00961 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.00961](http://arxiv.org/abs/2101.00961){.bib-url}
~ end bibitem

~ begin bibitem {id:"ruffy_gauntlet_nodate"; cite-year:"n.d."; cite-authors:"Ruffy et al."; cite-authors-long:"Ruffy, Wang, and Sivaraman"; cite-label:"Ruffy, Wang, \& Sivaraman, n.d."; caption:"Gauntlet: Finding Bugs in Compilers for Programmable Packet Processing&nl;Ruffy, Wang, and Sivaraman, n.d."; data-line:"Networking.bib:838"; searchterm:"Gauntlet%3A%20Finding%20Bugs%20in%20Compilers%20for%20Programmable%20Packet%20Processing%20Ruffy%2C%20Wang%2C%20and%20Sivaraman%2C%20n.d."; spellcheck:"false"}
Ruffy, F., Wang, T., & Sivaraman, A.&nbsp;(n.d.). Gauntlet: Finding Bugs in Compilers for Programmable Packet Processing, 17.
~ end bibitem

~ begin bibitem {id:"rumelhart_learning_1986"; cite-year:"1986"; cite-authors:"Rumelhart et al."; cite-authors-long:"Rumelhart, Hinton, and Williams"; cite-label:"Rumelhart, Hinton, \& Williams, 1986"; caption:"Learning representations by back-propagating errors&nl;Rumelhart, Hinton, and Williams, 1986"; data-line:"Security.bib:981"; searchterm:"Learning%20representations%20by%20backpropagating%20errors%20Rumelhart%2C%20Hinton%2C%20and%20Williams%2C%201986"; spellcheck:"false"}
Rumelhart, D.&nbsp;E., Hinton, G.&nbsp;E., & Williams, R.&nbsp;J.&nbsp;(1986). Learning representations by back-propagating errors. _Nature_, _323_(6088), 533–536. https://doi.org/[10.1038/323533a0](https://dx.doi.org/10.1038/323533a0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"russinovich_toward_2021"; cite-year:"2021"; cite-authors:"Russinovich et al."; cite-authors-long:"Russinovich, Costa, Fournet, Chisnall, Delignat-Lavaud, Clebsch, et al."; cite-label:"Russinovich et al., 2021"; caption:"Toward Confidential Cloud Computing: Extending hardware-enforced cryptographic protection to data while in use&nl;Russinovich, Costa, Fournet, Chisnall, Delignat-Lavaud, Clebsch, et al., 2021"; data-line:"FormalBib.bib:8189"; searchterm:"Toward%20Confidential%20Cloud%20Computing%3A%20Extending%20hardwareenforced%20cryptographic%20protection%20to%20data%20while%20in%20use%20Russinovich%2C%20Costa%2C%20Fournet%2C%20Chisnall%2C%20DelignatLavaud%2C%20Clebsch%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Russinovich, M., Costa, M., Fournet, C., Chisnall, D., Delignat-Lavaud, A., Clebsch, S., … Bhatia, V.&nbsp;(2021). Toward Confidential Cloud Computing: Extending hardware-enforced cryptographic protection to data while in use. _Queue_, _19_(1), Pages 20:49 – Pages 20:76. https://doi.org/[10.1145/3454122.3456125](https://dx.doi.org/10.1145/3454122.3456125){.bib-doi}
~ end bibitem

~ begin bibitem {id:"saborido_verification_nodate"; cite-year:"n.d."; cite-authors:"Saborido"; cite-authors-long:"Saborido"; cite-label:"Saborido, n.d."; caption:"Verification of linked data structures in Dafny&nl;Saborido, n.d."; data-line:"FormalBib.bib:7767"; searchterm:"Verification%20of%20linked%20data%20structures%20in%20Dafny%20Saborido%2C%20n.d."; spellcheck:"false"}
Saborido, J.&nbsp;B.&nbsp;(n.d.). Verification of linked data structures in Dafny, 68.
~ end bibitem

~ begin bibitem {id:"sabour_dynamic_2017"; cite-year:"2017"; cite-authors:"Sabour et al."; cite-authors-long:"Sabour, Frosst, and Hinton"; cite-label:"Sabour, Frosst, \& Hinton, 2017"; caption:"Dynamic Routing Between Capsules&nl;Sabour, Frosst, and Hinton, 2017"; data-line:"MachineLearning.bib:30"; searchterm:"Dynamic%20Routing%20Between%20Capsules%20Sabour%2C%20Frosst%2C%20and%20Hinton%2C%202017"; spellcheck:"false"}
Sabour, S., Frosst, N., & Hinton, G.&nbsp;E.&nbsp;(2017). Dynamic Routing Between Capsules. _arXiv:1710.09829 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1710.09829](http://arxiv.org/abs/1710.09829){.bib-url}
~ end bibitem

~ begin bibitem {id:"saillard_typechecking_2015"; cite-year:"2015"; cite-authors:"Saillard"; cite-authors-long:"Saillard"; cite-label:"Saillard, 2015"; caption:"Typechecking in the lambda-Pi-Calculus Modulo : Theory and Practice&nl;Saillard, 2015"; data-line:"FormalBib.bib:6181"; searchterm:"Typechecking%20in%20the%20lambdaPiCalculus%20Modulo%20%3A%20Theory%20and%20Practice%20Saillard%2C%202015"; spellcheck:"false"}
Saillard, R.&nbsp;(2015). _Typechecking in the lambda-Pi-Calculus Modulo : Theory and Practice_ (phdthesis). Ecole Nationale Supérieure des Mines de Paris. Retrieved from <https://pastel.archives-ouvertes.fr/tel-01299180>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sakaguchi_reflexive_2022"; cite-year:"2022"; cite-authors:"Sakaguchi"; cite-authors-long:"Sakaguchi"; cite-label:"Sakaguchi, 2022"; caption:"Reflexive tactics for algebra, revisited&nl;Sakaguchi, 2022"; data-line:"FormalBib.bib:10087"; searchterm:"Reflexive%20tactics%20for%20algebra%2C%20revisited%20Sakaguchi%2C%202022"; spellcheck:"false"}
Sakaguchi, K.&nbsp;(2022). Reflexive tactics for algebra, revisited. _arXiv:2202.04330 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.04330](http://arxiv.org/abs/2202.04330){.bib-url}
~ end bibitem

~ begin bibitem {id:"salvia_mixed_2019"; cite-year:"2019"; cite-authors:"Salvia et al."; cite-authors-long:"Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić"; cite-label:"Salvia et al., 2019"; caption:"A Mixed Real and Floating-Point Solver&nl;Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić, 2019"; data-line:"FormalBib.bib:4304"; searchterm:"A%20Mixed%20Real%20and%20FloatingPoint%20Solver%20Salvia%2C%20Titolo%2C%20Feli%C3%BA%2C%20Moscato%2C%20Mu%C3%B1oz%2C%20and%20Rakamari%C4%87%2C%202019"; spellcheck:"false"}
Salvia, R., Titolo, L., Feliú, M.&nbsp;A., Moscato, M.&nbsp;M., Muñoz, C.&nbsp;A., & Rakamarić, Z.&nbsp;(2019). A Mixed Real and Floating-Point Solver. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (pp. 363–370). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"sammler_refinedc_2021"; cite-year:"2021"; cite-authors:"Sammler et al."; cite-authors-long:"Sammler, Lepigre, and Krebbers"; cite-label:"Sammler, Lepigre, \& Krebbers, 2021"; caption:"RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types&nl;Sammler, Lepigre, and Krebbers, 2021"; data-line:"LanguageTools.bib:75"; searchterm:"RefinedC%3A%20Automating%20the%20Foundational%20Verification%20of%20C%20Code%20with%20Refined%20Ownership%20Types%20Sammler%2C%20Lepigre%2C%20and%20Krebbers%2C%202021"; spellcheck:"false"}
Sammler, M., Lepigre, R., & Krebbers, R.&nbsp;(2021). RefinedC: Automating the Foundational Verification of C Code with Refined Ownership Types, 17.
~ end bibitem

~ begin bibitem {id:"sanan_csim2_2021"; cite-year:"2021"; cite-authors:"Sanan et al."; cite-authors-long:"Sanan, Zhao, Lin, and Yang"; cite-label:"Sanan, Zhao, Lin, \& Yang, 2021"; caption:"CSim&caret;2: Compositional Top-down Verification of Concurrent Systems using Rely-Guarantee&nl;Sanan, Zhao, Lin, and Yang, 2021"; data-line:"FormalBib.bib:333"; searchterm:"CSim%26caret%3B2%3A%20Compositional%20Topdown%20Verification%20of%20Concurrent%20Systems%20using%20RelyGuarantee%20Sanan%2C%20Zhao%2C%20Lin%2C%20and%20Yang%2C%202021"; spellcheck:"false"}
Sanan, D., Zhao, Y., Lin, S.-W., & Yang, L.&nbsp;(2021). CSim&caret;2: Compositional Top-down Verification of Concurrent Systems using Rely-Guarantee. _ACM Transactions on Programming Languages and Systems_, _43_(1), 2:1–2:46. https://doi.org/[10.1145/3436808](https://dx.doi.org/10.1145/3436808){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sanchez-stern_hybrid-neural_nodate"; cite-year:"n.d."; cite-authors:"Sanchez-Stern"; cite-authors-long:"Sanchez-Stern"; cite-label:"Sanchez-Stern, n.d."; caption:"Hybrid-Neural Synthesis of Machine Checkable Software Correctness Proofs&nl;Sanchez-Stern, n.d."; data-line:"FormalBib.bib:9165"; searchterm:"HybridNeural%20Synthesis%20of%20Machine%20Checkable%20Software%20Correctness%20Proofs%20SanchezStern%2C%20n.d."; spellcheck:"false"}
Sanchez-Stern, A.&nbsp;(n.d.). _Hybrid-Neural Synthesis of Machine Checkable Software Correctness Proofs_ (phdthesis). UC San Diego. Retrieved from <https://escholarship.org/uc/item/5j10b5w8>{.bib-url}
~ end bibitem

~ begin bibitem {id:"van_schaik_sgaxe_nodate"; cite-year:"n.d."; cite-authors:"Schaik et al."; cite-authors-long:"Schaik, Kwong, Genkin, and Yarom"; cite-label:"Schaik, Kwong, Genkin, \& Yarom, n.d."; caption:"SGAxe: How SGX Fails in Practice&nl;Schaik, Kwong, Genkin, and Yarom, n.d."; data-line:"Security.bib:620"; searchterm:"SGAxe%3A%20How%20SGX%20Fails%20in%20Practice%20Schaik%2C%20Kwong%2C%20Genkin%2C%20and%20Yarom%2C%20n.d."; spellcheck:"false"}
Schaik, S.&nbsp;van, Kwong, A., Genkin, D., & Yarom, Y.&nbsp;(n.d.). SGAxe: How SGX Fails in Practice, 14.
~ end bibitem

~ begin bibitem {id:"van_schaik_cacheout_2021"; cite-year:"2021"; cite-authors:"Schaik et al."; cite-authors-long:"Schaik, Minkin, Kwong, Genkin, and Yarom"; cite-label:"Schaik, Minkin, Kwong, Genkin, \& Yarom, 2021"; caption:"CacheOut: Leaking Data on Intel CPUs via Cache Evictions&nl;Schaik, Minkin, Kwong, Genkin, and Yarom, 2021"; data-line:"Security.bib:1360"; searchterm:"CacheOut%3A%20Leaking%20Data%20on%20Intel%20CPUs%20via%20Cache%20Evictions%20Schaik%2C%20Minkin%2C%20Kwong%2C%20Genkin%2C%20and%20Yarom%2C%202021"; spellcheck:"false"}
Schaik, S.&nbsp;van, Minkin, M., Kwong, A., Genkin, D., & Yarom, Y.&nbsp;(2021). CacheOut: Leaking Data on Intel CPUs via Cache Evictions. In _2021 IEEE Symposium on Security and Privacy (SP)_ (pp. 339–354). San Francisco, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP40001.2021.00064](https://dx.doi.org/10.1109/SP40001.2021.00064){.bib-doi}
~ end bibitem

~ begin bibitem {id:"scharager_verified_2021"; cite-year:"2021"; cite-authors:"Scharager et al."; cite-authors-long:"Scharager, Cordwell, Mitsch, and Platzer"; cite-label:"Scharager, Cordwell, Mitsch, \& Platzer, 2021"; caption:"Verified Quadratic Virtual Substitution for Real Arithmetic&nl;Scharager, Cordwell, Mitsch, and Platzer, 2021"; data-line:"FormalBib.bib:7361"; searchterm:"Verified%20Quadratic%20Virtual%20Substitution%20for%20Real%20Arithmetic%20Scharager%2C%20Cordwell%2C%20Mitsch%2C%20and%20Platzer%2C%202021"; spellcheck:"false"}
Scharager, M., Cordwell, K., Mitsch, S., & Platzer, A.&nbsp;(2021). Verified Quadratic Virtual Substitution for Real Arithmetic. _arXiv:2105.14183 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.14183](http://arxiv.org/abs/2105.14183){.bib-url}
~ end bibitem

~ begin bibitem {id:"schmid_proving_2021"; cite-year:"2021"; cite-authors:"Schmid and Kunčak"; cite-authors-long:"Schmid and Kunčak"; cite-label:"Schmid \& Kunčak, 2021"; caption:"Proving and Disproving Programs with Shared Mutable Data&nl;Schmid and Kunčak, 2021"; data-line:"FormalBib.bib:8095"; searchterm:"Proving%20and%20Disproving%20Programs%20with%20Shared%20Mutable%20Data%20Schmid%20and%20Kun%C4%8Dak%2C%202021"; spellcheck:"false"}
Schmid, G., & Kunčak, V.&nbsp;(2021). Proving and Disproving Programs with Shared Mutable Data. _arXiv:2103.07699 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2103.07699](http://arxiv.org/abs/2103.07699){.bib-url}
~ end bibitem

~ begin bibitem {id:"schnepf_automated_2017"; cite-year:"2017"; cite-authors:"Schnepf et al."; cite-authors-long:"Schnepf, Badonnel, Lahmadi, and Merz"; cite-label:"Schnepf, Badonnel, Lahmadi, \& Merz, 2017"; caption:"Automated verification of security chains in software-defined networks with synaptic&nl;Schnepf, Badonnel, Lahmadi, and Merz, 2017"; data-line:"Networking.bib:633"; searchterm:"Automated%20verification%20of%20security%20chains%20in%20softwaredefined%20networks%20with%20synaptic%20Schnepf%2C%20Badonnel%2C%20Lahmadi%2C%20and%20Merz%2C%202017"; spellcheck:"false"}
Schnepf, N., Badonnel, R., Lahmadi, A., & Merz, S.&nbsp;(2017). Automated verification of security chains in software-defined networks with synaptic. In _2017 IEEE Conference on Network Softwarization (NetSoft)_ (pp. 1–9). https://doi.org/[10.1109/NETSOFT.2017.8004195](https://dx.doi.org/10.1109/NETSOFT.2017.8004195){.bib-doi}
~ end bibitem

~ begin bibitem {id:"schoolderman_efficient_2020"; cite-year:"2020"; cite-authors:"Schoolderman et al."; cite-authors-long:"Schoolderman, Moerman, Smetsers, and Eekelen"; cite-label:"Schoolderman, Moerman, Smetsers, \& Eekelen, 2020"; caption:"Efficient Verification of Optimized Code: Correct High-speed Curve25519&nl;Schoolderman, Moerman, Smetsers, and Eekelen, 2020"; data-line:"FormalBib.bib:916"; searchterm:"Efficient%20Verification%20of%20Optimized%20Code%3A%20Correct%20Highspeed%20Curve25519%20Schoolderman%2C%20Moerman%2C%20Smetsers%2C%20and%20Eekelen%2C%202020"; spellcheck:"false"}
Schoolderman, M., Moerman, J., Smetsers, S., & Eekelen, M.&nbsp;van. (2020). Efficient Verification of Optimized Code: Correct High-speed Curve25519. _arXiv:2012.09919 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2012.09919](http://arxiv.org/abs/2012.09919){.bib-url}
~ end bibitem

~ begin bibitem {id:"schoolderman_efficient_2021"; cite-year:"2021"; cite-authors:"Schoolderman et al."; cite-authors-long:"Schoolderman, Moerman, Smetsers, and Eekelen"; cite-label:"Schoolderman, Moerman, Smetsers, \& Eekelen, 2021"; caption:"Efficient Verification of Optimized Code: Correct High-speed X25519&nl;Schoolderman, Moerman, Smetsers, and Eekelen, 2021"; data-line:"Security.bib:302"; searchterm:"Efficient%20Verification%20of%20Optimized%20Code%3A%20Correct%20Highspeed%20X25519%20Schoolderman%2C%20Moerman%2C%20Smetsers%2C%20and%20Eekelen%2C%202021"; spellcheck:"false"}
Schoolderman, M., Moerman, J., Smetsers, S., & Eekelen, M.&nbsp;van. (2021). _Efficient Verification of Optimized Code: Correct High-speed X25519_ (No. 415). Retrieved from <https://eprint.iacr.org/2021/415>{.bib-url}
~ end bibitem

~ begin bibitem {id:"vojnar_phasar_2019"; cite-year:"2019"; cite-authors:"Schubert et al."; cite-authors-long:"Schubert, Hermann, and Bodden"; cite-label:"Schubert, Hermann, \& Bodden, 2019"; caption:"PhASAR: An Inter-procedural Static Analysis Framework for C/C++&nl;Schubert, Hermann, and Bodden, 2019"; data-line:"LanguageTools.bib:1226"; searchterm:"PhASAR%3A%20An%20Interprocedural%20Static%20Analysis%20Framework%20for%20C%2FC%2B%2B%20Schubert%2C%20Hermann%2C%20and%20Bodden%2C%202019"; spellcheck:"false"}
Schubert, P.&nbsp;D., Hermann, B., & Bodden, E.&nbsp;(2019). PhASAR: An Inter-procedural Static Analysis Framework for C/C++. In T.&nbsp;Vojnar & L.&nbsp;Zhang (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (Vol. 11428, pp. 393–410). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-17465-1_22](https://dx.doi.org/10.1007/978-3-030-17465-1_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"schubert_know_2019"; cite-year:"2019"; cite-authors:"Schubert et al."; cite-authors-long:"Schubert, Leer, Hermann, and Bodden"; cite-label:"Schubert, Leer, Hermann, \& Bodden, 2019"; caption:"Know your analysis: how instrumentation aids understanding static analysis&nl;Schubert, Leer, Hermann, and Bodden, 2019"; data-line:"LanguageTools.bib:1152"; searchterm:"Know%20your%20analysis%3A%20how%20instrumentation%20aids%20understanding%20static%20analysis%20Schubert%2C%20Leer%2C%20Hermann%2C%20and%20Bodden%2C%202019"; spellcheck:"false"}
Schubert, P.&nbsp;D., Leer, R., Hermann, B., & Bodden, E.&nbsp;(2019). Know your analysis: how instrumentation aids understanding static analysis. In _Proceedings of the 8th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis_ (pp. 8–13). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3315568.3329965](https://dx.doi.org/10.1145/3315568.3329965){.bib-doi}
~ end bibitem

~ begin bibitem {id:"schubert_into_nodate"; cite-year:"n.d."; cite-authors:"Schubert et al."; cite-authors-long:"Schubert, Leer, Hermann, and Bodden"; cite-label:"Schubert, Leer, Hermann, \& Bodden, n.d."; caption:"Into the Woods: Experiences from Building a Dataﬂow Analysis Framework for C/C++&nl;Schubert, Leer, Hermann, and Bodden, n.d."; data-line:"LanguageTools.bib:1247"; searchterm:"Into%20the%20Woods%3A%20Experiences%20from%20Building%20a%20Data%EF%AC%82ow%20Analysis%20Framework%20for%20C%2FC%2B%2B%20Schubert%2C%20Leer%2C%20Hermann%2C%20and%20Bodden%2C%20n.d."; spellcheck:"false"}
Schubert, P.&nbsp;D., Leer, R., Hermann, B., & Bodden, E.&nbsp;(n.d.). Into the Woods: Experiences from Building a Dataﬂow Analysis Framework for C/C++, 6.
~ end bibitem

~ begin bibitem {id:"schubert_modeling_nodate"; cite-year:"n.d."; cite-authors:"Schubert et al."; cite-authors-long:"Schubert, Sattler, Schiebel, Hermann, and Bodden"; cite-label:"Schubert, Sattler, Schiebel, Hermann, \& Bodden, n.d."; caption:"Modeling the Effects of Global Variables in Data-Flow Analysis for C/C++&nl;Schubert, Sattler, Schiebel, Hermann, and Bodden, n.d."; data-line:"LanguageTools.bib:1217"; searchterm:"Modeling%20the%20Effects%20of%20Global%20Variables%20in%20DataFlow%20Analysis%20for%20C%2FC%2B%2B%20Schubert%2C%20Sattler%2C%20Schiebel%2C%20Hermann%2C%20and%20Bodden%2C%20n.d."; spellcheck:"false"}
Schubert, P.&nbsp;D., Sattler, F., Schiebel, F., Hermann, B., & Bodden, E.&nbsp;(n.d.). Modeling the Effects of Global Variables in Data-Flow Analysis for C/C++, 6.
~ end bibitem

~ begin bibitem {id:"schulte_gtirb_2020"; cite-year:"2020"; cite-authors:"Schulte et al."; cite-authors-long:"Schulte, Dorn, Flores-Montoya, Ballman, and Johnson"; cite-label:"Schulte, Dorn, Flores-Montoya, Ballman, \& Johnson, 2020"; caption:"GTIRB: Intermediate Representation for Binaries&nl;Schulte, Dorn, Flores-Montoya, Ballman, and Johnson, 2020"; data-line:"LanguageTools.bib:1327"; searchterm:"GTIRB%3A%20Intermediate%20Representation%20for%20Binaries%20Schulte%2C%20Dorn%2C%20FloresMontoya%2C%20Ballman%2C%20and%20Johnson%2C%202020"; spellcheck:"false"}
Schulte, E., Dorn, J., Flores-Montoya, A., Ballman, A., & Johnson, T.&nbsp;(2020). GTIRB: Intermediate Representation for Binaries. _arXiv:1907.02859 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1907.02859](http://arxiv.org/abs/1907.02859){.bib-url}
~ end bibitem

~ begin bibitem {id:"schumi_exais_2022"; cite-year:"2022"; cite-authors:"Schumi and Sun"; cite-authors-long:"Schumi and Sun"; cite-label:"Schumi \& Sun, 2022"; caption:"ExAIS: Executable AI Semantics&nl;Schumi and Sun, 2022"; data-line:"MachineLearning.bib:175"; searchterm:"ExAIS%3A%20Executable%20AI%20Semantics%20Schumi%20and%20Sun%2C%202022"; spellcheck:"false"}
Schumi, R., & Sun, J.&nbsp;(2022). ExAIS: Executable AI Semantics. _arXiv:2202.09868 \[cs\]_. https://doi.org/[10.1145/3510003.3510112](https://dx.doi.org/10.1145/3510003.3510112){.bib-doi}
~ end bibitem

~ begin bibitem {id:"schwarz_improving_2021"; cite-year:"2021"; cite-authors:"Schwarz et al."; cite-authors-long:"Schwarz, Saan, Seidl, Apinis, Erhard, and Vojdani"; cite-label:"Schwarz et al., 2021"; caption:"Improving Thread-Modular Abstract Interpretation&nl;Schwarz, Saan, Seidl, Apinis, Erhard, and Vojdani, 2021"; data-line:"Security.bib:629"; searchterm:"Improving%20ThreadModular%20Abstract%20Interpretation%20Schwarz%2C%20Saan%2C%20Seidl%2C%20Apinis%2C%20Erhard%2C%20and%20Vojdani%2C%202021"; spellcheck:"false"}
Schwarz, M., Saan, S., Seidl, H., Apinis, K., Erhard, J., & Vojdani, V.&nbsp;(2021). Improving Thread-Modular Abstract Interpretation. _arXiv:2108.07613 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2108.07613](http://arxiv.org/abs/2108.07613){.bib-url}
~ end bibitem

~ begin bibitem {id:"scott_continuous_nodate"; cite-year:"2020"; cite-authors:"Scott"; cite-authors-long:"Scott"; cite-label:"Scott, n.d."; caption:"Continuous lattices.ResearchGate&nl;Scott, 2020"; data-line:"FormalBib.bib:6256"; searchterm:"Continuous%20lattices.ResearchGate%20Scott%2C%202020"; spellcheck:"false"}
Scott, D.&nbsp;(n.d.). Continuous lattices.ResearchGate. Retrieved January 12, 2020, from <https://www.researchgate.net/publication/251394986_Continuous_lattices>{.bib-url}
~ end bibitem

~ begin bibitem {id:"selsam_guiding_2019"; cite-year:"2019"; cite-authors:"Selsam and Bjørner"; cite-authors-long:"Selsam and Bjørner"; cite-label:"Selsam \& Bjørner, 2019"; caption:"Guiding High-Performance SAT Solvers with Unsat-Core Predictions&nl;Selsam and Bjørner, 2019"; data-line:"FormalBib.bib:4129"; searchterm:"Guiding%20HighPerformance%20SAT%20Solvers%20with%20UnsatCore%20Predictions%20Selsam%20and%20Bj%C3%B8rner%2C%202019"; spellcheck:"false"}
Selsam, D., & Bjørner, N.&nbsp;(2019). Guiding High-Performance SAT Solvers with Unsat-Core Predictions. In M.&nbsp;Janota & I.&nbsp;Lynce (Eds.), _Theory and Applications of Satisfiability Testing – SAT 2019_ (pp. 336–353). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"selsam_tabled_2020"; cite-year:"2020"; cite-authors:"Selsam et al."; cite-authors-long:"Selsam, Ullrich, and Moura"; cite-label:"Selsam, Ullrich, \& Moura, 2020"; caption:"Tabled Typeclass Resolution&nl;Selsam, Ullrich, and Moura, 2020"; data-line:"FormalBib.bib:5620"; searchterm:"Tabled%20Typeclass%20Resolution%20Selsam%2C%20Ullrich%2C%20and%20Moura%2C%202020"; spellcheck:"false"}
Selsam, D., Ullrich, S., & Moura, L.&nbsp;de. (2020). Tabled Typeclass Resolution. _arXiv:2001.04301 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2001.04301](http://arxiv.org/abs/2001.04301){.bib-url}
~ end bibitem

~ begin bibitem {id:"sewell_ott_2019"; cite-year:"2019"; cite-authors:"Sewell"; cite-authors-long:"Sewell"; cite-label:"Sewell, 2019"; caption:"The Ott tool for writing definitions of programming languages and calculi: ott-lang/ott&nl;Sewell, 2019"; data-line:"FormalBib.bib:5012"; searchterm:"The%20Ott%20tool%20for%20writing%20definitions%20of%20programming%20languages%20and%20calculi%3A%20ottlang%2Fott%20Sewell%2C%202019"; spellcheck:"false"}
Sewell, P.&nbsp;(2019). _The Ott tool for writing definitions of programming languages and calculi: ott-lang/ott_. ott-lang. Retrieved from <https://github.com/ott-lang/ott>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sewell_rems_nodate"; cite-year:"2019"; cite-authors:"Sewell"; cite-authors-long:"Sewell"; cite-label:"Sewell, n.d."; caption:"REMS - Rigorous Engineering of Mainstream Systems&nl;Sewell, 2019"; data-line:"FormalBib.bib:5162"; searchterm:"REMS%20%20Rigorous%20Engineering%20of%20Mainstream%20Systems%20Sewell%2C%202019"; spellcheck:"false"}
Sewell, P.&nbsp;(n.d.). REMS - Rigorous Engineering of Mainstream Systems. Retrieved February 28, 2019, from <https://www.cl.cam.ac.uk/~pes20/rems/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shafiq_integrating_2014"; cite-year:"2014"; cite-authors:"Shafiq and Minhas"; cite-authors-long:"Shafiq and Minhas"; cite-label:"Shafiq \& Minhas, 2014"; caption:"Integrating Formal Methods in XP—A Conceptual Solution&nl;Shafiq and Minhas, 2014"; data-line:"FormalBib.bib:6485"; searchterm:"Integrating%20Formal%20Methods%20in%20XP%E2%80%94A%20Conceptual%20Solution%20Shafiq%20and%20Minhas%2C%202014"; spellcheck:"false"}
Shafiq, S., & Minhas, N.&nbsp;M.&nbsp;(2014). Integrating Formal Methods in XP—A Conceptual Solution. _Journal of Software Engineering and Applications_, _07_(4), 299–310. https://doi.org/[10.4236/jsea.2014.74029](https://dx.doi.org/10.4236/jsea.2014.74029){.bib-doi}
~ end bibitem

~ begin bibitem {id:"shao_httpsjhcsjtueducnyutingwangfilespopl22pdf_nodate"; cite-year:"2021"; cite-authors:"Shao and Koenig"; cite-authors-long:"Shao and Koenig"; cite-label:"Shao \& Koenig, n.d."; caption:"https://jhc.sjtu.edu.cn/&tilde;yutingwang/files/popl22.pdf&nl;Shao and Koenig, 2021"; data-line:"FormalBib.bib:9247"; searchterm:"https%3A%2F%2Fjhc.sjtu.edu.cn%2F%26tilde%3Byutingwang%2Ffiles%2Fpopl22.pdf%20Shao%20and%20Koenig%2C%202021"; spellcheck:"false"}
Shao, Z., & Koenig, J.&nbsp;(n.d.). https://jhc.sjtu.edu.cn/&tilde;yutingwang/files/popl22.pdf. Retrieved December 7, 2021, from <https://jhc.sjtu.edu.cn/~yutingwang/files/popl22.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shen_toward_2021"; cite-year:"2021"; cite-authors:"Shen and Kuper"; cite-authors-long:"Shen and Kuper"; cite-label:"Shen \& Kuper, 2021"; caption:"Toward SMT-Based Refinement Types in Agda&nl;Shen and Kuper, 2021"; data-line:"LanguageTools.bib:851"; searchterm:"Toward%20SMTBased%20Refinement%20Types%20in%20Agda%20Shen%20and%20Kuper%2C%202021"; spellcheck:"false"}
Shen, G., & Kuper, L.&nbsp;(2021). Toward SMT-Based Refinement Types in Agda. _arXiv:2110.05771 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.05771](http://arxiv.org/abs/2110.05771){.bib-url}
~ end bibitem

~ begin bibitem {id:"sherman_making_2017"; cite-year:"2017"; cite-authors:"Sherman"; cite-authors-long:"Sherman"; cite-label:"Sherman, 2017"; caption:"Making Discrete Decisions Based on Continuous Values&nl;Sherman, 2017"; data-line:"FormalBib.bib:1208"; searchterm:"Making%20Discrete%20Decisions%20Based%20on%20Continuous%20Values%20Sherman%2C%202017"; spellcheck:"false"}
Sherman, B.&nbsp;(2017). _Making Discrete Decisions Based on Continuous Values_ (Master of Science). MIT, Cambridge, MA.&nbsp;Retrieved from <http://adam.chlipala.net/theses/sherman_sm.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shi_network_2021"; cite-year:"2021"; cite-authors:"L.&nbsp;Shi et al."; cite-authors-long:"L.&nbsp;Shi, Li, Loo, and Alur"; cite-label:"L. Shi, Li, Loo, \& Alur, 2021"; caption:"Network Traﬃc Classiﬁcation by Program Synthesis&nl;L. Shi, Li, Loo, and Alur, 2021"; data-line:"Networking.bib:1008"; searchterm:"Network%20Tra%EF%AC%83c%20Classi%EF%AC%81cation%20by%20Program%20Synthesis%20L.%20Shi%2C%20Li%2C%20Loo%2C%20and%20Alur%2C%202021"; spellcheck:"false"}
Shi, L., Li, Y., Loo, B.&nbsp;T., & Alur, R.&nbsp;(2021). Network Traﬃc Classiﬁcation by Program Synthesis. _TACAS21_, 19.
~ end bibitem

~ begin bibitem {id:"shin_wormspace:_2019"; cite-year:"2019"; cite-authors:"Shin et al."; cite-authors-long:"Shin, Kim, Honoré, Vanzetto, Radhakrishnan, Balakrishnan, and Shao"; cite-label:"Shin et al., 2019"; caption:"WormSpace: A Modular Foundation for Simple, Verifiable Distributed Systems&nl;Shin, Kim, Honoré, Vanzetto, Radhakrishnan, Balakrishnan, and Shao, 2019"; data-line:"FormalBib.bib:6565"; searchterm:"WormSpace%3A%20A%20Modular%20Foundation%20for%20Simple%2C%20Verifiable%20Distributed%20Systems%20Shin%2C%20Kim%2C%20Honor%C3%A9%2C%20Vanzetto%2C%20Radhakrishnan%2C%20Balakrishnan%2C%20and%20Shao%2C%202019"; spellcheck:"false"}
Shin, J.-Y., Kim, J., Honoré, W., Vanzetto, H., Radhakrishnan, S., Balakrishnan, M., & Shao, Z.&nbsp;(2019). WormSpace: A Modular Foundation for Simple, Verifiable Distributed Systems. In _Proceedings of the ACM Symposium on Cloud Computing&nbsp;- SoCC ’19_ (pp. 299–311). Santa Cruz, CA, USA: ACM Press. https://doi.org/[10.1145/3357223.3362739](https://dx.doi.org/10.1145/3357223.3362739){.bib-doi}
~ end bibitem

~ begin bibitem {id:"shi_path-sensitive_2021"; cite-year:"2021"; cite-authors:"Q.&nbsp;Shi et al."; cite-authors-long:"Q.&nbsp;Shi, Yao, Wu, and Zhang"; cite-label:"Q. Shi, Yao, Wu, \& Zhang, 2021"; caption:"Path-Sensitive Sparse Analysis withoutPath Conditions&nl;Q. Shi, Yao, Wu, and Zhang, 2021"; data-line:"LanguageTools.bib:173"; searchterm:"PathSensitive%20Sparse%20Analysis%20withoutPath%20Conditions%20Q.%20Shi%2C%20Yao%2C%20Wu%2C%20and%20Zhang%2C%202021"; spellcheck:"false"}
Shi, Q., Yao, P., Wu, R., & Zhang, C.&nbsp;(2021). Path-Sensitive Sparse Analysis withoutPath Conditions, 14.
~ end bibitem

~ begin bibitem {id:"shrobe_trust-management_2009"; cite-year:"2009"; cite-authors:"Shrobe et al."; cite-authors-long:"Shrobe, DeHon, and Knight"; cite-label:"Shrobe, DeHon, \& Knight, 2009"; caption:"Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA)&nl;Shrobe, DeHon, and Knight, 2009"; data-line:"FormalBib.bib:3037"; searchterm:"TrustManagement%2C%20IntrusionTolerance%2C%20Accountability%2C%20and%20Reconstitution%20Architecture%20TIARA%20Shrobe%2C%20DeHon%2C%20and%20Knight%2C%202009"; spellcheck:"false"}
Shrobe, H., DeHon, A., & Knight, T.&nbsp;(2009). Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA), 133. Retrieved from <https://apps.dtic.mil/dtic/tr/fulltext/u2/a511350.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sidhpurwala_security_2019"; cite-year:"2019"; cite-authors:"Sidhpurwala"; cite-authors-long:"Sidhpurwala"; cite-label:"Sidhpurwala, 2019"; caption:"Security flaws caused by compiler optimizations&nl;Sidhpurwala, 2019"; data-line:"Security.bib:177"; searchterm:"Security%20flaws%20caused%20by%20compiler%20optimizations%20Sidhpurwala%2C%202019"; spellcheck:"false"}
Sidhpurwala, H.&nbsp;(2019, August 21). Security flaws caused by compiler optimizations. Retrieved May 28, 2021, from <https://www.redhat.com/en/blog/security-flaws-caused-compiler-optimizations>{.bib-url}
~ end bibitem

~ begin bibitem {id:"silver_dijkstra_nodate"; cite-year:"n.d."; cite-authors:"Silver and Zdancewic"; cite-authors-long:"Silver and Zdancewic"; cite-label:"Silver \& Zdancewic, n.d."; caption:"Dijkstra Monads Forever: Termination-Sensitive Specifications for Interaction Trees&nl;Silver and Zdancewic, n.d."; data-line:"FormalBib.bib:5695"; searchterm:"Dijkstra%20Monads%20Forever%3A%20TerminationSensitive%20Specifications%20for%20Interaction%20Trees%20Silver%20and%20Zdancewic%2C%20n.d."; spellcheck:"false"}
Silver, L., & Zdancewic, S.&nbsp;(n.d.). Dijkstra Monads Forever: Termination-Sensitive Specifications for Interaction Trees, _5_, 28.
~ end bibitem

~ begin bibitem {id:"singh_multi-view_2021"; cite-year:"2021"; cite-authors:"Singh et al."; cite-authors-long:"Singh, Chaturvedy, and Mishra"; cite-label:"Singh, Chaturvedy, \& Mishra, 2021"; caption:"Multi-View Learning for Repackaged Malware Detection&nl;Singh, Chaturvedy, and Mishra, 2021"; data-line:"Security.bib:643"; searchterm:"MultiView%20Learning%20for%20Repackaged%20Malware%20Detection%20Singh%2C%20Chaturvedy%2C%20and%20Mishra%2C%202021"; spellcheck:"false"}
Singh, S., Chaturvedy, K., & Mishra, B.&nbsp;(2021). Multi-View Learning for Repackaged Malware Detection. In _The 16th International Conference on Availability, Reliability and Security_ (pp. 1–9). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3465481.3470040](https://dx.doi.org/10.1145/3465481.3470040){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sinkarovs_choosing_2021"; cite-year:"2021b"; cite-authors:"Šinkarovs and Cockx"; cite-authors-long:"Šinkarovs and Cockx"; cite-label:"Šinkarovs \& Cockx, 2021a"; caption:"Choosing is Losing: How to combine the benefits of shallow and deep embeddings through reflection&nl;Šinkarovs and Cockx, 2021b"; data-line:"FormalBib.bib:46"; searchterm:"Choosing%20is%20Losing%3A%20How%20to%20combine%20the%20benefits%20of%20shallow%20and%20deep%20embeddings%20through%20reflection%20%C5%A0inkarovs%20and%20Cockx%2C%202021b"; spellcheck:"false"}
Šinkarovs, A., & Cockx, J.&nbsp;(2021a). Choosing is Losing: How to combine the benefits of shallow and deep embeddings through reflection. _arXiv:2105.10819 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.10819](http://arxiv.org/abs/2105.10819){.bib-url}
~ end bibitem

~ begin bibitem {id:"sinkarovs_extracting_2021"; cite-year:"2021a"; cite-authors:"Šinkarovs and Cockx"; cite-authors-long:"Šinkarovs and Cockx"; cite-label:"Šinkarovs \& Cockx, 2021b"; caption:"Extracting the Power of Dependent Types&nl;Šinkarovs and Cockx, 2021a"; data-line:"FormalBib.bib:8785"; searchterm:"Extracting%20the%20Power%20of%20Dependent%20Types%20%C5%A0inkarovs%20and%20Cockx%2C%202021a"; spellcheck:"false"}
Šinkarovs, A., & Cockx, J.&nbsp;(2021b). Extracting the Power of Dependent Types, 13.
~ end bibitem

~ begin bibitem {id:"sison_verified_2020"; cite-year:"2020"; cite-authors:"Sison and Murray"; cite-authors-long:"Sison and Murray"; cite-label:"Sison \& Murray, 2020"; caption:"Verified Secure Compilation for Mixed-Sensitivity Concurrent Programs&nl;Sison and Murray, 2020"; data-line:"Security.bib:202"; searchterm:"Verified%20Secure%20Compilation%20for%20MixedSensitivity%20Concurrent%20Programs%20Sison%20and%20Murray%2C%202020"; spellcheck:"false"}
Sison, R., & Murray, T.&nbsp;(2020). Verified Secure Compilation for Mixed-Sensitivity Concurrent Programs. _arXiv:2010.14032 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2010.14032](http://arxiv.org/abs/2010.14032){.bib-url}
~ end bibitem

~ begin bibitem {id:"sitaraman_building_2011"; cite-year:"2011"; cite-authors:"Sitaraman et al."; cite-authors-long:"Sitaraman, Adcock, Avigad, Bronish, Bucci, Frazier, et al."; cite-label:"Sitaraman et al., 2011"; caption:"Building a push-button RESOLVE verifier: Progress and challenges&nl;Sitaraman, Adcock, Avigad, Bronish, Bucci, Frazier, et al., 2011"; data-line:"FormalBib.bib:5841"; searchterm:"Building%20a%20pushbutton%20RESOLVE%20verifier%3A%20Progress%20and%20challenges%20Sitaraman%2C%20Adcock%2C%20Avigad%2C%20Bronish%2C%20Bucci%2C%20Frazier%2C%20et%20al.%2C%202011"; spellcheck:"false"}
Sitaraman, M., Adcock, B., Avigad, J., Bronish, D., Bucci, P., Frazier, D., … Weide, B.&nbsp;W.&nbsp;(2011). Building a push-button RESOLVE verifier: Progress and challenges. _Formal Aspects of Computing_, _23_(5), 607–626. https://doi.org/[10.1007/s00165-010-0154-3](https://dx.doi.org/10.1007/s00165-010-0154-3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sivaramakrishnan_retrofitting_2021"; cite-year:"2021"; cite-authors:"Sivaramakrishnan et al."; cite-authors-long:"Sivaramakrishnan, Dolan, White, Kelly, Jaffer, and Madhavapeddy"; cite-label:"Sivaramakrishnan et al., 2021"; caption:"Retrofitting effect handlers onto OCaml&nl;Sivaramakrishnan, Dolan, White, Kelly, Jaffer, and Madhavapeddy, 2021"; data-line:"FormalBib.bib:7117"; searchterm:"Retrofitting%20effect%20handlers%20onto%20OCaml%20Sivaramakrishnan%2C%20Dolan%2C%20White%2C%20Kelly%2C%20Jaffer%2C%20and%20Madhavapeddy%2C%202021"; spellcheck:"false"}
Sivaramakrishnan, K., Dolan, S., White, L., Kelly, T., Jaffer, S., & Madhavapeddy, A.&nbsp;(2021). Retrofitting effect handlers onto OCaml. In _Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation_ (pp. 206–221). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3453483.3454039](https://dx.doi.org/10.1145/3453483.3454039){.bib-doi}
~ end bibitem

~ begin bibitem {id:"six_compilation_2021"; cite-year:"2021"; cite-authors:"Six"; cite-authors-long:"Six"; cite-label:"Six, 2021"; caption:"Compilation optimisante et formellement prouvée pour un processeur VLIW&nl;Six, 2021"; data-line:"FormalBib.bib:7262"; searchterm:"Compilation%20optimisante%20et%20formellement%20prouv%C3%A9e%20pour%20un%20processeur%20VLIW%20Six%2C%202021"; spellcheck:"false"}
Six, C.&nbsp;(2021). _Compilation optimisante et formellement prouvée pour un processeur VLIW_ (Theses). Université Grenoble Alpes. Retrieved from <https://hal.archives-ouvertes.fr/tel-03326923>{.bib-url}
~ end bibitem

~ begin bibitem {id:"six_certified_2020"; cite-year:"2020"; cite-authors:"Six et al."; cite-authors-long:"Six, Boulmé, and Monniaux"; cite-label:"Six, Boulmé, \& Monniaux, 2020"; caption:"Certified and efficient instruction scheduling: application to interlocked VLIW processors&nl;Six, Boulmé, and Monniaux, 2020"; data-line:"LanguageTools.bib:353"; searchterm:"Certified%20and%20efficient%20instruction%20scheduling%3A%20application%20to%20interlocked%20VLIW%20processors%20Six%2C%20Boulm%C3%A9%2C%20and%20Monniaux%2C%202020"; spellcheck:"false"}
Six, C., Boulmé, S., & Monniaux, D.&nbsp;(2020). Certified and efficient instruction scheduling: application to interlocked VLIW processors. _Proceedings of the ACM on Programming Languages_, _4_, 1–29. https://doi.org/[10.1145/3428197](https://dx.doi.org/10.1145/3428197){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sjosten_information_2018"; cite-year:"2018"; cite-authors:"Sjösten et al."; cite-authors-long:"Sjösten, Hedin, and Sabelfeld"; cite-label:"Sjösten, Hedin, \& Sabelfeld, 2018"; caption:"Information Flow Tracking for Side-Effectful Libraries&nl;Sjösten, Hedin, and Sabelfeld, 2018"; data-line:"FormalBib.bib:4720"; searchterm:"Information%20Flow%20Tracking%20for%20SideEffectful%20Libraries%20Sj%C3%B6sten%2C%20Hedin%2C%20and%20Sabelfeld%2C%202018"; spellcheck:"false"}
Sjösten, A., Hedin, D., & Sabelfeld, A.&nbsp;(2018). Information Flow Tracking for Side-Effectful Libraries. In C.&nbsp;Baier & L.&nbsp;Caires (Eds.), _Formal Techniques for Distributed Objects, Components, and Systems_ (pp. 141–160). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"skalka_proof-carrying_2019"; cite-year:"2019"; cite-authors:"Skalka et al."; cite-authors-long:"Skalka, Ring, Darias, Kwon, Gupta, Diller, et al."; cite-label:"Skalka et al., 2019"; caption:"Proof-Carrying Network Code&nl;Skalka, Ring, Darias, Kwon, Gupta, Diller, et al., 2019"; data-line:"Networking.bib:174"; searchterm:"ProofCarrying%20Network%20Code%20Skalka%2C%20Ring%2C%20Darias%2C%20Kwon%2C%20Gupta%2C%20Diller%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Skalka, C., Ring, J., Darias, D., Kwon, M., Gupta, S., Diller, K., … Foster, N.&nbsp;(2019). Proof-Carrying Network Code. In _Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security_ (pp. 1115–1129). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3319535.3363214](https://dx.doi.org/10.1145/3319535.3363214){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_sledge_nodate"; cite-authors:"2021ak"; cite-authors-long:"2021ak"; cite-label:"\&ldquo;SLEdge,\&rdquo; n.d."; caption:"SLEdge: Bounded Model Checking in Separation Logic (ADSL 2020) - POPL 2020&nl;2021ak, "; data-line:"FormalBib.bib:705"; searchterm:"SLEdge%3A%20Bounded%20Model%20Checking%20in%20Separation%20Logic%20ADSL%202020%20%20POPL%202020%202021ak%2C%20"; spellcheck:"false"}
SLEdge: Bounded Model Checking in Separation Logic (ADSL 2020) - POPL 2020. (n.d.). Retrieved January 22, 2021, from <https://popl20.sigplan.org/details/adsl-2020-papers/1/SLEdge-Bounded-Model-Checking-in-Separation-Logic>{.bib-url}
~ end bibitem

~ begin bibitem {id:"smolka_modeling_nodate"; cite-year:"n.d."; cite-authors:"G.&nbsp;Smolka"; cite-authors-long:"G.&nbsp;Smolka"; cite-label:"G. Smolka, n.d."; caption:"Modeling and Proving in Computational Type Theory Using the Coq Proof Assistant&nl;G. Smolka, n.d."; data-line:"FormalBib.bib:7949"; searchterm:"Modeling%20and%20Proving%20in%20Computational%20Type%20Theory%20Using%20the%20Coq%20Proof%20Assistant%20G.%20Smolka%2C%20n.d."; spellcheck:"false"}
Smolka, G.&nbsp;(n.d.). Modeling and Proving in Computational Type Theory Using the Coq Proof Assistant, 338.
~ end bibitem

~ begin bibitem {id:"smolka_guarded_2019"; cite-year:"2019"; cite-authors:"S.&nbsp;Smolka et al."; cite-authors-long:"S.&nbsp;Smolka, Foster, Hsu, Kappé, Kozen, and Silva"; cite-label:"S. Smolka, Foster, et al., 2019"; caption:"Guarded Kleene algebra with tests: verification of uninterpreted programs in nearly linear time&nl;S. Smolka, Foster, Hsu, Kappé, Kozen, and Silva, 2019"; data-line:"Networking.bib:192"; searchterm:"Guarded%20Kleene%20algebra%20with%20tests%3A%20verification%20of%20uninterpreted%20programs%20in%20nearly%20linear%20time%20S.%20Smolka%2C%20Foster%2C%20Hsu%2C%20Kapp%C3%A9%2C%20Kozen%2C%20and%20Silva%2C%202019"; spellcheck:"false"}
Smolka, S., Foster, N., Hsu, J., Kappé, T., Kozen, D., & Silva, A.&nbsp;(2019). Guarded Kleene algebra with tests: verification of uninterpreted programs in nearly linear time. _Proceedings of the ACM on Programming Languages_, _4_, 61:1–61:28. https://doi.org/[10.1145/3371129](https://dx.doi.org/10.1145/3371129){.bib-doi}
~ end bibitem

~ begin bibitem {id:"smolka_coalgebraic_2019"; cite-year:"2019"; cite-authors:"S.&nbsp;J.&nbsp;Smolka"; cite-authors-long:"S.&nbsp;J.&nbsp;Smolka"; cite-label:"S. J. Smolka, 2019"; caption:"A (Co)algebraic Approach to Programming and Verifying Computer Networks&nl;S. J. Smolka, 2019"; data-line:"Networking.bib:391"; searchterm:"A%20Coalgebraic%20Approach%20to%20Programming%20and%20Verifying%20Computer%20Networks%20S.%20J.%20Smolka%2C%202019"; spellcheck:"false"}
Smolka, S.&nbsp;J.&nbsp;(2019). A (Co)algebraic Approach to Programming and Verifying Computer Networks. https://doi.org/[10.7298/1dpd-c128](https://dx.doi.org/10.7298/1dpd-c128){.bib-doi}
~ end bibitem

~ begin bibitem {id:"smolka_cantor_2017"; cite-year:"2017"; cite-authors:"S.&nbsp;Smolka et al."; cite-authors-long:"S.&nbsp;Smolka, Kumar, Foster, Kozen, and Silva"; cite-label:"S. Smolka, Kumar, Foster, Kozen, \& Silva, 2017"; caption:"Cantor meets Scott: semantic foundations for probabilistic networks&nl;S. Smolka, Kumar, Foster, Kozen, and Silva, 2017"; data-line:"Networking.bib:228"; searchterm:"Cantor%20meets%20Scott%3A%20semantic%20foundations%20for%20probabilistic%20networks%20S.%20Smolka%2C%20Kumar%2C%20Foster%2C%20Kozen%2C%20and%20Silva%2C%202017"; spellcheck:"false"}
Smolka, S., Kumar, P., Foster, N., Kozen, D., & Silva, A.&nbsp;(2017). Cantor meets Scott: semantic foundations for probabilistic networks. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 557–571). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3009837.3009843](https://dx.doi.org/10.1145/3009837.3009843){.bib-doi}
~ end bibitem

~ begin bibitem {id:"smolka_scalable_2019"; cite-year:"2019"; cite-authors:"S.&nbsp;Smolka et al."; cite-authors-long:"S.&nbsp;Smolka, Kumar, Kahn, Foster, Hsu, Kozen, and Silva"; cite-label:"S. Smolka, Kumar, et al., 2019"; caption:"Scalable verification of probabilistic networks&nl;S. Smolka, Kumar, Kahn, Foster, Hsu, Kozen, and Silva, 2019"; data-line:"Networking.bib:210"; searchterm:"Scalable%20verification%20of%20probabilistic%20networks%20S.%20Smolka%2C%20Kumar%2C%20Kahn%2C%20Foster%2C%20Hsu%2C%20Kozen%2C%20and%20Silva%2C%202019"; spellcheck:"false"}
Smolka, S., Kumar, P., Kahn, D.&nbsp;M., Foster, N., Hsu, J., Kozen, D., & Silva, A.&nbsp;(2019). Scalable verification of probabilistic networks. In _Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 190–203). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3314221.3314639](https://dx.doi.org/10.1145/3314221.3314639){.bib-doi}
~ end bibitem

~ begin bibitem {id:"soare_turing_2016"; cite-year:"2016"; cite-authors:"Soare"; cite-authors-long:"Soare"; cite-label:"Soare, 2016"; caption:"Turing Computability&nl;Soare, 2016"; data-line:"FormalBib.bib:6758"; searchterm:"Turing%20Computability%20Soare%2C%202016"; spellcheck:"false"}
Soare, R.&nbsp;I.&nbsp;(2016). _Turing Computability_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-31933-4](https://dx.doi.org/10.1007/978-3-642-31933-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sokar_self-attention_2021"; cite-year:"2021"; cite-authors:"Sokar et al."; cite-authors-long:"Sokar, Mocanu, and Pechenizkiy"; cite-label:"Sokar, Mocanu, \& Pechenizkiy, 2021"; caption:"Self-Attention Meta-Learner for Continual Learning&nl;Sokar, Mocanu, and Pechenizkiy, 2021"; data-line:"FormalBib.bib:455"; searchterm:"SelfAttention%20MetaLearner%20for%20Continual%20Learning%20Sokar%2C%20Mocanu%2C%20and%20Pechenizkiy%2C%202021"; spellcheck:"false"}
Sokar, G., Mocanu, D.&nbsp;C., & Pechenizkiy, M.&nbsp;(2021). Self-Attention Meta-Learner for Continual Learning. _arXiv:2101.12136 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.12136](http://arxiv.org/abs/2101.12136){.bib-url}
~ end bibitem

~ begin bibitem {id:"soni_composing_2020"; cite-year:"2020"; cite-authors:"Soni et al."; cite-authors-long:"Soni, Rifai, Kumar, Doenges, and Foster"; cite-label:"Soni, Rifai, Kumar, Doenges, \& Foster, 2020"; caption:"Composing Dataplane Programs with μP4&nl;Soni, Rifai, Kumar, Doenges, and Foster, 2020"; data-line:"Networking.bib:456"; searchterm:"Composing%20Dataplane%20Programs%20with%20%CE%BCP4%20Soni%2C%20Rifai%2C%20Kumar%2C%20Doenges%2C%20and%20Foster%2C%202020"; spellcheck:"false"}
Soni, H., Rifai, M., Kumar, P., Doenges, R., & Foster, N.&nbsp;(2020). Composing Dataplane Programs with μP4. In _Proceedings of the Annual conference of the ACM Special Interest Group on Data Communication on the applications, technologies, architectures, and protocols for computer communication_ (pp. 329–343). Virtual Event USA: ACM.&nbsp;https://doi.org/[10.1145/3387514.3405872](https://dx.doi.org/10.1145/3387514.3405872){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sozeau_equations:_2010"; cite-year:"2010"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2010"; caption:"Equations: A Dependent Pattern-Matching Compiler&nl;Sozeau, 2010"; data-line:"FormalBib.bib:2485"; searchterm:"Equations%3A%20A%20Dependent%20PatternMatching%20Compiler%20Sozeau%2C%202010"; spellcheck:"false"}
Sozeau, M.&nbsp;(2010). Equations: A Dependent Pattern-Matching Compiler. In M.&nbsp;Kaufmann & L.&nbsp;C.&nbsp;Paulson (Eds.), _Interactive Theorem Proving_ (pp. 419–434). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"sozeau_metacoq_2019"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2019"; caption:"MetaCoq - Metaprogramming in Coq (Was template-coq)&nl;Sozeau, 2019"; data-line:"FormalBib.bib:3216"; searchterm:"MetaCoq%20%20Metaprogramming%20in%20Coq%20Was%20templatecoq%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(2019). _MetaCoq - Metaprogramming in Coq (Was template-coq)_. MetaCoq. Retrieved from <https://github.com/MetaCoq/metacoq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_touring_2021"; cite-year:"2021"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2021"; caption:"Touring the MetaCoq Project (Invited Paper)&nl;Sozeau, 2021"; data-line:"FormalBib.bib:7686"; searchterm:"Touring%20the%20MetaCoq%20Project%20Invited%20Paper%20Sozeau%2C%202021"; spellcheck:"false"}
Sozeau, M.&nbsp;(2021). Touring the MetaCoq Project (Invited Paper). _Electronic Proceedings in Theoretical Computer Science_, _337_, 13–29. https://doi.org/[10.4204/EPTCS.337.2](https://dx.doi.org/10.4204/EPTCS.337.2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sozeau_subset_nodate"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-a"; caption:"Subset coercions in Coq&nl;Sozeau, n.d."; data-line:"FormalBib.bib:2991"; searchterm:"Subset%20coercions%20in%20Coq%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-a). Subset coercions in Coq. _Springer-Verlag LNCS_, 237–252.
~ end bibitem

~ begin bibitem {id:"sozeau_metacoq_nodate"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-b"; caption:"The MetaCoq Project&nl;Sozeau, n.d."; data-line:"FormalBib.bib:4909"; searchterm:"The%20MetaCoq%20Project%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-b). The MetaCoq Project, 39.
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate-1"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-c"; caption:"Typed Template Coq - POPL 2018&nl;Sozeau, 2019"; data-line:"FormalBib.bib:3273"; searchterm:"Typed%20Template%20Coq%20%20POPL%202018%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-c). Typed Template Coq - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-typed-template-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-d"; caption:"Typed Template Coq - Slides&nl;Sozeau, n.d."; data-line:"FormalBib.bib:3265"; searchterm:"Typed%20Template%20Coq%20%20Slides%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-d). Typed Template Coq - Slides, 11.
~ end bibitem

~ begin bibitem {id:"sozeau_first-class_2008"; cite-year:"2008a"; cite-authors:"Sozeau and Oury"; cite-authors-long:"Sozeau and Oury"; cite-label:"Sozeau \& Oury, 2008a"; caption:"First-class type classes&nl;Sozeau and Oury, 2008a"; data-line:"FormalBib.bib:3018"; searchterm:"Firstclass%20type%20classes%20Sozeau%20and%20Oury%2C%202008a"; spellcheck:"false"}
Sozeau, M., & Oury, N.&nbsp;(2008a). _First-class type classes_.
~ end bibitem

~ begin bibitem {id:"mohamed_first-class_2008"; cite-year:"2008b"; cite-authors:"Sozeau and Oury"; cite-authors-long:"Sozeau and Oury"; cite-label:"Sozeau \& Oury, 2008b"; caption:"First-Class Type Classes - TPHOLs Talk&nl;Sozeau and Oury, 2008b"; data-line:"FormalBib.bib:3000"; searchterm:"FirstClass%20Type%20Classes%20%20TPHOLs%20Talk%20Sozeau%20and%20Oury%2C%202008b"; spellcheck:"false"}
Sozeau, M., & Oury, N.&nbsp;(2008b). First-Class Type Classes - TPHOLs Talk. In O.&nbsp;A.&nbsp;Mohamed, C.&nbsp;Muñoz, & S.&nbsp;Tahar (Eds.), _Theorem Proving in Higher Order Logics_ (Vol. 5170, pp. 278–293). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-71067-7_23](https://dx.doi.org/10.1007/978-3-540-71067-7_23){.bib-doi}
~ end bibitem

~ begin bibitem {id:"spath_synchronized_2019"; cite-year:"2019"; cite-authors:"Spath"; cite-authors-long:"Spath"; cite-label:"Spath, 2019"; caption:"Synchronized Pushdown Systems for Pointer and Data-Flow Analysis&nl;Spath, 2019"; data-line:"LanguageTools.bib:1095"; searchterm:"Synchronized%20Pushdown%20Systems%20for%20Pointer%20and%20DataFlow%20Analysis%20Spath%2C%202019"; spellcheck:"false"}
Spath, J.&nbsp;(2019). _Synchronized Pushdown Systems for Pointer and Data-Flow Analysis_ (phdthesis). Paderborn University, Paderborn.
~ end bibitem

~ begin bibitem {id:"spath_ideal_2017"; cite-year:"2017"; cite-authors:"Späth et al."; cite-authors-long:"Späth, Ali, and Bodden"; cite-label:"Späth, Ali, \& Bodden, 2017"; caption:"IDEal: efficient and precise alias-aware dataflow analysis&nl;Späth, Ali, and Bodden, 2017"; data-line:"LanguageTools.bib:1124"; searchterm:"IDEal%3A%20efficient%20and%20precise%20aliasaware%20dataflow%20analysis%20Sp%C3%A4th%2C%20Ali%2C%20and%20Bodden%2C%202017"; spellcheck:"false"}
Späth, J., Ali, K., & Bodden, E.&nbsp;(2017). IDEal: efficient and precise alias-aware dataflow analysis. _Proceedings of the ACM on Programming Languages_, _1_, 99:1–99:27. https://doi.org/[10.1145/3133923](https://dx.doi.org/10.1145/3133923){.bib-doi}
~ end bibitem

~ begin bibitem {id:"spath_context-_2019"; cite-year:"2019"; cite-authors:"Späth et al."; cite-authors-long:"Späth, Ali, and Bodden"; cite-label:"Späth, Ali, \& Bodden, 2019"; caption:"Context-, flow-, and field-sensitive data-flow analysis using synchronized Pushdown systems&nl;Späth, Ali, and Bodden, 2019"; data-line:"LanguageTools.bib:1107"; searchterm:"Context%2C%20flow%2C%20and%20fieldsensitive%20dataflow%20analysis%20using%20synchronized%20Pushdown%20systems%20Sp%C3%A4th%2C%20Ali%2C%20and%20Bodden%2C%202019"; spellcheck:"false"}
Späth, J., Ali, K., & Bodden, E.&nbsp;(2019). Context-, flow-, and field-sensitive data-flow analysis using synchronized Pushdown systems. _Proceedings of the ACM on Programming Languages_, _3_, 48:1–48:29. https://doi.org/[10.1145/3290361](https://dx.doi.org/10.1145/3290361){.bib-doi}
~ end bibitem

~ begin bibitem {id:"spath_boomerang_2016"; cite-year:"2016"; cite-authors:"Späth et al."; cite-authors-long:"Späth, Do, Ali, and Bodden"; cite-label:"Späth, Do, Ali, \& Bodden, 2016"; caption:"Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java&nl;Späth, Do, Ali, and Bodden, 2016"; data-line:"LanguageTools.bib:1142"; searchterm:"Boomerang%3A%20DemandDriven%20Flow%20and%20ContextSensitive%20Pointer%20Analysis%20for%20Java%20Sp%C3%A4th%2C%20Do%2C%20Ali%2C%20and%20Bodden%2C%202016"; spellcheck:"false"}
Späth, J., Do, L.&nbsp;N.&nbsp;Q., Ali, K., & Bodden, E.&nbsp;(2016). Boomerang: Demand-Driven Flow- and Context-Sensitive Pointer Analysis for Java, 26.
~ end bibitem

~ begin bibitem {id:"spector-zabusky_dont_2021"; cite-year:"2021"; cite-authors:"Spector-Zabusky"; cite-authors-long:"Spector-Zabusky"; cite-label:"Spector-Zabusky, 2021"; caption:"DON’T MIND THE FORMALIZATION GAP: THE DESIGN AND USAGE OF HS-TO-COQ&nl;Spector-Zabusky, 2021"; data-line:"FormalBib.bib:2"; searchterm:"DON%E2%80%99T%20MIND%20THE%20FORMALIZATION%20GAP%3A%20THE%20DESIGN%20AND%20USAGE%20OF%20HSTOCOQ%20SpectorZabusky%2C%202021"; spellcheck:"false"}
Spector-Zabusky, A.&nbsp;(2021). _DON’T MIND THE FORMALIZATION GAP: THE DESIGN AND USAGE OF HS-TO-COQ_ (phdthesis). University of Pennsylvania. Retrieved from <https://www.cis.upenn.edu/~sweirich/papers/spector-zabusky-thesis.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"spector-zabusky_total_2018"; cite-year:"2018"; cite-authors:"Spector-Zabusky et al."; cite-authors-long:"Spector-Zabusky, Breitner, Rizkallah, and Weirich"; cite-label:"Spector-Zabusky, Breitner, Rizkallah, \& Weirich, 2018"; caption:"Total Haskell is Reasonable Coq&nl;Spector-Zabusky, Breitner, Rizkallah, and Weirich, 2018"; data-line:"FormalBib.bib:1878"; searchterm:"Total%20Haskell%20is%20Reasonable%20Coq%20SpectorZabusky%2C%20Breitner%2C%20Rizkallah%2C%20and%20Weirich%2C%202018"; spellcheck:"false"}
Spector-Zabusky, A., Breitner, J., Rizkallah, C., & Weirich, S.&nbsp;(2018). Total Haskell is Reasonable Coq. In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 14–27). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167092](https://dx.doi.org/10.1145/3167092){.bib-doi}
~ end bibitem

~ begin bibitem {id:"spitters_verified_nodate"; cite-year:"2021"; cite-authors:"Spitters"; cite-authors-long:"Spitters"; cite-label:"Spitters, n.d."; caption:"A Verified Pipeline from a Specification Language to Optimized, Safe Rust&nl;Spitters, 2021"; data-line:"FormalBib.bib:9255"; searchterm:"A%20Verified%20Pipeline%20from%20a%20Specification%20Language%20to%20Optimized%2C%20Safe%20Rust%20Spitters%2C%202021"; spellcheck:"false"}
Spitters, B.&nbsp;(n.d.). A Verified Pipeline from a Specification Language to Optimized, Safe Rust. Retrieved December 7, 2021, from <https://cs.au.dk/~spitters/CoqPL22.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"staats_scanner_2021"; cite-year:"2021"; cite-authors:"Staats"; cite-authors-long:"Staats"; cite-label:"Staats, 2021"; caption:"Scanner Project V2&nl;Staats, 2021"; data-line:"Security.bib:1137"; searchterm:"Scanner%20Project%20V2%20Staats%2C%202021"; spellcheck:"false"}
Staats, W.&nbsp;(2021). Scanner Project V2. Colsa.
~ end bibitem

~ begin bibitem {id:"stanford_symbolic_2021"; cite-year:"2021"; cite-authors:"Stanford et al."; cite-authors-long:"Stanford, Veanes, and Bj"; cite-label:"Stanford, Veanes, \& Bj, 2021"; caption:"Symbolic Boolean Derivatives for Efficiently Solving Extended Regular Expression Constraints&nl;Stanford, Veanes, and Bj, 2021"; data-line:"FormalBib.bib:323"; searchterm:"Symbolic%20Boolean%20Derivatives%20for%20Efficiently%20Solving%20Extended%20Regular%20Expression%20Constraints%20Stanford%2C%20Veanes%2C%20and%20Bj%2C%202021"; spellcheck:"false"}
Stanford, C., Veanes, M., & Bj, N.&nbsp;(2021). Symbolic Boolean Derivatives for Efficiently Solving Extended Regular Expression Constraints, 16.
~ end bibitem

~ begin bibitem {id:"stefano_verification_nodate"; cite-year:"n.d."; cite-authors:"Stefano"; cite-authors-long:"Stefano"; cite-label:"Stefano, n.d."; caption:"Verification of Distributed Systems via Sequential Emulation&nl;Stefano, n.d."; data-line:"FormalBib.bib:9894"; searchterm:"Verification%20of%20Distributed%20Systems%20via%20Sequential%20Emulation%20Stefano%2C%20n.d."; spellcheck:"false"}
Stefano, L.&nbsp;D.&nbsp;(n.d.). Verification of Distributed Systems via Sequential Emulation, 42.
~ end bibitem

~ begin bibitem {id:"steinberg_computable_nodate"; cite-year:"n.d."; cite-authors:"Steinberg et al."; cite-authors-long:"Steinberg, Théry, and Thies"; cite-label:"Steinberg, Théry, \& Thies, n.d."; caption:"Computable analysis and notions of continuity in Coq&nl;Steinberg, Théry, and Thies, n.d."; data-line:"FormalBib.bib:247"; searchterm:"Computable%20analysis%20and%20notions%20of%20continuity%20in%20Coq%20Steinberg%2C%20Th%C3%A9ry%2C%20and%20Thies%2C%20n.d."; spellcheck:"false"}
Steinberg, F., Théry, L., & Thies, H.&nbsp;(n.d.). Computable analysis and notions of continuity in Coq, _17_, 43.
~ end bibitem

~ begin bibitem {id:"stewart_verified_nodate"; cite-year:"2019"; cite-authors:"Stewart"; cite-authors-long:"Stewart"; cite-label:"Stewart, n.d."; caption:"Verified Separate Compilation for C &bar; Computer Science Department at Princeton University&nl;Stewart, 2019"; data-line:"FormalBib.bib:4993"; searchterm:"Verified%20Separate%20Compilation%20for%20C%20%26bar%3B%20Computer%20Science%20Department%20at%20Princeton%20University%20Stewart%2C%202019"; spellcheck:"false"}
Stewart, G.&nbsp;(n.d.). Verified Separate Compilation for C &bar; Computer Science Department at Princeton University. Retrieved March 3, 2019, from <https://www.cs.princeton.edu/research/techreps/TR-980-15>{.bib-url}
~ end bibitem

~ begin bibitem {id:"stewart_verified_2012"; cite-year:"2012"; cite-authors:"Stewart et al."; cite-authors-long:"Stewart, Beringer, and Appel"; cite-label:"Stewart, Beringer, \& Appel, 2012"; caption:"Verified Heap Theorem Prover by Paramodulation&nl;Stewart, Beringer, and Appel, 2012"; data-line:"FormalBib.bib:1317"; searchterm:"Verified%20Heap%20Theorem%20Prover%20by%20Paramodulation%20Stewart%2C%20Beringer%2C%20and%20Appel%2C%202012"; spellcheck:"false"}
Stewart, G., Beringer, L., & Appel, A.&nbsp;W.&nbsp;(2012). Verified Heap Theorem Prover by Paramodulation. In _Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming_ (pp. 3–14). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2364527.2364531](https://dx.doi.org/10.1145/2364527.2364531){.bib-doi}
~ end bibitem

~ begin bibitem {id:"stoddart_forth_2012"; cite-year:"2012"; cite-authors:"Stoddart et al."; cite-authors-long:"Stoddart, Ritchie, and Dunne"; cite-label:"Stoddart, Ritchie, \& Dunne, 2012"; caption:"Forth Semantics for Compiler Verification&nl;Stoddart, Ritchie, and Dunne, 2012"; data-line:"FormalBib.bib:4380"; searchterm:"Forth%20Semantics%20for%20Compiler%20Verification%20Stoddart%2C%20Ritchie%2C%20and%20Dunne%2C%202012"; spellcheck:"false"}
Stoddart, B., Ritchie, C., & Dunne, S.&nbsp;(2012). Forth Semantics for Compiler Verification.
~ end bibitem

~ begin bibitem {id:"stoenescu_debugging_2018"; cite-year:"2018"; cite-authors:"Stoenescu et al."; cite-authors-long:"Stoenescu, Dumitrescu, Popovici, Negreanu, and Raiciu"; cite-label:"Stoenescu, Dumitrescu, Popovici, Negreanu, \& Raiciu, 2018"; caption:"Debugging P4 programs with vera&nl;Stoenescu, Dumitrescu, Popovici, Negreanu, and Raiciu, 2018"; data-line:"Networking.bib:949"; searchterm:"Debugging%20P4%20programs%20with%20vera%20Stoenescu%2C%20Dumitrescu%2C%20Popovici%2C%20Negreanu%2C%20and%20Raiciu%2C%202018"; spellcheck:"false"}
Stoenescu, R., Dumitrescu, D., Popovici, M., Negreanu, L., & Raiciu, C.&nbsp;(2018). Debugging P4 programs with vera. In _Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication_ (pp. 518–532). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3230543.3230548](https://dx.doi.org/10.1145/3230543.3230548){.bib-doi}
~ end bibitem

~ begin bibitem {id:"strange_loop_proof_nodate"; cite-year:"2019"; cite-authors:"Strange Loop"; cite-authors-long:"Strange Loop"; cite-label:"Strange Loop, n.d."; caption:"\"Proof Theory Impressionism: Blurring the Curry-Howard Line\" by Dan Pittman&nl;Strange Loop, 2019"; data-line:"FormalBib.bib:4958"; searchterm:"%22Proof%20Theory%20Impressionism%3A%20Blurring%20the%20CurryHoward%20Line%22%20by%20Dan%20Pittman%20Strange%20Loop%2C%202019"; spellcheck:"false"}
Strange Loop. (n.d.). &ldquo;Proof Theory Impressionism: Blurring the Curry-Howard Line&rdquo; by Dan Pittman. Retrieved from <https://www.youtube.com/watch?v=jrVPB-Ad5Gc&t=31s>{.bib-url}
~ end bibitem

~ begin bibitem {id:"straub_use_2020"; cite-year:"2020"; cite-authors:"Straub"; cite-authors-long:"Straub"; cite-label:"Straub, 2020"; caption:"The Use of Runtime Verification for Identifying and Responding to Cybersecurity Threats Posed to State Actors During Cyberwarfare&nl;Straub, 2020"; data-line:"Security.bib:849"; searchterm:"The%20Use%20of%20Runtime%20Verification%20for%20Identifying%20and%20Responding%20to%20Cybersecurity%20Threats%20Posed%20to%20State%20Actors%20During%20Cyberwarfare%20Straub%2C%202020"; spellcheck:"false"}
Straub, J.&nbsp;(2020). The Use of Runtime Verification for Identifying and Responding to Cybersecurity Threats Posed to State Actors During Cyberwarfare. In _2020 International Conference on Computational Science and Computational Intelligence (CSCI)_ (pp. 83–87). https://doi.org/[10.1109/CSCI51800.2020.00021](https://dx.doi.org/10.1109/CSCI51800.2020.00021){.bib-doi}
~ end bibitem

~ begin bibitem {id:"strydonck_proving_nodate"; cite-year:"n.d."; cite-authors:"Strydonck et al."; cite-authors-long:"Strydonck, Leuven, Georges, Gueneau, and Trieu"; cite-label:"Strydonck, Leuven, Georges, Gueneau, \& Trieu, n.d."; caption:"Proving full-system security properties under multiple attacker models on capability machines&nl;Strydonck, Leuven, Georges, Gueneau, and Trieu, n.d."; data-line:"Security.bib:749"; searchterm:"Proving%20fullsystem%20security%20properties%20under%20multiple%20attacker%20models%20on%20capability%20machines%20Strydonck%2C%20Leuven%2C%20Georges%2C%20Gueneau%2C%20and%20Trieu%2C%20n.d."; spellcheck:"false"}
Strydonck, T.&nbsp;V., Leuven, K., Georges, A.&nbsp;L., Gueneau, A., & Trieu, A.&nbsp;(n.d.). Proving full-system security properties under multiple attacker models on capability machines, 16.
~ end bibitem

~ begin bibitem {id:"subramaniam_dependent_2021"; cite-year:"2021"; cite-authors:"Subramaniam"; cite-authors-long:"Subramaniam"; cite-label:"Subramaniam, 2021"; caption:"From dependent type theory to higher algebraic structures&nl;Subramaniam, 2021"; data-line:"FormalBib.bib:8927"; searchterm:"From%20dependent%20type%20theory%20to%20higher%20algebraic%20structures%20Subramaniam%2C%202021"; spellcheck:"false"}
Subramaniam, C.&nbsp;L.&nbsp;(2021). _From dependent type theory to higher algebraic structures_ (phdthesis). Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2110.02804](http://arxiv.org/abs/2110.02804){.bib-url}
~ end bibitem

~ begin bibitem {id:"suchy_carat_2022"; cite-year:"2022"; cite-authors:"Suchy et al."; cite-authors-long:"Suchy, Ghosh, Kersnar, Chai, Huang, Nelson, et al."; cite-label:"Suchy et al., 2022"; caption:"CARAT CAKE: Replacing Paging via Compiler/Kernel Cooperation&nl;Suchy, Ghosh, Kersnar, Chai, Huang, Nelson, et al., 2022"; data-line:"LanguageTools.bib:1393"; searchterm:"CARAT%20CAKE%3A%20Replacing%20Paging%20via%20Compiler%2FKernel%20Cooperation%20Suchy%2C%20Ghosh%2C%20Kersnar%2C%20Chai%2C%20Huang%2C%20Nelson%2C%20et%20al.%2C%202022"; spellcheck:"false"}
Suchy, B., Ghosh, S., Kersnar, D., Chai, S., Huang, Z., Nelson, A., … Dinda, P.&nbsp;(2022). CARAT CAKE: Replacing Paging via Compiler/Kernel Cooperation, 18.
~ end bibitem

~ begin bibitem {id:"sui_flow2vec_2020"; cite-year:"2020"; cite-authors:"Yulei Sui et al."; cite-authors-long:"Yulei Sui, Cheng, Zhang, and Wang"; cite-label:"Yulei Sui, Cheng, Zhang, \& Wang, 2020"; caption:"Flow2Vec: value-flow-based precise code embedding&nl;Yulei Sui, Cheng, Zhang, and Wang, 2020"; data-line:"LanguageTools.bib:457"; searchterm:"Flow2Vec%3A%20valueflowbased%20precise%20code%20embedding%20Yulei%20Sui%2C%20Cheng%2C%20Zhang%2C%20and%20Wang%2C%202020"; spellcheck:"false"}
Sui, Y., Cheng, X., Zhang, G., & Wang, H.&nbsp;(2020). Flow2Vec: value-flow-based precise code embedding. _Proceedings of the ACM on Programming Languages_, _4_, 1–27. https://doi.org/[10.1145/3428301](https://dx.doi.org/10.1145/3428301){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_sparse_2016"; cite-year:"2016"; cite-authors:"Yulei Sui et al."; cite-authors-long:"Yulei Sui, Di, and Xue"; cite-label:"Yulei Sui, Di, \& Xue, 2016"; caption:"Sparse flow-sensitive pointer analysis for multithreaded programs&nl;Yulei Sui, Di, and Xue, 2016"; data-line:"LanguageTools.bib:553"; searchterm:"Sparse%20flowsensitive%20pointer%20analysis%20for%20multithreaded%20programs%20Yulei%20Sui%2C%20Di%2C%20and%20Xue%2C%202016"; spellcheck:"false"}
Sui, Y., Di, P., & Xue, J.&nbsp;(2016). Sparse flow-sensitive pointer analysis for multithreaded programs. In _Proceedings of the 2016 International Symposium on Code Generation and Optimization_ (pp. 160–170). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2854038.2854043](https://dx.doi.org/10.1145/2854038.2854043){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_loop-oriented_2018"; cite-year:"2018"; cite-authors:"Yulei Sui et al."; cite-authors-long:"Yulei Sui, Fan, Zhou, and Xue"; cite-label:"Yulei Sui, Fan, Zhou, \& Xue, 2018"; caption:"Loop-Oriented Pointer Analysis for Automatic SIMD Vectorization&nl;Yulei Sui, Fan, Zhou, and Xue, 2018"; data-line:"LanguageTools.bib:439"; searchterm:"LoopOriented%20Pointer%20Analysis%20for%20Automatic%20SIMD%20Vectorization%20Yulei%20Sui%2C%20Fan%2C%20Zhou%2C%20and%20Xue%2C%202018"; spellcheck:"false"}
Sui, Y., Fan, X., Zhou, H., & Xue, J.&nbsp;(2018). Loop-Oriented Pointer Analysis for Automatic SIMD Vectorization. _ACM Transactions on Embedded Computing Systems_, _17_(2), 56:1–56:31. https://doi.org/[10.1145/3168364](https://dx.doi.org/10.1145/3168364){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_-demand_2016"; cite-year:"2016b"; cite-authors:"Yulei Sui and Xue"; cite-authors-long:"Yulei Sui and Xue"; cite-label:"Yulei Sui \& Xue, 2016a"; caption:"On-demand strong update analysis via value-flow refinement&nl;Yulei Sui and Xue, 2016b"; data-line:"LanguageTools.bib:571"; searchterm:"Ondemand%20strong%20update%20analysis%20via%20valueflow%20refinement%20Yulei%20Sui%20and%20Xue%2C%202016b"; spellcheck:"false"}
Sui, Y., & Xue, J.&nbsp;(2016a). On-demand strong update analysis via value-flow refinement. In _Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering_ (pp. 460–473). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2950290.2950296](https://dx.doi.org/10.1145/2950290.2950296){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_svf_2016"; cite-year:"2016a"; cite-authors:"Yulei Sui and Xue"; cite-authors-long:"Yulei Sui and Xue"; cite-label:"Yulei Sui \& Xue, 2016b"; caption:"SVF: interprocedural static value-flow analysis in LLVM&nl;Yulei Sui and Xue, 2016a"; data-line:"LanguageTools.bib:689"; searchterm:"SVF%3A%20interprocedural%20static%20valueflow%20analysis%20in%20LLVM%20Yulei%20Sui%20and%20Xue%2C%202016a"; spellcheck:"false"}
Sui, Y., & Xue, J.&nbsp;(2016b). SVF: interprocedural static value-flow analysis in LLVM.&nbsp;In _Proceedings of the 25th International Conference on Compiler Construction_ (pp. 265–266). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2892208.2892235](https://dx.doi.org/10.1145/2892208.2892235){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_value-flow-based_2020"; cite-year:"2020"; cite-authors:"Y.&nbsp;Sui and Xue"; cite-authors-long:"Y.&nbsp;Sui and Xue"; cite-label:"Y. Sui \& Xue, 2020"; caption:"Value-Flow-Based Demand-Driven Pointer Analysis for C and C++&nl;Y. Sui and Xue, 2020"; data-line:"LanguageTools.bib:501"; searchterm:"ValueFlowBased%20DemandDriven%20Pointer%20Analysis%20for%20C%20and%20C%2B%2B%20Y.%20Sui%20and%20Xue%2C%202020"; spellcheck:"false"}
Sui, Y., & Xue, J.&nbsp;(2020). Value-Flow-Based Demand-Driven Pointer Analysis for C and C++. _IEEE Transactions on Software Engineering_, _46_(8), 812–835. https://doi.org/[10.1109/TSE.2018.2869336](https://dx.doi.org/10.1109/TSE.2018.2869336){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sui_detecting_2014"; cite-year:"2014"; cite-authors:"Yulei Sui et al."; cite-authors-long:"Yulei Sui, Ye, and Xue"; cite-label:"Yulei Sui, Ye, \& Xue, 2014"; caption:"Detecting Memory Leaks Statically with Full-Sparse Value-Flow Analysis&nl;Yulei Sui, Ye, and Xue, 2014"; data-line:"LanguageTools.bib:671"; searchterm:"Detecting%20Memory%20Leaks%20Statically%20with%20FullSparse%20ValueFlow%20Analysis%20Yulei%20Sui%2C%20Ye%2C%20and%20Xue%2C%202014"; spellcheck:"false"}
Sui, Y., Ye, D., & Xue, J.&nbsp;(2014). Detecting Memory Leaks Statically with Full-Sparse Value-Flow Analysis. _IEEE Transactions on Software Engineering_, _40_(2), 107–122. https://doi.org/[10.1109/TSE.2014.2302311](https://dx.doi.org/10.1109/TSE.2014.2302311){.bib-doi}
~ end bibitem

~ begin bibitem {id:"su_conditional_2021"; cite-year:"2021"; cite-authors:"Su et al."; cite-authors-long:"Su, Tian, and Duan"; cite-label:"Su, Tian, \& Duan, 2021"; caption:"Conditional interpolation: making concurrent program verification more effective&nl;Su, Tian, and Duan, 2021"; data-line:"FormalBib.bib:7483"; searchterm:"Conditional%20interpolation%3A%20making%20concurrent%20program%20verification%20more%20effective%20Su%2C%20Tian%2C%20and%20Duan%2C%202021"; spellcheck:"false"}
Su, J., Tian, C., & Duan, Z.&nbsp;(2021). Conditional interpolation: making concurrent program verification more effective. In _Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering_ (pp. 144–154). Athens Greece: ACM.&nbsp;https://doi.org/[10.1145/3468264.3468602](https://dx.doi.org/10.1145/3468264.3468602){.bib-doi}
~ end bibitem

~ begin bibitem {id:"suneja_towards_2021"; cite-year:"2021"; cite-authors:"Suneja et al."; cite-authors-long:"Suneja, Zheng, Zhuang, Laredo, and Morari"; cite-label:"Suneja, Zheng, Zhuang, Laredo, \& Morari, 2021"; caption:"Towards Reliable AI for Source Code Understanding&nl;Suneja, Zheng, Zhuang, Laredo, and Morari, 2021"; data-line:"MachineLearning.bib:78"; searchterm:"Towards%20Reliable%20AI%20for%20Source%20Code%20Understanding%20Suneja%2C%20Zheng%2C%20Zhuang%2C%20Laredo%2C%20and%20Morari%2C%202021"; spellcheck:"false"}
Suneja, S., Zheng, Y., Zhuang, Y., Laredo, J.&nbsp;A., & Morari, A.&nbsp;(2021). Towards Reliable AI for Source Code Understanding. In _Proceedings of the ACM Symposium on Cloud Computing_ (pp. 403–411). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3472883.3486995](https://dx.doi.org/10.1145/3472883.3486995){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sun_taming_2021"; cite-year:"2021"; cite-authors:"Sun et al."; cite-authors-long:"Sun, Li, Bissyandé, Klein, Octeau, and Grundy"; cite-label:"Sun et al., 2021"; caption:"Taming Reflection: An Essential Step Toward Whole-program Analysis of Android Apps&nl;Sun, Li, Bissyandé, Klein, Octeau, and Grundy, 2021"; data-line:"LanguageTools.bib:202"; searchterm:"Taming%20Reflection%3A%20An%20Essential%20Step%20Toward%20Wholeprogram%20Analysis%20of%20Android%20Apps%20Sun%2C%20Li%2C%20Bissyand%C3%A9%2C%20Klein%2C%20Octeau%2C%20and%20Grundy%2C%202021"; spellcheck:"false"}
Sun, X., Li, L., Bissyandé, T.&nbsp;F., Klein, J., Octeau, D., & Grundy, J.&nbsp;(2021). Taming Reflection: An Essential Step Toward Whole-program Analysis of Android Apps. _ACM Transactions on Software Engineering and Methodology_, _30_(3), 32:1–32:36. https://doi.org/[10.1145/3440033](https://dx.doi.org/10.1145/3440033){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_impredicative_2014"; cite-year:"2014"; cite-authors:"Svendsen and Birkedal"; cite-authors-long:"Svendsen and Birkedal"; cite-label:"Svendsen \& Birkedal, 2014"; caption:"Impredicative Concurrent Abstract Predicates&nl;Svendsen and Birkedal, 2014"; data-line:"FormalBib.bib:5971"; searchterm:"Impredicative%20Concurrent%20Abstract%20Predicates%20Svendsen%20and%20Birkedal%2C%202014"; spellcheck:"false"}
Svendsen, K., & Birkedal, L.&nbsp;(2014). Impredicative Concurrent Abstract Predicates. In Z.&nbsp;Shao (Ed.), _Programming Languages and Systems_ (Vol. 8410, pp. 149–168). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-54833-8_9](https://dx.doi.org/10.1007/978-3-642-54833-8_9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_modular_2013"; cite-year:"2013"; cite-authors:"Svendsen et al."; cite-authors-long:"Svendsen, Birkedal, and Parkinson"; cite-label:"Svendsen, Birkedal, \& Parkinson, 2013"; caption:"Modular Reasoning about Separation of Concurrent Data Structures&nl;Svendsen, Birkedal, and Parkinson, 2013"; data-line:"FormalBib.bib:5950"; searchterm:"Modular%20Reasoning%20about%20Separation%20of%20Concurrent%20Data%20Structures%20Svendsen%2C%20Birkedal%2C%20and%20Parkinson%2C%202013"; spellcheck:"false"}
Svendsen, K., Birkedal, L., & Parkinson, M.&nbsp;(2013). Modular Reasoning about Separation of Concurrent Data Structures. In M.&nbsp;Felleisen & P.&nbsp;Gardner (Eds.), _Programming Languages and Systems_ (Vol. 7792, pp. 169–188). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-37036-6_11](https://dx.doi.org/10.1007/978-3-642-37036-6_11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"swamy_project_nodate"; cite-year:"2019"; cite-authors:"Swamy"; cite-authors-long:"Swamy"; cite-label:"Swamy, n.d."; caption:"Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research&nl;Swamy, 2019"; data-line:"FormalBib.bib:3158"; searchterm:"Project%20Everest%20%20Verified%20Secure%20Implementations%20of%20the%20HTTPS%20Ecosystem.Microsoft%20Research%20Swamy%2C%202019"; spellcheck:"false"}
Swamy, N.&nbsp;(n.d.). Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research. Retrieved February 1, 2019, from <https://www.microsoft.com/en-us/research/project/project-everest-verified-secure-implementations-https-ecosystem/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_verifying_2013"; cite-year:"2013"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Chen, and Livshits"; cite-label:"Swamy, Chen, \& Livshits, 2013"; caption:"Verifying Higher-order Programs with the Dijkstra Monad&nl;Swamy, Chen, and Livshits, 2013"; data-line:"FormalBib.bib:2081"; searchterm:"Verifying%20Higherorder%20Programs%20with%20the%20Dijkstra%20Monad%20Swamy%2C%20Chen%2C%20and%20Livshits%2C%202013"; spellcheck:"false"}
Swamy, N., Chen, J., & Livshits, B.&nbsp;(2013). Verifying Higher-order Programs with the Dijkstra Monad. Retrieved from <https://www.microsoft.com/en-us/research/publication/verifying-higher-order-programs-with-the-dijkstra-monad/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_dependent_2016"; cite-year:"2016"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al."; cite-label:"Swamy et al., 2016"; caption:"Dependent Types and Multi-monadic Effects in Fstar&nl;Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al., 2016"; data-line:"FormalBib.bib:5207"; searchterm:"Dependent%20Types%20and%20Multimonadic%20Effects%20in%20Fstar%20Swamy%2C%20Hri%C5%A3cu%2C%20Keller%2C%20Rastogi%2C%20DelignatLavaud%2C%20Forest%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Swamy, N., Hriţcu, C., Keller, C., Rastogi, A., Delignat-Lavaud, A., Forest, S., … Zanella-Béguelin, S.&nbsp;(2016). Dependent Types and Multi-monadic Effects in Fstar. In _Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 256–270). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2837614.2837655](https://dx.doi.org/10.1145/2837614.2837655){.bib-doi}
~ end bibitem

~ begin bibitem {id:"swamy_steelcore_2020"; cite-year:"2020"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Rastogi, Fromherz, Merigoux, Ahman, and Martínez"; cite-label:"Swamy et al., 2020"; caption:"SteelCore: an extensible concurrent separation logic for effectful dependently typed programs&nl;Swamy, Rastogi, Fromherz, Merigoux, Ahman, and Martínez, 2020"; data-line:"FormalBib.bib:5446"; searchterm:"SteelCore%3A%20an%20extensible%20concurrent%20separation%20logic%20for%20effectful%20dependently%20typed%20programs%20Swamy%2C%20Rastogi%2C%20Fromherz%2C%20Merigoux%2C%20Ahman%2C%20and%20Mart%C3%ADnez%2C%202020"; spellcheck:"false"}
Swamy, N., Rastogi, A., Fromherz, A., Merigoux, D., Ahman, D., & Martínez, G.&nbsp;(2020). SteelCore: an extensible concurrent separation logic for effectful dependently typed programs. _Proceedings of the ACM on Programming Languages_, _4_, 121:1–121:30. https://doi.org/[10.1145/3409003](https://dx.doi.org/10.1145/3409003){.bib-doi}
~ end bibitem

~ begin bibitem {id:"swierstra_data_2008"; cite-year:"2008"; cite-authors:"Swierstra"; cite-authors-long:"Swierstra"; cite-label:"Swierstra, 2008"; caption:"Data types à la carte&nl;Swierstra, 2008"; data-line:"LanguageTools.bib:320"; searchterm:"Data%20types%20%C3%A0%20la%20carte%20Swierstra%2C%202008"; spellcheck:"false"}
Swierstra, W.&nbsp;(2008). Data types à la carte. _Journal of Functional Programming_, _18_(4). https://doi.org/[10.1017/S0956796808006758](https://dx.doi.org/10.1017/S0956796808006758){.bib-doi}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019-1"; cite-year:"2019a"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019a"; caption:"Fsharp design: RFCs and docs related to the F&hash; language design process,&nl;Syme, 2019a"; data-line:"FormalBib.bib:3181"; searchterm:"Fsharp%20design%3A%20RFCs%20and%20docs%20related%20to%20the%20F%26hash%3B%20language%20design%20process%2C%20Syme%2C%202019a"; spellcheck:"false"}
Syme, D.&nbsp;(2019a). _Fsharp design: RFCs and docs related to the F&hash; language design process,_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fslang-design>{.bib-url}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019"; cite-year:"2019b"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019b"; caption:"The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp&nl;Syme, 2019b"; data-line:"FormalBib.bib:3169"; searchterm:"The%20Fsharp%20Compiler%2C%20Core%20Library%20%26amp%3B%20Tools%20F%26hash%3B%20Software%20Foundation%20Repository%3A%20fsharp%2Ffsharp%20Syme%2C%202019b"; spellcheck:"false"}
Syme, D.&nbsp;(2019b). _The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fsharp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"tabareau_marriage_2021"; cite-year:"2021"; cite-authors:"Tabareau et al."; cite-authors-long:"Tabareau, Tanter, and Sozeau"; cite-label:"Tabareau, Tanter, \& Sozeau, 2021"; caption:"The Marriage of Univalence and Parametricity&nl;Tabareau, Tanter, and Sozeau, 2021"; data-line:"FormalBib.bib:647"; searchterm:"The%20Marriage%20of%20Univalence%20and%20Parametricity%20Tabareau%2C%20Tanter%2C%20and%20Sozeau%2C%202021"; spellcheck:"false"}
Tabareau, N., Tanter, É., & Sozeau, M.&nbsp;(2021). The Marriage of Univalence and Parametricity. _Journal of the ACM_, _68_(1), 5:1–5:44. https://doi.org/[10.1145/3429979](https://dx.doi.org/10.1145/3429979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tanaka_coq_2021"; cite-year:"2021"; cite-authors:"Tanaka"; cite-authors-long:"Tanaka"; cite-label:"Tanaka, 2021"; caption:"Coq to C translation with partial evaluation&nl;Tanaka, 2021"; data-line:"FormalBib.bib:800"; searchterm:"Coq%20to%20C%20translation%20with%20partial%20evaluation%20Tanaka%2C%202021"; spellcheck:"false"}
Tanaka, A.&nbsp;(2021). Coq to C translation with partial evaluation. In _Proceedings of the 2021 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation_ (pp. 14–31). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3441296.3441394](https://dx.doi.org/10.1145/3441296.3441394){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tan_cake_lpr_2021"; cite-year:"2021"; cite-authors:"Tan et al."; cite-authors-long:"Tan, Heule, and Myreen"; cite-label:"Tan, Heule, \& Myreen, 2021"; caption:"cake&underscore;lpr: Verified Propagation Redundancy Checking in CakeML&nl;Tan, Heule, and Myreen, 2021"; data-line:"FormalBib.bib:10163"; searchterm:"cake%26underscore%3Blpr%3A%20Verified%20Propagation%20Redundancy%20Checking%20in%20CakeML%20Tan%2C%20Heule%2C%20and%20Myreen%2C%202021"; spellcheck:"false"}
Tan, Y.&nbsp;K., Heule, M.&nbsp;J.&nbsp;H., & Myreen, M.&nbsp;O.&nbsp;(2021). cake&underscore;lpr: Verified Propagation Redundancy Checking in CakeML.&nbsp;In J.&nbsp;F.&nbsp;Groote & K.&nbsp;G.&nbsp;Larsen (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (pp. 223–241). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-72013-1_12](https://dx.doi.org/10.1007/978-3-030-72013-1_12){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tao_formal_2021"; cite-year:"2021"; cite-authors:"Tao et al."; cite-authors-long:"Tao, Yao, Li, Li, Nieh, and Gu"; cite-label:"Tao et al., 2021"; caption:"Formal Verification of a Multiprocessor Hypervisor on Arm Relaxed Memory Hardware&nl;Tao, Yao, Li, Li, Nieh, and Gu, 2021"; data-line:"FormalBib.bib:8653"; searchterm:"Formal%20Verification%20of%20a%20Multiprocessor%20Hypervisor%20on%20Arm%20Relaxed%20Memory%20Hardware%20Tao%2C%20Yao%2C%20Li%2C%20Li%2C%20Nieh%2C%20and%20Gu%2C%202021"; spellcheck:"false"}
Tao, R., Yao, J., Li, X., Li, S.-W., Nieh, J., & Gu, R.&nbsp;(2021). Formal Verification of a Multiprocessor Hypervisor on Arm Relaxed Memory Hardware. In _Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles_ (pp. 866–881). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3477132.3483560](https://dx.doi.org/10.1145/3477132.3483560){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tarski_lattice-theoretical_1955"; cite-year:"1955"; cite-authors:"Tarski"; cite-authors-long:"Tarski"; cite-label:"Tarski, 1955"; caption:"A lattice-theoretical fixpoint theorem and its applications.&nl;Tarski, 1955"; data-line:"FormalBib.bib:7545"; searchterm:"A%20latticetheoretical%20fixpoint%20theorem%20and%20its%20applications.%20Tarski%2C%201955"; spellcheck:"false"}
Tarski, A.&nbsp;(1955). A lattice-theoretical fixpoint theorem and its applications. _Pacific Journal of Mathematics_, _5_(2), 285–309. Retrieved from <https://www.projecteuclid.org/journals/pacific-journal-of-mathematics/volume-5/issue-2/A-lattice-theoretical-fixpoint-theorem-and-its-applications/pjm/1103044538.full>{.bib-url}
~ end bibitem

~ begin bibitem {id:"thakur_posthat_2013"; cite-year:"2013"; cite-authors:"Thakur et al."; cite-authors-long:"Thakur, Lal, Lim, and Reps"; cite-label:"Thakur, Lal, Lim, \& Reps, 2013"; caption:"PostHat and All That: Automating Abstract Interpretation&nl;Thakur, Lal, Lim, and Reps, 2013"; data-line:"FormalBib.bib:208"; searchterm:"PostHat%20and%20All%20That%3A%20Automating%20Abstract%20Interpretation%20Thakur%2C%20Lal%2C%20Lim%2C%20and%20Reps%2C%202013"; spellcheck:"false"}
Thakur, A., Lal, A., Lim, J., & Reps, T.&nbsp;(2013). PostHat and All That: Automating Abstract Interpretation. _Electronic Notes in Theoretical Computer Science_, 20.
~ end bibitem

~ begin bibitem {id:"noauthor_ats_nodate"; cite-authors:"2020al"; cite-authors-long:"2020al"; cite-label:"\&ldquo;The ATS Programming Language,\&rdquo; n.d."; caption:"The ATS Programming Language&nl;2020al, "; data-line:"FormalBib.bib:6326"; searchterm:"The%20ATS%20Programming%20Language%202020al%2C%20"; spellcheck:"false"}
The ATS Programming Language. (n.d.). Retrieved January 10, 2020, from <http://www.ats-lang.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_convergence_nodate"; cite-authors:"2021am"; cite-authors-long:"2021am"; cite-label:"\&ldquo;The convergence of source code and binary vulnerability discovery - A case study \&bar; EURECOM,\&rdquo; n.d."; caption:"The convergence of source code and binary vulnerability discovery - A case study &bar; EURECOM&nl;2021am, "; data-line:"Security.bib:1447"; searchterm:"The%20convergence%20of%20source%20code%20and%20binary%20vulnerability%20discovery%20%20A%20case%20study%20%26bar%3B%20EURECOM%202021am%2C%20"; spellcheck:"false"}
The convergence of source code and binary vulnerability discovery - A case study &bar; EURECOM.&nbsp;(n.d.). Retrieved November 26, 2021, from <https://www.eurecom.fr/publication/6732>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_mezzo_nodate"; cite-authors:"2019an"; cite-authors-long:"2019an"; cite-label:"\&ldquo;The Mezzo programming language,\&rdquo; n.d."; caption:"The Mezzo programming language&nl;2019an, "; data-line:"FormalBib.bib:4159"; searchterm:"The%20Mezzo%20programming%20language%202019an%2C%20"; spellcheck:"false"}
The Mezzo programming language. (n.d.). Retrieved August 5, 2019, from <http://protz.github.io/mezzo/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"theng_gotxn_2022"; cite-year:"2022"; cite-authors:"Theng"; cite-authors-long:"Theng"; cite-label:"Theng, 2022"; caption:"GoTxn: Verifying a Crash-Safe, Concurrent Transaction System&nl;Theng, 2022"; data-line:"FormalBib.bib:9998"; searchterm:"GoTxn%3A%20Verifying%20a%20CrashSafe%2C%20Concurrent%20Transaction%20System%20Theng%2C%202022"; spellcheck:"false"}
Theng, M.&nbsp;(2022). _GoTxn: Verifying a Crash-Safe, Concurrent Transaction System_ (phdthesis). MIT.
~ end bibitem

~ begin bibitem {id:"theodoridis_finding_2022"; cite-year:"2022"; cite-authors:"Theodoridis et al."; cite-authors-long:"Theodoridis, Rigger, and Su"; cite-label:"Theodoridis, Rigger, \& Su, 2022"; caption:"Finding missed optimizations through the lens of dead code elimination&nl;Theodoridis, Rigger, and Su, 2022"; data-line:"LanguageTools.bib:1479"; searchterm:"Finding%20missed%20optimizations%20through%20the%20lens%20of%20dead%20code%20elimination%20Theodoridis%2C%20Rigger%2C%20and%20Su%2C%202022"; spellcheck:"false"}
Theodoridis, T., Rigger, M., & Su, Z.&nbsp;(2022). Finding missed optimizations through the lens of dead code elimination. In _Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems_ (pp. 697–709). Lausanne Switzerland: ACM.&nbsp;https://doi.org/[10.1145/3503222.3507764](https://dx.doi.org/10.1145/3503222.3507764){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_theorem_nodate-1"; cite-authors:"2021ao"; cite-authors-long:"2021ao"; cite-label:"\&ldquo;Theorem Proving and the Real Numbers,\&rdquo; n.d."; caption:"Theorem Proving and the Real Numbers: Overview Proving and the Real Numbers: Overview and Challenges Lawrence C. Paulson Computer Laboratory, University of Cambridge, England lp15@cl.cam.ac.uk - \[Download PDF\].vdocuments.mx&nl;2021ao, "; data-line:"FormalBib.bib:8671"; searchterm:"Theorem%20Proving%20and%20the%20Real%20Numbers%3A%20Overview%20Proving%20and%20the%20Real%20Numbers%3A%20Overview%20and%20Challenges%20Lawrence%20C.%20Paulson%20Computer%20Laboratory%2C%20University%20of%20Cambridge%2C%20England%20lp15%40cl.cam.ac.uk%20%20%5C%5BDownload%20PDF%5C%5D.vdocuments.mx%202021ao%2C%20"; spellcheck:"false"}
Theorem Proving and the Real Numbers: Overview Proving and the Real Numbers: Overview and Challenges Lawrence C.&nbsp;Paulson Computer Laboratory, University of Cambridge, England lp15@cl.cam.ac.uk - \[Download PDF\].vdocuments.mx. (n.d.). Retrieved November 1, 2021, from <https://vdocuments.mx/theorem-proving-and-the-real-numbers-overview-proving-and-the-real-numbers.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_theorem_nodate"; cite-authors:"2020ap"; cite-authors-long:"2020ap"; cite-label:"\&ldquo;Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation,\&rdquo; n.d."; caption:"Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation&nl;2020ap, "; data-line:"FormalBib.bib:6500"; searchterm:"Theorem%20Proving%20in%20Lean%20%E2%80%94%20Theorem%20Proving%20in%20Lean%203.4.0%20documentation%202020ap%2C%20"; spellcheck:"false"}
Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation. (n.d.). Retrieved January 10, 2020, from <https://leanprover.github.io/theorem_proving_in_lean/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_proofpower_nodate"; cite-authors:"2020aq"; cite-authors-long:"2020aq"; cite-label:"\&ldquo;The ProofPower Web Pages,\&rdquo; n.d."; caption:"The ProofPower Web Pages&nl;2020aq, "; data-line:"FormalBib.bib:6345"; searchterm:"The%20ProofPower%20Web%20Pages%202020aq%2C%20"; spellcheck:"false"}
The ProofPower Web Pages. (n.d.). Retrieved January 10, 2020, from <http://www.lemma-one.com/ProofPower/index/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"timany_trillium_2021"; cite-year:"2021"; cite-authors:"Timany et al."; cite-authors-long:"Timany, Gregersen, Stefanesco, Gondelman, Nieto, and Birkedal"; cite-label:"Timany et al., 2021"; caption:"Trillium: Unifying Refinement and Higher-Order Distributed Separation Logic&nl;Timany, Gregersen, Stefanesco, Gondelman, Nieto, and Birkedal, 2021"; data-line:"FormalBib.bib:9074"; searchterm:"Trillium%3A%20Unifying%20Refinement%20and%20HigherOrder%20Distributed%20Separation%20Logic%20Timany%2C%20Gregersen%2C%20Stefanesco%2C%20Gondelman%2C%20Nieto%2C%20and%20Birkedal%2C%202021"; spellcheck:"false"}
Timany, A., Gregersen, S.&nbsp;O., Stefanesco, L., Gondelman, L., Nieto, A., & Birkedal, L.&nbsp;(2021). Trillium: Unifying Refinement and Higher-Order Distributed Separation Logic. _arXiv:2109.07863 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.07863](http://arxiv.org/abs/2109.07863){.bib-url}
~ end bibitem

~ begin bibitem {id:"timany_cumulative_2018"; cite-year:"2018"; cite-authors:"Timany and Sozeau"; cite-authors-long:"Timany and Sozeau"; cite-label:"Timany \& Sozeau, 2018"; caption:"Cumulative Inductive Types In Coq&nl;Timany and Sozeau, 2018"; data-line:"FormalBib.bib:4881"; searchterm:"Cumulative%20Inductive%20Types%20In%20Coq%20Timany%20and%20Sozeau%2C%202018"; spellcheck:"false"}
Timany, A., & Sozeau, M.&nbsp;(2018). Cumulative Inductive Types In Coq. In _FSCD_. https://doi.org/[10.4230/LIPIcs.FSCD.2018.29](https://dx.doi.org/10.4230/LIPIcs.FSCD.2018.29){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tondwalkar_refinements_2021"; cite-year:"2021"; cite-authors:"Tondwalkar et al."; cite-authors-long:"Tondwalkar, Kolosick, and Jhala"; cite-label:"Tondwalkar, Kolosick, \& Jhala, 2021"; caption:"Refinements of Futures Past: Higher-Order Specification with Implicit Refinement Types (Extended Version)&nl;Tondwalkar, Kolosick, and Jhala, 2021"; data-line:"FormalBib.bib:7824"; searchterm:"Refinements%20of%20Futures%20Past%3A%20HigherOrder%20Specification%20with%20Implicit%20Refinement%20Types%20Extended%20Version%20Tondwalkar%2C%20Kolosick%2C%20and%20Jhala%2C%202021"; spellcheck:"false"}
Tondwalkar, A., Kolosick, M., & Jhala, R.&nbsp;(2021). Refinements of Futures Past: Higher-Order Specification with Implicit Refinement Types (Extended Version). _arXiv:2105.01954 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.01954](http://arxiv.org/abs/2105.01954){.bib-url}
~ end bibitem

~ begin bibitem {id:"torfah_formal_2021"; cite-year:"2021"; cite-authors:"Torfah et al."; cite-authors-long:"Torfah, Junges, Fremont, and Seshia"; cite-label:"Torfah, Junges, Fremont, \& Seshia, 2021"; caption:"Formal Analysis of AI-Based Autonomy: From Modeling to Runtime Assurance&nl;Torfah, Junges, Fremont, and Seshia, 2021"; data-line:"MachineLearning.bib:96"; searchterm:"Formal%20Analysis%20of%20AIBased%20Autonomy%3A%20From%20Modeling%20to%20Runtime%20Assurance%20Torfah%2C%20Junges%2C%20Fremont%2C%20and%20Seshia%2C%202021"; spellcheck:"false"}
Torfah, H., Junges, S., Fremont, D.&nbsp;J., & Seshia, S.&nbsp;A.&nbsp;(2021). Formal Analysis of AI-Based Autonomy: From Modeling to Runtime Assurance. In L.&nbsp;Feng & D.&nbsp;Fisman (Eds.), _Runtime Verification_ (pp. 311–330). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-88494-9_19](https://dx.doi.org/10.1007/978-3-030-88494-9_19){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_bi-abduction_2013"; cite-year:"2013"; cite-authors:"Trinh et al."; cite-authors-long:"Trinh, Le, David, and Chin"; cite-label:"Trinh, Le, David, \& Chin, 2013"; caption:"Bi-Abduction with Pure Properties for Specification Inference&nl;Trinh, Le, David, and Chin, 2013"; data-line:"LanguageTools.bib:722"; searchterm:"BiAbduction%20with%20Pure%20Properties%20for%20Specification%20Inference%20Trinh%2C%20Le%2C%20David%2C%20and%20Chin%2C%202013"; spellcheck:"false"}
Trinh, M.-T., Le, Q.&nbsp;L., David, C., & Chin, W.-N.&nbsp;(2013). Bi-Abduction with Pure Properties for Specification Inference. In C.&nbsp;Shan (Ed.), _Programming Languages and Systems_ (Vol. 8301, pp. 107–123). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-03542-0_8](https://dx.doi.org/10.1007/978-3-319-03542-0_8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tsampas_capableptrs_2021"; cite-year:"2021"; cite-authors:"A.&nbsp;E.-K.&nbsp;S.&nbsp;Tsampas et al."; cite-authors-long:"A.&nbsp;E.-K.&nbsp;S.&nbsp;Tsampas, Patrignani, Devriese, and Piessens"; cite-label:"A. E.-K. S. Tsampas, Patrignani, Devriese, \& Piessens, 2021"; caption:"CapablePtrs: Securely Compiling Partial Programs Using the Pointers-as-Capabilities Principle&nl;A. E.-K. S. Tsampas, Patrignani, Devriese, and Piessens, 2021"; data-line:"Security.bib:34"; searchterm:"CapablePtrs%3A%20Securely%20Compiling%20Partial%20Programs%20Using%20the%20PointersasCapabilities%20Principle%20A.%20E.K.%20S.%20Tsampas%2C%20Patrignani%2C%20Devriese%2C%20and%20Piessens%2C%202021"; spellcheck:"false"}
Tsampas, A.&nbsp;E.-K.&nbsp;S., Patrignani, M., Devriese, D., & Piessens, D.&nbsp;G.&nbsp;F.&nbsp;(2021). CapablePtrs: Securely Compiling Partial Programs Using the Pointers-as-Capabilities Principle (p. 16).
~ end bibitem

~ begin bibitem {id:"tsampas_categorical_2020"; cite-year:"2020"; cite-authors:"S.&nbsp;Tsampas et al."; cite-authors-long:"S.&nbsp;Tsampas, Nuyts, Devriese, and Piessens"; cite-label:"S. Tsampas, Nuyts, Devriese, \& Piessens, 2020"; caption:"A categorical approach to secure compilation&nl;S. Tsampas, Nuyts, Devriese, and Piessens, 2020"; data-line:"Security.bib:230"; searchterm:"A%20categorical%20approach%20to%20secure%20compilation%20S.%20Tsampas%2C%20Nuyts%2C%20Devriese%2C%20and%20Piessens%2C%202020"; spellcheck:"false"}
Tsampas, S., Nuyts, A., Devriese, D., & Piessens, F.&nbsp;(2020). A categorical approach to secure compilation. _arXiv:2004.03557 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2004.03557](http://arxiv.org/abs/2004.03557){.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_formal_2009"; cite-year:"2009"; cite-authors:"Tschantz and Wing"; cite-authors-long:"Tschantz and Wing"; cite-label:"Tschantz \& Wing, 2009"; caption:"Formal Methods for Privacy&nl;Tschantz and Wing, 2009"; data-line:"FormalBib.bib:7008"; searchterm:"Formal%20Methods%20for%20Privacy%20Tschantz%20and%20Wing%2C%202009"; spellcheck:"false"}
Tschantz, M.&nbsp;C., & Wing, J.&nbsp;M.&nbsp;(2009). Formal Methods for Privacy. In A.&nbsp;Cavalcanti & D.&nbsp;R.&nbsp;Dams (Eds.), _FM 2009: Formal Methods_ (Vol. 5850, pp. 1–15). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-05089-3_1](https://dx.doi.org/10.1007/978-3-642-05089-3_1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tsuzaki_reactive_2017"; cite-year:"2017"; cite-authors:"Tsuzaki and Okabe"; cite-authors-long:"Tsuzaki and Okabe"; cite-label:"Tsuzaki \& Okabe, 2017"; caption:"Reactive configuration updating for Intent-Based Networking&nl;Tsuzaki and Okabe, 2017"; data-line:"Networking.bib:551"; searchterm:"Reactive%20configuration%20updating%20for%20IntentBased%20Networking%20Tsuzaki%20and%20Okabe%2C%202017"; spellcheck:"false"}
Tsuzaki, Y., & Okabe, Y.&nbsp;(2017). Reactive configuration updating for Intent-Based Networking. In _2017 International Conference on Information Networking (ICOIN)_ (pp. 97–102). https://doi.org/[10.1109/ICOIN.2017.7899484](https://dx.doi.org/10.1109/ICOIN.2017.7899484){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tusil_hyperproperties_2021"; cite-year:"2021"; cite-authors:"Tuˇsil et al."; cite-authors-long:"Tuˇsil, Chen, and Rosu"; cite-label:"Tuˇsil, Chen, \& Rosu, 2021"; caption:"Hyperproperties in Matching Logic&nl;Tuˇsil, Chen, and Rosu, 2021"; data-line:"FormalBib.bib:8409"; searchterm:"Hyperproperties%20in%20Matching%20Logic%20Tu%CB%87sil%2C%20Chen%2C%20and%20Rosu%2C%202021"; spellcheck:"false"}
Tuˇsil, J., Chen, X., & Rosu, G.&nbsp;(2021). Hyperproperties in Matching Logic, 70.
~ end bibitem

~ begin bibitem {id:"tuch_types_2007"; cite-year:"2007"; cite-authors:"Tuch et al."; cite-authors-long:"Tuch, Klein, and Norrish"; cite-label:"Tuch, Klein, \& Norrish, 2007"; caption:"Types, Bytes, and Separation Logic&nl;Tuch, Klein, and Norrish, 2007"; data-line:"FormalBib.bib:7047"; searchterm:"Types%2C%20Bytes%2C%20and%20Separation%20Logic%20Tuch%2C%20Klein%2C%20and%20Norrish%2C%202007"; spellcheck:"false"}
Tuch, H., Klein, G., & Norrish, M.&nbsp;(2007). Types, Bytes, and Separation Logic. In _Proceedings of the 34th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 97–108). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1190216.1190234](https://dx.doi.org/10.1145/1190216.1190234){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tusil_executable_2017"; cite-year:"2017"; cite-authors:"Tušil"; cite-authors-long:"Tušil"; cite-label:"Tušil, 2017"; caption:"An Executable Formal Semantics of C++&nl;Tušil, 2017"; data-line:"FormalBib.bib:199"; searchterm:"An%20Executable%20Formal%20Semantics%20of%20C%2B%2B%20Tu%C5%A1il%2C%202017"; spellcheck:"false"}
Tušil, J.&nbsp;(2017). An Executable Formal Semantics of C++, 87.
~ end bibitem

~ begin bibitem {id:"ullrich_counting_2019"; cite-year:"2019"; cite-authors:"Ullrich and Moura"; cite-authors-long:"Ullrich and Moura"; cite-label:"Ullrich \& Moura, 2019"; caption:"Counting Immutable Beans: Reference Counting Optimized for Purely Functional Programming&nl;Ullrich and Moura, 2019"; data-line:"FormalBib.bib:6470"; searchterm:"Counting%20Immutable%20Beans%3A%20Reference%20Counting%20Optimized%20for%20Purely%20Functional%20Programming%20Ullrich%20and%20Moura%2C%202019"; spellcheck:"false"}
Ullrich, S., & Moura, L.&nbsp;de. (2019). Counting Immutable Beans: Reference Counting Optimized for Purely Functional Programming. _arXiv:1908.05647 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1908.05647](http://arxiv.org/abs/1908.05647){.bib-url}
~ end bibitem

~ begin bibitem {id:"ullrich_beyond_2020"; cite-year:"2020"; cite-authors:"Ullrich and Moura"; cite-authors-long:"Ullrich and Moura"; cite-label:"Ullrich \& Moura, 2020"; caption:"Beyond Notations: Hygienic Macro Expansion for Theorem Proving Languages&nl;Ullrich and Moura, 2020"; data-line:"FormalBib.bib:10220"; searchterm:"Beyond%20Notations%3A%20Hygienic%20Macro%20Expansion%20for%20Theorem%20Proving%20Languages%20Ullrich%20and%20Moura%2C%202020"; spellcheck:"false"}
Ullrich, S., & Moura, L.&nbsp;de. (2020). Beyond Notations: Hygienic Macro Expansion for Theorem Proving Languages. _arXiv:2001.10490 \[cs\]_, _12167_, 167–182. https://doi.org/[10.1007/978-3-030-51054-1_10](https://dx.doi.org/10.1007/978-3-030-51054-1_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"urban_review_2021"; cite-year:"2021"; cite-authors:"Urban and Miné"; cite-authors-long:"Urban and Miné"; cite-label:"Urban \& Miné, 2021"; caption:"A Review of Formal Methods applied to Machine Learning&nl;Urban and Miné, 2021"; data-line:"MachineLearning.bib:16"; searchterm:"A%20Review%20of%20Formal%20Methods%20applied%20to%20Machine%20Learning%20Urban%20and%20Min%C3%A9%2C%202021"; spellcheck:"false"}
Urban, C., & Miné, A.&nbsp;(2021). A Review of Formal Methods applied to Machine Learning. _arXiv:2104.02466 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2104.02466](http://arxiv.org/abs/2104.02466){.bib-url}
~ end bibitem

~ begin bibitem {id:"utture_fast_2022"; cite-year:"2022"; cite-authors:"Utture"; cite-authors-long:"Utture"; cite-label:"Utture, 2022"; caption:"Fast and Precise Application Code Analysis using a Partial Library&nl;Utture, 2022"; data-line:"FormalBib.bib:10326"; searchterm:"Fast%20and%20Precise%20Application%20Code%20Analysis%20using%20a%20Partial%20Library%20Utture%2C%202022"; spellcheck:"false"}
Utture, A.&nbsp;(2022). Fast and Precise Application Code Analysis using a Partial Library, 12.
~ end bibitem

~ begin bibitem {id:"vacca_systematic_2021"; cite-year:"2021"; cite-authors:"Vacca et al."; cite-authors-long:"Vacca, Di Sorbo, Visaggio, and Canfora"; cite-label:"Vacca, Di Sorbo, Visaggio, \& Canfora, 2021"; caption:"A systematic literature review of blockchain and smart contract development: Techniques, tools, and open challenges&nl;Vacca, Di Sorbo, Visaggio, and Canfora, 2021"; data-line:"FormalBib.bib:781"; searchterm:"A%20systematic%20literature%20review%20of%20blockchain%20and%20smart%20contract%20development%3A%20Techniques%2C%20tools%2C%20and%20open%20challenges%20Vacca%2C%20Di%20Sorbo%2C%20Visaggio%2C%20and%20Canfora%2C%202021"; spellcheck:"false"}
Vacca, A., Di Sorbo, A., Visaggio, C.&nbsp;A., & Canfora, G.&nbsp;(2021). A systematic literature review of blockchain and smart contract development: Techniques, tools, and open challenges. _Journal of Systems and Software_, _174_, 110891. https://doi.org/[10.1016/j.jss.2020.110891](https://dx.doi.org/10.1016/j.jss.2020.110891){.bib-doi}
~ end bibitem

~ begin bibitem {id:"vale_layered_nodate"; cite-year:"n.d."; cite-authors:"Vale"; cite-authors-long:"Vale"; cite-label:"Vale, n.d."; caption:"Layered and Object-Based Game Semantics&nl;Vale, n.d."; data-line:"FormalBib.bib:9326"; searchterm:"Layered%20and%20ObjectBased%20Game%20Semantics%20Vale%2C%20n.d."; spellcheck:"false"}
Vale, A.&nbsp;O.&nbsp;(n.d.). Layered and Object-Based Game Semantics, _6_, 49.
~ end bibitem

~ begin bibitem {id:"vandenbroucke_plonk_2019"; cite-year:"2019"; cite-authors:"Vandenbroucke and Schrijvers"; cite-authors-long:"Vandenbroucke and Schrijvers"; cite-label:"Vandenbroucke \& Schrijvers, 2019"; caption:"PloNK: functional probabilistic NetKAT&nl;Vandenbroucke and Schrijvers, 2019"; data-line:"Networking.bib:265"; searchterm:"PloNK%3A%20functional%20probabilistic%20NetKAT%20Vandenbroucke%20and%20Schrijvers%2C%202019"; spellcheck:"false"}
Vandenbroucke, A., & Schrijvers, T.&nbsp;(2019). PloNK: functional probabilistic NetKAT.&nbsp;_Proceedings of the ACM on Programming Languages_, _4_, 39:1–39:27. https://doi.org/[10.1145/3371107](https://dx.doi.org/10.1145/3371107){.bib-doi}
~ end bibitem

~ begin bibitem {id:"van_renesse_paxos_2015"; cite-year:"2015"; cite-authors:"Van Renesse and Altinbuken"; cite-authors-long:"Van Renesse and Altinbuken"; cite-label:"Van Renesse \& Altinbuken, 2015"; caption:"Paxos Made Moderately Complex&nl;Van Renesse and Altinbuken, 2015"; data-line:"FormalBib.bib:3578"; searchterm:"Paxos%20Made%20Moderately%20Complex%20Van%20Renesse%20and%20Altinbuken%2C%202015"; spellcheck:"false"}
Van Renesse, R., & Altinbuken, D.&nbsp;(2015). Paxos Made Moderately Complex. _ACM Comput. Surv._, _47_(3), 42:1–42:36. https://doi.org/[10.1145/2673577](https://dx.doi.org/10.1145/2673577){.bib-doi}
~ end bibitem

~ begin bibitem {id:"vasilache_composable_2022"; cite-year:"2022"; cite-authors:"Vasilache et al."; cite-authors-long:"Vasilache, Zinenko, Bik, Ravishankar, Raoux, Belyaev, et al."; cite-label:"Vasilache et al., 2022"; caption:"Composable and Modular Code Generation in MLIR: A Structured and Retargetable Approach to Tensor Compiler Construction&nl;Vasilache, Zinenko, Bik, Ravishankar, Raoux, Belyaev, et al., 2022"; data-line:"LanguageTools.bib:1403"; searchterm:"Composable%20and%20Modular%20Code%20Generation%20in%20MLIR%3A%20A%20Structured%20and%20Retargetable%20Approach%20to%20Tensor%20Compiler%20Construction%20Vasilache%2C%20Zinenko%2C%20Bik%2C%20Ravishankar%2C%20Raoux%2C%20Belyaev%2C%20et%20al.%2C%202022"; spellcheck:"false"}
Vasilache, N., Zinenko, O., Bik, A.&nbsp;J.&nbsp;C., Ravishankar, M., Raoux, T., Belyaev, A., … Cohen, A.&nbsp;(2022). Composable and Modular Code Generation in MLIR: A Structured and Retargetable Approach to Tensor Compiler Construction. _arXiv:2202.03293 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.03293](http://arxiv.org/abs/2202.03293){.bib-url}
~ end bibitem

~ begin bibitem {id:"vedrine_runtime_2021"; cite-year:"2021"; cite-authors:"Védrine et al."; cite-authors-long:"Védrine, Jacquemin, Kosmatov, and Signoles"; cite-label:"Védrine, Jacquemin, Kosmatov, \& Signoles, 2021"; caption:"Runtime Abstract Interpretation for Numerical Accuracy and Robustness&nl;Védrine, Jacquemin, Kosmatov, and Signoles, 2021"; data-line:"FormalBib.bib:5403"; searchterm:"Runtime%20Abstract%20Interpretation%20for%20Numerical%20Accuracy%20and%20Robustness%20V%C3%A9drine%2C%20Jacquemin%2C%20Kosmatov%2C%20and%20Signoles%2C%202021"; spellcheck:"false"}
Védrine, F., Jacquemin, M., Kosmatov, N., & Signoles, J.&nbsp;(2021). Runtime Abstract Interpretation for Numerical Accuracy and Robustness. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 243–266). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_12](https://dx.doi.org/10.1007/978-3-030-67067-2_12){.bib-doi}
~ end bibitem

~ begin bibitem {id:"de_vilhena_separation_2021"; cite-year:"2021"; cite-authors:"Vilhena and Pottier"; cite-authors-long:"Vilhena and Pottier"; cite-label:"Vilhena \& Pottier, 2021"; caption:"A separation logic for effect handlers&nl;Vilhena and Pottier, 2021"; data-line:"FormalBib.bib:9625"; searchterm:"A%20separation%20logic%20for%20effect%20handlers%20Vilhena%20and%20Pottier%2C%202021"; spellcheck:"false"}
Vilhena, P.&nbsp;E.&nbsp;de, & Pottier, F.&nbsp;(2021). A separation logic for effect handlers. _Proceedings of the ACM on Programming Languages_, _5_, 33:1–33:28. https://doi.org/[10.1145/3434314](https://dx.doi.org/10.1145/3434314){.bib-doi}
~ end bibitem

~ begin bibitem {id:"vindum_mechanized_2022"; cite-year:"2022"; cite-authors:"Vindum et al."; cite-authors-long:"Vindum, Frumin, and Birkedal"; cite-label:"Vindum, Frumin, \& Birkedal, 2022"; caption:"Mechanized Verification of a Fine-Grained Concurrent Queue from Meta's Folly Library&nl;Vindum, Frumin, and Birkedal, 2022"; data-line:"FormalBib.bib:9447"; searchterm:"Mechanized%20Verification%20of%20a%20FineGrained%20Concurrent%20Queue%20from%20Meta's%20Folly%20Library%20Vindum%2C%20Frumin%2C%20and%20Birkedal%2C%202022"; spellcheck:"false"}
Vindum, S.&nbsp;F., Frumin, D., & Birkedal, L.&nbsp;(2022). Mechanized Verification of a Fine-Grained Concurrent Queue from Meta’s Folly Library, 16.
~ end bibitem

~ begin bibitem {id:"vintila_mesh_2021"; cite-year:"2021"; cite-authors:"Vintila et al."; cite-authors-long:"Vintila, Zieris, and Horsch"; cite-label:"Vintila, Zieris, \& Horsch, 2021"; caption:"MESH: A Memory-Efficient Safe Heap for C/C++&nl;Vintila, Zieris, and Horsch, 2021"; data-line:"LanguageTools.bib:253"; searchterm:"MESH%3A%20A%20MemoryEfficient%20Safe%20Heap%20for%20C%2FC%2B%2B%20Vintila%2C%20Zieris%2C%20and%20Horsch%2C%202021"; spellcheck:"false"}
Vintila, E.&nbsp;Q., Zieris, P., & Horsch, J.&nbsp;(2021). MESH: A Memory-Efficient Safe Heap for C/C++. In _The 16th International Conference on Availability, Reliability and Security_ (pp. 1–10). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3465481.3465760](https://dx.doi.org/10.1145/3465481.3465760){.bib-doi}
~ end bibitem

~ begin bibitem {id:"vishwanathan_semantics_2021"; cite-year:"2021"; cite-authors:"Vishwanathan et al."; cite-authors-long:"Vishwanathan, Shachnai, Narayana, and Nagarakatte"; cite-label:"Vishwanathan, Shachnai, Narayana, \& Nagarakatte, 2021"; caption:"Semantics, Verification, and Efficient Implementations for Tristate Numbers&nl;Vishwanathan, Shachnai, Narayana, and Nagarakatte, 2021"; data-line:"Networking.bib:2"; searchterm:"Semantics%2C%20Verification%2C%20and%20Efficient%20Implementations%20for%20Tristate%20Numbers%20Vishwanathan%2C%20Shachnai%2C%20Narayana%2C%20and%20Nagarakatte%2C%202021"; spellcheck:"false"}
Vishwanathan, H., Shachnai, M., Narayana, S., & Nagarakatte, S.&nbsp;(2021). Semantics, Verification, and Efficient Implementations for Tristate Numbers. _arXiv:2105.05398 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.05398](http://arxiv.org/abs/2105.05398){.bib-url}
~ end bibitem

~ begin bibitem {id:"vishwanathan_sound_nodate"; cite-year:"n.d."; cite-authors:"Vishwanathan et al."; cite-authors-long:"Vishwanathan, Shachnai, Narayana, and Nagarakatte"; cite-label:"Vishwanathan, Shachnai, Narayana, \& Nagarakatte, n.d."; caption:"Sound, Precise, and Fast Abstract Interpretation with Tristate Numbers&nl;Vishwanathan, Shachnai, Narayana, and Nagarakatte, n.d."; data-line:"FormalBib.bib:9533"; searchterm:"Sound%2C%20Precise%2C%20and%20Fast%20Abstract%20Interpretation%20with%20Tristate%20Numbers%20Vishwanathan%2C%20Shachnai%2C%20Narayana%2C%20and%20Nagarakatte%2C%20n.d."; spellcheck:"false"}
Vishwanathan, H., Shachnai, M., Narayana, S., & Nagarakatte, S.&nbsp;(n.d.). Sound, Precise, and Fast Abstract Interpretation with Tristate Numbers, 12.
~ end bibitem

~ begin bibitem {id:"voevodsky_homotopy_nodate"; cite-year:"n.d."; cite-authors:"Voevodsky"; cite-authors-long:"Voevodsky"; cite-label:"Voevodsky, n.d."; caption:"Homotopy Type Theory: Univalent Foundations of Mathematics&nl;Voevodsky, n.d."; data-line:"FormalBib.bib:3150"; searchterm:"Homotopy%20Type%20Theory%3A%20Univalent%20Foundations%20of%20Mathematics%20Voevodsky%2C%20n.d."; spellcheck:"false"}
Voevodsky, V.&nbsp;(n.d.). Homotopy Type Theory: Univalent Foundations of Mathematics, 490.
~ end bibitem

~ begin bibitem {id:"vu_reconciling_2021"; cite-year:"2021"; cite-authors:"Vu et al."; cite-authors-long:"Vu, Cohen, Grandmaison, Guillon, and Heydemann"; cite-label:"Vu, Cohen, Grandmaison, Guillon, \& Heydemann, 2021"; caption:"Reconciling Optimization with Secure Compilation&nl;Vu, Cohen, Grandmaison, Guillon, and Heydemann, 2021"; data-line:"Security.bib:1320"; searchterm:"Reconciling%20Optimization%20with%20Secure%20Compilation%20Vu%2C%20Cohen%2C%20Grandmaison%2C%20Guillon%2C%20and%20Heydemann%2C%202021"; spellcheck:"false"}
Vu, S.&nbsp;T., Cohen, A., Grandmaison, A.&nbsp;D., Guillon, C., & Heydemann, K.&nbsp;(2021). Reconciling Optimization with Secure Compilation, _5_, 30.
~ end bibitem

~ begin bibitem {id:"vu_secure_2021"; cite-year:"2021"; cite-authors:"Vu et al."; cite-authors-long:"Vu, Cohen, and Heydemann"; cite-label:"Vu, Cohen, \& Heydemann, 2021"; caption:"Secure Optimization Through Opaque Observations&nl;Vu, Cohen, and Heydemann, 2021"; data-line:"FormalBib.bib:553"; searchterm:"Secure%20Optimization%20Through%20Opaque%20Observations%20Vu%2C%20Cohen%2C%20and%20Heydemann%2C%202021"; spellcheck:"false"}
Vu, S.&nbsp;T., Cohen, A., & Heydemann, K.&nbsp;(2021). Secure Optimization Through Opaque Observations. _Preprint PriSC Workshop (with POPL 2021)_, 43.
~ end bibitem

~ begin bibitem {id:"vu_secure_2020"; cite-year:"2020"; cite-authors:"Vu et al."; cite-authors-long:"Vu, Heydemann, Grandmaison, and Cohen"; cite-label:"Vu, Heydemann, Grandmaison, \& Cohen, 2020"; caption:"Secure delivery of program properties through optimizing compilation&nl;Vu, Heydemann, Grandmaison, and Cohen, 2020"; data-line:"LanguageTools.bib:103"; searchterm:"Secure%20delivery%20of%20program%20properties%20through%20optimizing%20compilation%20Vu%2C%20Heydemann%2C%20Grandmaison%2C%20and%20Cohen%2C%202020"; spellcheck:"false"}
Vu, S.&nbsp;T., Heydemann, K., Grandmaison, A.&nbsp;de, & Cohen, A.&nbsp;(2020). Secure delivery of program properties through optimizing compilation. In _Proceedings of the 29th International Conference on Compiler Construction_ (pp. 14–26). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3377555.3377897](https://dx.doi.org/10.1145/3377555.3377897){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wang_formalization_2018"; cite-year:"2018"; cite-authors:"H.&nbsp;Wang et al."; cite-authors-long:"H.&nbsp;Wang, Zhu, Xiao, and Fei"; cite-label:"H. Wang, Zhu, Xiao, \& Fei, 2018"; caption:"Formalization and Verification of the OpenFlow Bundle Mechanism Using CSP&nl;H. Wang, Zhu, Xiao, and Fei, 2018"; data-line:"FormalBib.bib:5653"; searchterm:"Formalization%20and%20Verification%20of%20the%20OpenFlow%20Bundle%20Mechanism%20Using%20CSP%20H.%20Wang%2C%20Zhu%2C%20Xiao%2C%20and%20Fei%2C%202018"; spellcheck:"false"}
Wang, H., Zhu, H., Xiao, L., & Fei, Y.&nbsp;(2018). Formalization and Verification of the OpenFlow Bundle Mechanism Using CSP.&nbsp;_International Journal of Software Engineering and Knowledge Engineering_, _28_(11), 1657–1677. https://doi.org/[10.1142/S0218194018400223](https://dx.doi.org/10.1142/S0218194018400223){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wang_find_2021"; cite-year:"2021"; cite-authors:"Junjie Wang et al."; cite-authors-long:"Junjie Wang, Huang, Wang, and Wang"; cite-label:"Junjie Wang, Huang, Wang, \& Wang, 2021"; caption:"Find Bugs in Static Bug Finders&nl;Junjie Wang, Huang, Wang, and Wang, 2021"; data-line:"LanguageTools.bib:221"; searchterm:"Find%20Bugs%20in%20Static%20Bug%20Finders%20Junjie%20Wang%2C%20Huang%2C%20Wang%2C%20and%20Wang%2C%202021"; spellcheck:"false"}
Wang, J., Huang, Y., Wang, S., & Wang, Q.&nbsp;(2021). Find Bugs in Static Bug Finders. _arXiv:2109.02245 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.02245](http://arxiv.org/abs/2109.02245){.bib-url}
~ end bibitem

~ begin bibitem {id:"wang_data-driven_2021"; cite-year:"2021"; cite-authors:"Jingbo Wang et al."; cite-authors-long:"Jingbo Wang, Sung, Raghothaman, and Wang"; cite-label:"Jingbo Wang, Sung, Raghothaman, \& Wang, 2021"; caption:"Data-Driven Synthesis of Provably Sound Side Channel Analyses&nl;Jingbo Wang, Sung, Raghothaman, and Wang, 2021"; data-line:"Security.bib:1051"; searchterm:"DataDriven%20Synthesis%20of%20Provably%20Sound%20Side%20Channel%20Analyses%20Jingbo%20Wang%2C%20Sung%2C%20Raghothaman%2C%20and%20Wang%2C%202021"; spellcheck:"false"}
Wang, J., Sung, C., Raghothaman, M., & Wang, C.&nbsp;(2021). Data-Driven Synthesis of Provably Sound Side Channel Analyses. _arXiv:2102.06753 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.06753](http://arxiv.org/abs/2102.06753){.bib-url}
~ end bibitem

~ begin bibitem {id:"wang_k-st_2022"; cite-year:"2022"; cite-authors:"K.&nbsp;Wang et al."; cite-authors-long:"K.&nbsp;Wang, Wang, Poskitt, Chen, Sun, and Cheng"; cite-label:"K. Wang et al., 2022"; caption:"K-ST: A Formal Executable Semantics of PLC Structured Text Language&nl;K. Wang, Wang, Poskitt, Chen, Sun, and Cheng, 2022"; data-line:"FormalBib.bib:10101"; searchterm:"KST%3A%20A%20Formal%20Executable%20Semantics%20of%20PLC%20Structured%20Text%20Language%20K.%20Wang%2C%20Wang%2C%20Poskitt%2C%20Chen%2C%20Sun%2C%20and%20Cheng%2C%202022"; spellcheck:"false"}
Wang, K., Wang, J., Poskitt, C.&nbsp;M., Chen, X., Sun, J., & Cheng, P.&nbsp;(2022). K-ST: A Formal Executable Semantics of PLC Structured Text Language. _arXiv:2202.04076 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2202.04076](http://arxiv.org/abs/2202.04076){.bib-url}
~ end bibitem

~ begin bibitem {id:"wang_concurrent_2021"; cite-year:"2021"; cite-authors:"Shangbei Wang"; cite-authors-long:"Shangbei Wang"; cite-label:"Shangbei Wang, 2021"; caption:"Concurrent matching logic&nl;Shangbei Wang, 2021"; data-line:"FormalBib.bib:7178"; searchterm:"Concurrent%20matching%20logic%20Shangbei%20Wang%2C%202021"; spellcheck:"false"}
Wang, S.&nbsp;(2021). Concurrent matching logic. _arXiv:2109.00319 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.00319](http://arxiv.org/abs/2109.00319){.bib-url}
~ end bibitem

~ begin bibitem {id:"wang_reassembleable_2015"; cite-year:"2015"; cite-authors:"Shuai Wang et al."; cite-authors-long:"Shuai Wang, Wang, and Wu"; cite-label:"Shuai Wang, Wang, \& Wu, 2015"; caption:"Reassembleable Disassembling&nl;Shuai Wang, Wang, and Wu, 2015"; data-line:"LanguageTools.bib:1293"; searchterm:"Reassembleable%20Disassembling%20Shuai%20Wang%2C%20Wang%2C%20and%20Wu%2C%202015"; spellcheck:"false"}
Wang, S., Wang, P., & Wu, D.&nbsp;(2015). Reassembleable Disassembling (pp. 627–642). Retrieved from <https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wang-shuai>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wang_uroboros_2016"; cite-year:"2016"; cite-authors:"Shuai Wang et al."; cite-authors-long:"Shuai Wang, Wang, and Wu"; cite-label:"Shuai Wang, Wang, \& Wu, 2016"; caption:"UROBOROS: Instrumenting Stripped Binaries with Static Reassembling&nl;Shuai Wang, Wang, and Wu, 2016"; data-line:"LanguageTools.bib:1342"; searchterm:"UROBOROS%3A%20Instrumenting%20Stripped%20Binaries%20with%20Static%20Reassembling%20Shuai%20Wang%2C%20Wang%2C%20and%20Wu%2C%202016"; spellcheck:"false"}
Wang, S., Wang, P., & Wu, D.&nbsp;(2016). UROBOROS: Instrumenting Stripped Binaries with Static Reassembling. In _2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)_ (pp. 236–247). Suita: IEEE.&nbsp;https://doi.org/[10.1109/SANER.2016.106](https://dx.doi.org/10.1109/SANER.2016.106){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wang_bci-cfi_2021"; cite-year:"2021"; cite-authors:"Y.&nbsp;Wang et al."; cite-authors-long:"Y.&nbsp;Wang, Li, Chen, Zhang, Zhang, and Shi"; cite-label:"Y. Wang et al., 2021"; caption:"BCI-CFI: A Context-Sensitive Control-Flow Integrity Method Based on Branch Correlation Integrity&nl;Y. Wang, Li, Chen, Zhang, Zhang, and Shi, 2021"; data-line:"Security.bib:888"; searchterm:"BCICFI%3A%20A%20ContextSensitive%20ControlFlow%20Integrity%20Method%20Based%20on%20Branch%20Correlation%20Integrity%20Y.%20Wang%2C%20Li%2C%20Chen%2C%20Zhang%2C%20Zhang%2C%20and%20Shi%2C%202021"; spellcheck:"false"}
Wang, Y., Li, Q., Chen, Z., Zhang, P., Zhang, G., & Shi, Z.&nbsp;(2021). BCI-CFI: A Context-Sensitive Control-Flow Integrity Method Based on Branch Correlation Integrity. _Information and Software Technology_, 106572. https://doi.org/[10.1016/j.infsof.2021.106572](https://dx.doi.org/10.1016/j.infsof.2021.106572){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wan_smart_2021"; cite-year:"2021"; cite-authors:"Wan et al."; cite-authors-long:"Wan, Xia, Lo, Chen, Luo, and Yang"; cite-label:"Wan et al., 2021"; caption:"Smart Contract Security: a Practitioners' Perspective&nl;Wan, Xia, Lo, Chen, Luo, and Yang, 2021"; data-line:"Blockchain.bib:95"; searchterm:"Smart%20Contract%20Security%3A%20a%20Practitioners'%20Perspective%20Wan%2C%20Xia%2C%20Lo%2C%20Chen%2C%20Luo%2C%20and%20Yang%2C%202021"; spellcheck:"false"}
Wan, Z., Xia, X., Lo, D., Chen, J., Luo, X., & Yang, X.&nbsp;(2021). Smart Contract Security: a Practitioners’ Perspective. _arXiv:2102.10963 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2102.10963](http://arxiv.org/abs/2102.10963){.bib-url}
~ end bibitem

~ begin bibitem {id:"watanabe_certifying_nodate"; cite-year:"n.d."; cite-authors:"Watanabe et al."; cite-authors-long:"Watanabe, College, Gopinathan, Pîrlea, Polikarpova, Sergey, and College"; cite-label:"Watanabe et al., n.d."; caption:"Certifying the Synthesis of Heap-Manipulating Programs&nl;Watanabe, College, Gopinathan, Pîrlea, Polikarpova, Sergey, and College, n.d."; data-line:"FormalBib.bib:7815"; searchterm:"Certifying%20the%20Synthesis%20of%20HeapManipulating%20Programs%20Watanabe%2C%20College%2C%20Gopinathan%2C%20P%C3%AErlea%2C%20Polikarpova%2C%20Sergey%2C%20and%20College%2C%20n.d."; spellcheck:"false"}
Watanabe, Y., College, Y.-N., Gopinathan, K., Pîrlea, G., Polikarpova, N., Sergey, I., & College, Y.-N.&nbsp;(n.d.). Certifying the Synthesis of Heap-Manipulating Programs, _5_, 29.
~ end bibitem

~ begin bibitem {id:"watertor_assessing_nodate"; cite-year:"n.d."; cite-authors:"Watertor"; cite-authors-long:"Watertor"; cite-label:"Watertor, n.d."; caption:"Assessing the standard-compliance for multi-threading primitives in C compilers&nl;Watertor, n.d."; data-line:"FormalBib.bib:5500"; searchterm:"Assessing%20the%20standardcompliance%20for%20multithreading%20primitives%20in%20C%20compilers%20Watertor%2C%20n.d."; spellcheck:"false"}
Watertor, R.&nbsp;(n.d.). Assessing the standard-compliance for multi-threading primitives in C compilers, 58.
~ end bibitem

~ begin bibitem {id:"watt_mechanising_2021"; cite-year:"2021"; cite-authors:"Watt"; cite-authors-long:"Watt"; cite-label:"Watt, 2021"; caption:"Mechanising and evolving the formal semantics of WebAssembly: the Web's new low-level language&nl;Watt, 2021"; data-line:"FormalBib.bib:9019"; searchterm:"Mechanising%20and%20evolving%20the%20formal%20semantics%20of%20WebAssembly%3A%20the%20Web's%20new%20lowlevel%20language%20Watt%2C%202021"; spellcheck:"false"}
Watt, C.&nbsp;(2021). _Mechanising and evolving the formal semantics of WebAssembly: the Web’s new low-level language_ (phdthesis). St Catharine’s College, University of Cambridge, Cambridge, UK.
~ end bibitem

~ begin bibitem {id:"watt_two_nodate"; cite-year:"n.d."; cite-authors:"Watt et al."; cite-authors-long:"Watt, Rao, Pichon-Pharabod, Bodin, and Gardner"; cite-label:"Watt, Rao, Pichon-Pharabod, Bodin, \& Gardner, n.d."; caption:"Two Mechanisations of WebAssembly 1.0&nl;Watt, Rao, Pichon-Pharabod, Bodin, and Gardner, n.d."; data-line:"FormalBib.bib:7169"; searchterm:"Two%20Mechanisations%20of%20WebAssembly%201.0%20Watt%2C%20Rao%2C%20PichonPharabod%2C%20Bodin%2C%20and%20Gardner%2C%20n.d."; spellcheck:"false"}
Watt, C., Rao, X., Pichon-Pharabod, J., Bodin, M., & Gardner, P.&nbsp;(n.d.). Two Mechanisations of WebAssembly 1.0, 19.
~ end bibitem

~ begin bibitem {id:"weirich_specification_2017"; cite-year:"2017"; cite-authors:"Weirich et al."; cite-authors-long:"Weirich, Voizard, Amorim, and Eisenberg"; cite-label:"Weirich, Voizard, Amorim, \& Eisenberg, 2017"; caption:"A Specification for Dependent Types in Haskell&nl;Weirich, Voizard, Amorim, and Eisenberg, 2017"; data-line:"FormalBib.bib:4795"; searchterm:"A%20Specification%20for%20Dependent%20Types%20in%20Haskell%20Weirich%2C%20Voizard%2C%20Amorim%2C%20and%20Eisenberg%2C%202017"; spellcheck:"false"}
Weirich, S., Voizard, A., Amorim, P.&nbsp;H.&nbsp;A.&nbsp;de, & Eisenberg, R.&nbsp;A.&nbsp;(2017). A Specification for Dependent Types in Haskell. _Proc. ACM Program. Lang._, _1_, 31:1–31:29. https://doi.org/[10.1145/3110275](https://dx.doi.org/10.1145/3110275){.bib-doi}
~ end bibitem

~ begin bibitem {id:"weisstein_mathworld_nodate"; cite-year:"2020"; cite-authors:"Weisstein"; cite-authors-long:"Weisstein"; cite-label:"Weisstein, n.d."; caption:"Mathworld Classroom&nl;Weisstein, 2020"; data-line:"Mathematics.bib:24"; searchterm:"Mathworld%20Classroom%20Weisstein%2C%202020"; spellcheck:"false"}
Weisstein, E.&nbsp;W.&nbsp;(n.d.). Mathworld Classroom [Text]. Retrieved January 12, 2020, from <http://mathworld.wolfram.com/classroom/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"welch_scaling_2017"; cite-year:"2017"; cite-authors:"Welch"; cite-authors-long:"Welch"; cite-label:"Welch, 2017"; caption:"Scaling Up Automated Verification: A Case Study and Formal-IDE for the Construction of High Integrity Software&nl;Welch, 2017"; data-line:"FormalBib.bib:5877"; searchterm:"Scaling%20Up%20Automated%20Verification%3A%20A%20Case%20Study%20and%20FormalIDE%20for%20the%20Construction%20of%20High%20Integrity%20Software%20Welch%2C%202017"; spellcheck:"false"}
Welch, D.&nbsp;(2017). Scaling Up Automated Verification: A Case Study and Formal-IDE for the Construction of High Integrity Software. In _Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education_ (pp. 785–786). Seattle, Washington, USA: Association for Computing Machinery. https://doi.org/[10.1145/3017680.3022456](https://dx.doi.org/10.1145/3017680.3022456){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wenzel_isabelle/isar_2018"; cite-year:"2018"; cite-authors:"Wenzel"; cite-authors-long:"Wenzel"; cite-label:"Wenzel, 2018"; caption:"The Isabelle/Isar Reference Manual&nl;Wenzel, 2018"; data-line:"FormalBib.bib:1662"; searchterm:"The%20Isabelle%2FIsar%20Reference%20Manual%20Wenzel%2C%202018"; spellcheck:"false"}
Wenzel, M.&nbsp;(2018). The Isabelle/Isar Reference Manual. Retrieved from <https://core.ac.uk/display/22830292>{.bib-url}
~ end bibitem

~ begin bibitem {id:"white_neil_formal_2017"; cite-year:"2017"; cite-authors:"White Neil et al."; cite-authors-long:"White Neil, Matthews Stuart, and Chapman Roderick"; cite-label:"White Neil, Matthews Stuart, \& Chapman Roderick, 2017"; caption:"Formal verification: will the seedling ever flower?&nl;White Neil, Matthews Stuart, and Chapman Roderick, 2017"; data-line:"FormalBib.bib:2262"; searchterm:"Formal%20verification%3A%20will%20the%20seedling%20ever%20flower%3F%20White%20Neil%2C%20Matthews%20Stuart%2C%20and%20Chapman%20Roderick%2C%202017"; spellcheck:"false"}
White Neil, Matthews Stuart, & Chapman Roderick. (2017). Formal verification: will the seedling ever flower? _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150402. https://doi.org/[10.1098/rsta.2015.0402](https://dx.doi.org/10.1098/rsta.2015.0402){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wickerson_pearl_2020"; cite-year:"2020"; cite-authors:"Wickerson and Brunet"; cite-authors-long:"Wickerson and Brunet"; cite-label:"Wickerson \& Brunet, 2020"; caption:"Pearl: Diagrams for Composing Compilers&nl;Wickerson and Brunet, 2020"; data-line:"LanguageTools.bib:965"; searchterm:"Pearl%3A%20Diagrams%20for%20Composing%20Compilers%20Wickerson%20and%20Brunet%2C%202020"; spellcheck:"false"}
Wickerson, J., & Brunet, P.&nbsp;(2020). Pearl: Diagrams for Composing Compilers, 13.
~ end bibitem

~ begin bibitem {id:"wiedijk_formal_2008"; cite-year:"2008"; cite-authors:"Wiedijk"; cite-authors-long:"Wiedijk"; cite-label:"Wiedijk, 2008"; caption:"Formal Proof—Getting Started&nl;Wiedijk, 2008"; data-line:"FormalBib.bib:2435"; searchterm:"Formal%20Proof%E2%80%94Getting%20Started%20Wiedijk%2C%202008"; spellcheck:"false"}
Wiedijk, F.&nbsp;(2008). Formal Proof—Getting Started, _55_(11), 7.
~ end bibitem

~ begin bibitem {id:"wilcox_compositional_2021"; cite-year:"2021"; cite-authors:"Wilcox"; cite-authors-long:"Wilcox"; cite-label:"Wilcox, 2021"; caption:"Compositional and Automated Veriﬁcation of Distributed Systems&nl;Wilcox, 2021"; data-line:"FormalBib.bib:9054"; searchterm:"Compositional%20and%20Automated%20Veri%EF%AC%81cation%20of%20Distributed%20Systems%20Wilcox%2C%202021"; spellcheck:"false"}
Wilcox, J.&nbsp;R.&nbsp;(2021). _Compositional and Automated Veriﬁcation of Distributed Systems_ (phdthesis). University of Washington.
~ end bibitem

~ begin bibitem {id:"willis_design_2021"; cite-year:"2021"; cite-authors:"Willis and Wu"; cite-authors-long:"Willis and Wu"; cite-label:"Willis \& Wu, 2021"; caption:"Design patterns for parser combinators (functional pearl)&nl;Willis and Wu, 2021"; data-line:"LanguageTools.bib:235"; searchterm:"Design%20patterns%20for%20parser%20combinators%20functional%20pearl%20Willis%20and%20Wu%2C%202021"; spellcheck:"false"}
Willis, J., & Wu, N.&nbsp;(2021). Design patterns for parser combinators (functional pearl). In _Proceedings of the 14th ACM SIGPLAN International Symposium on Haskell_ (pp. 71–84). Virtual Republic of Korea: ACM.&nbsp;https://doi.org/[10.1145/3471874.3472984](https://dx.doi.org/10.1145/3471874.3472984){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wing_specifiers_1990"; cite-year:"1990"; cite-authors:"Wing"; cite-authors-long:"Wing"; cite-label:"Wing, 1990"; caption:"A Specifier's Introduction to Formal Methods&nl;Wing, 1990"; data-line:"FormalBib.bib:362"; searchterm:"A%20Specifier's%20Introduction%20to%20Formal%20Methods%20Wing%2C%201990"; spellcheck:"false"}
Wing, J.&nbsp;M.&nbsp;(1990). A Specifier’s Introduction to Formal Methods. _IEEE Computer_.
~ end bibitem

~ begin bibitem {id:"witten_data_nodate"; cite-year:"2021"; cite-authors:"Witten et al."; cite-authors-long:"Witten, Frank, Hall, and Pal"; cite-label:"Witten, Frank, Hall, \& Pal, n.d."; caption:"Data Mining: Practical Machine Learning Tools and Techniques&nl;Witten, Frank, Hall, and Pal, 2021"; data-line:"Security.bib:973"; searchterm:"Data%20Mining%3A%20Practical%20Machine%20Learning%20Tools%20and%20Techniques%20Witten%2C%20Frank%2C%20Hall%2C%20and%20Pal%2C%202021"; spellcheck:"false"}
Witten, I., Frank, E., Hall, M., & Pal, C.&nbsp;(n.d.). Data Mining: Practical Machine Learning Tools and Techniques. Retrieved March 5, 2021, from <https://www.cs.waikato.ac.nz/ml/weka/book.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wolf_gobra_2021"; cite-year:"2021"; cite-authors:"Wolf et al."; cite-authors-long:"Wolf, Arquint, Clochard, Oortwijn, Pereira, and Müller"; cite-label:"Wolf, Arquint, et al., 2021"; caption:"Gobra: Modular Specification and Verification of Go Programs (extended version)&nl;Wolf, Arquint, Clochard, Oortwijn, Pereira, and Müller, 2021"; data-line:"LanguageTools.bib:21"; searchterm:"Gobra%3A%20Modular%20Specification%20and%20Verification%20of%20Go%20Programs%20extended%20version%20Wolf%2C%20Arquint%2C%20Clochard%2C%20Oortwijn%2C%20Pereira%2C%20and%20M%C3%BCller%2C%202021"; spellcheck:"false"}
Wolf, F.&nbsp;A., Arquint, L., Clochard, M., Oortwijn, W., Pereira, J.&nbsp;C., & Müller, P.&nbsp;(2021). Gobra: Modular Specification and Verification of Go Programs (extended version). _arXiv:2105.13840 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2105.13840](http://arxiv.org/abs/2105.13840){.bib-url}
~ end bibitem

~ begin bibitem {id:"wolf_concise_2021"; cite-year:"2021"; cite-authors:"Wolf et al."; cite-authors-long:"Wolf, Schwerhoff, and Müller"; cite-label:"Wolf, Schwerhoff, \& Müller, 2021"; caption:"Concise Outlines for a Complex Logic: A Proof Outline Checker for TaDA&nl;Wolf, Schwerhoff, and Müller, 2021"; data-line:"FormalBib.bib:9402"; searchterm:"Concise%20Outlines%20for%20a%20Complex%20Logic%3A%20A%20Proof%20Outline%20Checker%20for%20TaDA%20Wolf%2C%20Schwerhoff%2C%20and%20M%C3%BCller%2C%202021"; spellcheck:"false"}
Wolf, F.&nbsp;A., Schwerhoff, M., & Müller, P.&nbsp;(2021). Concise Outlines for a Complex Logic: A Proof Outline Checker for TaDA.&nbsp;In M.&nbsp;Huisman, C.&nbsp;Păsăreanu, & N.&nbsp;Zhan (Eds.), _Formal Methods_ (pp. 407–426). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-90870-6_22](https://dx.doi.org/10.1007/978-3-030-90870-6_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wolff_modular_nodate"; cite-year:"n.d."; cite-authors:"Wolff"; cite-authors-long:"Wolff"; cite-label:"Wolff, n.d."; caption:"Modular Specification and Verification of Closures in Rust&nl;Wolff, n.d."; data-line:"FormalBib.bib:7855"; searchterm:"Modular%20Specification%20and%20Verification%20of%20Closures%20in%20Rust%20Wolff%2C%20n.d."; spellcheck:"false"}
Wolff, F.&nbsp;(n.d.). Modular Specification and Verification of Closures in Rust, 27.
~ end bibitem

~ begin bibitem {id:"woos_planning_2016"; cite-year:"2016"; cite-authors:"Woos et al."; cite-authors-long:"Woos, Wilcox, Anton, Tatlock, Ernst, and Anderson"; cite-label:"Woos et al., 2016"; caption:"Planning for change in a formal verification of the raft consensus protocol&nl;Woos, Wilcox, Anton, Tatlock, Ernst, and Anderson, 2016"; data-line:"FormalBib.bib:8391"; searchterm:"Planning%20for%20change%20in%20a%20formal%20verification%20of%20the%20raft%20consensus%20protocol%20Woos%2C%20Wilcox%2C%20Anton%2C%20Tatlock%2C%20Ernst%2C%20and%20Anderson%2C%202016"; spellcheck:"false"}
Woos, D., Wilcox, J.&nbsp;R., Anton, S., Tatlock, Z., Ernst, M.&nbsp;D., & Anderson, T.&nbsp;(2016). Planning for change in a formal verification of the raft consensus protocol. In _Proceedings of the 5th ACM SIGPLAN Conference on Certified Programs and Proofs_ (pp. 154–165). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2854065.2854081](https://dx.doi.org/10.1145/2854065.2854081){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_writing_2021"; cite-authors:"2021d"; cite-authors-long:"2021d"; cite-label:"\&ldquo;Writing Compiler Front-Ends for LLVM with Lua using Mewa.CodeProject,\&rdquo; 2021"; caption:"Writing Compiler Front-Ends for LLVM with Lua using Mewa.CodeProject&nl;2021d, "; data-line:"LanguageTools.bib:64"; searchterm:"Writing%20Compiler%20FrontEnds%20for%20LLVM%20with%20Lua%20using%20Mewa.CodeProject%202021d%2C%20"; spellcheck:"false"}
Writing Compiler Front-Ends for LLVM with Lua using Mewa.CodeProject. (2021, May 26). Retrieved June 1, 2021, from <https://www.codeproject.com/Articles/5301384/Writing-Compiler-Front-Ends-for-LLVM-with-Lua-usin>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wu_vulnerability_2021"; cite-year:"2021"; cite-authors:"Wu et al."; cite-authors-long:"Wu, Lu, Zhang, and Jin"; cite-label:"Wu, Lu, Zhang, \& Jin, 2021"; caption:"Vulnerability Detection in C/C++ Source Code With Graph Representation Learning&nl;Wu, Lu, Zhang, and Jin, 2021"; data-line:"Security.bib:915"; searchterm:"Vulnerability%20Detection%20in%20C%2FC%2B%2B%20Source%20Code%20With%20Graph%20Representation%20Learning%20Wu%2C%20Lu%2C%20Zhang%2C%20and%20Jin%2C%202021"; spellcheck:"false"}
Wu, Y., Lu, J., Zhang, Y., & Jin, S.&nbsp;(2021). Vulnerability Detection in C/C++ Source Code With Graph Representation Learning. In _2021 IEEE 11th Annual Computing and Communication Workshop and Conference (CCWC)_ (pp. 1519–1524). https://doi.org/[10.1109/CCWC51732.2021.9376145](https://dx.doi.org/10.1109/CCWC51732.2021.9376145){.bib-doi}
~ end bibitem

~ begin bibitem {id:"xia_interaction_2019"; cite-year:"2019"; cite-authors:"Xia et al."; cite-authors-long:"Xia, Zakowski, He, Hur, Malecha, Pierce, and Zdancewic"; cite-label:"Xia et al., 2019"; caption:"Interaction trees: representing recursive and impure programs in Coq&nl;Xia, Zakowski, He, Hur, Malecha, Pierce, and Zdancewic, 2019"; data-line:"FormalBib.bib:8156"; searchterm:"Interaction%20trees%3A%20representing%20recursive%20and%20impure%20programs%20in%20Coq%20Xia%2C%20Zakowski%2C%20He%2C%20Hur%2C%20Malecha%2C%20Pierce%2C%20and%20Zdancewic%2C%202019"; spellcheck:"false"}
Xia, L., Zakowski, Y., He, P., Hur, C.-K., Malecha, G., Pierce, B.&nbsp;C., & Zdancewic, S.&nbsp;(2019). Interaction trees: representing recursive and impure programs in Coq. _Proceedings of the ACM on Programming Languages_, _4_, 51:1–51:32. https://doi.org/[10.1145/3371119](https://dx.doi.org/10.1145/3371119){.bib-doi}
~ end bibitem

~ begin bibitem {id:"xie_effect_2020"; cite-year:"2020"; cite-authors:"Xie et al."; cite-authors-long:"Xie, Brachthäuser, Hillerström, Schuster, and Leijen"; cite-label:"Xie, Brachthäuser, Hillerström, Schuster, \& Leijen, 2020"; caption:"Effect handlers, evidently&nl;Xie, Brachthäuser, Hillerström, Schuster, and Leijen, 2020"; data-line:"FormalBib.bib:601"; searchterm:"Effect%20handlers%2C%20evidently%20Xie%2C%20Brachth%C3%A4user%2C%20Hillerstr%C3%B6m%2C%20Schuster%2C%20and%20Leijen%2C%202020"; spellcheck:"false"}
Xie, N., Brachthäuser, J.&nbsp;I., Hillerström, D., Schuster, P., & Leijen, D.&nbsp;(2020). Effect handlers, evidently. _Proceedings of the ACM on Programming Languages_, _4_, 99:1–99:29. https://doi.org/[10.1145/3408981](https://dx.doi.org/10.1145/3408981){.bib-doi}
~ end bibitem

~ begin bibitem {id:"xie_effect_2020-1"; cite-year:"2020"; cite-authors:"Xie and Leijen"; cite-authors-long:"Xie and Leijen"; cite-label:"Xie \& Leijen, 2020"; caption:"Effect handlers in Haskell, evidently&nl;Xie and Leijen, 2020"; data-line:"FormalBib.bib:618"; searchterm:"Effect%20handlers%20in%20Haskell%2C%20evidently%20Xie%20and%20Leijen%2C%202020"; spellcheck:"false"}
Xie, N., & Leijen, D.&nbsp;(2020). Effect handlers in Haskell, evidently. In _Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell_ (pp. 95–108). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3406088.3409022](https://dx.doi.org/10.1145/3406088.3409022){.bib-doi}
~ end bibitem

~ begin bibitem {id:"xi_applied_2017"; cite-year:"2017"; cite-authors:"Xi"; cite-authors-long:"Xi"; cite-label:"Xi, 2017"; caption:"Applied Type System: An Approach to Practical Programming with Theorem-Proving&nl;Xi, 2017"; data-line:"FormalBib.bib:6311"; searchterm:"Applied%20Type%20System%3A%20An%20Approach%20to%20Practical%20Programming%20with%20TheoremProving%20Xi%2C%202017"; spellcheck:"false"}
Xi, H.&nbsp;(2017). Applied Type System: An Approach to Practical Programming with Theorem-Proving. _arXiv:1703.08683 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1703.08683](http://arxiv.org/abs/1703.08683){.bib-url}
~ end bibitem

~ begin bibitem {id:"xi_introduction_nodate"; cite-year:"n.d."; cite-authors:"Xi"; cite-authors-long:"Xi"; cite-label:"Xi, n.d."; caption:"Introduction to Programming in ATS&nl;Xi, n.d."; data-line:"FormalBib.bib:6303"; searchterm:"Introduction%20to%20Programming%20in%20ATS%20Xi%2C%20n.d."; spellcheck:"false"}
Xi, H.&nbsp;(n.d.). Introduction to Programming in ATS, 252.
~ end bibitem

~ begin bibitem {id:"xu_-ide_2021"; cite-year:"2021"; cite-authors:"F.&nbsp;F.&nbsp;Xu et al."; cite-authors-long:"F.&nbsp;F.&nbsp;Xu, Vasilescu, and Neubig"; cite-label:"F. F. Xu, Vasilescu, \& Neubig, 2021"; caption:"In-IDE Code Generation from Natural Language: Promise and Challenges&nl;F. F. Xu, Vasilescu, and Neubig, 2021"; data-line:"FormalBib.bib:483"; searchterm:"InIDE%20Code%20Generation%20from%20Natural%20Language%3A%20Promise%20and%20Challenges%20F.%20F.%20Xu%2C%20Vasilescu%2C%20and%20Neubig%2C%202021"; spellcheck:"false"}
Xu, F.&nbsp;F., Vasilescu, B., & Neubig, G.&nbsp;(2021). In-IDE Code Generation from Natural Language: Promise and Challenges. _arXiv:2101.11149 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2101.11149](http://arxiv.org/abs/2101.11149){.bib-url}
~ end bibitem

~ begin bibitem {id:"xu_vfix_2019"; cite-year:"2019"; cite-authors:"X.&nbsp;Xu et al."; cite-authors-long:"X.&nbsp;Xu, Sui, Yan, and Xue"; cite-label:"X. Xu, Sui, Yan, \& Xue, 2019"; caption:"VFix: value-flow-guided precise program repair for null pointer dereferences&nl;X. Xu, Sui, Yan, and Xue, 2019"; data-line:"LanguageTools.bib:517"; searchterm:"VFix%3A%20valueflowguided%20precise%20program%20repair%20for%20null%20pointer%20dereferences%20X.%20Xu%2C%20Sui%2C%20Yan%2C%20and%20Xue%2C%202019"; spellcheck:"false"}
Xu, X., Sui, Y., Yan, H., & Xue, J.&nbsp;(2019). VFix: value-flow-guided precise program repair for null pointer dereferences. In _Proceedings of the 41st International Conference on Software Engineering_ (pp. 512–523). Montreal, Quebec, Canada: IEEE Press. https://doi.org/[10.1109/ICSE.2019.00063](https://dx.doi.org/10.1109/ICSE.2019.00063){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yadav_light-weighted_2020"; cite-year:"2020"; cite-authors:"Yadav"; cite-authors-long:"Yadav"; cite-label:"Yadav, 2020"; caption:"Light-Weighted CNN for Text Classification&nl;Yadav, 2020"; data-line:"Security.bib:1077"; searchterm:"LightWeighted%20CNN%20for%20Text%20Classification%20Yadav%2C%202020"; spellcheck:"false"}
Yadav, R.&nbsp;(2020). Light-Weighted CNN for Text Classification. _arXiv:2004.07922 \[cs, Stat\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2004.07922](http://arxiv.org/abs/2004.07922){.bib-url}
~ end bibitem

~ begin bibitem {id:"yang_safe_2011"; cite-year:"2011"; cite-authors:"J.&nbsp;Yang and Hawblitzel"; cite-authors-long:"J.&nbsp;Yang and Hawblitzel"; cite-label:"J. Yang \& Hawblitzel, 2011"; caption:"Safe to the last instruction: automated verification of a type-safe operating system&nl;J. Yang and Hawblitzel, 2011"; data-line:"FormalBib.bib:1774"; searchterm:"Safe%20to%20the%20last%20instruction%3A%20automated%20verification%20of%20a%20typesafe%20operating%20system%20J.%20Yang%20and%20Hawblitzel%2C%202011"; spellcheck:"false"}
Yang, J., & Hawblitzel, C.&nbsp;(2011). Safe to the last instruction: automated verification of a type-safe operating system. _Communications of the ACM_, _54_(12), 123. https://doi.org/[10.1145/2043174.2043197](https://dx.doi.org/10.1145/2043174.2043197){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yang_learning_2019"; cite-year:"2019"; cite-authors:"K.&nbsp;Yang and Deng"; cite-authors-long:"K.&nbsp;Yang and Deng"; cite-label:"K. Yang \& Deng, 2019"; caption:"Learning to Prove Theorems via Interacting with Proof Assistants&nl;K. Yang and Deng, 2019"; data-line:"FormalBib.bib:4929"; searchterm:"Learning%20to%20Prove%20Theorems%20via%20Interacting%20with%20Proof%20Assistants%20K.%20Yang%20and%20Deng%2C%202019"; spellcheck:"false"}
Yang, K., & Deng, J.&nbsp;(2019). Learning to Prove Theorems via Interacting with Proof Assistants. _arXiv:1905.09381 \[cs, Stat\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1905.09381](http://arxiv.org/abs/1905.09381){.bib-url}
~ end bibitem

~ begin bibitem {id:"yang_accelerating_nodate"; cite-year:"n.d."; cite-authors:"M.&nbsp;Yang et al."; cite-authors-long:"M.&nbsp;Yang, Lie, and Papernot"; cite-label:"M. Yang, Lie, \& Papernot, n.d."; caption:"Accelerating Symbolic Analysis for Android Apps&nl;M. Yang, Lie, and Papernot, n.d."; data-line:"MachineLearning.bib:137"; searchterm:"Accelerating%20Symbolic%20Analysis%20for%20Android%20Apps%20M.%20Yang%2C%20Lie%2C%20and%20Papernot%2C%20n.d."; spellcheck:"false"}
Yang, M., Lie, D., & Papernot, N.&nbsp;(n.d.). Accelerating Symbolic Analysis for Android Apps, 6.
~ end bibitem

~ begin bibitem {id:"yang_c2aadl_reverse_2021"; cite-year:"2021"; cite-authors:"Z.&nbsp;Yang et al."; cite-authors-long:"Z.&nbsp;Yang, Qiu, Zhou, Huang, Bodeveix, and Filali"; cite-label:"Z. Yang et al., 2021"; caption:"C2AADL&underscore;Reverse: A model-driven reverse engineering approach to development and verification of safety-critical software&nl;Z. Yang, Qiu, Zhou, Huang, Bodeveix, and Filali, 2021"; data-line:"LanguageTools.bib:2"; searchterm:"C2AADL%26underscore%3BReverse%3A%20A%20modeldriven%20reverse%20engineering%20approach%20to%20development%20and%20verification%20of%20safetycritical%20software%20Z.%20Yang%2C%20Qiu%2C%20Zhou%2C%20Huang%2C%20Bodeveix%2C%20and%20Filali%2C%202021"; spellcheck:"false"}
Yang, Z., Qiu, Z., Zhou, Y., Huang, Z., Bodeveix, J.-P., & Filali, M.&nbsp;(2021). C2AADL&underscore;Reverse: A model-driven reverse engineering approach to development and verification of safety-critical software. _Journal of Systems Architecture_, _118_, 102202. https://doi.org/[10.1016/j.sysarc.2021.102202](https://dx.doi.org/10.1016/j.sysarc.2021.102202){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yan_secrsl_nodate"; cite-year:"n.d."; cite-authors:"Yan and Murray"; cite-authors-long:"Yan and Murray"; cite-label:"Yan \& Murray, n.d."; caption:"SecRSL: Security Separation Logic for C11 Release-Acquire Concurrency&nl;Yan and Murray, n.d."; data-line:"FormalBib.bib:8918"; searchterm:"SecRSL%3A%20Security%20Separation%20Logic%20for%20C11%20ReleaseAcquire%20Concurrency%20Yan%20and%20Murray%2C%20n.d."; spellcheck:"false"}
Yan, P., & Murray, T.&nbsp;(n.d.). SecRSL: Security Separation Logic for C11 Release-Acquire Concurrency, _5_, 26.
~ end bibitem

~ begin bibitem {id:"yao_program_2021"; cite-year:"2021"; cite-authors:"Yao et al."; cite-authors-long:"Yao, Shi, Huang, and Zhang"; cite-label:"Yao, Shi, Huang, \& Zhang, 2021"; caption:"Program analysis via efficient symbolic abstraction&nl;Yao, Shi, Huang, and Zhang, 2021"; data-line:"FormalBib.bib:8717"; searchterm:"Program%20analysis%20via%20efficient%20symbolic%20abstraction%20Yao%2C%20Shi%2C%20Huang%2C%20and%20Zhang%2C%202021"; spellcheck:"false"}
Yao, P., Shi, Q., Huang, H., & Zhang, C.&nbsp;(2021). Program analysis via efficient symbolic abstraction. _Proceedings of the ACM on Programming Languages_, _5_, 118:1–118:32. https://doi.org/[10.1145/3485495](https://dx.doi.org/10.1145/3485495){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yao_efficient_2021"; cite-year:"2021"; cite-authors:"Yao et al."; cite-authors-long:"Yao, Zhou, Xiao, Shi, Wu, and Zhang"; cite-label:"Yao, Zhou, et al., 2021"; caption:"Efficient Path-Sensitive Data-Dependence Analysis&nl;Yao, Zhou, Xiao, Shi, Wu, and Zhang, 2021"; data-line:"LanguageTools.bib:985"; searchterm:"Efficient%20PathSensitive%20DataDependence%20Analysis%20Yao%2C%20Zhou%2C%20Xiao%2C%20Shi%2C%20Wu%2C%20and%20Zhang%2C%202021"; spellcheck:"false"}
Yao, P., Zhou, J., Xiao, X., Shi, Q., Wu, R., & Zhang, C.&nbsp;(2021). Efficient Path-Sensitive Data-Dependence Analysis. _arXiv:2109.07923 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2109.07923](http://arxiv.org/abs/2109.07923){.bib-url}
~ end bibitem

~ begin bibitem {id:"ye_accelerating_2014"; cite-year:"2014"; cite-authors:"D.&nbsp;Ye et al."; cite-authors-long:"D.&nbsp;Ye, Sui, and Xue"; cite-label:"D. Ye, Sui, \& Xue, 2014"; caption:"Accelerating Dynamic Detection of Uses of Undefined Values with Static Value-Flow Analysis&nl;D. Ye, Sui, and Xue, 2014"; data-line:"LanguageTools.bib:535"; searchterm:"Accelerating%20Dynamic%20Detection%20of%20Uses%20of%20Undefined%20Values%20with%20Static%20ValueFlow%20Analysis%20D.%20Ye%2C%20Sui%2C%20and%20Xue%2C%202014"; spellcheck:"false"}
Ye, D., Sui, Y., & Xue, J.&nbsp;(2014). Accelerating Dynamic Detection of Uses of Undefined Values with Static Value-Flow Analysis. In _Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization_ (pp. 154–164). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2581122.2544154](https://dx.doi.org/10.1145/2581122.2544154){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ye_verified_2019"; cite-year:"2019"; cite-authors:"Q.&nbsp;Ye and Delaware"; cite-authors-long:"Q.&nbsp;Ye and Delaware"; cite-label:"Q. Ye \& Delaware, 2019"; caption:"A Verified Protocol Buffer Compiler&nl;Q. Ye and Delaware, 2019"; data-line:"FormalBib.bib:2961"; searchterm:"A%20Verified%20Protocol%20Buffer%20Compiler%20Q.%20Ye%20and%20Delaware%2C%202019"; spellcheck:"false"}
Ye, Q., & Delaware, B.&nbsp;(2019). A Verified Protocol Buffer Compiler. In _Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 222–233). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3293880.3294105](https://dx.doi.org/10.1145/3293880.3294105){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ye_type-directed_2016"; cite-year:"2016"; cite-authors:"W.&nbsp;Ye"; cite-authors-long:"W.&nbsp;Ye"; cite-label:"W. Ye, 2016"; caption:"Type-Directed Operational Semantics for Gradual Typing&nl;W. Ye, 2016"; data-line:"FormalBib.bib:36"; searchterm:"TypeDirected%20Operational%20Semantics%20for%20Gradual%20Typing%20W.%20Ye%2C%202016"; spellcheck:"false"}
Ye, W.&nbsp;(2016). Type-Directed Operational Semantics for Gradual Typing, 29.
~ end bibitem

~ begin bibitem {id:"yodaiken_how_2021"; cite-year:"2021"; cite-authors:"Yodaiken"; cite-authors-long:"Yodaiken"; cite-label:"Yodaiken, 2021"; caption:"How ISO C became unusable for operating systems development&nl;Yodaiken, 2021"; data-line:"LanguageTools.bib:897"; searchterm:"How%20ISO%20C%20became%20unusable%20for%20operating%20systems%20development%20Yodaiken%2C%202021"; spellcheck:"false"}
Yodaiken, V.&nbsp;(2021). How ISO C became unusable for operating systems development. In _Proceedings of the 11th Workshop on Programming Languages and Operating Systems_ (pp. 84–90). Virtual Event Germany: ACM.&nbsp;https://doi.org/[10.1145/3477113.3487274](https://dx.doi.org/10.1145/3477113.3487274){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yousefi-azar_mutual_2021"; cite-year:"2021"; cite-authors:"Yousefi-Azar et al."; cite-authors-long:"Yousefi-Azar, Varadharajan, Hamey, and Chen"; cite-label:"Yousefi-Azar, Varadharajan, Hamey, \& Chen, 2021"; caption:"Mutual Information and Feature Importance Gradient Boosting: Automatic byte n‐gram feature reranking for Android malware detection&nl;Yousefi-Azar, Varadharajan, Hamey, and Chen, 2021"; data-line:"Security.bib:291"; searchterm:"Mutual%20Information%20and%20Feature%20Importance%20Gradient%20Boosting%3A%20Automatic%20byte%20n%E2%80%90gram%20feature%20reranking%20for%20Android%20malware%20detection%20YousefiAzar%2C%20Varadharajan%2C%20Hamey%2C%20and%20Chen%2C%202021"; spellcheck:"false"}
Yousefi-Azar, M., Varadharajan, V., Hamey, L., & Chen, S.&nbsp;(2021). Mutual Information and Feature Importance Gradient Boosting: Automatic byte n‐gram feature reranking for Android malware detection. _Software: Practice and Experience_. https://doi.org/[10.1002/spe.2971](https://dx.doi.org/10.1002/spe.2971){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yuan_verified_nodate"; cite-year:"n.d."; cite-authors:"Yuan and Talpin"; cite-authors-long:"Yuan and Talpin"; cite-label:"Yuan \& Talpin, n.d."; caption:"Verified functional programming of an IoT operating system's bootloader&nl;Yuan and Talpin, n.d."; data-line:"FormalBib.bib:7091"; searchterm:"Verified%20functional%20programming%20of%20an%20IoT%20operating%20system's%20bootloader%20Yuan%20and%20Talpin%2C%20n.d."; spellcheck:"false"}
Yuan, S., & Talpin, J.-P.&nbsp;(n.d.). Verified functional programming of an IoT operating system’s bootloader, 17.
~ end bibitem

~ begin bibitem {id:"yu_detecting_2021"; cite-year:"2021"; cite-authors:"Yu et al."; cite-authors-long:"Yu, Wang, Cai, Luo, and Yang"; cite-label:"Yu, Wang, Cai, Luo, \& Yang, 2021"; caption:"Detecting concurrency vulnerabilities based on partial orders of memory and thread events&nl;Yu, Wang, Cai, Luo, and Yang, 2021"; data-line:"Security.bib:661"; searchterm:"Detecting%20concurrency%20vulnerabilities%20based%20on%20partial%20orders%20of%20memory%20and%20thread%20events%20Yu%2C%20Wang%2C%20Cai%2C%20Luo%2C%20and%20Yang%2C%202021"; spellcheck:"false"}
Yu, K., Wang, C., Cai, Y., Luo, X., & Yang, Z.&nbsp;(2021). Detecting concurrency vulnerabilities based on partial orders of memory and thread events. In _Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering_ (pp. 280–291). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3468264.3468572](https://dx.doi.org/10.1145/3468264.3468572){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yurichev_sat/smt_nodate"; cite-year:"n.d."; cite-authors:"Yurichev"; cite-authors-long:"Yurichev"; cite-label:"Yurichev, n.d."; caption:"SAT/SMT by Example&nl;Yurichev, n.d."; data-line:"FormalBib.bib:4103"; searchterm:"SAT%2FSMT%20by%20Example%20Yurichev%2C%20n.d."; spellcheck:"false"}
Yurichev, D.&nbsp;(n.d.). SAT/SMT by Example, 555.
~ end bibitem

~ begin bibitem {id:"zakowski_modular_2021"; cite-year:"2021"; cite-authors:"Zakowski et al."; cite-authors-long:"Zakowski, Beck, Yoon, Zaichuk, Zaliva, and Zdancewic"; cite-label:"Zakowski et al., 2021"; caption:"Modular, compositional, and executable formal semantics for LLVM IR&nl;Zakowski, Beck, Yoon, Zaichuk, Zaliva, and Zdancewic, 2021"; data-line:"FormalBib.bib:7466"; searchterm:"Modular%2C%20compositional%2C%20and%20executable%20formal%20semantics%20for%20LLVM%20IR%20Zakowski%2C%20Beck%2C%20Yoon%2C%20Zaichuk%2C%20Zaliva%2C%20and%20Zdancewic%2C%202021"; spellcheck:"false"}
Zakowski, Y., Beck, C., Yoon, I., Zaichuk, I., Zaliva, V., & Zdancewic, S.&nbsp;(2021). Modular, compositional, and executable formal semantics for LLVM IR.&nbsp;_Proceedings of the ACM on Programming Languages_, _5_, 67:1–67:30. https://doi.org/[10.1145/3473572](https://dx.doi.org/10.1145/3473572){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zakowski_equational_2020"; cite-year:"2020"; cite-authors:"Zakowski et al."; cite-authors-long:"Zakowski, He, Hur, and Zdancewic"; cite-label:"Zakowski, He, Hur, \& Zdancewic, 2020"; caption:"An equational theory for weak bisimulation via generalized parameterized coinduction&nl;Zakowski, He, Hur, and Zdancewic, 2020"; data-line:"FormalBib.bib:8138"; searchterm:"An%20equational%20theory%20for%20weak%20bisimulation%20via%20generalized%20parameterized%20coinduction%20Zakowski%2C%20He%2C%20Hur%2C%20and%20Zdancewic%2C%202020"; spellcheck:"false"}
Zakowski, Y., He, P., Hur, C.-K., & Zdancewic, S.&nbsp;(2020). An equational theory for weak bisimulation via generalized parameterized coinduction. In _Proceedings of the 9th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 71–84). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3372885.3373813](https://dx.doi.org/10.1145/3372885.3373813){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zaliva_helix_2021"; cite-year:"2021"; cite-authors:"Zaliva"; cite-authors-long:"Zaliva"; cite-label:"Zaliva, 2021"; caption:"HELIX: From Math to Verified Code&nl;Zaliva, 2021"; data-line:"FormalBib.bib:403"; searchterm:"HELIX%3A%20From%20Math%20to%20Verified%20Code%20Zaliva%2C%202021"; spellcheck:"false"}
Zaliva, V.&nbsp;(2021). _HELIX: From Math to Verified Code_ (thesis). Carnegie Mellon University. https://doi.org/[10.1184/R1/13636808.v1](https://dx.doi.org/10.1184/R1/13636808.v1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zaliva_helix_2018"; cite-year:"2018"; cite-authors:"Zaliva and Franchetti"; cite-authors-long:"Zaliva and Franchetti"; cite-label:"Zaliva \& Franchetti, 2018"; caption:"HELIX: a case study of a formal verification of high performance program generation&nl;Zaliva and Franchetti, 2018"; data-line:"FormalBib.bib:385"; searchterm:"HELIX%3A%20a%20case%20study%20of%20a%20formal%20verification%20of%20high%20performance%20program%20generation%20Zaliva%20and%20Franchetti%2C%202018"; spellcheck:"false"}
Zaliva, V., & Franchetti, F.&nbsp;(2018). HELIX: a case study of a formal verification of high performance program generation. In _Proceedings of the 7th ACM SIGPLAN International Workshop on Functional High-Performance Computing_ (pp. 1–9). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/3264738.3264739](https://dx.doi.org/10.1145/3264738.3264739){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zave_compositional_2019"; cite-year:"2019"; cite-authors:"Zave and Rexford"; cite-authors-long:"Zave and Rexford"; cite-label:"Zave \& Rexford, 2019"; caption:"The compositional architecture of the internet&nl;Zave and Rexford, 2019"; data-line:"Networking.bib:333"; searchterm:"The%20compositional%20architecture%20of%20the%20internet%20Zave%20and%20Rexford%2C%202019"; spellcheck:"false"}
Zave, P., & Rexford, J.&nbsp;(2019). The compositional architecture of the internet. _Communications of the ACM_, _62_(3), 78–87. https://doi.org/[10.1145/3226588](https://dx.doi.org/10.1145/3226588){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zave_remaining_2020"; cite-year:"2020"; cite-authors:"Zave et al."; cite-authors-long:"Zave, Rexford, and Sonchack"; cite-label:"Zave, Rexford, \& Sonchack, 2020"; caption:"The Remaining Improbable: Toward Verifiable Network Services&nl;Zave, Rexford, and Sonchack, 2020"; data-line:"Networking.bib:361"; searchterm:"The%20Remaining%20Improbable%3A%20Toward%20Verifiable%20Network%20Services%20Zave%2C%20Rexford%2C%20and%20Sonchack%2C%202020"; spellcheck:"false"}
Zave, P., Rexford, J., & Sonchack, J.&nbsp;(2020). The Remaining Improbable: Toward Verifiable Network Services. _arXiv:2009.12861 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2009.12861](http://arxiv.org/abs/2009.12861){.bib-url}
~ end bibitem

~ begin bibitem {id:"zeng_static_2012"; cite-year:"2012"; cite-authors:"Zeng"; cite-authors-long:"Zeng"; cite-label:"Zeng, 2012"; caption:"Static Analysis on Binary Code&nl;Zeng, 2012"; data-line:"FormalBib.bib:9794"; searchterm:"Static%20Analysis%20on%20Binary%20Code%20Zeng%2C%202012"; spellcheck:"false"}
Zeng, B.&nbsp;(2012). _Static Analysis on Binary Code_ (Technical Report) (p. 19). Bethlehem, PA: Lehigh University.
~ end bibitem

~ begin bibitem {id:"zhang_statically_nodate"; cite-year:"n.d."; cite-authors:"Hang Zhang et al."; cite-authors-long:"Hang Zhang, Chen, Hao, Li, Zhai, Zou, and Qian"; cite-label:"Hang Zhang et al., n.d."; caption:"Statically Discovering High-Order Taint Style Vulnerabilities in OS Kernels&nl;Hang Zhang, Chen, Hao, Li, Zhai, Zou, and Qian, n.d."; data-line:"Security.bib:1288"; searchterm:"Statically%20Discovering%20HighOrder%20Taint%20Style%20Vulnerabilities%20in%20OS%20Kernels%20Hang%20Zhang%2C%20Chen%2C%20Hao%2C%20Li%2C%20Zhai%2C%20Zou%2C%20and%20Qian%2C%20n.d."; spellcheck:"false"}
Zhang, H., Chen, W., Hao, Y., Li, G., Zhai, Y., Zou, X., & Qian, Z.&nbsp;(n.d.). Statically Discovering High-Order Taint Style Vulnerabilities in OS Kernels, 14.
~ end bibitem

~ begin bibitem {id:"zhang_verifying_2021"; cite-year:"2021"; cite-authors:"Hengchu Zhang et al."; cite-authors-long:"Hengchu Zhang, Koh, Li, Beringer, Pierce, Honoré, et al."; cite-label:"Hengchu Zhang et al., 2021"; caption:"Verifying an HTTP Key-Value Server with Interaction Trees and VST&nl;Hengchu Zhang, Koh, Li, Beringer, Pierce, Honoré, et al., 2021"; data-line:"FormalBib.bib:7874"; searchterm:"Verifying%20an%20HTTP%20KeyValue%20Server%20with%20Interaction%20Trees%20and%20VST%20Hengchu%20Zhang%2C%20Koh%2C%20Li%2C%20Beringer%2C%20Pierce%2C%20Honor%C3%A9%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Zhang, H., Koh, N., Li, Y., Beringer, L., Pierce, B., Honoré, W., … Zdancewic, S.&nbsp;(2021). Verifying an HTTP Key-Value Server with Interaction Trees and VST, 19.
~ end bibitem

~ begin bibitem {id:"zhang_netter_2021"; cite-year:"2021"; cite-authors:"Han Zhang et al."; cite-authors-long:"Han Zhang, Zhang, Azevedo de Amorim, Agarwal, Fredrikson, and Jia"; cite-label:"Han Zhang et al., 2021"; caption:"Netter: Probabilistic, Stateful Network Models&nl;Han Zhang, Zhang, Azevedo de Amorim, Agarwal, Fredrikson, and Jia, 2021"; data-line:"FormalBib.bib:5419"; searchterm:"Netter%3A%20Probabilistic%2C%20Stateful%20Network%20Models%20Han%20Zhang%2C%20Zhang%2C%20Azevedo%20de%20Amorim%2C%20Agarwal%2C%20Fredrikson%2C%20and%20Jia%2C%202021"; spellcheck:"false"}
Zhang, H., Zhang, C., Azevedo de Amorim, A., Agarwal, Y., Fredrikson, M., & Jia, L.&nbsp;(2021). Netter: Probabilistic, Stateful Network Models. In F.&nbsp;Henglein, S.&nbsp;Shoham, & Y.&nbsp;Vizel (Eds.), _Verification, Model Checking, and Abstract Interpretation_ (pp. 486–508). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-67067-2_22](https://dx.doi.org/10.1007/978-3-030-67067-2_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zhang_decision_nodate"; cite-year:"n.d."; cite-authors:"L.&nbsp;Zhang et al."; cite-authors-long:"L.&nbsp;Zhang, Blaauwbroek, Piotrowski, Kaliszyk, and Urban"; cite-label:"L. Zhang, Blaauwbroek, Piotrowski, Kaliszyk, \& Urban, n.d."; caption:"Decision Trees for Tactic Prediction in Coq&nl;L. Zhang, Blaauwbroek, Piotrowski, Kaliszyk, and Urban, n.d."; data-line:"FormalBib.bib:7083"; searchterm:"Decision%20Trees%20for%20Tactic%20Prediction%20in%20Coq%20L.%20Zhang%2C%20Blaauwbroek%2C%20Piotrowski%2C%20Kaliszyk%2C%20and%20Urban%2C%20n.d."; spellcheck:"false"}
Zhang, L., Blaauwbroek, L., Piotrowski, B., Kaliszyk, C., & Urban, J.&nbsp;(n.d.). Decision Trees for Tactic Prediction in Coq, 3.
~ end bibitem

~ begin bibitem {id:"zhang_heterogen_2022"; cite-year:"2022"; cite-authors:"Q.&nbsp;Zhang et al."; cite-authors-long:"Q.&nbsp;Zhang, Wang, Xu, and Kim"; cite-label:"Q. Zhang, Wang, Xu, \& Kim, 2022"; caption:"HeteroGen: Transpiling C to Heterogeneous HLS Code with Automated Test Generation and Program Repair&nl;Q. Zhang, Wang, Xu, and Kim, 2022"; data-line:"LanguageTools.bib:1418"; searchterm:"HeteroGen%3A%20Transpiling%20C%20to%20Heterogeneous%20HLS%20Code%20with%20Automated%20Test%20Generation%20and%20Program%20Repair%20Q.%20Zhang%2C%20Wang%2C%20Xu%2C%20and%20Kim%2C%202022"; spellcheck:"false"}
Zhang, Q., Wang, J., Xu, G.&nbsp;H., & Kim, M.&nbsp;(2022). HeteroGen: Transpiling C to Heterogeneous HLS Code with Automated Test Generation and Program Repair, 13.
~ end bibitem

~ begin bibitem {id:"feng_correct-by-construction_2018"; cite-year:"2018"; cite-authors:"T.&nbsp;Zhang et al."; cite-authors-long:"T.&nbsp;Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky"; cite-label:"T. Zhang et al., 2018"; caption:"Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement&nl;T. Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky, 2018"; data-line:"FormalBib.bib:945"; searchterm:"CorrectbyConstruction%20Implementation%20of%20Runtime%20Monitors%20Using%20Stepwise%20Refinement%20T.%20Zhang%2C%20Wiegley%2C%20Giannakopoulos%2C%20Eakman%2C%20PitClaudel%2C%20Lee%2C%20and%20Sokolsky%2C%202018"; spellcheck:"false"}
Zhang, T., Wiegley, J., Giannakopoulos, T., Eakman, G., Pit-Claudel, C., Lee, I., & Sokolsky, O.&nbsp;(2018). Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement. In X.&nbsp;Feng, M.&nbsp;Müller-Olm, & Z.&nbsp;Yang (Eds.), _Dependable Software Engineering. Theories, Tools, and Applications_ (Vol. 10998, pp. 31–49). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-99933-3_3](https://dx.doi.org/10.1007/978-3-319-99933-3_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zhang_compositional_nodate"; cite-year:"n.d."; cite-authors:"W.&nbsp;Zhang and Sun"; cite-authors-long:"W.&nbsp;Zhang and Sun"; cite-label:"W. Zhang \& Sun, n.d."; caption:"Compositional Programming&nl;W. Zhang and Sun, n.d."; data-line:"FormalBib.bib:298"; searchterm:"Compositional%20Programming%20W.%20Zhang%20and%20Sun%2C%20n.d."; spellcheck:"false"}
Zhang, W., & Sun, Y.&nbsp;(n.d.). Compositional Programming, _1_(1), 60.
~ end bibitem

~ begin bibitem {id:"zhang_checking_2021"; cite-year:"2021"; cite-authors:"Z.&nbsp;Zhang et al."; cite-authors-long:"Z.&nbsp;Zhang, Feng, Ernst, Porst, and Dillig"; cite-label:"Z. Zhang, Feng, Ernst, Porst, \& Dillig, 2021"; caption:"Checking Conformance of Applications against GUI Policies&nl;Z. Zhang, Feng, Ernst, Porst, and Dillig, 2021"; data-line:"Security.bib:839"; searchterm:"Checking%20Conformance%20of%20Applications%20against%20GUI%20Policies%20Z.%20Zhang%2C%20Feng%2C%20Ernst%2C%20Porst%2C%20and%20Dillig%2C%202021"; spellcheck:"false"}
Zhang, Z., Feng, Y., Ernst, M.&nbsp;D., Porst, S., & Dillig, I.&nbsp;(2021). Checking Conformance of Applications against GUI Policies, 12.
~ end bibitem

~ begin bibitem {id:"zhaohui_verifying_2021"; cite-year:"2021"; cite-authors:"Zhaohui and Feng"; cite-authors-long:"Zhaohui and Feng"; cite-label:"Zhaohui \& Feng, 2021"; caption:"Verifying Contextual Refinement with Ownership Transfer(Extended Version)&nl;Zhaohui and Feng, 2021"; data-line:"FormalBib.bib:9508"; searchterm:"Verifying%20Contextual%20Refinement%20with%20Ownership%20TransferExtended%20Version%20Zhaohui%20and%20Feng%2C%202021"; spellcheck:"false"}
Zhaohui, L., & Feng, X.&nbsp;(2021). _Verifying Contextual Refinement with Ownership Transfer(Extended Version)_.
~ end bibitem

~ begin bibitem {id:"zhao_formal_2013"; cite-year:"2013"; cite-authors:"Zhao et al."; cite-authors-long:"Zhao, Nagarakatte, Martin, and Zdancewic"; cite-label:"Zhao, Nagarakatte, Martin, \& Zdancewic, 2013"; caption:"Formal verification of SSA-based optimizations for LLVM&nl;Zhao, Nagarakatte, Martin, and Zdancewic, 2013"; data-line:"FormalBib.bib:7722"; searchterm:"Formal%20verification%20of%20SSAbased%20optimizations%20for%20LLVM%20Zhao%2C%20Nagarakatte%2C%20Martin%2C%20and%20Zdancewic%2C%202013"; spellcheck:"false"}
Zhao, J., Nagarakatte, S., Martin, M.&nbsp;M.&nbsp;K., & Zdancewic, S.&nbsp;(2013). Formal verification of SSA-based optimizations for LLVM.&nbsp;In _Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 175–186). New York, NY, USA: Association for Computing Machinery. https://doi.org/[10.1145/2491956.2462164](https://dx.doi.org/10.1145/2491956.2462164){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zhu_icallee_2021"; cite-year:"2021"; cite-authors:"Zhu et al."; cite-authors-long:"Zhu, Feng, Zhang, Ou, Yang, and Zhang"; cite-label:"Zhu et al., 2021"; caption:"iCallee: Recovering Call Graphs for Binaries&nl;Zhu, Feng, Zhang, Ou, Yang, and Zhang, 2021"; data-line:"FormalBib.bib:8532"; searchterm:"iCallee%3A%20Recovering%20Call%20Graphs%20for%20Binaries%20Zhu%2C%20Feng%2C%20Zhang%2C%20Ou%2C%20Yang%2C%20and%20Zhang%2C%202021"; spellcheck:"false"}
Zhu, W., Feng, Z., Zhang, Z., Ou, Z., Yang, M., & Zhang, C.&nbsp;(2021). iCallee: Recovering Call Graphs for Binaries. _arXiv:2111.01415 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[2111.01415](http://arxiv.org/abs/2111.01415){.bib-url}
~ end bibitem

~ begin bibitem {id:"zou_buddy_2022"; cite-year:"2022"; cite-authors:"C.&nbsp;Zou et al."; cite-authors-long:"C.&nbsp;Zou, Wang, Gao, and Xue"; cite-label:"C. Zou, Wang, Gao, \& Xue, 2022"; caption:"Buddy Stacks: Protecting Return Addresses with Efficient Thread-Local Storage and Runtime Re-Randomization&nl;C. Zou, Wang, Gao, and Xue, 2022"; data-line:"Security.bib:1588"; searchterm:"Buddy%20Stacks%3A%20Protecting%20Return%20Addresses%20with%20Efficient%20ThreadLocal%20Storage%20and%20Runtime%20ReRandomization%20C.%20Zou%2C%20Wang%2C%20Gao%2C%20and%20Xue%2C%202022"; spellcheck:"false"}
Zou, C., Wang, X., Gao, Y., & Xue, J.&nbsp;(2022). Buddy Stacks: Protecting Return Addresses with Efficient Thread-Local Storage and Runtime Re-Randomization. _ACM Transactions on Software Engineering and Methodology_, _31_(2), 35e:1–35e:37. https://doi.org/[10.1145/3494516](https://dx.doi.org/10.1145/3494516){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zou_intdroid_2021"; cite-year:"2021"; cite-authors:"D.&nbsp;Zou et al."; cite-authors-long:"D.&nbsp;Zou, Wu, Yang, Chauhan, Yang, Zhong, et al."; cite-label:"D. Zou et al., 2021"; caption:"IntDroid: Android Malware Detection Based on API Intimacy Analysis&nl;D. Zou, Wu, Yang, Chauhan, Yang, Zhong, et al., 2021"; data-line:"Security.bib:401"; searchterm:"IntDroid%3A%20Android%20Malware%20Detection%20Based%20on%20API%20Intimacy%20Analysis%20D.%20Zou%2C%20Wu%2C%20Yang%2C%20Chauhan%2C%20Yang%2C%20Zhong%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Zou, D., Wu, Y., Yang, S., Chauhan, A., Yang, W., Zhong, J., … Jin, H.&nbsp;(2021). IntDroid: Android Malware Detection Based on API Intimacy Analysis. _ACM Transactions on Software Engineering and Methodology_, _30_(3), 39:1–39:32. https://doi.org/[10.1145/3442588](https://dx.doi.org/10.1145/3442588){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zuleger_strong-separation_nodate"; cite-year:"2021"; cite-authors:"Zuleger and Katelaan"; cite-authors-long:"Zuleger and Katelaan"; cite-label:"Zuleger \& Katelaan, n.d."; caption:"Strong-Separation Logic (ADSL 2020) - POPL 2020&nl;Zuleger and Katelaan, 2021"; data-line:"FormalBib.bib:694"; searchterm:"StrongSeparation%20Logic%20ADSL%202020%20%20POPL%202020%20Zuleger%20and%20Katelaan%2C%202021"; spellcheck:"false"}
Zuleger, F., & Katelaan, J.&nbsp;(n.d.). Strong-Separation Logic (ADSL 2020) - POPL 2020. Retrieved January 22, 2021, from <https://popl20.sigplan.org/details/adsl-2020-papers/9/Strong-Separation-Logic>{.bib-url}
~ end bibitem

~ begin bibitem {id:"zuo_systemizing_2021"; cite-year:"2021"; cite-authors:"Zuo et al."; cite-authors-long:"Zuo, Wang, Hussain, Sani, Zhang, Lu, et al."; cite-label:"Zuo, Wang, et al., 2021"; caption:"Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan&nl;Zuo, Wang, Hussain, Sani, Zhang, Lu, et al., 2021"; data-line:"LanguageTools.bib:302"; searchterm:"Systemizing%20Interprocedural%20Static%20Analysis%20of%20Largescale%20Systems%20Code%20with%20Graspan%20Zuo%2C%20Wang%2C%20Hussain%2C%20Sani%2C%20Zhang%2C%20Lu%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Zuo, Z., Wang, K., Hussain, A., Sani, A.&nbsp;A., Zhang, Y., Lu, S., … Xu, G.&nbsp;H.&nbsp;(2021). Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan. _ACM Transactions on Computer Systems_, _38_(1), 4:1–4:39. https://doi.org/[10.1145/3466820](https://dx.doi.org/10.1145/3466820){.bib-doi}
~ end bibitem

~ begin bibitem {id:"zuo_chianina_2021"; cite-year:"2021"; cite-authors:"Zuo et al."; cite-authors-long:"Zuo, Zhang, Pan, Lu, Li, Wang, et al."; cite-label:"Zuo, Zhang, et al., 2021"; caption:"Chianina: An Evolving Graph System for Flow- and Context-Sensitive Analyses of Million Lines of C Code&nl;Zuo, Zhang, Pan, Lu, Li, Wang, et al., 2021"; data-line:"LanguageTools.bib:45"; searchterm:"Chianina%3A%20An%20Evolving%20Graph%20System%20for%20Flow%20and%20ContextSensitive%20Analyses%20of%20Million%20Lines%20of%20C%20Code%20Zuo%2C%20Zhang%2C%20Pan%2C%20Lu%2C%20Li%2C%20Wang%2C%20et%20al.%2C%202021"; spellcheck:"false"}
Zuo, Z., Zhang, Y., Pan, Q., Lu, S., Li, Y., Wang, L., … Xu, G.&nbsp;H.&nbsp;(2021). Chianina: An Evolving Graph System for Flow- and Context-Sensitive Analyses of Million Lines of C Code, 16.
~ end bibitem

~ begin bibitem {id:"fstar-team_fstar_2021"; cite-authors:"2021a"; cite-authors-long:"2021a"; cite-label:"2021"; caption:"Fstar: A Higher-Order Effectful Language Designed for Program Verification&nl;2021a, "; data-line:"FormalBib.bib:5257"; searchterm:"Fstar%3A%20A%20HigherOrder%20Effectful%20Language%20Designed%20for%20Program%20Verification%202021a%2C%20"; spellcheck:"false"}
(2021, January 20). Fstar: A Higher-Order Effectful Language Designed for Program Verification. Retrieved January 20, 2021, from <https://www.fstar-lang.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_acm_nodate"; cite-authors:"2019a"; cite-authors-long:"2019a"; cite-label:"n.d.-b"; caption:"ACM Classification Codes&nl;2019a, "; data-line:"FormalBib.bib:3289"; searchterm:"ACM%20Classification%20Codes%202019a%2C%20"; spellcheck:"false"}
(n.d.-b). ACM Classification Codes. Retrieved February 1, 2019, from <https://cran.r-project.org/web/classifications/ACM.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cea_frama-c_nodate"; cite-authors:"2019n"; cite-authors-long:"2019n"; cite-label:"n.d.-c"; caption:"Frama-C&nl;2019n, "; data-line:"FormalBib.bib:3208"; searchterm:"FramaC%202019n%2C%20"; spellcheck:"false"}
(n.d.-c). Frama-C.&nbsp;Retrieved February 1, 2019, from <https://frama-c.com/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wikibook_latex_nodate"; cite-authors:"2019x"; cite-authors-long:"2019x"; cite-label:"n.d.-d"; caption:"LaTeX - Wikibooks, open books for an open world&nl;2019x, "; data-line:"FormalBib.bib:3101"; searchterm:"LaTeX%20%20Wikibooks%2C%20open%20books%20for%20an%20open%20world%202019x%2C%20"; spellcheck:"false"}
(n.d.-d). LaTeX - Wikibooks, open books for an open world. Retrieved February 1, 2019, from <https://en.wikibooks.org/wiki/LaTeX>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_msc2010_nodate"; cite-authors:"2019ac"; cite-authors-long:"2019ac"; cite-label:"n.d.-e"; caption:"MSC2010 database&nl;2019ac, "; data-line:"FormalBib.bib:3281"; searchterm:"MSC2010%20database%202019ac%2C%20"; spellcheck:"false"}
(n.d.-e). MSC2010 database. Retrieved February 1, 2019, from <https://mathscinet.ams.org/msc/msc2010.html>{.bib-url}
~ end bibitem

~ end bibliography
