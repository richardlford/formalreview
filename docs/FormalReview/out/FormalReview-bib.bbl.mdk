~ begin bibliography { .bib-natural; cite-style:"natural:'(',')','; '" ; caption:"430" ; data-style:"author-date" ; data-hanging-indent:"2"; data-style:'apa';  }
~ begin bibitem {id:"absint_compcert_nodate"; cite-year:"2019"; cite-authors:"Absint"; cite-authors-long:"Absint"; cite-label:"Absint, n.d."; caption:"CompCert - Publications&nl;Absint, 2019"; data-line:"FormalReview.bib:771"; searchterm:"CompCert%20%20Publications%20Absint%2C%202019"; spellcheck:"false"}
Absint. (n.d.). CompCert - Publications. Retrieved January 31, 2019, from <http://compcert.inria.fr/publi.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_acsl_nodate"; cite-authors:"2020b"; cite-authors-long:"2020b"; cite-label:"\&ldquo;ACSL by Example.GitHub,\&rdquo; n.d."; caption:"ACSL by Example.GitHub&nl;2020b, "; data-line:"FormalReview.bib:5126"; searchterm:"ACSL%20by%20Example.GitHub%202020b%2C%20"; spellcheck:"false"}
ACSL by Example.GitHub. (n.d.). Retrieved January 10, 2020, from <https://github.com/fraunhoferfokus/acsl-by-example>{.bib-url}
~ end bibitem

~ begin bibitem {id:"adamek_abstract_2004"; cite-year:"2004"; cite-authors:"Adamek et al."; cite-authors-long:"Adamek, Herrlich, Strecker, and Schubert"; cite-label:"Adamek, Herrlich, Strecker, \& Schubert, 2004"; caption:"Abstract and Concrete Categories - The Joy of Cats&nl;Adamek, Herrlich, Strecker, and Schubert, 2004"; data-line:"FormalReview.bib:5748"; searchterm:"Abstract%20and%20Concrete%20Categories%20%20The%20Joy%20of%20Cats%20Adamek%2C%20Herrlich%2C%20Strecker%2C%20and%20Schubert%2C%202004"; spellcheck:"false"}
Adamek, J., Herrlich, H., Strecker, G.&nbsp;E., & Schubert, C.&nbsp;(2004). Abstract and Concrete Categories - The Joy of Cats, 524. Retrieved from <http://katmat.math.uni-bremen.de/acc/acc.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"adams_common_2015"; cite-year:"2015"; cite-authors:"Adams"; cite-authors-long:"Adams"; cite-label:"Adams, 2015"; caption:"The Common HOL Platform&nl;Adams, 2015"; data-line:"FormalReview.bib:2334"; searchterm:"The%20Common%20HOL%20Platform%20Adams%2C%202015"; spellcheck:"false"}
Adams, M.&nbsp;(2015). The Common HOL Platform. _Electronic Proceedings in Theoretical Computer Science_, _186_, 42–56. https://doi.org/[10.4204/EPTCS.186.6](https://dx.doi.org/10.4204/EPTCS.186.6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"adewale_implementing_nodate"; cite-year:"2019"; cite-authors:"Adewale"; cite-authors-long:"Adewale"; cite-label:"Adewale, n.d."; caption:"Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University&nl;Adewale, 2019"; data-line:"FormalReview.bib:1362"; searchterm:"Implementing%20a%20highperformance%20keyvalue%20store%20using%20a%20trie%20of%20B%2BTrees%20with%20cursors%20%26bar%3B%20Computer%20Science%20Department%20at%20Princeton%20University%20Adewale%2C%202019"; spellcheck:"false"}
Adewale, O.&nbsp;(n.d.). Implementing a high-performance key-value store using a trie of B+-Trees with cursors &bar; Computer Science Department at Princeton University. Retrieved February 1, 2019, from <https://www.cs.princeton.edu/research/techreps/TR-004-18>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ahman_recalling_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy"; cite-label:"Ahman, Fournet, et al., 2017"; caption:"Recalling a Witness: Foundations and Applications of Monotonic State&nl;Ahman, Fournet, Hriţcu, Maillard, Rastogi, and Swamy, 2017"; data-line:"FormalReview.bib:1989"; searchterm:"Recalling%20a%20Witness%3A%20Foundations%20and%20Applications%20of%20Monotonic%20State%20Ahman%2C%20Fournet%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Rastogi%2C%20and%20Swamy%2C%202017"; spellcheck:"false"}
Ahman, D., Fournet, C., Hriţcu, C., Maillard, K., Rastogi, A., & Swamy, N.&nbsp;(2017). Recalling a Witness: Foundations and Applications of Monotonic State. _Proc. ACM Program. Lang._, _2_, 65:1–65:30. https://doi.org/[10.1145/3158153](https://dx.doi.org/10.1145/3158153){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahman_dijkstra_2017"; cite-year:"2017"; cite-authors:"Ahman et al."; cite-authors-long:"Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al."; cite-label:"Ahman, Hriţcu, et al., 2017"; caption:"Dijkstra Monads for Free&nl;Ahman, Hriţcu, Maillard, Martínez, Plotkin, Protzenko, et al., 2017"; data-line:"FormalReview.bib:1962"; searchterm:"Dijkstra%20Monads%20for%20Free%20Ahman%2C%20Hri%C5%A3cu%2C%20Maillard%2C%20Mart%C3%ADnez%2C%20Plotkin%2C%20Protzenko%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Ahman, D., Hriţcu, C., Maillard, K., Martínez, G., Plotkin, G., Protzenko, J., … Swamy, N.&nbsp;(2017). Dijkstra Monads for Free. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 515–529). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009878](https://dx.doi.org/10.1145/3009837.3009878){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ahrendt_deductive_nodate"; cite-year:"2019"; cite-authors:"Ahrendt"; cite-authors-long:"Ahrendt"; cite-label:"Ahrendt, n.d."; caption:"Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project&nl;Ahrendt, 2019"; data-line:"FormalReview.bib:1044"; searchterm:"Deductive%20Software%20Verification%20%E2%80%93%20The%20KeY%20BookFrom%20Theory%20to%20Practice%20%E2%80%93%20The%20KeY%20Project%20Ahrendt%2C%202019"; spellcheck:"false"}
Ahrendt, W.&nbsp;(n.d.). Deductive Software Verification – The KeY BookFrom Theory to Practice – The KeY Project. Retrieved January 31, 2019, from <https://www.key-project.org/thebook2/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_verifying_2007"; cite-year:"2007"; cite-authors:"Ahrendt et al."; cite-authors-long:"Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt"; cite-label:"Ahrendt, Beckert, Hähnle, Rümmer, \& Schmitt, 2007"; caption:"Verifying Object-Oriented Programs with KeY: A Tutorial&nl;Ahrendt, Beckert, Hähnle, Rümmer, and Schmitt, 2007"; data-line:"FormalReview.bib:915"; searchterm:"Verifying%20ObjectOriented%20Programs%20with%20KeY%3A%20A%20Tutorial%20Ahrendt%2C%20Beckert%2C%20H%C3%A4hnle%2C%20R%C3%BCmmer%2C%20and%20Schmitt%2C%202007"; spellcheck:"false"}
Ahrendt, W., Beckert, B., Hähnle, R., Rümmer, P., & Schmitt, P.&nbsp;H.&nbsp;(2007). Verifying Object-Oriented Programs with KeY: A Tutorial. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (Vol. 4709, pp. 70–101). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-74792-5_4](https://dx.doi.org/10.1007/978-3-540-74792-5_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"alana_reference_2018"; cite-year:"2018"; cite-authors:"Alaña et al."; cite-authors-long:"Alaña, Herrero, Urueña, Macioszek, and Silveira"; cite-label:"Alaña, Herrero, Urueña, Macioszek, \& Silveira, 2018"; caption:"A reference architecture for space systems&nl;Alaña, Herrero, Urueña, Macioszek, and Silveira, 2018"; data-line:"FormalReview.bib:4740"; searchterm:"A%20reference%20architecture%20for%20space%20systems%20Ala%C3%B1a%2C%20Herrero%2C%20Urue%C3%B1a%2C%20Macioszek%2C%20and%20Silveira%2C%202018"; spellcheck:"false"}
Alaña, E., Herrero, J., Urueña, S., Macioszek, K., & Silveira, D.&nbsp;(2018). A reference architecture for space systems. In _Proceedings of the 12th European Conference on Software Architecture Companion Proceedings - ECSA ’18_ (pp. 1–2). Madrid, Spain: ACM Press. https://doi.org/[10.1145/3241403.3241416](https://dx.doi.org/10.1145/3241403.3241416){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_learning_2019"; cite-authors:"2019c"; cite-authors-long:"2019c"; cite-label:"\_A Learning Environment for Theorem Proving with the Coq proof assistant\_, 2019"; caption:"A Learning Environment for Theorem Proving with the Coq proof assistant: princeton-vl/CoqGym&nl;2019c, "; data-line:"FormalReview.bib:3467"; searchterm:"A%20Learning%20Environment%20for%20Theorem%20Proving%20with%20the%20Coq%20proof%20assistant%3A%20princetonvl%2FCoqGym%202019c%2C%20"; spellcheck:"false"}
_A Learning Environment for Theorem Proving with the Coq proof assistant: princeton-vl/CoqGym_. (2019). Princeton Vision &amp; Learning Lab. Retrieved from <https://github.com/princeton-vl/CoqGym>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_algebraic_nodate"; cite-authors:"2019c"; cite-authors-long:"2019c"; cite-label:"\&ldquo;Algebraic Specification of Stack Effects for Forth Programs.ResearchGate,\&rdquo; n.d."; caption:"Algebraic Specification of Stack Effects for Forth Programs.ResearchGate&nl;2019c, "; data-line:"FormalReview.bib:3788"; searchterm:"Algebraic%20Specification%20of%20Stack%20Effects%20for%20Forth%20Programs.ResearchGate%202019c%2C%20"; spellcheck:"false"}
Algebraic Specification of Stack Effects for Forth Programs.ResearchGate. (n.d.). Retrieved May 26, 2019, from <https://www.researchgate.net/publication/269399251_Algebraic_Specification_of_Stack_Effects_for_Forth_Programs>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_alloy_nodate"; cite-authors:"2020d"; cite-authors-long:"2020d"; cite-label:"\&ldquo;Alloy - software modeling,\&rdquo; n.d."; caption:"Alloy - software modeling&nl;2020d, "; data-line:"FormalReview.bib:5740"; searchterm:"Alloy%20%20software%20modeling%202020d%2C%20"; spellcheck:"false"}
Alloy - software modeling. (n.d.). Retrieved January 15, 2020, from <http://alloytools.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"altenkirch_quotient_2018"; cite-year:"2018"; cite-authors:"Altenkirch et al."; cite-authors-long:"Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg"; cite-label:"Altenkirch, Capriotti, Dijkstra, Kraus, \& Forsberg, 2018"; caption:"Quotient inductive-inductive types&nl;Altenkirch, Capriotti, Dijkstra, Kraus, and Forsberg, 2018"; data-line:"FormalReview.bib:207"; searchterm:"Quotient%20inductiveinductive%20types%20Altenkirch%2C%20Capriotti%2C%20Dijkstra%2C%20Kraus%2C%20and%20Forsberg%2C%202018"; spellcheck:"false"}
Altenkirch, T., Capriotti, P., Dijkstra, G., Kraus, N., & Forsberg, F.&nbsp;N.&nbsp;(2018). Quotient inductive-inductive types. _arXiv:1612.02346 \[cs\]_, _10803_, 293–310. https://doi.org/[10.1007/978-3-319-89366-2_16](https://dx.doi.org/10.1007/978-3-319-89366-2_16){.bib-doi}
~ end bibitem

~ begin bibitem {id:"altenkirch_why_nodate"; cite-year:"n.d."; cite-authors:"Altenkirch et al."; cite-authors-long:"Altenkirch, McBride, and McKinna"; cite-label:"Altenkirch, McBride, \& McKinna, n.d."; caption:"Why Dependent Types Matter&nl;Altenkirch, McBride, and McKinna, n.d."; data-line:"FormalReview.bib:3421"; searchterm:"Why%20Dependent%20Types%20Matter%20Altenkirch%2C%20McBride%2C%20and%20McKinna%2C%20n.d."; spellcheck:"false"}
Altenkirch, T., McBride, C., & McKinna, J.&nbsp;(n.d.). Why Dependent Types Matter, 21.
~ end bibitem

~ begin bibitem {id:"amin_computing_2016"; cite-year:"2016"; cite-authors:"Amin et al."; cite-authors-long:"Amin, Leino, and Rompf"; cite-label:"Amin, Leino, \& Rompf, 2016"; caption:"Computing with an SMT Solver&nl;Amin, Leino, and Rompf, 2016"; data-line:"FormalReview.bib:1190"; searchterm:"Computing%20with%20an%20SMT%20Solver%20Amin%2C%20Leino%2C%20and%20Rompf%2C%202016"; spellcheck:"false"}
Amin, N., Leino, R., & Rompf, T.&nbsp;(2016). Computing with an SMT Solver, _8570_. Retrieved from <https://www.microsoft.com/en-us/research/publication/computing-smt-solver/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ammarguellat_control-flow_1992"; cite-year:"1992"; cite-authors:"Ammarguellat"; cite-authors-long:"Ammarguellat"; cite-label:"Ammarguellat, 1992"; caption:"A control-flow normalization algorithm and its complexity&nl;Ammarguellat, 1992"; data-line:"FormalReview.bib:4186"; searchterm:"A%20controlflow%20normalization%20algorithm%20and%20its%20complexity%20Ammarguellat%2C%201992"; spellcheck:"false"}
Ammarguellat, Z.&nbsp;(1992). A control-flow normalization algorithm and its complexity. _IEEE Transactions on Software Engineering_, _18_(3), 237–251. https://doi.org/[10.1109/32.126773](https://dx.doi.org/10.1109/32.126773){.bib-doi}
~ end bibitem

~ begin bibitem {id:"amorim_verified_2013"; cite-year:"2013"; cite-authors:"Amorim et al."; cite-authors-long:"Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al."; cite-label:"Amorim et al., 2013"; caption:"A Verified Information-Flow Architecture (Long version)&nl;Amorim, Collins, DeHon, Demange, Hritcu, Pichardie, et al., 2013"; data-line:"FormalReview.bib:3042"; searchterm:"A%20Verified%20InformationFlow%20Architecture%20Long%20version%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hritcu%2C%20Pichardie%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Amorim, A.&nbsp;A.&nbsp;de, Collins, N., DeHon, A., Demange, D., Hritcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2013). _A Verified Information-Flow Architecture (Long version)_.
~ end bibitem

~ begin bibitem {id:"anand_towards_nodate"; cite-year:"2019"; cite-authors:"Anand et al."; cite-authors-long:"Anand, Boulier, Cohen, Sozeau, and Tabareau"; cite-label:"Anand, Boulier, Cohen, Sozeau, \& Tabareau, n.d."; caption:"Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink&nl;Anand, Boulier, Cohen, Sozeau, and Tabareau, 2019"; data-line:"FormalReview.bib:1682"; searchterm:"Towards%20Certified%20MetaProgramming%20with%20Typed%20TemplateCoq%20%26bar%3B%20SpringerLink%20Anand%2C%20Boulier%2C%20Cohen%2C%20Sozeau%2C%20and%20Tabareau%2C%202019"; spellcheck:"false"}
Anand, A., Boulier, S., Cohen, C., Sozeau, M., & Tabareau, N.&nbsp;(n.d.). Towards Certified Meta-Programming with Typed Template-Coq &bar; SpringerLink. Retrieved February 1, 2019, from <https://link.springer.com/chapter/10.1007%2F978-3-319-94821-8_2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"urban_roscoq:_2015"; cite-year:"2015"; cite-authors:"Anand and Knepper"; cite-authors-long:"Anand and Knepper"; cite-label:"Anand \& Knepper, 2015"; caption:"ROSCoq: Robots Powered by Constructive Reals&nl;Anand and Knepper, 2015"; data-line:"FormalReview.bib:3193"; searchterm:"ROSCoq%3A%20Robots%20Powered%20by%20Constructive%20Reals%20Anand%20and%20Knepper%2C%202015"; spellcheck:"false"}
Anand, A., & Knepper, R.&nbsp;(2015). ROSCoq: Robots Powered by Constructive Reals. In C.&nbsp;Urban & X.&nbsp;Zhang (Eds.), _Interactive Theorem Proving_ (Vol. 9236, pp. 34–50). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-22102-1_3](https://dx.doi.org/10.1007/978-3-319-22102-1_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"anand_typed_nodate"; cite-year:"n.d."; cite-authors:"Anand et al."; cite-authors-long:"Anand, Tabareau, and Sozeau"; cite-label:"Anand, Tabareau, \& Sozeau, n.d."; caption:"Typed Template Coq&nl;Anand, Tabareau, and Sozeau, n.d."; data-line:"FormalReview.bib:1337"; searchterm:"Typed%20Template%20Coq%20Anand%2C%20Tabareau%2C%20and%20Sozeau%2C%20n.d."; spellcheck:"false"}
Anand, A., Tabareau, S.&nbsp;B.&nbsp;N., & Sozeau, M.&nbsp;(n.d.). Typed Template Coq, 2.
~ end bibitem

~ begin bibitem {id:"andrew_oracle_2008"; cite-year:"2008"; cite-authors:"Andrew"; cite-authors-long:"Andrew"; cite-label:"Andrew, 2008"; caption:"Oracle Semantics Aquinas Hobor&nl;Andrew, 2008"; data-line:"FormalReview.bib:3050"; searchterm:"Oracle%20Semantics%20Aquinas%20Hobor%20Andrew%2C%202008"; spellcheck:"false"}
Andrew, A.&nbsp;(2008). _Oracle Semantics Aquinas Hobor_.
~ end bibitem

~ begin bibitem {id:"appel_andrew_w._position_2017"; cite-year:"2017"; cite-authors:"Appel Andrew W.&nbsp;et al."; cite-authors-long:"Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve"; cite-label:"Appel Andrew W. et al., 2017"; caption:"Position paper: the science of deep specification&nl;Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, and Zdancewic Steve, 2017"; data-line:"FormalReview.bib:1603"; searchterm:"Position%20paper%3A%20the%20science%20of%20deep%20specification%20Appel%20Andrew%20W.%2C%20Beringer%20Lennart%2C%20Chlipala%20Adam%2C%20Pierce%20Benjamin%20C.%2C%20Shao%20Zhong%2C%20Weirich%20Stephanie%2C%20and%20Zdancewic%20Steve%2C%202017"; spellcheck:"false"}
Appel Andrew W., Beringer Lennart, Chlipala Adam, Pierce Benjamin C., Shao Zhong, Weirich Stephanie, & Zdancewic Steve. (2017). Position paper: the science of deep specification. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20160331. https://doi.org/[10.1098/rsta.2016.0331](https://dx.doi.org/10.1098/rsta.2016.0331){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jouannaud_verismall:_2011"; cite-year:"2011"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2011"; caption:"VeriSmall: Verified Smallfoot Shape Analysis&nl;Appel, 2011"; data-line:"FormalReview.bib:331"; searchterm:"VeriSmall%3A%20Verified%20Smallfoot%20Shape%20Analysis%20Appel%2C%202011"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2011). VeriSmall: Verified Smallfoot Shape Analysis. In J.-P.&nbsp;Jouannaud & Z.&nbsp;Shao (Eds.), _Certified Programs and Proofs_ (Vol. 7086, pp. 231–246). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-25379-9_18](https://dx.doi.org/10.1007/978-3-642-25379-9_18){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verified_2012"; cite-year:"2012"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2012"; caption:"Verified Software Toolchain&nl;Appel, 2012"; data-line:"FormalReview.bib:367"; searchterm:"Verified%20Software%20Toolchain%20Appel%2C%202012"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2012). Verified Software Toolchain. In _Proceedings of the 4th International Conference on NASA Formal Methods_ (pp. 2–2). Berlin, Heidelberg: Springer-Verlag. https://doi.org/[10.1007/978-3-642-28891-3_2](https://dx.doi.org/10.1007/978-3-642-28891-3_2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_verification_2015"; cite-year:"2015"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2015"; caption:"Verification of a Cryptographic Primitive: SHA-256&nl;Appel, 2015"; data-line:"FormalReview.bib:313"; searchterm:"Verification%20of%20a%20Cryptographic%20Primitive%3A%20SHA256%20Appel%2C%202015"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2015). Verification of a Cryptographic Primitive: SHA-256. _ACM Trans. Program. Lang. Syst._, _37_(2), 7:1–7:31. https://doi.org/[10.1145/2701415](https://dx.doi.org/10.1145/2701415){.bib-doi}
~ end bibitem

~ begin bibitem {id:"appel_deepspecdb_2019"; cite-year:"2019"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, 2019"; caption:"DeepSpecDB - github&nl;Appel, 2019"; data-line:"FormalReview.bib:1381"; searchterm:"DeepSpecDB%20%20github%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(2019). _DeepSpecDB - github_. PrincetonUniversity. Retrieved from <https://github.com/PrincetonUniversity/DeepSpecDB>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_certicoq:_nodate"; cite-year:"2019"; cite-authors:"Appel"; cite-authors-long:"Appel"; cite-label:"Appel, n.d."; caption:"CertiCoq: A verified compiler for Coq - POPL 2017&nl;Appel, 2019"; data-line:"FormalReview.bib:1354"; searchterm:"CertiCoq%3A%20A%20verified%20compiler%20for%20Coq%20%20POPL%202017%20Appel%2C%202019"; spellcheck:"false"}
Appel, A.&nbsp;W.&nbsp;(n.d.). CertiCoq: A verified compiler for Coq - POPL 2017. Retrieved February 1, 2019, from <https://popl17.sigplan.org/event/main-certicoq-a-verified-compiler-for-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"appel_program_2014"; cite-year:"2014b"; cite-authors:"Appel et al."; cite-authors-long:"Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al."; cite-label:"Appel et al., 2014a"; caption:"Program Logics for Certified Compilers&nl;Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al., 2014b"; data-line:"FormalReview.bib:5770"; searchterm:"Program%20Logics%20for%20Certified%20Compilers%20Appel%2C%20Dockins%2C%20Hobor%2C%20Beringer%2C%20Dodds%2C%20Stewart%2C%20et%20al.%2C%202014b"; spellcheck:"false"}
Appel, A.&nbsp;W., Dockins, R., Hobor, A., Beringer, L., Dodds, J., Stewart, G., … Leroy, X.&nbsp;(2014a). _Program Logics for Certified Compilers_ (1 edition). Cambridge University Press.
~ end bibitem

~ begin bibitem {id:"appel_verifiabble_2014"; cite-year:"2014a"; cite-authors:"Appel et al."; cite-authors-long:"Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al."; cite-label:"Appel et al., 2014b"; caption:"Verifiabble C, Version 2.2&nl;Appel, Dockins, Hobor, Beringer, Dodds, Stewart, et al., 2014a"; data-line:"FormalReview.bib:299"; searchterm:"Verifiabble%20C%2C%20Version%202.2%20Appel%2C%20Dockins%2C%20Hobor%2C%20Beringer%2C%20Dodds%2C%20Stewart%2C%20et%20al.%2C%202014a"; spellcheck:"false"}
Appel, A.&nbsp;W., Dockins, R., Hobor, A., Beringer, L., Dodds, J., Stewart, G., … Leroy, X.&nbsp;(2014b). _Verifiabble C, Version 2.2_. Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9781107256552](https://dx.doi.org/10.1017/CBO9781107256552){.bib-doi}
~ end bibitem

~ begin bibitem {id:"arias_jscoq:_2017"; cite-year:"2017"; cite-authors:"Arias et al."; cite-authors-long:"Arias, Pin, and Jouvelot"; cite-label:"Arias, Pin, \& Jouvelot, 2017"; caption:"jsCoq: Towards Hybrid Theorem Proving Interfaces&nl;Arias, Pin, and Jouvelot, 2017"; data-line:"FormalReview.bib:2534"; searchterm:"jsCoq%3A%20Towards%20Hybrid%20Theorem%20Proving%20Interfaces%20Arias%2C%20Pin%2C%20and%20Jouvelot%2C%202017"; spellcheck:"false"}
Arias, E.&nbsp;J.&nbsp;G., Pin, B., & Jouvelot, P.&nbsp;(2017). jsCoq: Towards Hybrid Theorem Proving Interfaces. _Electronic Proceedings in Theoretical Computer Science_, _239_, 15–27. https://doi.org/[10.4204/EPTCS.239.2](https://dx.doi.org/10.4204/EPTCS.239.2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"armstrong_isa_2019"; cite-year:"2019"; cite-authors:"Armstrong et al."; cite-authors-long:"Armstrong, Bauereiss, Campbell, Reid, Gray, Norton, et al."; cite-label:"Armstrong et al., 2019"; caption:"ISA Semantics for ARMv8-a, RISC-v, and CHERI-MIPS&nl;Armstrong, Bauereiss, Campbell, Reid, Gray, Norton, et al., 2019"; data-line:"FormalReview.bib:3269"; searchterm:"ISA%20Semantics%20for%20ARMv8a%2C%20RISCv%2C%20and%20CHERIMIPS%20Armstrong%2C%20Bauereiss%2C%20Campbell%2C%20Reid%2C%20Gray%2C%20Norton%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Armstrong, A., Bauereiss, T., Campbell, B., Reid, A., Gray, K.&nbsp;E., Norton, R.&nbsp;M., … Sewell, P.&nbsp;(2019). ISA Semantics for ARMv8-a, RISC-v, and CHERI-MIPS.&nbsp;_Proc. ACM Program. Lang._, _3_, 71:1–71:31. https://doi.org/[10.1145/3290384](https://dx.doi.org/10.1145/3290384){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jajodia_termination-insensitive_2008"; cite-year:"2008"; cite-authors:"Askarov et al."; cite-authors-long:"Askarov, Hunt, Sabelfeld, and Sands"; cite-label:"Askarov, Hunt, Sabelfeld, \& Sands, 2008"; caption:"Termination-Insensitive Noninterference Leaks More Than Just a Bit&nl;Askarov, Hunt, Sabelfeld, and Sands, 2008"; data-line:"FormalReview.bib:3676"; searchterm:"TerminationInsensitive%20Noninterference%20Leaks%20More%20Than%20Just%20a%20Bit%20Askarov%2C%20Hunt%2C%20Sabelfeld%2C%20and%20Sands%2C%202008"; spellcheck:"false"}
Askarov, A., Hunt, S., Sabelfeld, A., & Sands, D.&nbsp;(2008). Termination-Insensitive Noninterference Leaks More Than Just a Bit. In S.&nbsp;Jajodia & J.&nbsp;Lopez (Eds.), _Computer Security - ESORICS 2008_ (Vol. 5283, pp. 333–348). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-88313-5_22](https://dx.doi.org/10.1007/978-3-540-88313-5_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"assaf_dedukti_nodate"; cite-year:"n.d."; cite-authors:"Assaf et al."; cite-authors-long:"Assaf, Burel, Cauderlier, Dowek, Dubois, Gilbert, et al."; cite-label:"Assaf et al., n.d."; caption:"Dedukti: a Logical Framework based on the λΠ-Calculus Modulo Theory&nl;Assaf, Burel, Cauderlier, Dowek, Dubois, Gilbert, et al., n.d."; data-line:"FormalReview.bib:5491"; searchterm:"Dedukti%3A%20a%20Logical%20Framework%20based%20on%20the%20%CE%BB%CE%A0Calculus%20Modulo%20Theory%20Assaf%2C%20Burel%2C%20Cauderlier%2C%20Dowek%2C%20Dubois%2C%20Gilbert%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Assaf, A., Burel, G., Cauderlier, R., Dowek, G., Dubois, C., Gilbert, F., … Saillard, R.&nbsp;(n.d.). Dedukti: a Logical Framework based on the λΠ-Calculus Modulo Theory, 36.
~ end bibitem

~ begin bibitem {id:"avigad_data_2019"; cite-year:"2019"; cite-authors:"Avigad et al."; cite-authors-long:"Avigad, Carneiro, and Hudon"; cite-label:"Avigad, Carneiro, \& Hudon, 2019"; caption:"Data Types as Quotients of Polynomial Functors&nl;Avigad, Carneiro, and Hudon, 2019"; data-line:"FormalReview.bib:5233"; searchterm:"Data%20Types%20as%20Quotients%20of%20Polynomial%20Functors%20Avigad%2C%20Carneiro%2C%20and%20Hudon%2C%202019"; spellcheck:"false"}
Avigad, J., Carneiro, M., & Hudon, S.&nbsp;(2019). Data Types as Quotients of Polynomial Functors. _Schloss Dagstuhl - Leibniz-Zentrum Fuer Informatik GmbH, Wadern/Saarbruecken, Germany_. https://doi.org/[10.4230/lipics.itp.2019.6](https://dx.doi.org/10.4230/lipics.itp.2019.6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"aydemir_engineering_nodate"; cite-year:"n.d."; cite-authors:"Aydemir et al."; cite-authors-long:"Aydemir, Chargueraud, Pierce, Pollack, and Weirich"; cite-label:"Aydemir, Chargueraud, Pierce, Pollack, \& Weirich, n.d."; caption:"Engineering Formal Metatheory&nl;Aydemir, Chargueraud, Pierce, Pollack, and Weirich, n.d."; data-line:"FormalReview.bib:5537"; searchterm:"Engineering%20Formal%20Metatheory%20Aydemir%2C%20Chargueraud%2C%20Pierce%2C%20Pollack%2C%20and%20Weirich%2C%20n.d."; spellcheck:"false"}
Aydemir, B., Chargueraud, A., Pierce, B.&nbsp;C., Pollack, R., & Weirich, S.&nbsp;(n.d.). Engineering Formal Metatheory, 13.
~ end bibitem

~ begin bibitem {id:"azevedo_de_amorim_verified_2014"; cite-year:"2014"; cite-authors:"Azevedo de Amorim et al."; cite-authors-long:"Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al."; cite-label:"Azevedo de Amorim et al., 2014"; caption:"A Verified Information-flow Architecture&nl;Azevedo de Amorim, Collins, DeHon, Demange, Hriţcu, Pichardie, et al., 2014"; data-line:"FormalReview.bib:3024"; searchterm:"A%20Verified%20Informationflow%20Architecture%20Azevedo%20de%20Amorim%2C%20Collins%2C%20DeHon%2C%20Demange%2C%20Hri%C5%A3cu%2C%20Pichardie%2C%20et%20al.%2C%202014"; spellcheck:"false"}
Azevedo de Amorim, A., Collins, N., DeHon, A., Demange, D., Hriţcu, C., Pichardie, D., … Tolmach, A.&nbsp;(2014). A Verified Information-flow Architecture. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 165–178). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535839](https://dx.doi.org/10.1145/2535838.2535839){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bansal_holist:_2019"; cite-year:"2019"; cite-authors:"Bansal et al."; cite-authors-long:"Bansal, Loos, Rabe, Szegedy, and Wilcox"; cite-label:"Bansal, Loos, Rabe, Szegedy, \& Wilcox, 2019"; caption:"HOList: An Environment for Machine Learning of Higher-Order Theorem Proving (extended version)&nl;Bansal, Loos, Rabe, Szegedy, and Wilcox, 2019"; data-line:"FormalReview.bib:3438"; searchterm:"HOList%3A%20An%20Environment%20for%20Machine%20Learning%20of%20HigherOrder%20Theorem%20Proving%20extended%20version%20Bansal%2C%20Loos%2C%20Rabe%2C%20Szegedy%2C%20and%20Wilcox%2C%202019"; spellcheck:"false"}
Bansal, K., Loos, S.&nbsp;M., Rabe, M.&nbsp;N., Szegedy, C., & Wilcox, S.&nbsp;(2019). HOList: An Environment for Machine Learning of Higher-Order Theorem Proving (extended version). _arXiv:1904.03241 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1904.03241](http://arxiv.org/abs/1904.03241){.bib-url}
~ end bibitem

~ begin bibitem {id:"bardin_bringing_2019"; cite-year:"2019"; cite-authors:"Bardin et al."; cite-authors-long:"Bardin, Bjørner, and Cadar"; cite-label:"Bardin, Bjørner, \& Cadar, 2019"; caption:"Bringing CP, SAT and SMT together: Next Challenges in Constraint Solving (Dagstuhl Seminar 19062)&nl;Bardin, Bjørner, and Cadar, 2019"; data-line:"FormalReview.bib:4320"; searchterm:"Bringing%20CP%2C%20SAT%20and%20SMT%20together%3A%20Next%20Challenges%20in%20Constraint%20Solving%20Dagstuhl%20Seminar%2019062%20Bardin%2C%20Bj%C3%B8rner%2C%20and%20Cadar%2C%202019"; spellcheck:"false"}
Bardin, S., Bjørner, N., & Cadar, C.&nbsp;(2019). Bringing CP, SAT and SMT together: Next Challenges in Constraint Solving (Dagstuhl Seminar 19062). _Dagstuhl Reports_, _9_(2), 27–47. https://doi.org/[10.4230/DagRep.9.2.27](https://dx.doi.org/10.4230/DagRep.9.2.27){.bib-doi}
~ end bibitem

~ begin bibitem {id:"barras_semantical_nodate"; cite-year:"n.d."; cite-authors:"Barras"; cite-authors-long:"Barras"; cite-label:"Barras, n.d."; caption:"Semantical Investigations in Intuitionistic Set Theory and Type Theories with Inductive Families&nl;Barras, n.d."; data-line:"FormalReview.bib:4252"; searchterm:"Semantical%20Investigations%20in%20Intuitionistic%20Set%20Theory%20and%20Type%20Theories%20with%20Inductive%20Families%20Barras%2C%20n.d."; spellcheck:"false"}
Barras, B.&nbsp;(n.d.). Semantical Investigations in Intuitionistic Set Theory and Type Theories with Inductive Families, 170.
~ end bibitem

~ begin bibitem {id:"barriere_vst_nodate"; cite-year:"n.d."; cite-authors:"Barriere and Appel"; cite-authors-long:"Barriere and Appel"; cite-label:"Barriere \& Appel, n.d."; caption:"VST Veriﬁcation of B+Trees with Cursors&nl;Barriere and Appel, n.d."; data-line:"FormalReview.bib:1372"; searchterm:"VST%20Veri%EF%AC%81cation%20of%20B%2BTrees%20with%20Cursors%20Barriere%20and%20Appel%2C%20n.d."; spellcheck:"false"}
Barriere, A., & Appel, A.&nbsp;(n.d.). VST Veriﬁcation of B+Trees with Cursors, 19.
~ end bibitem

~ begin bibitem {id:"bate_fundamentals_1971"; cite-year:"1971"; cite-authors:"Bate et al."; cite-authors-long:"Bate, Mueller, and White"; cite-label:"Bate, Mueller, \& White, 1971"; caption:"Fundamentals of astrodynamics&nl;Bate, Mueller, and White, 1971"; data-line:"FormalReview.bib:1742"; searchterm:"Fundamentals%20of%20astrodynamics%20Bate%2C%20Mueller%2C%20and%20White%2C%201971"; spellcheck:"false"}
Bate, R.&nbsp;R., Mueller, D.&nbsp;D., & White, J.&nbsp;E.&nbsp;(1971). _Fundamentals of astrodynamics_. New York: Dover Publications.
~ end bibitem

~ begin bibitem {id:"batty_mark_compositional_2017"; cite-year:"2017"; cite-authors:"Batty Mark"; cite-authors-long:"Batty Mark"; cite-label:"Batty Mark, 2017"; caption:"Compositional relaxed concurrency&nl;Batty Mark, 2017"; data-line:"FormalReview.bib:1588"; searchterm:"Compositional%20relaxed%20concurrency%20Batty%20Mark%2C%202017"; spellcheck:"false"}
Batty Mark. (2017). Compositional relaxed concurrency. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150406. https://doi.org/[10.1098/rsta.2015.0406](https://dx.doi.org/10.1098/rsta.2015.0406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"beckert_verification_2006"; cite-year:"2006"; cite-authors:"Beckert et al."; cite-authors-long:"Beckert et al."; cite-label:"Beckert, Hähnle, \& Schmitt, 2006"; caption:"Verification of Object-Oriented Software. The KeY Approach&nl;Beckert et al., 2006"; data-line:"FormalReview.bib:1011"; searchterm:"Verification%20of%20ObjectOriented%20Software.%20The%20KeY%20Approach%20Beckert%20et%20al.%2C%202006"; spellcheck:"false"}
Beckert, B., Hähnle, R., & Schmitt, P.&nbsp;H.&nbsp;(Eds.). (2006). _Verification of Object-Oriented Software. The KeY Approach_ (Vol. 4334). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-69061-0](https://dx.doi.org/10.1007/978-3-540-69061-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_2017"; cite-year:"2017"; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, 2017"; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs&nl;Bedford, 2017"; data-line:"FormalReview.bib:446"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20Bedford%2C%202017"; spellcheck:"false"}
Bedford, A.&nbsp;(2017). Coqatoo: Generating Natural Language Versions of Coq Proofs. _arXiv:1712.03894 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1712.03894](http://arxiv.org/abs/1712.03894){.bib-url}
~ end bibitem

~ begin bibitem {id:"bedford_coqatoo:_nodate"; cite-year:"n.d."; cite-authors:"Bedford"; cite-authors-long:"Bedford"; cite-label:"Bedford, n.d."; caption:"Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides&nl;Bedford, n.d."; data-line:"FormalReview.bib:438"; searchterm:"Coqatoo%3A%20Generating%20Natural%20Language%20Versions%20of%20Coq%20Proofs%20%20Slides%20Bedford%2C%20n.d."; spellcheck:"false"}
Bedford, A.&nbsp;(n.d.). Coqatoo: Generating Natural Language Versions of Coq Proofs - Slides, 16.
~ end bibitem

~ begin bibitem {id:"berdine_smallfoot:_2006"; cite-year:"2006"; cite-authors:"Berdine et al."; cite-authors-long:"Berdine, Calcagno, and O’Hearn"; cite-label:"Berdine, Calcagno, \& O’Hearn, 2006"; caption:"Smallfoot: Modular Automatic Assertion Checking with Separation Logic&nl;Berdine, Calcagno, and O’Hearn, 2006"; data-line:"FormalReview.bib:3058"; searchterm:"Smallfoot%3A%20Modular%20Automatic%20Assertion%20Checking%20with%20Separation%20Logic%20Berdine%2C%20Calcagno%2C%20and%20O%E2%80%99Hearn%2C%202006"; spellcheck:"false"}
Berdine, J., Calcagno, C., & O’Hearn, P.&nbsp;W.&nbsp;(2006). Smallfoot: Modular Automatic Assertion Checking with Separation Logic. In F.&nbsp;S.&nbsp;de Boer, M.&nbsp;M.&nbsp;Bonsangue, S.&nbsp;Graf, & W.-P.&nbsp;de Roever (Eds.), _Formal Methods for Components and Objects_ (pp. 115–137). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"hutchison_verified_2014"; cite-year:"2014"; cite-authors:"Beringer et al."; cite-authors-long:"Beringer, Stewart, Dockins, and Appel"; cite-label:"Beringer, Stewart, Dockins, \& Appel, 2014"; caption:"Verified Compilation for Shared-Memory C&nl;Beringer, Stewart, Dockins, and Appel, 2014"; data-line:"FormalReview.bib:279"; searchterm:"Verified%20Compilation%20for%20SharedMemory%20C%20Beringer%2C%20Stewart%2C%20Dockins%2C%20and%20Appel%2C%202014"; spellcheck:"false"}
Beringer, L., Stewart, G., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2014). Verified Compilation for Shared-Memory C.&nbsp;In Z.&nbsp;Shao (Ed.), _Programming Languages and Systems_ (Vol. 8410, pp. 107–127). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-54833-8_7,](https://dx.doi.org/10.1007/978-3-642-54833-8_7,){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bertot_yves_nodate"; cite-year:"2019"; cite-authors:"Bertot"; cite-authors-long:"Bertot"; cite-label:"Bertot, n.d."; caption:"Yves Bertot&nl;Bertot, 2019"; data-line:"FormalReview.bib:827"; searchterm:"Yves%20Bertot%20Bertot%2C%202019"; spellcheck:"false"}
Bertot, Y.&nbsp;(n.d.). Yves Bertot. Retrieved January 31, 2019, from <http://www-sop.inria.fr/members/Yves.Bertot/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bertot_interactive_2004"; cite-year:"2004"; cite-authors:"Bertot and Castéran"; cite-authors-long:"Bertot and Castéran"; cite-label:"Bertot \& Castéran, 2004"; caption:"Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions&nl;Bertot and Castéran, 2004"; data-line:"FormalReview.bib:804"; searchterm:"Interactive%20theorem%20proving%20and%20program%20development%3A%20Coq'Art%3A%20the%20calculus%20of%20inductive%20constructions%20Bertot%20and%20Cast%C3%A9ran%2C%202004"; spellcheck:"false"}
Bertot, Y., & Castéran, P.&nbsp;(2004). _Interactive theorem proving and program development: Coq’Art: the calculus of inductive constructions_. Berlin ; New York: Springer. Retrieved from <http://www.labri.fr/perso/casteran/CoqArt/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"bidmeshki_vericoq:_2015"; cite-year:"2015"; cite-authors:"Bidmeshki and Makris"; cite-authors-long:"Bidmeshki and Makris"; cite-label:"Bidmeshki \& Makris, 2015"; caption:"VeriCoq: A Verilog-to-Coq converter for proof-carrying hardware automation&nl;Bidmeshki and Makris, 2015"; data-line:"FormalReview.bib:3830"; searchterm:"VeriCoq%3A%20A%20VerilogtoCoq%20converter%20for%20proofcarrying%20hardware%20automation%20Bidmeshki%20and%20Makris%2C%202015"; spellcheck:"false"}
Bidmeshki, M.-M., & Makris, Y.&nbsp;(2015). VeriCoq: A Verilog-to-Coq converter for proof-carrying hardware automation. In _2015 IEEE International Symposium on Circuits and Systems (ISCAS)_ (pp. 29–32). Lisbon, Portugal: IEEE.&nbsp;https://doi.org/[10.1109/ISCAS.2015.7168562](https://dx.doi.org/10.1109/ISCAS.2015.7168562){.bib-doi}
~ end bibitem

~ begin bibitem {id:"birkedal_taste_nodate"; cite-year:"n.d."; cite-authors:"Birkedal"; cite-authors-long:"Birkedal"; cite-label:"Birkedal, n.d."; caption:"A Taste of Categorical Logic — Tutorial Notes&nl;Birkedal, n.d."; data-line:"FormalReview.bib:5568"; searchterm:"A%20Taste%20of%20Categorical%20Logic%20%E2%80%94%20Tutorial%20Notes%20Birkedal%2C%20n.d."; spellcheck:"false"}
Birkedal, L.&nbsp;(n.d.). A Taste of Categorical Logic — Tutorial Notes, 41.
~ end bibitem

~ begin bibitem {id:"birkedal_iris_nodate"; cite-year:"2019"; cite-authors:"Birkedal and Bizjak"; cite-authors-long:"Birkedal and Bizjak"; cite-label:"Birkedal \& Bizjak, n.d.-a"; caption:"Iris Tutorial&nl;Birkedal and Bizjak, 2019"; data-line:"FormalReview.bib:2416"; searchterm:"Iris%20Tutorial%20Birkedal%20and%20Bizjak%2C%202019"; spellcheck:"false"}
Birkedal, L., & Bizjak, A.&nbsp;(n.d.-a). Iris Tutorial. Retrieved February 1, 2019, from <https://iris-project.org/tutorial-material.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"birkedal_lecture_nodate"; cite-year:"n.d."; cite-authors:"Birkedal and Bizjak"; cite-authors-long:"Birkedal and Bizjak"; cite-label:"Birkedal \& Bizjak, n.d.-b"; caption:"Lecture Notes on Iris: Higher-Order Concurrent Separation Logic&nl;Birkedal and Bizjak, n.d."; data-line:"FormalReview.bib:5708"; searchterm:"Lecture%20Notes%20on%20Iris%3A%20HigherOrder%20Concurrent%20Separation%20Logic%20Birkedal%20and%20Bizjak%2C%20n.d."; spellcheck:"false"}
Birkedal, L., & Bizjak, A.&nbsp;(n.d.-b). Lecture Notes on Iris: Higher-Order Concurrent Separation Logic, 138.
~ end bibitem

~ begin bibitem {id:"bishop_engineering_2018"; cite-year:"2018"; cite-authors:"Bishop et al."; cite-authors-long:"Bishop, Fairbairn, Mehnert, Norrish, Ridge, Sewell, et al."; cite-label:"Bishop et al., 2018"; caption:"Engineering with Logic: Rigorous Test-Oracle Specification and Validation for TCP/IP and the Sockets API&nl;Bishop, Fairbairn, Mehnert, Norrish, Ridge, Sewell, et al., 2018"; data-line:"FormalReview.bib:3234"; searchterm:"Engineering%20with%20Logic%3A%20Rigorous%20TestOracle%20Specification%20and%20Validation%20for%20TCP%2FIP%20and%20the%20Sockets%20API%20Bishop%2C%20Fairbairn%2C%20Mehnert%2C%20Norrish%2C%20Ridge%2C%20Sewell%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Bishop, S., Fairbairn, M., Mehnert, H., Norrish, M., Ridge, T., Sewell, P., … Wansbrough, K.&nbsp;(2018). Engineering with Logic: Rigorous Test-Oracle Specification and Validation for TCP/IP and the Sockets API.&nbsp;_J.&nbsp;ACM_, _66_(1), 1:1–1:77. https://doi.org/[10.1145/3243650](https://dx.doi.org/10.1145/3243650){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bizjak_iron_2019"; cite-year:"2019"; cite-authors:"Bizjak et al."; cite-authors-long:"Bizjak, Gratzer, Krebbers, and Birkedal"; cite-label:"Bizjak, Gratzer, Krebbers, \& Birkedal, 2019"; caption:"Iron: managing obligations in higher-order concurrent separation logic&nl;Bizjak, Gratzer, Krebbers, and Birkedal, 2019"; data-line:"FormalReview.bib:5716"; searchterm:"Iron%3A%20managing%20obligations%20in%20higherorder%20concurrent%20separation%20logic%20Bizjak%2C%20Gratzer%2C%20Krebbers%2C%20and%20Birkedal%2C%202019"; spellcheck:"false"}
Bizjak, A., Gratzer, D., Krebbers, R., & Birkedal, L.&nbsp;(2019). Iron: managing obligations in higher-order concurrent separation logic. _Proceedings of the ACM on Programming Languages_, _3_, 1–30. https://doi.org/[10.1145/3290378](https://dx.doi.org/10.1145/3290378){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bjorner_manifest_2017"; cite-year:"2017"; cite-authors:"D.&nbsp;Bjørner"; cite-authors-long:"D.&nbsp;Bjørner"; cite-label:"D. Bjørner, 2017"; caption:"Manifest domains: analysis and description&nl;D. Bjørner, 2017"; data-line:"FormalReview.bib:4589"; searchterm:"Manifest%20domains%3A%20analysis%20and%20description%20D.%20Bj%C3%B8rner%2C%202017"; spellcheck:"false"}
Bjørner, D.&nbsp;(2017). Manifest domains: analysis and description. _Form Asp Comp_, _29_(2), 175–225. https://doi.org/[10.1007/s00165-016-0385-z](https://dx.doi.org/10.1007/s00165-016-0385-z){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_40_2014"; cite-year:"2014"; cite-authors:"D.&nbsp;Bjørner and Havelund"; cite-authors-long:"D.&nbsp;Bjørner and Havelund"; cite-label:"D. Bjørner \& Havelund, 2014"; caption:"40 Years of Formal Methods: Some Obstacles and Some Possibilities?&nl;D. Bjørner and Havelund, 2014"; data-line:"FormalReview.bib:4615"; searchterm:"40%20Years%20of%20Formal%20Methods%3A%20Some%20Obstacles%20and%20Some%20Possibilities%3F%20D.%20Bj%C3%B8rner%20and%20Havelund%2C%202014"; spellcheck:"false"}
Bjørner, D., & Havelund, K.&nbsp;(2014). 40 Years of Formal Methods: Some Obstacles and Some Possibilities? In C.&nbsp;Jones, P.&nbsp;Pihlajasaari, & J.&nbsp;Sun (Eds.), _FM 2014: Formal Methods_ (Vol. 8442, pp. 42–61). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-06410-9_4](https://dx.doi.org/10.1007/978-3-319-06410-9_4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bjorner_programming_nodate"; cite-year:"n.d."; cite-authors:"N.&nbsp;Bjørner et al."; cite-authors-long:"N.&nbsp;Bjørner, Moura, Nachmanson, and Wintersteiger"; cite-label:"N. Bjørner, Moura, Nachmanson, \& Wintersteiger, n.d."; caption:"Programming Z3&nl;N. Bjørner, Moura, Nachmanson, and Wintersteiger, n.d."; data-line:"FormalReview.bib:4346"; searchterm:"Programming%20Z3%20N.%20Bj%C3%B8rner%2C%20Moura%2C%20Nachmanson%2C%20and%20Wintersteiger%2C%20n.d."; spellcheck:"false"}
Bjørner, N., Moura, L.&nbsp;de, Nachmanson,  lev, & Wintersteiger, C.&nbsp;(n.d.). Programming Z3. Retrieved from <http://theory.stanford.edu/~nikolaj/programmingz3.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"blanchard_concurrent_2017"; cite-year:"2017"; cite-authors:"Blanchard et al."; cite-authors-long:"Blanchard, Loulergue, and Kosmatov"; cite-label:"Blanchard, Loulergue, \& Kosmatov, 2017"; caption:"From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation&nl;Blanchard, Loulergue, and Kosmatov, 2017"; data-line:"FormalReview.bib:1840"; searchterm:"From%20Concurrent%20Programs%20to%20Simulating%20Sequential%20Programs%3A%20Correctness%20of%20a%20Transformation%20Blanchard%2C%20Loulergue%2C%20and%20Kosmatov%2C%202017"; spellcheck:"false"}
Blanchard, A., Loulergue, F., & Kosmatov, N.&nbsp;(2017). From Concurrent Programs to Simulating Sequential Programs: Correctness of a Transformation. _Electronic Proceedings in Theoretical Computer Science_, _253_, 109–123. https://doi.org/[10.4204/EPTCS.253.9](https://dx.doi.org/10.4204/EPTCS.253.9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"badger_towards_2019"; cite-year:"2019"; cite-authors:"Blanchard et al."; cite-authors-long:"Blanchard, Loulergue, and Kosmatov"; cite-label:"Blanchard, Loulergue, \& Kosmatov, 2019"; caption:"Towards Full Proof Automation in Frama-C Using Auto-active Verification&nl;Blanchard, Loulergue, and Kosmatov, 2019"; data-line:"FormalReview.bib:4048"; searchterm:"Towards%20Full%20Proof%20Automation%20in%20FramaC%20Using%20Autoactive%20Verification%20Blanchard%2C%20Loulergue%2C%20and%20Kosmatov%2C%202019"; spellcheck:"false"}
Blanchard, A., Loulergue, F., & Kosmatov, N.&nbsp;(2019). Towards Full Proof Automation in Frama-C Using Auto-active Verification. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (Vol. 11460, pp. 88–105). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-20652-9_6](https://dx.doi.org/10.1007/978-3-030-20652-9_6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"blatter_static_2018"; cite-year:"2018"; cite-authors:"Blatter et al."; cite-authors-long:"Blatter, Kosmatov, Le Gall, Prevosto, and Petiot"; cite-label:"Blatter, Kosmatov, Le Gall, Prevosto, \& Petiot, 2018"; caption:"Static and Dynamic Verification of Relational Properties on Self-composed C Code&nl;Blatter, Kosmatov, Le Gall, Prevosto, and Petiot, 2018"; data-line:"FormalReview.bib:1892"; searchterm:"Static%20and%20Dynamic%20Verification%20of%20Relational%20Properties%20on%20Selfcomposed%20C%20Code%20Blatter%2C%20Kosmatov%2C%20Le%20Gall%2C%20Prevosto%2C%20and%20Petiot%2C%202018"; spellcheck:"false"}
Blatter, L., Kosmatov, N., Le Gall, P., Prevosto, V., & Petiot, G.&nbsp;(2018). Static and Dynamic Verification of Relational Properties on Self-composed C Code. In C.&nbsp;Dubois & B.&nbsp;Wolff (Eds.), _Tests and Proofs_ (pp. 44–62). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"bohrer_veriphy:_2018"; cite-year:"2018"; cite-authors:"Bohrer et al."; cite-authors-long:"Bohrer, Tan, Mitsch, Myreen, and Platzer"; cite-label:"Bohrer, Tan, Mitsch, Myreen, \& Platzer, 2018"; caption:"VeriPhy: verified controller executables from verified cyber-physical system models&nl;Bohrer, Tan, Mitsch, Myreen, and Platzer, 2018"; data-line:"FormalReview.bib:1027"; searchterm:"VeriPhy%3A%20verified%20controller%20executables%20from%20verified%20cyberphysical%20system%20models%20Bohrer%2C%20Tan%2C%20Mitsch%2C%20Myreen%2C%20and%20Platzer%2C%202018"; spellcheck:"false"}
Bohrer, B., Tan, Y.&nbsp;K., Mitsch, S., Myreen, M.&nbsp;O., & Platzer, A.&nbsp;(2018). VeriPhy: verified controller executables from verified cyber-physical system models. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation&nbsp;- PLDI 2018_ (pp. 617–630). Philadelphia, PA, USA: ACM Press. https://doi.org/[10.1145/3192366.3192406](https://dx.doi.org/10.1145/3192366.3192406){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2017"; cite-year:"2017"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2017"; caption:"Round-off Error Analysis of Explicit One-Step Numerical Integration Methods&nl;Boldo, Faissole, and Chapoutot, 2017"; data-line:"FormalReview.bib:2901"; searchterm:"Roundoff%20Error%20Analysis%20of%20Explicit%20OneStep%20Numerical%20Integration%20Methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202017"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2017). Round-off Error Analysis of Explicit One-Step Numerical Integration Methods. In _24th IEEE Symposium on Computer Arithmetic_. London, United Kingdom. https://doi.org/[10.1109/ARITH.2017.22](https://dx.doi.org/10.1109/ARITH.2017.22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_round-off_2018"; cite-year:"2018"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Faissole, and Chapoutot"; cite-label:"Boldo, Faissole, \& Chapoutot, 2018"; caption:"Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods&nl;Boldo, Faissole, and Chapoutot, 2018"; data-line:"FormalReview.bib:2915"; searchterm:"Roundoff%20error%20and%20exceptional%20behavior%20analysis%20of%20explicit%20RungeKutta%20methods%20Boldo%2C%20Faissole%2C%20and%20Chapoutot%2C%202018"; spellcheck:"false"}
Boldo, S., Faissole, F., & Chapoutot, A.&nbsp;(2018). _Round-off error and exceptional behavior analysis of explicit Runge-Kutta methods_. Retrieved from <https://hal.archives-ouvertes.fr/hal-01883843>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_improving_2012"; cite-year:"2012"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2012"; caption:"Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives&nl;Boldo, Lelay, and Melquiond, 2012"; data-line:"FormalReview.bib:2861"; searchterm:"Improving%20Real%20Analysis%20in%20Coq%3A%20A%20UserFriendly%20Approach%20to%20Integrals%20and%20Derivatives%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202012"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2012). Improving Real Analysis in Coq: A User-Friendly Approach to Integrals and Derivatives. In C.&nbsp;Hawblitzel & D.&nbsp;Miller (Eds.), _Certified Programs and Proofs_ (Vol. 7679, pp. 289–304). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-35308-6_22](https://dx.doi.org/10.1007/978-3-642-35308-6_22){.bib-doi}
~ end bibitem

~ begin bibitem {id:"boldo_coquelicot:_2013"; cite-year:"2013"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2013"; caption:"Coquelicot: A User-Friendly Library of Real Analysis for Coq&nl;Boldo, Lelay, and Melquiond, 2013"; data-line:"FormalReview.bib:2944"; searchterm:"Coquelicot%3A%20A%20UserFriendly%20Library%20of%20Real%20Analysis%20for%20Coq%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202013"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2013). Coquelicot: A User-Friendly Library of Real Analysis for Coq. Retrieved from <https://hal.inria.fr/hal-00860648/document>{.bib-url}
~ end bibitem

~ begin bibitem {id:"boldo_formalization_2016"; cite-year:"2016"; cite-authors:"Boldo et al."; cite-authors-long:"Boldo, Lelay, and Melquiond"; cite-label:"Boldo, Lelay, \& Melquiond, 2016"; caption:"Formalization of Real Analysis: A Survey of Proof Assistants and Libraries&nl;Boldo, Lelay, and Melquiond, 2016"; data-line:"FormalReview.bib:2956"; searchterm:"Formalization%20of%20Real%20Analysis%3A%20A%20Survey%20of%20Proof%20Assistants%20and%20Libraries%20Boldo%2C%20Lelay%2C%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Boldo, S., Lelay, C., & Melquiond, G.&nbsp;(2016). Formalization of Real Analysis: A Survey of Proof Assistants and Libraries. _Mathematical Structures in Computer Science_, _26_(7), 1196–1233. https://doi.org/[10.1017/S0960129514000437](https://dx.doi.org/10.1017/S0960129514000437){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bolignano_proven_2016"; cite-year:"2016"; cite-authors:"Bolignano"; cite-authors-long:"Bolignano"; cite-label:"Bolignano, 2016"; caption:"Proven Security for the Internet of Things&nl;Bolignano, 2016"; data-line:"FormalReview.bib:5246"; searchterm:"Proven%20Security%20for%20the%20Internet%20of%20Things%20Bolignano%2C%202016"; spellcheck:"false"}
Bolignano, D.&nbsp;(2016). Proven Security for the Internet of Things, 11.
~ end bibitem

~ begin bibitem {id:"boulier_next_2017"; cite-year:"2017"; cite-authors:"Boulier et al."; cite-authors-long:"Boulier, Pédrot, and Tabareau"; cite-label:"Boulier, Pédrot, \& Tabareau, 2017"; caption:"The next 700 syntactical models of type theory&nl;Boulier, Pédrot, and Tabareau, 2017"; data-line:"FormalReview.bib:476"; searchterm:"The%20next%20700%20syntactical%20models%20of%20type%20theory%20Boulier%2C%20P%C3%A9drot%2C%20and%20Tabareau%2C%202017"; spellcheck:"false"}
Boulier, S., Pédrot, P.-M., & Tabareau, N.&nbsp;(2017). The next 700 syntactical models of type theory (pp. 182–194). https://doi.org/[10.1145/3018610.3018620](https://dx.doi.org/10.1145/3018610.3018620){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bowman_j1:_nodate"; cite-year:"n.d."; cite-authors:"Bowman"; cite-authors-long:"Bowman"; cite-label:"Bowman, n.d."; caption:"J1: a small Forth CPU Core for FPGAs&nl;Bowman, n.d."; data-line:"FormalReview.bib:490"; searchterm:"J1%3A%20a%20small%20Forth%20CPU%20Core%20for%20FPGAs%20Bowman%2C%20n.d."; spellcheck:"false"}
Bowman, J.&nbsp;(n.d.). _J1: a small Forth CPU Core for FPGAs_.
~ end bibitem

~ begin bibitem {id:"brady_idris_2013"; cite-year:"2013"; cite-authors:"Brady"; cite-authors-long:"Brady"; cite-label:"Brady, 2013"; caption:"Idris, a general-purpose dependently typed programming language: Design and implementation&nl;Brady, 2013"; data-line:"FormalReview.bib:4215"; searchterm:"Idris%2C%20a%20generalpurpose%20dependently%20typed%20programming%20language%3A%20Design%20and%20implementation%20Brady%2C%202013"; spellcheck:"false"}
Brady, E.&nbsp;(2013). Idris, a general-purpose dependently typed programming language: Design and implementation. _Journal of Functional Programming_, _23_(5), 552–593. https://doi.org/[10.1017/S095679681300018X](https://dx.doi.org/10.1017/S095679681300018X){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_2018"; cite-year:"2018"; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie"; cite-label:"Brahmi et al., 2018"; caption:"Formalise to automate: deployment of a safe and cost-efficient process for avionics software&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Atki, and Marie, 2018"; data-line:"FormalReview.bib:1809"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costefficient%20process%20for%20avionics%20software%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Atki%2C%20and%20Marie%2C%202018"; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Atki, A., & Marie, T.&nbsp;(2018). Formalise to automate: deployment of a safe and cost-efficient process for avionics software. In _9th European Congress on Embedded Real Time Software and Systems (ERTS 2018)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01708332>{.bib-url}
~ end bibitem

~ begin bibitem {id:"brahmi_formalise_nodate"; cite-year:"n.d."; cite-authors:"Brahmi et al."; cite-authors-long:"Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al."; cite-label:"Brahmi et al., n.d."; caption:"Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended&nl;Brahmi, Delmas, Essoussi, Randimbivololona, Informatics, Nauzere, et al., n.d."; data-line:"FormalReview.bib:1823"; searchterm:"Formalise%20to%20automate%3A%20deployment%20of%20a%20safe%20and%20costef%EF%AC%81cient%20process%20for%20avionics%20software%20Extended%20Brahmi%2C%20Delmas%2C%20Essoussi%2C%20Randimbivololona%2C%20Informatics%2C%20Nauzere%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Brahmi, A., Delmas, D., Essoussi, M.&nbsp;H., Randimbivololona, F., Informatics, C., Nauzere, L., … Marie, T.&nbsp;(n.d.). Formalise to automate: deployment of a safe and cost-efﬁcient process for avionics software -Extended, 17.
~ end bibitem

~ begin bibitem {id:"braibant_formal_2013"; cite-year:"2013"; cite-authors:"Braibant and Chlipala"; cite-authors-long:"Braibant and Chlipala"; cite-label:"Braibant \& Chlipala, 2013"; caption:"Formal Verification of Hardware Synthesis&nl;Braibant and Chlipala, 2013"; data-line:"FormalReview.bib:3813"; searchterm:"Formal%20Verification%20of%20Hardware%20Synthesis%20Braibant%20and%20Chlipala%2C%202013"; spellcheck:"false"}
Braibant, T., & Chlipala, A.&nbsp;(2013). Formal Verification of Hardware Synthesis. _arXiv:1301.4779 \[cs\]_, _8044_, 213–228. https://doi.org/[10.1007/978-3-642-39799-8_14](https://dx.doi.org/10.1007/978-3-642-39799-8_14){.bib-doi}
~ end bibitem

~ begin bibitem {id:"breitner_ready_2018"; cite-year:"2018"; cite-authors:"Breitner et al."; cite-authors-long:"Breitner, Spector-Zabusky, Li, Rizkallah, Wiegley, and Weirich"; cite-label:"Breitner et al., 2018"; caption:"Ready, Set, Verify! Applying Hs-to-coq to Real-world Haskell Code (Experience Report)&nl;Breitner, Spector-Zabusky, Li, Rizkallah, Wiegley, and Weirich, 2018"; data-line:"FormalReview.bib:3523"; searchterm:"Ready%2C%20Set%2C%20Verify!%20Applying%20Hstocoq%20to%20Realworld%20Haskell%20Code%20Experience%20Report%20Breitner%2C%20SpectorZabusky%2C%20Li%2C%20Rizkallah%2C%20Wiegley%2C%20and%20Weirich%2C%202018"; spellcheck:"false"}
Breitner, J., Spector-Zabusky, A., Li, Y., Rizkallah, C., Wiegley, J., & Weirich, S.&nbsp;(2018). Ready, Set, Verify! Applying Hs-to-coq to Real-world Haskell Code (Experience Report). _Proc. ACM Program. Lang._, _2_, 89:1–89:16. https://doi.org/[10.1145/3236784](https://dx.doi.org/10.1145/3236784){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bridges_apartness_2011"; cite-year:"2011"; cite-authors:"Bridges and Vîţă"; cite-authors-long:"Bridges and Vîţă"; cite-label:"Bridges \& Vîţă, 2011"; caption:"Apartness and Uniformity&nl;Bridges and Vîţă, 2011"; data-line:"FormalReview.bib:4874"; searchterm:"Apartness%20and%20Uniformity%20Bridges%20and%20V%C3%AE%C5%A3%C4%83%2C%202011"; spellcheck:"false"}
Bridges, D.&nbsp;S., & Vîţă, L.&nbsp;S.&nbsp;(2011). _Apartness and Uniformity_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-22415-7](https://dx.doi.org/10.1007/978-3-642-22415-7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brockschmidt_t2:_2016"; cite-year:"2016"; cite-authors:"Brockschmidt et al."; cite-authors-long:"Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman"; cite-label:"Brockschmidt, Cook, Ishtiaq, Khlaaf, \& Piterman, 2016"; caption:"T2: Temporal Property Verification&nl;Brockschmidt, Cook, Ishtiaq, Khlaaf, and Piterman, 2016"; data-line:"FormalReview.bib:2518"; searchterm:"T2%3A%20Temporal%20Property%20Verification%20Brockschmidt%2C%20Cook%2C%20Ishtiaq%2C%20Khlaaf%2C%20and%20Piterman%2C%202016"; spellcheck:"false"}
Brockschmidt, M., Cook, B., Ishtiaq, S., Khlaaf, H., & Piterman, N.&nbsp;(2016). T2: Temporal Property Verification. In M.&nbsp;Chechik & J.-F.&nbsp;Raskin (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (pp. 387–393). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"brookes_semantics_2007"; cite-year:"2007"; cite-authors:"Brookes"; cite-authors-long:"Brookes"; cite-label:"Brookes, 2007"; caption:"A semantics for concurrent separation logic&nl;Brookes, 2007"; data-line:"FormalReview.bib:119"; searchterm:"A%20semantics%20for%20concurrent%20separation%20logic%20Brookes%2C%202007"; spellcheck:"false"}
Brookes, S.&nbsp;(2007). A semantics for concurrent separation logic. _Theoretical Computer Science_, _375_(1), 227–270. https://doi.org/[10.1016/j.tcs.2006.12.034](https://dx.doi.org/10.1016/j.tcs.2006.12.034){.bib-doi}
~ end bibitem

~ begin bibitem {id:"brookes_concurrent_2016"; cite-year:"2016"; cite-authors:"Brookes and O’Hearn"; cite-authors-long:"Brookes and O’Hearn"; cite-label:"Brookes \& O’Hearn, 2016"; caption:"Concurrent Separation Logic&nl;Brookes and O’Hearn, 2016"; data-line:"FormalReview.bib:106"; searchterm:"Concurrent%20Separation%20Logic%20Brookes%20and%20O%E2%80%99Hearn%2C%202016"; spellcheck:"false"}
Brookes, S., & O’Hearn, P.&nbsp;W.&nbsp;(2016). Concurrent Separation Logic. _ACM SIGLOG News_, _3_(3), 47–65. https://doi.org/[10.1145/2984450.2984457](https://dx.doi.org/10.1145/2984450.2984457){.bib-doi}
~ end bibitem

~ begin bibitem {id:"calcagno_moving_nodate"; cite-year:"2019"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, Dubreil, and O’Hearn"; cite-label:"Calcagno, Distefano, Dubreil, \& O’Hearn, n.d."; caption:"Moving Fast with Software Verification.Facebook Research&nl;Calcagno, Distefano, Dubreil, and O’Hearn, 2019"; data-line:"FormalReview.bib:3110"; searchterm:"Moving%20Fast%20with%20Software%20Verification.Facebook%20Research%20Calcagno%2C%20Distefano%2C%20Dubreil%2C%20and%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
Calcagno, C., Distefano, D., Dubreil, J., & O’Hearn, P.&nbsp;(n.d.). Moving Fast with Software Verification.Facebook Research. Retrieved February 1, 2019, from <https://research.fb.com/publications/moving-fast-with-software-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"calcagno_compositional_2011"; cite-year:"2011"; cite-authors:"Calcagno et al."; cite-authors-long:"Calcagno, Distefano, O’Hearn, and Yang"; cite-label:"Calcagno, Distefano, O’Hearn, \& Yang, 2011"; caption:"Compositional Shape Analysis by Means of Bi-Abduction&nl;Calcagno, Distefano, O’Hearn, and Yang, 2011"; data-line:"FormalReview.bib:2"; searchterm:"Compositional%20Shape%20Analysis%20by%20Means%20of%20BiAbduction%20Calcagno%2C%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202011"; spellcheck:"false"}
Calcagno, C., Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2011). Compositional Shape Analysis by Means of Bi-Abduction. _Journal of the ACM_, _58_(6), 1–66. https://doi.org/[10.1145/2049697.2049700](https://dx.doi.org/10.1145/2049697.2049700){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cao_vst-floyd:_2018"; cite-year:"2018"; cite-authors:"Cao et al."; cite-authors-long:"Cao, Beringer, Gruetter, Dodds, and Appel"; cite-label:"Cao, Beringer, Gruetter, Dodds, \& Appel, 2018"; caption:"VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs&nl;Cao, Beringer, Gruetter, Dodds, and Appel, 2018"; data-line:"FormalReview.bib:261"; searchterm:"VSTFloyd%3A%20A%20Separation%20Logic%20Tool%20to%20Verify%20Correctness%20of%20C%20Programs%20Cao%2C%20Beringer%2C%20Gruetter%2C%20Dodds%2C%20and%20Appel%2C%202018"; spellcheck:"false"}
Cao, Q., Beringer, L., Gruetter, S., Dodds, J., & Appel, A.&nbsp;W.&nbsp;(2018). VST-Floyd: A Separation Logic Tool to Verify Correctness of C Programs. _J.&nbsp;Autom. Reason._, _61_(1), 367–422. https://doi.org/[10.1007/s10817-018-9457-5](https://dx.doi.org/10.1007/s10817-018-9457-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"carneiro_specifying_2019"; cite-year:"2019b"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2019a"; caption:"Specifying verified x86 software from scratch&nl;Carneiro, 2019b"; data-line:"FormalReview.bib:5219"; searchterm:"Specifying%20verified%20x86%20software%20from%20scratch%20Carneiro%2C%202019b"; spellcheck:"false"}
Carneiro, M.&nbsp;(2019a). Specifying verified x86 software from scratch. _arXiv:1907.01283 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1907.01283](http://arxiv.org/abs/1907.01283){.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_type_2019"; cite-year:"2019a"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2019b"; caption:"The Type Theory of Lean&nl;Carneiro, 2019a"; data-line:"FormalReview.bib:5211"; searchterm:"The%20Type%20Theory%20of%20Lean%20Carneiro%2C%202019a"; spellcheck:"false"}
Carneiro, M.&nbsp;(2019b). The Type Theory of Lean. Retrieved from <https://github.com/digama0/lean-type-theory/releases/download/v1.0/main.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"carneiro_metamath_2020"; cite-year:"2020"; cite-authors:"Carneiro"; cite-authors-long:"Carneiro"; cite-label:"Carneiro, 2020"; caption:"Metamath Zero&nl;Carneiro, 2020"; data-line:"FormalReview.bib:5200"; searchterm:"Metamath%20Zero%20Carneiro%2C%202020"; spellcheck:"false"}
Carneiro, M.&nbsp;(2020). _Metamath Zero_. Retrieved from <https://github.com/digama0/mm0>{.bib-url}
~ end bibitem

~ begin bibitem {id:"casinghino_combining_2014"; cite-year:"2014"; cite-authors:"Casinghino"; cite-authors-long:"Casinghino"; cite-label:"Casinghino, 2014"; caption:"Combining Proofs and Programs&nl;Casinghino, 2014"; data-line:"FormalReview.bib:3540"; searchterm:"Combining%20Proofs%20and%20Programs%20Casinghino%2C%202014"; spellcheck:"false"}
Casinghino, C.&nbsp;(2014). _Combining Proofs and Programs_ (phdthesis). University of Pennsylvania, Philadelphia, PA, USA.&nbsp;Retrieved from <https://www.seas.upenn.edu/~sweirich/papers/casinghino-thesis.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"casinghino_combining_2014-1"; cite-year:"2014"; cite-authors:"Casinghino et al."; cite-authors-long:"Casinghino, Sjöberg, and Weirich"; cite-label:"Casinghino, Sjöberg, \& Weirich, 2014"; caption:"Combining Proofs and Programs in a Dependently Typed Language&nl;Casinghino, Sjöberg, and Weirich, 2014"; data-line:"FormalReview.bib:3553"; searchterm:"Combining%20Proofs%20and%20Programs%20in%20a%20Dependently%20Typed%20Language%20Casinghino%2C%20Sj%C3%B6berg%2C%20and%20Weirich%2C%202014"; spellcheck:"false"}
Casinghino, C., Sjöberg, V., & Weirich, S.&nbsp;(2014). Combining Proofs and Programs in a Dependently Typed Language. In _Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 33–45). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2535838.2535883](https://dx.doi.org/10.1145/2535838.2535883){.bib-doi}
~ end bibitem

~ begin bibitem {id:"casteran_pierre_nodate"; cite-year:"2019"; cite-authors:"Castéran"; cite-authors-long:"Castéran"; cite-label:"Castéran, n.d."; caption:"Pierre Castéran's Home page&nl;Castéran, 2019"; data-line:"FormalReview.bib:819"; searchterm:"Pierre%20Cast%C3%A9ran's%20Home%20page%20Cast%C3%A9ran%2C%202019"; spellcheck:"false"}
Castéran, P.&nbsp;(n.d.). Pierre Castéran’s Home page. Retrieved January 31, 2019, from <http://www.labri.fr/perso/casteran/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"celik_mutation_2019"; cite-year:"2019"; cite-authors:"Celik et al."; cite-authors-long:"Celik, Palmskog, Parovic, Jesus Gallego Arias, and Gligoric"; cite-label:"Celik, Palmskog, Parovic, Jesus Gallego Arias, \& Gligoric, 2019"; caption:"Mutation Analysis for Coq&nl;Celik, Palmskog, Parovic, Jesus Gallego Arias, and Gligoric, 2019"; data-line:"FormalReview.bib:5863"; searchterm:"Mutation%20Analysis%20for%20Coq%20Celik%2C%20Palmskog%2C%20Parovic%2C%20Jesus%20Gallego%20Arias%2C%20and%20Gligoric%2C%202019"; spellcheck:"false"}
Celik, A., Palmskog, K., Parovic, M., Jesus Gallego Arias, E., & Gligoric, M.&nbsp;(2019). Mutation Analysis for Coq. In _2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)_ (pp. 539–551). San Diego, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/ASE.2019.00057](https://dx.doi.org/10.1109/ASE.2019.00057){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_cerco_nodate"; cite-authors:"2020e"; cite-authors-long:"2020e"; cite-label:"\&ldquo;CerCo - Certified Complexity,\&rdquo; n.d."; caption:"CerCo - Certified Complexity&nl;2020e, "; data-line:"FormalReview.bib:5595"; searchterm:"CerCo%20%20Certified%20Complexity%202020e%2C%20"; spellcheck:"false"}
CerCo - Certified Complexity. (n.d.). Retrieved January 13, 2020, from <http://cerco.cs.unibo.it/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chailloux_developing_2000"; cite-year:"2000"; cite-authors:"Chailloux et al."; cite-authors-long:"Chailloux, Manoury, and Pagano"; cite-label:"Chailloux, Manoury, \& Pagano, 2000"; caption:"Developing Applications with Objective Caml&nl;Chailloux, Manoury, and Pagano, 2000"; data-line:"FormalReview.bib:3849"; searchterm:"Developing%20Applications%20with%20Objective%20Caml%20Chailloux%2C%20Manoury%2C%20and%20Pagano%2C%202000"; spellcheck:"false"}
Chailloux, E., Manoury, P., & Pagano, B.&nbsp;(2000). _Developing Applications with Objective Caml_. Paris: O’Reilly.
~ end bibitem

~ begin bibitem {id:"chapman_fumble_nodate"; cite-year:"n.d."; cite-authors:"Chapman"; cite-authors-long:"Chapman"; cite-label:"Chapman, n.d."; caption:"The Fumble Programmer&nl;Chapman, n.d."; data-line:"FormalReview.bib:4147"; searchterm:"The%20Fumble%20Programmer%20Chapman%2C%20n.d."; spellcheck:"false"}
Chapman, R.&nbsp;(n.d.). The Fumble Programmer. Retrieved from <https://proteancode.com/wp-content/uploads/2018/02/the_fumble_programmer.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2010"; cite-year:"2010b"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010a"; caption:"Characteristic Formulae for Mechanized Program Verification&nl;Charguéraud, 2010b"; data-line:"FormalReview.bib:649"; searchterm:"Characteristic%20Formulae%20for%20Mechanized%20Program%20Verification%20Chargu%C3%A9raud%2C%202010b"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010a). _Characteristic Formulae for Mechanized Program Verification_ (phdthesis). UNIVERSITÉ PARIS.DIDEROT, Paris, France.
~ end bibitem

~ begin bibitem {id:"chargueraud_program_2010"; cite-year:"2010a"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2010b"; caption:"Program Verification Through Characteristic Formulae&nl;Charguéraud, 2010a"; data-line:"FormalReview.bib:613"; searchterm:"Program%20Verification%20Through%20Characteristic%20Formulae%20Chargu%C3%A9raud%2C%202010a"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2010b). Program Verification Through Characteristic Formulae. In _Proceedings of the 15th ACM SIGPLAN International Conference on Functional Programming_ (pp. 321–332). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1863543.1863590](https://dx.doi.org/10.1145/1863543.1863590){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chargueraud_characteristic_2011"; cite-year:"2011"; cite-authors:"Charguéraud"; cite-authors-long:"Charguéraud"; cite-label:"Charguéraud, 2011"; caption:"Characteristic Formulae for the Verification of Imperative Programs&nl;Charguéraud, 2011"; data-line:"FormalReview.bib:631"; searchterm:"Characteristic%20Formulae%20for%20the%20Verification%20of%20Imperative%20Programs%20Chargu%C3%A9raud%2C%202011"; spellcheck:"false"}
Charguéraud, A.&nbsp;(2011). Characteristic Formulae for the Verification of Imperative Programs. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 418–430). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034828](https://dx.doi.org/10.1145/2034773.2034828){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ter_beek_gospelproviding_2019"; cite-year:"2019"; cite-authors:"Charguéraud et al."; cite-authors-long:"Charguéraud, Filliâtre, Lourenço, and Pereira"; cite-label:"Charguéraud, Filliâtre, Lourenço, \& Pereira, 2019"; caption:"GOSPEL—Providing OCaml with a Formal Specification Language&nl;Charguéraud, Filliâtre, Lourenço, and Pereira, 2019"; data-line:"FormalReview.bib:4721"; searchterm:"GOSPEL%E2%80%94Providing%20OCaml%20with%20a%20Formal%20Specification%20Language%20Chargu%C3%A9raud%2C%20Filli%C3%A2tre%2C%20Louren%C3%A7o%2C%20and%20Pereira%2C%202019"; spellcheck:"false"}
Charguéraud, A., Filliâtre, J.-C., Lourenço, C., & Pereira, M.&nbsp;(2019). GOSPEL—Providing OCaml with a Formal Specification Language. In M.&nbsp;H.&nbsp;ter Beek, A.&nbsp;McIver, & J.&nbsp;N.&nbsp;Oliveira (Eds.), _Formal Methods – The Next 30 Years_ (Vol. 11800, pp. 484–501). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-30942-8_29](https://dx.doi.org/10.1007/978-3-030-30942-8_29){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chen_project_nodate"; cite-year:"n.d."; cite-authors:"Chen"; cite-authors-long:"Chen"; cite-label:"Chen, n.d."; caption:"Project Report on DeepSpecDB&nl;Chen, n.d."; data-line:"FormalReview.bib:1392"; searchterm:"Project%20Report%20on%20DeepSpecDB%20Chen%2C%20n.d."; spellcheck:"false"}
Chen, Y.&nbsp;(n.d.). Project Report on DeepSpecDB, 35.
~ end bibitem

~ begin bibitem {id:"chihani_certication_nodate"; cite-year:"n.d."; cite-authors:"Chihani"; cite-authors-long:"Chihani"; cite-label:"Chihani, n.d."; caption:"Certiﬁcation of First-order proofs in classical and intuitionistic logics&nl;Chihani, n.d."; data-line:"FormalReview.bib:4691"; searchterm:"Certi%EF%AC%81cation%20of%20Firstorder%20proofs%20in%20classical%20and%20intuitionistic%20logics%20Chihani%2C%20n.d."; spellcheck:"false"}
Chihani, Z.&nbsp;(n.d.). Certiﬁcation of First-order proofs in classical and intuitionistic logics, 167.
~ end bibitem

~ begin bibitem {id:"chiricescu_safe:_2013"; cite-year:"2013"; cite-authors:"Chiricescu et al."; cite-authors-long:"Chiricescu, DeHon, Demange, Iyer, Kliger, Morrisett, et al."; cite-label:"Chiricescu et al., 2013"; caption:"SAFE: A clean-slate architecture for secure systems&nl;Chiricescu, DeHon, Demange, Iyer, Kliger, Morrisett, et al., 2013"; data-line:"FormalReview.bib:3642"; searchterm:"SAFE%3A%20A%20cleanslate%20architecture%20for%20secure%20systems%20Chiricescu%2C%20DeHon%2C%20Demange%2C%20Iyer%2C%20Kliger%2C%20Morrisett%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Chiricescu, S., DeHon, A., Demange, D., Iyer, S., Kliger, A., Morrisett, G., … Wittenberg, D.&nbsp;(2013). SAFE: A clean-slate architecture for secure systems. In _2013 IEEE International Conference on Technologies for Homeland Security (HST)_ (pp. 570–576). Waltham, MA, USA: IEEE.&nbsp;https://doi.org/[10.1109/THS.2013.6699066](https://dx.doi.org/10.1109/THS.2013.6699066){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chlipala_certified_2013"; cite-year:"2013"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2013"; caption:"Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant&nl;Chlipala, 2013"; data-line:"FormalReview.bib:698"; searchterm:"Certified%20programming%20with%20dependent%20types%3A%20a%20pragmatic%20introduction%20to%20the%20Coq%20proof%20assistant%20Chlipala%2C%202013"; spellcheck:"false"}
Chlipala, A.&nbsp;(2013). _Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant_. Cambridge, MA: The MIT Press. Retrieved from <http://adam.chlipala.net/cpdt/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_formal_2019"; cite-year:"2019"; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, 2019"; caption:"Formal Reasoning About Programs - Github&nl;Chlipala, 2019"; data-line:"FormalReview.bib:719"; searchterm:"Formal%20Reasoning%20About%20Programs%20%20Github%20Chlipala%2C%202019"; spellcheck:"false"}
Chlipala, A.&nbsp;(2019). _Formal Reasoning About Programs - Github_. Retrieved from <https://github.com/achlipala/frap>{.bib-url}
~ end bibitem

~ begin bibitem {id:"chlipala_introduction_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-a"; caption:"An Introduction to Programming and Proving with Dependent Types in Coq&nl;Chlipala, n.d."; data-line:"FormalReview.bib:683"; searchterm:"An%20Introduction%20to%20Programming%20and%20Proving%20with%20Dependent%20Types%20in%20Coq%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-a). An Introduction to Programming and Proving with Dependent Types in Coq. _Journal of Formalized Reasoning_, _3_(2), 93.
~ end bibitem

~ begin bibitem {id:"chlipala_certied_nodate"; cite-year:"n.d."; cite-authors:"Chlipala"; cite-authors-long:"Chlipala"; cite-label:"Chlipala, n.d.-b"; caption:"Certiﬁed Programming with Dependent Types&nl;Chlipala, n.d."; data-line:"FormalReview.bib:711"; searchterm:"Certi%EF%AC%81ed%20Programming%20with%20Dependent%20Types%20Chlipala%2C%20n.d."; spellcheck:"false"}
Chlipala, A.&nbsp;(n.d.-b). Certiﬁed Programming with Dependent Types, 369.
~ end bibitem

~ begin bibitem {id:"chlipala_end_nodate"; cite-year:"2019"; cite-authors:"Chlipala et al."; cite-authors-long:"Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al."; cite-label:"Chlipala et al., n.d."; caption:"THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN&nl;Chlipala, Delaware, Duchovni, Gross, Pit-Claudel, Suriyakarn, et al., 2019"; data-line:"FormalReview.bib:1437"; searchterm:"THE%20END%20OF%20HISTORY%3F%20USING%20A%20PROOF%20ASSISTANT%20TO%20REPLACE%20LANGUAGE%20DESIGN%20WITH%20LIBRARY%20DESIGN%20Chlipala%2C%20Delaware%2C%20Duchovni%2C%20Gross%2C%20PitClaudel%2C%20Suriyakarn%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Chlipala, A., Delaware, B., Duchovni, S., Gross, J., Pit-Claudel, C., Suriyakarn, S., … ye, K.&nbsp;(n.d.). THE END OF HISTORY? USING A PROOF ASSISTANT TO REPLACE LANGUAGE DESIGN WITH LIBRARY DESIGN.&nbsp;Retrieved February 1, 2019, from <https://snapl.org/2017/abstracts/Chlipala.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"choi_kami:_2017"; cite-year:"2017"; cite-authors:"Choi et al."; cite-authors-long:"Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind"; cite-label:"Choi, Vijayaraghavan, Sherman, Chlipala, \& Arvind, 2017"; caption:"Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification&nl;Choi, Vijayaraghavan, Sherman, Chlipala, and Arvind, 2017"; data-line:"FormalReview.bib:1528"; searchterm:"Kami%3A%20A%20Platform%20for%20Highlevel%20Parametric%20Hardware%20Specification%20and%20Its%20Modular%20Verification%20Choi%2C%20Vijayaraghavan%2C%20Sherman%2C%20Chlipala%2C%20and%20Arvind%2C%202017"; spellcheck:"false"}
Choi, J., Vijayaraghavan, M., Sherman, B., Chlipala, A., & Arvind. (2017). Kami: A Platform for High-level Parametric Hardware Specification and Its Modular Verification. _Proc. ACM Program. Lang._, _1_, 24:1–24:30. https://doi.org/[10.1145/3110268](https://dx.doi.org/10.1145/3110268){.bib-doi}
~ end bibitem

~ begin bibitem {id:"christakis_collaborative_2012"; cite-year:"2012"; cite-authors:"Christakis et al."; cite-authors-long:"Christakis, Müller, and Wüstholz"; cite-label:"Christakis, Müller, \& Wüstholz, 2012"; caption:"Collaborative Verification and Testing with Explicit Assumptions&nl;Christakis, Müller, and Wüstholz, 2012"; data-line:"FormalReview.bib:1162"; searchterm:"Collaborative%20Verification%20and%20Testing%20with%20Explicit%20Assumptions%20Christakis%2C%20M%C3%BCller%2C%20and%20W%C3%BCstholz%2C%202012"; spellcheck:"false"}
Christakis, M., Müller, P., & Wüstholz, V.&nbsp;(2012). Collaborative Verification and Testing with Explicit Assumptions. In D.&nbsp;Giannakopoulou & D.&nbsp;Méry (Eds.), _FM 2012: Formal Methods_ (pp. 132–146). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"clark_instructors_2019"; cite-year:"2019"; cite-authors:"Clark"; cite-authors-long:"Clark"; cite-label:"Clark, 2019"; caption:"The Instructor’s Guide to Real Induction&nl;Clark, 2019"; data-line:"FormalReview.bib:4953"; searchterm:"The%20Instructor%E2%80%99s%20Guide%20to%20Real%20Induction%20Clark%2C%202019"; spellcheck:"false"}
Clark, P.&nbsp;L.&nbsp;(2019). The Instructor’s Guide to Real Induction. _Mathematics Magazine_, _92_(2), 136–150. https://doi.org/[10.1080/0025570X.2019.1549902](https://dx.doi.org/10.1080/0025570X.2019.1549902){.bib-doi}
~ end bibitem

~ begin bibitem {id:"cofer_formal_nodate"; cite-year:"n.d."; cite-authors:"Cofer et al."; cite-authors-long:"Cofer, Miller, and Collins"; cite-label:"Cofer, Miller, \& Collins, n.d."; caption:"Formal Methods Case Studies for DO-333&nl;Cofer, Miller, and Collins, n.d."; data-line:"FormalReview.bib:4475"; searchterm:"Formal%20Methods%20Case%20Studies%20for%20DO333%20Cofer%2C%20Miller%2C%20and%20Collins%2C%20n.d."; spellcheck:"false"}
Cofer, D., Miller, S.&nbsp;P., & Collins, R.&nbsp;(n.d.). Formal Methods Case Studies for DO-333, 203.
~ end bibitem

~ begin bibitem {id:"hutchison_pragmatic_2013"; cite-year:"2013"; cite-authors:"Cohen"; cite-authors-long:"Cohen"; cite-label:"Cohen, 2013"; caption:"Pragmatic Quotient Types in Coq&nl;Cohen, 2013"; data-line:"FormalReview.bib:4811"; searchterm:"Pragmatic%20Quotient%20Types%20in%20Coq%20Cohen%2C%202013"; spellcheck:"false"}
Cohen, C.&nbsp;(2013). Pragmatic Quotient Types in Coq. In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (Vol. 7998, pp. 213–228). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39634-2_17](https://dx.doi.org/10.1007/978-3-642-39634-2_17){.bib-doi}
~ end bibitem

~ begin bibitem {id:"collins_secure_nodate"; cite-year:"n.d."; cite-authors:"Collins"; cite-authors-long:"Collins"; cite-label:"Collins, n.d."; caption:"SECURE MATHEMATICALLY- ASSURED COMPOSITION OF CONTROL MODELS&nl;Collins, n.d."; data-line:"FormalReview.bib:4503"; searchterm:"SECURE%20MATHEMATICALLY%20ASSURED%20COMPOSITION%20OF%20CONTROL%20MODELS%20Collins%2C%20n.d."; spellcheck:"false"}
Collins, R.&nbsp;(n.d.). SECURE MATHEMATICALLY- ASSURED COMPOSITION OF CONTROL MODELS, 134.
~ end bibitem

~ begin bibitem {id:"conchon_alt-ergo_2018"; cite-year:"2018"; cite-authors:"Conchon et al."; cite-authors-long:"Conchon, Coquereau, Iguernlala, and Mebsout"; cite-label:"Conchon, Coquereau, Iguernlala, \& Mebsout, 2018"; caption:"Alt-Ergo 2.2&nl;Conchon, Coquereau, Iguernlala, and Mebsout, 2018"; data-line:"FormalReview.bib:177"; searchterm:"AltErgo%202.2%20Conchon%2C%20Coquereau%2C%20Iguernlala%2C%20and%20Mebsout%2C%202018"; spellcheck:"false"}
Conchon, S., Coquereau, A., Iguernlala, M., & Mebsout, A.&nbsp;(2018). Alt-Ergo 2.2. In _SMT Workshop: International Workshop on Satisfiability Modulo Theories_. Oxford, United Kingdom. Retrieved from <https://hal.inria.fr/hal-01960203>{.bib-url}
~ end bibitem

~ begin bibitem {id:"conchon_increasing_2016"; cite-year:"2016"; cite-authors:"Conchon and Iguernlala"; cite-authors-long:"Conchon and Iguernlala"; cite-label:"Conchon \& Iguernlala, 2016"; caption:"Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo&nl;Conchon and Iguernlala, 2016"; data-line:"FormalReview.bib:190"; searchterm:"Increasing%20Proofs%20Automation%20Rate%20of%20AtelierB%20Thanks%20to%20AltErgo%20Conchon%20and%20Iguernlala%2C%202016"; spellcheck:"false"}
Conchon, S., & Iguernlala, M.&nbsp;(2016). Increasing Proofs Automation Rate of Atelier-B Thanks to Alt-Ergo. In T.&nbsp;Lecomte, R.&nbsp;Pinger, & A.&nbsp;Romanovsky (Eds.), _Reliability, Safety, and Security of Railway Systems. Modelling, Analysis, Verification, and Certification_ (pp. 243–253). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"cooper_incomputable_2017"; cite-year:"2017"; cite-authors:"Cooper and Soskova"; cite-authors-long:"Cooper and Soskova"; cite-label:"Cooper \& Soskova, 2017"; caption:"The Incomputable&nl;Cooper and Soskova, 2017"; data-line:"FormalReview.bib:4913"; searchterm:"The%20Incomputable%20Cooper%20and%20Soskova%2C%202017"; spellcheck:"false"}
Cooper, S.&nbsp;B., & Soskova, M.&nbsp;I.&nbsp;(Eds.). (2017). _The Incomputable_. Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-43669-2](https://dx.doi.org/10.1007/978-3-319-43669-2){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_coqeal_2020"; cite-authors:"2020a"; cite-authors-long:"2020a"; cite-label:"\_CoqEAL\_, 2020"; caption:"CoqEAL&nl;2020a, "; data-line:"FormalReview.bib:5146"; searchterm:"CoqEAL%202020a%2C%20"; spellcheck:"false"}
_CoqEAL_. (2020). CoqEAL.&nbsp;Retrieved from <https://github.com/CoqEAL/CoqEAL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_coquelicot.coquelicot_nodate"; cite-authors:"2019i"; cite-authors-long:"2019i"; cite-label:"\&ldquo;Coquelicot.Coquelicot,\&rdquo; n.d."; caption:"Coquelicot.Coquelicot&nl;2019i, "; data-line:"FormalReview.bib:4906"; searchterm:"Coquelicot.Coquelicot%202019i%2C%20"; spellcheck:"false"}
Coquelicot.Coquelicot. (n.d.). Retrieved November 3, 2019, from <http://coquelicot.saclay.inria.fr/html/Coquelicot.Coquelicot.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costan_sanctum:_2016"; cite-year:"2016"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2016"; caption:"Sanctum: Minimal Hardware Extensions for Strong Software Isolation&nl;Costan, Lebedev, and Devadas, 2016"; data-line:"FormalReview.bib:2709"; searchterm:"Sanctum%3A%20Minimal%20Hardware%20Extensions%20for%20Strong%20Software%20Isolation%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202016"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2016). Sanctum: Minimal Hardware Extensions for Strong Software Isolation (pp. 857–874). Retrieved from <https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/costan>{.bib-url}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017"; cite-year:"2017a"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017a"; caption:"Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture&nl;Costan, Lebedev, and Devadas, 2017a"; data-line:"FormalReview.bib:2722"; searchterm:"Secure%20Processors%20Part%20I%3A%20Background%2C%20Taxonomy%20for%20Secure%20Enclaves%20and%20Intel%20SGX%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017a"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017a). Secure Processors Part I: Background, Taxonomy for Secure Enclaves and Intel SGX Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(1), 1–248. https://doi.org/[10.1561/1000000051](https://dx.doi.org/10.1561/1000000051){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costan_secure_2017-1"; cite-year:"2017b"; cite-authors:"Costan et al."; cite-authors-long:"Costan, Lebedev, and Devadas"; cite-label:"Costan, Lebedev, \& Devadas, 2017b"; caption:"Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture&nl;Costan, Lebedev, and Devadas, 2017b"; data-line:"FormalReview.bib:2739"; searchterm:"Secure%20Processors%20Part%20II%3A%20Intel%20SGX%20Security%20Analysis%20and%20MIT%20Sanctum%20Architecture%20Costan%2C%20Lebedev%2C%20and%20Devadas%2C%202017b"; spellcheck:"false"}
Costan, V., Lebedev, I., & Devadas, S.&nbsp;(2017b). Secure Processors Part II: Intel SGX Security Analysis and MIT Sanctum Architecture. _Foundations and Trends® in Electronic Design Automation_, _11_(3), 249–361. https://doi.org/[10.1561/1000000052](https://dx.doi.org/10.1561/1000000052){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_2016"; cite-year:"2016"; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, 2016"; caption:"End-to-end Verification of Information-flow Security for C and Assembly Programs&nl;Costanzo, Shao, and Gu, 2016"; data-line:"FormalReview.bib:577"; searchterm:"Endtoend%20Verification%20of%20Informationflow%20Security%20for%20C%20and%20Assembly%20Programs%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%202016"; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(2016). End-to-end Verification of Information-flow Security for C and Assembly Programs. In _Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 648–664). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2908080.2908100](https://dx.doi.org/10.1145/2908080.2908100){.bib-doi}
~ end bibitem

~ begin bibitem {id:"costanzo_end--end_nodate"; cite-year:"n.d."; cite-authors:"Costanzo et al."; cite-authors-long:"Costanzo, Shao, and Gu"; cite-label:"Costanzo, Shao, \& Gu, n.d."; caption:"End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report&nl;Costanzo, Shao, and Gu, n.d."; data-line:"FormalReview.bib:566"; searchterm:"EndtoEnd%20Veri%EF%AC%81cation%20of%20InformationFlow%20Security%20for%20C%20and%20Assembly%20Programs%20%20Tech%20Report%20Costanzo%2C%20Shao%2C%20and%20Gu%2C%20n.d."; spellcheck:"false"}
Costanzo, D., Shao, Z., & Gu, R.&nbsp;(n.d.). End-to-End Veriﬁcation of Information-Flow Security for C and Assembly Programs - Tech Report, 21. Retrieved from <http://flint.cs.yale.edu/certikos/publications/security-tr.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_embedding_2007"; cite-year:"2007"; cite-authors:"Cousineau and Dowek"; cite-authors-long:"Cousineau and Dowek"; cite-label:"Cousineau \& Dowek, 2007"; caption:"Embedding Pure Type Systems in the Lambda-Pi-Calculus Modulo&nl;Cousineau and Dowek, 2007"; data-line:"FormalReview.bib:5636"; searchterm:"Embedding%20Pure%20Type%20Systems%20in%20the%20LambdaPiCalculus%20Modulo%20Cousineau%20and%20Dowek%2C%202007"; spellcheck:"false"}
Cousineau, D., & Dowek, G.&nbsp;(2007). Embedding Pure Type Systems in the Lambda-Pi-Calculus Modulo. In S.&nbsp;R.&nbsp;Della Rocca (Ed.), _Typed Lambda Calculi and Applications_ (Vol. 4583, pp. 102–117). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-73228-0_9](https://dx.doi.org/10.1007/978-3-540-73228-0_9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"crary_modules_2017"; cite-year:"2017"; cite-authors:"Crary"; cite-authors-long:"Crary"; cite-label:"Crary, 2017"; caption:"Modules, Abstraction, and Parametric Polymorphism&nl;Crary, 2017"; data-line:"FormalReview.bib:846"; searchterm:"Modules%2C%20Abstraction%2C%20and%20Parametric%20Polymorphism%20Crary%2C%202017"; spellcheck:"false"}
Crary, K.&nbsp;(2017). Modules, Abstraction, and Parametric Polymorphism. In _Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages_ (pp. 100–113). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3009837.3009892](https://dx.doi.org/10.1145/3009837.3009892){.bib-doi}
~ end bibitem

~ begin bibitem {id:"crick_share_2014"; cite-year:"2014"; cite-authors:"Crick et al."; cite-authors-long:"Crick, Hall, Ishtiaq, and Takeda"; cite-label:"Crick, Hall, Ishtiaq, \& Takeda, 2014"; caption:"\"Share and Enjoy\": Publishing Useful and Usable Scientific Models&nl;Crick, Hall, Ishtiaq, and Takeda, 2014"; data-line:"FormalReview.bib:2503"; searchterm:"%22Share%20and%20Enjoy%22%3A%20Publishing%20Useful%20and%20Usable%20Scientific%20Models%20Crick%2C%20Hall%2C%20Ishtiaq%2C%20and%20Takeda%2C%202014"; spellcheck:"false"}
Crick, T., Hall, B.&nbsp;A., Ishtiaq, S., & Takeda, K.&nbsp;(2014). &ldquo;Share and Enjoy&rdquo;: Publishing Useful and Usable Scientific Models. _arXiv:1409.0367 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1409.0367](http://arxiv.org/abs/1409.0367){.bib-url}
~ end bibitem

~ begin bibitem {id:"czajka_coqhammer:_nodate"; cite-year:"2019"; cite-authors:"Czajka and Kaliszyk"; cite-authors-long:"Czajka and Kaliszyk"; cite-label:"Czajka \& Kaliszyk, n.d."; caption:"CoqHammer: Strong Automation for Program Verification - CoqPL 2018&nl;Czajka and Kaliszyk, 2019"; data-line:"FormalReview.bib:1054"; searchterm:"CoqHammer%3A%20Strong%20Automation%20for%20Program%20Verification%20%20CoqPL%202018%20Czajka%20and%20Kaliszyk%2C%202019"; spellcheck:"false"}
Czajka, L., & Kaliszyk, C.&nbsp;(n.d.). CoqHammer: Strong Automation for Program Verification - CoqPL 2018. Retrieved January 31, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-coqhammer-strong-automation-for-program-verification>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dang_rustbelt_nodate"; cite-year:"n.d."; cite-authors:"Dang et al."; cite-authors-long:"Dang, Jourdan, Kaiser, and Dreyer"; cite-label:"Dang, Jourdan, Kaiser, \& Dreyer, n.d."; caption:"RustBelt Meets Relaxed Memory&nl;Dang, Jourdan, Kaiser, and Dreyer, n.d."; data-line:"FormalReview.bib:4927"; searchterm:"RustBelt%20Meets%20Relaxed%20Memory%20Dang%2C%20Jourdan%2C%20Kaiser%2C%20and%20Dreyer%2C%20n.d."; spellcheck:"false"}
Dang, H.-H., Jourdan, J.-H., Kaiser, J.-O., & Dreyer, D.&nbsp;(n.d.). RustBelt Meets Relaxed Memory, _4_, 29.
~ end bibitem

~ begin bibitem {id:"david_cristina_program_2017"; cite-year:"2017"; cite-authors:"David Cristina and Kroening Daniel"; cite-authors-long:"David Cristina and Kroening Daniel"; cite-label:"David Cristina \& Kroening Daniel, 2017"; caption:"Program synthesis: challenges and opportunities&nl;David Cristina and Kroening Daniel, 2017"; data-line:"FormalReview.bib:1619"; searchterm:"Program%20synthesis%3A%20challenges%20and%20opportunities%20David%20Cristina%20and%20Kroening%20Daniel%2C%202017"; spellcheck:"false"}
David Cristina, & Kroening Daniel. (2017). Program synthesis: challenges and opportunities. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150403. https://doi.org/[10.1098/rsta.2015.0403](https://dx.doi.org/10.1098/rsta.2015.0403){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_deducteamdedukti_2019"; cite-authors:"2019f"; cite-authors-long:"2019f"; cite-label:"\_Deducteam/Dedukti\_, 2019"; caption:"Deducteam/Dedukti&nl;2019f, "; data-line:"FormalReview.bib:5474"; searchterm:"Deducteam%2FDedukti%202019f%2C%20"; spellcheck:"false"}
_Deducteam/Dedukti_. (2019). Deducteam. Retrieved from <https://github.com/Deducteam/Dedukti>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_deducteamholide_2019"; cite-authors:"2019e"; cite-authors-long:"2019e"; cite-label:"\_Deducteam/Holide\_, 2019"; caption:"Deducteam/Holide&nl;2019e, "; data-line:"FormalReview.bib:5464"; searchterm:"Deducteam%2FHolide%202019e%2C%20"; spellcheck:"false"}
_Deducteam/Holide_. (2019). Deducteam. Retrieved from <https://github.com/Deducteam/Holide>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_dedukti_nodate"; cite-authors:"2020j"; cite-authors-long:"2020j"; cite-label:"\&ldquo;Dedukti - a Logical Framework,\&rdquo; n.d."; caption:"Dedukti - a Logical Framework&nl;2020j, "; data-line:"FormalReview.bib:5484"; searchterm:"Dedukti%20%20a%20Logical%20Framework%202020j%2C%20"; spellcheck:"false"}
Dedukti - a Logical Framework. (n.d.). Retrieved January 10, 2020, from <https://deducteam.github.io/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"parigot_tactic_2000"; cite-year:"2000"; cite-authors:"Delahaye"; cite-authors-long:"Delahaye"; cite-label:"Delahaye, 2000"; caption:"A Tactic Language for the System Coq&nl;Delahaye, 2000"; data-line:"FormalReview.bib:1724"; searchterm:"A%20Tactic%20Language%20for%20the%20System%20Coq%20Delahaye%2C%202000"; spellcheck:"false"}
Delahaye, D.&nbsp;(2000). A Tactic Language for the System Coq. In M.&nbsp;Parigot & A.&nbsp;Voronkov (Eds.), _Logic for Programming and Automated Reasoning_ (Vol. 1955, pp. 85–95). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/3-540-44404-1_7](https://dx.doi.org/10.1007/3-540-44404-1_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_fiat:_2015"; cite-year:"2015"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Pit-Claudel, Gross, and Chlipala"; cite-label:"Delaware, Pit-Claudel, Gross, \& Chlipala, 2015"; caption:"Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant&nl;Delaware, Pit-Claudel, Gross, and Chlipala, 2015"; data-line:"FormalReview.bib:1418"; searchterm:"Fiat%3A%20Deductive%20Synthesis%20of%20Abstract%20Data%20Types%20in%20a%20Proof%20Assistant%20Delaware%2C%20PitClaudel%2C%20Gross%2C%20and%20Chlipala%2C%202015"; spellcheck:"false"}
Delaware, B., Pit-Claudel, C., Gross, J., & Chlipala, A.&nbsp;(2015). Fiat: Deductive Synthesis of Abstract Data Types in a Proof Assistant. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 689–700). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2677006](https://dx.doi.org/10.1145/2676726.2677006){.bib-doi}
~ end bibitem

~ begin bibitem {id:"delaware_narcissus:_2018"; cite-year:"2018"; cite-authors:"Delaware et al."; cite-authors-long:"Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala"; cite-label:"Delaware, Suriyakarn, Pit\&ndash;Claudel, Ye, \& Chlipala, 2018"; caption:"Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats&nl;Delaware, Suriyakarn, Pit&ndash;Claudel, Ye, and Chlipala, 2018"; data-line:"FormalReview.bib:1546"; searchterm:"Narcissus%3A%20Deriving%20CorrectByConstruction%20Decoders%20and%20Encoders%20from%20Binary%20Formats%20Delaware%2C%20Suriyakarn%2C%20Pit%26ndash%3BClaudel%2C%20Ye%2C%20and%20Chlipala%2C%202018"; spellcheck:"false"}
Delaware, B., Suriyakarn, S., Pit&ndash;Claudel, C., Ye, Q., & Chlipala, A.&nbsp;(2018). Narcissus: Deriving Correct-By-Construction Decoders and Encoders from Binary Formats. Retrieved from <https://arxiv.org/abs/1803.04870v2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"delignat-lavaud_implementing_2017"; cite-year:"2017"; cite-authors:"Delignat-Lavaud et al."; cite-authors-long:"Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al."; cite-label:"Delignat-Lavaud et al., 2017"; caption:"Implementing and Proving the TLS 1.3 Record Layer&nl;Delignat-Lavaud, Fournet, Kohlweiss, Protzenko, Rastogi, Swamy, et al., 2017"; data-line:"FormalReview.bib:1790"; searchterm:"Implementing%20and%20Proving%20the%20TLS%201.3%20Record%20Layer%20DelignatLavaud%2C%20Fournet%2C%20Kohlweiss%2C%20Protzenko%2C%20Rastogi%2C%20Swamy%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Protzenko, J., Rastogi, A., Swamy, N., … Zinzindohoue, J.&nbsp;K.&nbsp;(2017). Implementing and Proving the TLS 1.3 Record Layer. Retrieved from <https://www.microsoft.com/en-us/research/publication/implementing-proving-tls-1-3-record-layer/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"de_millo_social_1979"; cite-year:"1979"; cite-authors:"De Millo et al."; cite-authors-long:"De Millo, Lipton, and Perlis"; cite-label:"De Millo, Lipton, \& Perlis, 1979"; caption:"Social Processes and Proofs of Theorems and Programs&nl;De Millo, Lipton, and Perlis, 1979"; data-line:"FormalReview.bib:3601"; searchterm:"Social%20Processes%20and%20Proofs%20of%20Theorems%20and%20Programs%20De%20Millo%2C%20Lipton%2C%20and%20Perlis%2C%201979"; spellcheck:"false"}
De Millo, R.&nbsp;A., Lipton, R.&nbsp;J., & Perlis, A.&nbsp;J.&nbsp;(1979). Social Processes and Proofs of Theorems and Programs. _Commun. ACM_, _22_(5), 271–280. https://doi.org/[10.1145/359104.359106](https://dx.doi.org/10.1145/359104.359106){.bib-doi}
~ end bibitem

~ begin bibitem {id:"devai_embedding_2009"; cite-year:"2009"; cite-authors:"Dévai"; cite-authors-long:"Dévai"; cite-label:"Dévai, 2009"; caption:"Embedding a Proof System in Haskell&nl;Dévai, 2009"; data-line:"FormalReview.bib:5317"; searchterm:"Embedding%20a%20Proof%20System%20in%20Haskell%20D%C3%A9vai%2C%202009"; spellcheck:"false"}
Dévai, G.&nbsp;(2009). Embedding a Proof System in Haskell. In _Central European Functional Programming School_ (pp. 354–371). Springer, Berlin, Heidelberg. https://doi.org/[10.1007/978-3-642-17685-2_10](https://dx.doi.org/10.1007/978-3-642-17685-2_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"di_cosmo_linear_2019"; cite-year:"2019"; cite-authors:"Di Cosmo and Miller"; cite-authors-long:"Di Cosmo and Miller"; cite-label:"Di Cosmo \& Miller, 2019"; caption:"Linear Logic&nl;Di Cosmo and Miller, 2019"; data-line:"FormalReview.bib:5664"; searchterm:"Linear%20Logic%20Di%20Cosmo%20and%20Miller%2C%202019"; spellcheck:"false"}
Di Cosmo, R., & Miller, D.&nbsp;(2019). Linear Logic. In E.&nbsp;N.&nbsp;Zalta (Ed.), _The Stanford Encyclopedia of Philosophy_ (Summer 2019). Metaphysics Research Lab, Stanford University. Retrieved from <https://plato.stanford.edu/archives/sum2019/entries/logic-linear/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"dijkstra_guarded_1975"; cite-year:"1975"; cite-authors:"Dijkstra"; cite-authors-long:"Dijkstra"; cite-label:"Dijkstra, 1975"; caption:"Guarded Commands, Nondeterminacy and Formal Derivation of Programs&nl;Dijkstra, 1975"; data-line:"FormalReview.bib:1916"; searchterm:"Guarded%20Commands%2C%20Nondeterminacy%20and%20Formal%20Derivation%20of%20Programs%20Dijkstra%2C%201975"; spellcheck:"false"}
Dijkstra, E.&nbsp;W.&nbsp;(1975). Guarded Commands, Nondeterminacy and Formal Derivation of Programs. _Commun. ACM_, _18_(8), 453–457. https://doi.org/[10.1145/360933.360975](https://dx.doi.org/10.1145/360933.360975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"dijkstra_political_1978"; cite-year:"1978"; cite-authors:"Dijkstra et al."; cite-authors-long:"Dijkstra, DeMillo, Lipton, and Perlis"; cite-label:"Dijkstra, DeMillo, Lipton, \& Perlis, 1978"; caption:"On a Political Pamphlet from the Middle Ages&nl;Dijkstra, DeMillo, Lipton, and Perlis, 1978"; data-line:"FormalReview.bib:3618"; searchterm:"On%20a%20Political%20Pamphlet%20from%20the%20Middle%20Ages%20Dijkstra%2C%20DeMillo%2C%20Lipton%2C%20and%20Perlis%2C%201978"; spellcheck:"false"}
Dijkstra, E.&nbsp;W., DeMillo, R.&nbsp;A., Lipton, R.&nbsp;J., & Perlis, A.&nbsp;J.&nbsp;(1978). On a Political Pamphlet from the Middle Ages. _SIGSOFT Softw. Eng. Notes_, _3_(2), 14–16. https://doi.org/[10.1145/1005888.1005890](https://dx.doi.org/10.1145/1005888.1005890){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_dines_nodate"; cite-authors:"2019k"; cite-authors-long:"2019k"; cite-label:"\&ldquo;Dines Bjorner,\&rdquo; n.d."; caption:"Dines Bjorner&nl;2019k, "; data-line:"FormalReview.bib:4608"; searchterm:"Dines%20Bjorner%202019k%2C%20"; spellcheck:"false"}
Dines Bjorner. (n.d.). Retrieved September 23, 2019, from <http://www.imm.dtu.dk/~dibj/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hermanns_local_2006"; cite-year:"2006"; cite-authors:"Distefano et al."; cite-authors-long:"Distefano, O’Hearn, and Yang"; cite-label:"Distefano, O’Hearn, \& Yang, 2006"; caption:"A Local Shape Analysis Based on Separation Logic&nl;Distefano, O’Hearn, and Yang, 2006"; data-line:"FormalReview.bib:3091"; searchterm:"A%20Local%20Shape%20Analysis%20Based%20on%20Separation%20Logic%20Distefano%2C%20O%E2%80%99Hearn%2C%20and%20Yang%2C%202006"; spellcheck:"false"}
Distefano, D., O’Hearn, P.&nbsp;W., & Yang, H.&nbsp;(2006). A Local Shape Analysis Based on Separation Logic. In H.&nbsp;Hermanns & J.&nbsp;Palsberg (Eds.), _Tools and Algorithms for the Construction and Analysis of Systems_ (Vol. 3920, pp. 287–302). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/11691372_19](https://dx.doi.org/10.1007/11691372_19){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_fresh_2009"; cite-year:"2009"; cite-authors:"Dockins et al."; cite-authors-long:"Dockins, Hobor, and Appel"; cite-label:"Dockins, Hobor, \& Appel, 2009"; caption:"A Fresh Look at Separation Algebras and Share Accounting&nl;Dockins, Hobor, and Appel, 2009"; data-line:"FormalReview.bib:2202"; searchterm:"A%20Fresh%20Look%20at%20Separation%20Algebras%20and%20Share%20Accounting%20Dockins%2C%20Hobor%2C%20and%20Appel%2C%202009"; spellcheck:"false"}
Dockins, R., Hobor, A., & Appel, A.&nbsp;W.&nbsp;(2009). A Fresh Look at Separation Algebras and Share Accounting. In Z.&nbsp;Hu (Ed.), _Programming Languages and Systems_ (Vol. 5904, pp. 161–177). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-10672-9_13](https://dx.doi.org/10.1007/978-3-642-10672-9_13){.bib-doi}
~ end bibitem

~ begin bibitem {id:"downey_algorithmic_2010"; cite-year:"2010"; cite-authors:"Downey and Hirschfeldt"; cite-authors-long:"Downey and Hirschfeldt"; cite-label:"Downey \& Hirschfeldt, 2010"; caption:"Algorithmic Randomness and Complexity&nl;Downey and Hirschfeldt, 2010"; data-line:"FormalReview.bib:4860"; searchterm:"Algorithmic%20Randomness%20and%20Complexity%20Downey%20and%20Hirschfeldt%2C%202010"; spellcheck:"false"}
Downey, R.&nbsp;G., & Hirschfeldt, D.&nbsp;R.&nbsp;(2010). _Algorithmic Randomness and Complexity_. New York, NY: Springer New York. https://doi.org/[10.1007/978-0-387-68441-3](https://dx.doi.org/10.1007/978-0-387-68441-3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_eacsl_nodate"; cite-authors:"2020l"; cite-authors-long:"2020l"; cite-label:"\&ldquo;EACSL – European Association for Computer Science Logic,\&rdquo; n.d."; caption:"EACSL – European Association for Computer Science Logic&nl;2020l, "; data-line:"FormalReview.bib:5357"; searchterm:"EACSL%20%E2%80%93%20European%20Association%20for%20Computer%20Science%20Logic%202020l%2C%20"; spellcheck:"false"}
EACSL – European Association for Computer Science Logic. (n.d.). Retrieved January 10, 2020, from <https://www.eacsl.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"easterbrook_formal_1997"; cite-year:"1997"; cite-authors:"S.&nbsp;Easterbrook and Callahan"; cite-authors-long:"S.&nbsp;Easterbrook and Callahan"; cite-label:"S. Easterbrook \& Callahan, 1997"; caption:"Formal methods for V &amp; V of partial specifications: an experience report&nl;S. Easterbrook and Callahan, 1997"; data-line:"FormalReview.bib:4699"; searchterm:"Formal%20methods%20for%20V%20%26amp%3B%20V%20of%20partial%20specifications%3A%20an%20experience%20report%20S.%20Easterbrook%20and%20Callahan%2C%201997"; spellcheck:"false"}
Easterbrook, S., & Callahan, J.&nbsp;(1997). Formal methods for V &amp; V of partial specifications: an experience report. In _Proceedings of ISRE ’97: 3rd IEEE International Symposium on Requirements Engineering_ (pp. 160–168). https://doi.org/[10.1109/ISRE.1997.566865](https://dx.doi.org/10.1109/ISRE.1997.566865){.bib-doi}
~ end bibitem

~ begin bibitem {id:"easterbrook_formal_nodate"; cite-year:"n.d."; cite-authors:"Steve Easterbrook and Callahan"; cite-authors-long:"Steve Easterbrook and Callahan"; cite-label:"Steve Easterbrook \& Callahan, n.d."; caption:"Formal Methods for V&amp;V of partial specifications: An experience report&nl;Steve Easterbrook and Callahan, n.d."; data-line:"FormalReview.bib:4712"; searchterm:"Formal%20Methods%20for%20V%26amp%3BV%20of%20partial%20specifications%3A%20An%20experience%20report%20Steve%20Easterbrook%20and%20Callahan%2C%20n.d."; spellcheck:"false"}
Easterbrook, S., & Callahan, J.&nbsp;(n.d.). Formal Methods for V&amp;V of partial specifications: An experience report, 9.
~ end bibitem

~ begin bibitem {id:"ebner_metaprogramming_2017"; cite-year:"2017"; cite-authors:"Ebner et al."; cite-authors-long:"Ebner, Ullrich, Roesch, Avigad, and Moura"; cite-label:"Ebner, Ullrich, Roesch, Avigad, \& Moura, 2017"; caption:"A Metaprogramming Framework for Formal Verification&nl;Ebner, Ullrich, Roesch, Avigad, and Moura, 2017"; data-line:"FormalReview.bib:2624"; searchterm:"A%20Metaprogramming%20Framework%20for%20Formal%20Verification%20Ebner%2C%20Ullrich%2C%20Roesch%2C%20Avigad%2C%20and%20Moura%2C%202017"; spellcheck:"false"}
Ebner, G., Ullrich, S., Roesch, J., Avigad, J., & Moura, L.&nbsp;de. (2017). A Metaprogramming Framework for Formal Verification. _Proc. ACM Program. Lang._, _1_, 34:1–34:29. https://doi.org/[10.1145/3110278](https://dx.doi.org/10.1145/3110278){.bib-doi}
~ end bibitem

~ begin bibitem {id:"eisenberg_dependent_2016"; cite-year:"2016"; cite-authors:"Eisenberg"; cite-authors-long:"Eisenberg"; cite-label:"Eisenberg, 2016"; caption:"DEPENDENT TYPES IN HASKELL: THEORY AND PRACTICE&nl;Eisenberg, 2016"; data-line:"FormalReview.bib:3572"; searchterm:"DEPENDENT%20TYPES%20IN%20HASKELL%3A%20THEORY%20AND%20PRACTICE%20Eisenberg%2C%202016"; spellcheck:"false"}
Eisenberg, R.&nbsp;A.&nbsp;(2016). _DEPENDENT TYPES IN HASKELL: THEORY AND PRACTICE_ (phdthesis). Pennsylvania, Philadelphia, PA, USA.
~ end bibitem

~ begin bibitem {id:"ekici_smtcoq:_2017"; cite-year:"2017"; cite-authors:"Ekici et al."; cite-authors-long:"Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett"; cite-label:"Ekici et al., 2017"; caption:"SMTCoq: A Plug-In for Integrating SMT Solvers into Coq&nl;Ekici, Mebsout, Tinelli, Keller, Katz, Reynolds, and Barrett, 2017"; data-line:"FormalReview.bib:1666"; searchterm:"SMTCoq%3A%20A%20PlugIn%20for%20Integrating%20SMT%20Solvers%20into%20Coq%20Ekici%2C%20Mebsout%2C%20Tinelli%2C%20Keller%2C%20Katz%2C%20Reynolds%2C%20and%20Barrett%2C%202017"; spellcheck:"false"}
Ekici, B., Mebsout, A., Tinelli, C., Keller, C., Katz, G., Reynolds, A., & Barrett, C.&nbsp;(2017). SMTCoq: A Plug-In for Integrating SMT Solvers into Coq. In R.&nbsp;Majumdar & V.&nbsp;Kunčak (Eds.), _Computer Aided Verification_ (pp. 126–133). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"epstein_computability_1989"; cite-year:"1989"; cite-authors:"Epstein and Carnielli"; cite-authors-long:"Epstein and Carnielli"; cite-label:"Epstein \& Carnielli, 1989"; caption:"Computability: Computable Functions Logic and the Foundations of Math&nl;Epstein and Carnielli, 1989"; data-line:"FormalReview.bib:5850"; searchterm:"Computability%3A%20Computable%20Functions%20Logic%20and%20the%20Foundations%20of%20Math%20Epstein%20and%20Carnielli%2C%201989"; spellcheck:"false"}
Epstein, R.&nbsp;L., & Carnielli, W.&nbsp;A.&nbsp;(1989). _Computability: Computable Functions Logic and the Foundations of Math_ (1 edition). Pacific Grove, Calif: Chapman and Hall/CRC.
~ end bibitem

~ begin bibitem {id:"erosa_taming_1994"; cite-year:"1994"; cite-authors:"Erosa and Hendren"; cite-authors-long:"Erosa and Hendren"; cite-label:"Erosa \& Hendren, 1994"; caption:"Taming control flow: a structured approach to eliminating goto statements&nl;Erosa and Hendren, 1994"; data-line:"FormalReview.bib:4172"; searchterm:"Taming%20control%20flow%3A%20a%20structured%20approach%20to%20eliminating%20goto%20statements%20Erosa%20and%20Hendren%2C%201994"; spellcheck:"false"}
Erosa, A.&nbsp;M., & Hendren, L.&nbsp;J.&nbsp;(1994). Taming control flow: a structured approach to eliminating goto statements. In _Proceedings of 1994 IEEE International Conference on Computer Languages (ICCL’94)_ (pp. 229–240). https://doi.org/[10.1109/ICCL.1994.288377](https://dx.doi.org/10.1109/ICCL.1994.288377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_etaps_nodate"; cite-authors:"2020m"; cite-authors-long:"2020m"; cite-label:"\&ldquo;ETAPS 2020,\&rdquo; n.d."; caption:"ETAPS 2020&nl;2020m, "; data-line:"FormalReview.bib:5333"; searchterm:"ETAPS%202020%202020m%2C%20"; spellcheck:"false"}
ETAPS 2020. (n.d.). Retrieved January 10, 2020, from <https://www.etaps.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_event-b_nodate"; cite-authors:"2020n"; cite-authors-long:"2020n"; cite-label:"\&ldquo;Event-B and the Rodin Platform,\&rdquo; n.d."; caption:"Event-B and the Rodin Platform&nl;2020n, "; data-line:"FormalReview.bib:5156"; searchterm:"EventB%20and%20the%20Rodin%20Platform%202020n%2C%20"; spellcheck:"false"}
Event-B and the Rodin Platform. (n.d.). Retrieved January 10, 2020, from <http://www.event-b.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"farrell_robotics_2018"; cite-year:"2018"; cite-authors:"Farrell et al."; cite-authors-long:"Farrell, Luckcuck, and Fisher"; cite-label:"Farrell, Luckcuck, \& Fisher, 2018"; caption:"Robotics and Integrated Formal Methods: Necessity meets Opportunity&nl;Farrell, Luckcuck, and Fisher, 2018"; data-line:"FormalReview.bib:4656"; searchterm:"Robotics%20and%20Integrated%20Formal%20Methods%3A%20Necessity%20meets%20Opportunity%20Farrell%2C%20Luckcuck%2C%20and%20Fisher%2C%202018"; spellcheck:"false"}
Farrell, M., Luckcuck, M., & Fisher, M.&nbsp;(2018). Robotics and Integrated Formal Methods: Necessity meets Opportunity. _arXiv:1805.11996 \[cs\]_, _11023_, 161–171. https://doi.org/[10.1007/978-3-319-98938-9_10](https://dx.doi.org/10.1007/978-3-319-98938-9_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"feldman_inferring_2019"; cite-year:"2019"; cite-authors:"Feldman et al."; cite-authors-long:"Feldman, Wilcox, Shoham, and Sagiv"; cite-label:"Feldman, Wilcox, Shoham, \& Sagiv, 2019"; caption:"Inferring Inductive Invariants from Phase Structures&nl;Feldman, Wilcox, Shoham, and Sagiv, 2019"; data-line:"FormalReview.bib:4353"; searchterm:"Inferring%20Inductive%20Invariants%20from%20Phase%20Structures%20Feldman%2C%20Wilcox%2C%20Shoham%2C%20and%20Sagiv%2C%202019"; spellcheck:"false"}
Feldman, Y.&nbsp;M.&nbsp;Y., Wilcox, J.&nbsp;R., Shoham, S., & Sagiv, M.&nbsp;(2019). Inferring Inductive Invariants from Phase Structures. _arXiv:1905.07739 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1905.07739](http://arxiv.org/abs/1905.07739){.bib-url}
~ end bibitem

~ begin bibitem {id:"filinski_representing_1994"; cite-year:"1994"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1994"; caption:"Representing Monads&nl;Filinski, 1994"; data-line:"FormalReview.bib:2045"; searchterm:"Representing%20Monads%20Filinski%2C%201994"; spellcheck:"false"}
Filinski, A.&nbsp;(1994). Representing Monads. In _Proceedings of the 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 446–457). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/174675.178047](https://dx.doi.org/10.1145/174675.178047){.bib-doi}
~ end bibitem

~ begin bibitem {id:"filinski_representing_1999"; cite-year:"1999"; cite-authors:"Filinski"; cite-authors-long:"Filinski"; cite-label:"Filinski, 1999"; caption:"Representing Layered Monads&nl;Filinski, 1999"; data-line:"FormalReview.bib:2062"; searchterm:"Representing%20Layered%20Monads%20Filinski%2C%201999"; spellcheck:"false"}
Filinski, A.&nbsp;(1999). Representing Layered Monads. In _Proceedings of the 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 175–188). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/292540.292557](https://dx.doi.org/10.1145/292540.292557){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fisher_kathleen_hacms_2017"; cite-year:"2017"; cite-authors:"Fisher Kathleen et al."; cite-authors-long:"Fisher Kathleen, Launchbury John, and Richards Raymond"; cite-label:"Fisher Kathleen, Launchbury John, \& Richards Raymond, 2017"; caption:"The HACMS program: using formal methods to eliminate exploitable bugs&nl;Fisher Kathleen, Launchbury John, and Richards Raymond, 2017"; data-line:"FormalReview.bib:1496"; searchterm:"The%20HACMS%20program%3A%20using%20formal%20methods%20to%20eliminate%20exploitable%20bugs%20Fisher%20Kathleen%2C%20Launchbury%20John%2C%20and%20Richards%20Raymond%2C%202017"; spellcheck:"false"}
Fisher Kathleen, Launchbury John, & Richards Raymond. (2017). The HACMS program: using formal methods to eliminate exploitable bugs. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150401. https://doi.org/[10.1098/rsta.2015.0401](https://dx.doi.org/10.1098/rsta.2015.0401){.bib-doi}
~ end bibitem

~ begin bibitem {id:"fleury_optimizing_2019"; cite-year:"2019"; cite-authors:"Fleury"; cite-authors-long:"Fleury"; cite-label:"Fleury, 2019"; caption:"Optimizing a Verified SAT Solver&nl;Fleury, 2019"; data-line:"FormalReview.bib:4086"; searchterm:"Optimizing%20a%20Verified%20SAT%20Solver%20Fleury%2C%202019"; spellcheck:"false"}
Fleury, M.&nbsp;(2019). Optimizing a Verified SAT Solver. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (pp. 148–165). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"noauthor_fm_nodate"; cite-authors:"2019o"; cite-authors-long:"2019o"; cite-label:"\&ldquo;FM folks - richardlford\@gmail.com - Gmail,\&rdquo; n.d."; caption:"FM folks - richardlford@gmail.com - Gmail&nl;2019o, "; data-line:"FormalReview.bib:4788"; searchterm:"FM%20folks%20%20richardlford%40gmail.com%20%20Gmail%202019o%2C%20"; spellcheck:"false"}
FM folks - richardlford@gmail.com - Gmail. (n.d.). Retrieved October 14, 2019, from <https://mail.google.com/mail/u/0/#inbox/FMfcgxwDrlVnZmDccTxHFBnzPRMfbmpn?projector=1&messagePartId=0.1>{.bib-url}
~ end bibitem

~ begin bibitem {id:"fogarty_concoqtion:_2007"; cite-year:"2007"; cite-authors:"Fogarty et al."; cite-authors-long:"Fogarty, Pasalic, Siek, and Taha"; cite-label:"Fogarty, Pasalic, Siek, \& Taha, 2007"; caption:"Concoqtion: Indexed Types Now!&nl;Fogarty, Pasalic, Siek, and Taha, 2007"; data-line:"FormalReview.bib:4233"; searchterm:"Concoqtion%3A%20Indexed%20Types%20Now!%20Fogarty%2C%20Pasalic%2C%20Siek%2C%20and%20Taha%2C%202007"; spellcheck:"false"}
Fogarty, S., Pasalic, E., Siek, J., & Taha, W.&nbsp;(2007). Concoqtion: Indexed Types Now! In _Proceedings of the 2007 ACM SIGPLAN Symposium on Partial Evaluation and Semantics-based Program Manipulation_ (pp. 112–121). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1244381.1244400](https://dx.doi.org/10.1145/1244381.1244400){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ford_specification-based_1997"; cite-year:"1997"; cite-authors:"Ford et al."; cite-authors-long:"Ford, Simon, Bevier, and Smith"; cite-label:"Ford, Simon, Bevier, \& Smith, 1997"; caption:"The specification-based testing of a trusted kernel: MK++&nl;Ford, Simon, Bevier, and Smith, 1997"; data-line:"FormalReview.bib:5043"; searchterm:"The%20specificationbased%20testing%20of%20a%20trusted%20kernel%3A%20MK%2B%2B%20Ford%2C%20Simon%2C%20Bevier%2C%20and%20Smith%2C%201997"; spellcheck:"false"}
Ford, R.&nbsp;L., Simon, R.&nbsp;T., Bevier, W.&nbsp;R., & Smith, L.&nbsp;M.&nbsp;(1997). The specification-based testing of a trusted kernel: MK++. In _First IEEE International Conference on Formal Engineering Methods_ (pp. 151–160). https://doi.org/[10.1109/ICFEM.1997.630422](https://dx.doi.org/10.1109/ICFEM.1997.630422){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_formalization_2019"; cite-authors:"2019b"; cite-authors-long:"2019b"; cite-label:"\_Formalization of the Interaction Tree Datatype in Coq\_, 2019"; caption:"Formalization of the Interaction Tree Datatype in Coq: DeepSpec/InteractionTrees&nl;2019b, "; data-line:"FormalReview.bib:3384"; searchterm:"Formalization%20of%20the%20Interaction%20Tree%20Datatype%20in%20Coq%3A%20DeepSpec%2FInteractionTrees%202019b%2C%20"; spellcheck:"false"}
_Formalization of the Interaction Tree Datatype in Coq: DeepSpec/InteractionTrees_. (2019). DeepSpec. Retrieved from <https://github.com/DeepSpec/InteractionTrees>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_formal_nodate"; cite-authors:"2020p"; cite-authors-long:"2020p"; cite-label:"\&ldquo;\(17\) \(PDF\) Formal Versus Agile,\&rdquo; n.d."; caption:"Formal Versus Agile: Survival of the Fittest.ResearchGate&nl;2020p, "; data-line:"FormalReview.bib:5697"; searchterm:"Formal%20Versus%20Agile%3A%20Survival%20of%20the%20Fittest.ResearchGate%202020p%2C%20"; spellcheck:"false"}
Formal Versus Agile: Survival of the Fittest.ResearchGate. (n.d.). Retrieved January 14, 2020, from <https://www.researchgate.net/publication/224587383_Formal_Versus_Agile_Survival_of_the_Fittest>{.bib-url}
~ end bibitem

~ begin bibitem {id:"fournet_deploying_nodate"; cite-year:"n.d."; cite-authors:"Fournet et al."; cite-authors-long:"Fournet, Hawblitzel, Parno, and Swamy"; cite-label:"Fournet, Hawblitzel, Parno, \& Swamy, n.d."; caption:"Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem&nl;Fournet, Hawblitzel, Parno, and Swamy, n.d."; data-line:"FormalReview.bib:2234"; searchterm:"Deploying%20a%20Veri%EF%AC%81ed%20Secure%20Implementation%20of%20the%20HTTPS%20Ecosystem%20Fournet%2C%20Hawblitzel%2C%20Parno%2C%20and%20Swamy%2C%20n.d."; spellcheck:"false"}
Fournet, C., Hawblitzel, C., Parno, B., & Swamy, N.&nbsp;(n.d.). Deploying a Veriﬁed Secure Implementation of the HTTPS Ecosystem, 10.
~ end bibitem

~ begin bibitem {id:"fowler_deriving_nodate"; cite-year:"2019"; cite-authors:"Fowler"; cite-authors-long:"Fowler"; cite-label:"Fowler, n.d."; caption:"Deriving Kepler’s Laws from the Inverse-Square Law&nl;Fowler, 2019"; data-line:"FormalReview.bib:1754"; searchterm:"Deriving%20Kepler%E2%80%99s%20Laws%20from%20the%20InverseSquare%20Law%20Fowler%2C%202019"; spellcheck:"false"}
Fowler, M.&nbsp;(n.d.). Deriving Kepler’s Laws from the Inverse-Square Law. Retrieved February 1, 2019, from <http://galileo.phys.virginia.edu/classes/152.mf1i.spring02/KeplersLaws.htm>{.bib-url}
~ end bibitem

~ begin bibitem {id:"friedman_elementary_2016"; cite-year:"2016"; cite-authors:"Friedman"; cite-authors-long:"Friedman"; cite-label:"Friedman, 2016"; caption:"An elementary illustrated introduction to simplicial sets&nl;Friedman, 2016"; data-line:"FormalReview.bib:5794"; searchterm:"An%20elementary%20illustrated%20introduction%20to%20simplicial%20sets%20Friedman%2C%202016"; spellcheck:"false"}
Friedman, G.&nbsp;(2016). An elementary illustrated introduction to simplicial sets. _arXiv:0809.4221 \[math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[0809.4221](http://arxiv.org/abs/0809.4221){.bib-url}
~ end bibitem

~ begin bibitem {id:"felty_keymaera_2015"; cite-year:"2015"; cite-authors:"Fulton et al."; cite-authors-long:"Fulton, Mitsch, Quesel, Völp, and Platzer"; cite-label:"Fulton, Mitsch, Quesel, Völp, \& Platzer, 2015"; caption:"KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems&nl;Fulton, Mitsch, Quesel, Völp, and Platzer, 2015"; data-line:"FormalReview.bib:958"; searchterm:"KeYmaera%20X%3A%20An%20Axiomatic%20Tactical%20Theorem%20Prover%20for%20Hybrid%20Systems%20Fulton%2C%20Mitsch%2C%20Quesel%2C%20V%C3%B6lp%2C%20and%20Platzer%2C%202015"; spellcheck:"false"}
Fulton, N., Mitsch, S., Quesel, J.-D., Völp, M., & Platzer, A.&nbsp;(2015). KeYmaera X: An Axiomatic Tactical Theorem Prover for Hybrid Systems. In A.&nbsp;P.&nbsp;Felty & A.&nbsp;Middeldorp (Eds.), _Automated Deduction - CADE-25_ (Vol. 9195, pp. 527–538). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-21401-6_36](https://dx.doi.org/10.1007/978-3-319-21401-6_36){.bib-doi}
~ end bibitem

~ begin bibitem {id:"furia_autoproof:_2017"; cite-year:"2017"; cite-authors:"Furia et al."; cite-authors-long:"Furia, Nordio, Polikarpova, and Tschannen"; cite-label:"Furia, Nordio, Polikarpova, \& Tschannen, 2017"; caption:"AutoProof: auto-active functional verification of object-oriented programs&nl;Furia, Nordio, Polikarpova, and Tschannen, 2017"; data-line:"FormalReview.bib:4570"; searchterm:"AutoProof%3A%20autoactive%20functional%20verification%20of%20objectoriented%20programs%20Furia%2C%20Nordio%2C%20Polikarpova%2C%20and%20Tschannen%2C%202017"; spellcheck:"false"}
Furia, C.&nbsp;A., Nordio, M., Polikarpova, N., & Tschannen, J.&nbsp;(2017). AutoProof: auto-active functional verification of object-oriented programs. _Int J Softw Tools Technol Transfer_, _19_(6), 697–716. https://doi.org/[10.1007/s10009-016-0419-0](https://dx.doi.org/10.1007/s10009-016-0419-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_galois_nodate"; cite-authors:"2020r"; cite-authors-long:"2020r"; cite-label:"\&ldquo;Galois, Inc. Tech Talk,\&rdquo; n.d."; caption:"Galois, Inc. Tech Talk: JaVerT: a JavaScript Verification Toolchain (Dr. Philippa Gardner)&nl;2020r, "; data-line:"FormalReview.bib:5298"; searchterm:"Galois%2C%20Inc.%20Tech%20Talk%3A%20JaVerT%3A%20a%20JavaScript%20Verification%20Toolchain%20Dr.%20Philippa%20Gardner%202020r%2C%20"; spellcheck:"false"}
Galois, Inc. Tech Talk: JaVerT: a JavaScript Verification Toolchain (Dr. Philippa Gardner). (n.d.). Retrieved from <https://www.youtube.com/watch?v=uNVAmCYL1Jo>{.bib-url}
~ end bibitem

~ begin bibitem {id:"garillot_packaging_2009"; cite-year:"2009"; cite-authors:"Garillot et al."; cite-authors-long:"Garillot, Gonthier, Mahboubi, and Rideau"; cite-label:"Garillot, Gonthier, Mahboubi, \& Rideau, 2009"; caption:"Packaging Mathematical Structures&nl;Garillot, Gonthier, Mahboubi, and Rideau, 2009"; data-line:"FormalReview.bib:4795"; searchterm:"Packaging%20Mathematical%20Structures%20Garillot%2C%20Gonthier%2C%20Mahboubi%2C%20and%20Rideau%2C%202009"; spellcheck:"false"}
Garillot, F., Gonthier, G., Mahboubi, A., & Rideau, L.&nbsp;(2009). Packaging Mathematical Structures. In S.&nbsp;Berghofer, T.&nbsp;Nipkow, C.&nbsp;Urban, & M.&nbsp;Wenzel (Eds.), _Theorem Proving in Higher Order Logics_ (pp. 327–342). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"gasser_building_1988"; cite-year:"1988"; cite-authors:"Gasser"; cite-authors-long:"Gasser"; cite-label:"Gasser, 1988"; caption:"Building a secure computer system&nl;Gasser, 1988"; data-line:"FormalReview.bib:2697"; searchterm:"Building%20a%20secure%20computer%20system%20Gasser%2C%201988"; spellcheck:"false"}
Gasser, M.&nbsp;(1988). _Building a secure computer system_. New York: Van Nostrand Reinhold Co.
~ end bibitem

~ begin bibitem {id:"noauthor_ghc_nodate"; cite-authors:"2019s"; cite-authors-long:"2019s"; cite-label:"\&ldquo;GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide,\&rdquo; n.d."; caption:"GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide&nl;2019s, "; data-line:"FormalReview.bib:3781"; searchterm:"GHC%20User%E2%80%99s%20Guide%20%E2%80%94%20Glasgow%20Haskell%20Compiler%208.6.5%20User's%20Guide%202019s%2C%20"; spellcheck:"false"}
GHC User’s Guide — Glasgow Haskell Compiler 8.6.5 User's Guide. (n.d.). Retrieved May 26, 2019, from <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gilbert_definitional_2019"; cite-year:"2019"; cite-authors:"Gilbert et al."; cite-authors-long:"Gilbert, Cockx, Sozeau, and Tabareau"; cite-label:"Gilbert, Cockx, Sozeau, \& Tabareau, 2019"; caption:"Definitional Proof-irrelevance Without K&nl;Gilbert, Cockx, Sozeau, and Tabareau, 2019"; data-line:"FormalReview.bib:3487"; searchterm:"Definitional%20Proofirrelevance%20Without%20K%20Gilbert%2C%20Cockx%2C%20Sozeau%2C%20and%20Tabareau%2C%202019"; spellcheck:"false"}
Gilbert, G., Cockx, J., Sozeau, M., & Tabareau, N.&nbsp;(2019). Definitional Proof-irrelevance Without K.&nbsp;_Proc. ACM Program. Lang._, _3_, 3:1–3:28. https://doi.org/[10.1145/3290316](https://dx.doi.org/10.1145/3290316){.bib-doi}
~ end bibitem

~ begin bibitem {id:"girard_linear_1995"; cite-year:"1995"; cite-authors:"Girard"; cite-authors-long:"Girard"; cite-label:"Girard, 1995"; caption:"Linear Logic: its syntax and semantics&nl;Girard, 1995"; data-line:"FormalReview.bib:5679"; searchterm:"Linear%20Logic%3A%20its%20syntax%20and%20semantics%20Girard%2C%201995"; spellcheck:"false"}
Girard, J.-Y.&nbsp;(1995). Linear Logic: its syntax and semantics. In J.-Y.&nbsp;Girard, Y.&nbsp;Lafont, & L.&nbsp;Regnier (Eds.), _Advances in Linear Logic_ (pp. 1–42). Cambridge: Cambridge University Press. https://doi.org/[10.1017/CBO9780511629150.002](https://dx.doi.org/10.1017/CBO9780511629150.002){.bib-doi}
~ end bibitem

~ begin bibitem {id:"giuffrida_safe_2014"; cite-year:"2014"; cite-authors:"C Giuffrida"; cite-authors-long:"C Giuffrida"; cite-label:"C Giuffrida, 2014"; caption:"Safe and automatic live update&nl;C Giuffrida, 2014"; data-line:"FormalReview.bib:5000"; searchterm:"Safe%20and%20automatic%20live%20update%20C%20Giuffrida%2C%202014"; spellcheck:"false"}
Giuffrida, C.&nbsp;(2014). _Safe and automatic live update_ (phdthesis).
~ end bibitem

~ begin bibitem {id:"giuffrida_safe_2013"; cite-year:"2013"; cite-authors:"Cristiano Giuffrida et al."; cite-authors-long:"Cristiano Giuffrida, Kuijsten, Tanenbaum, Giuffrida, Kuijsten, Tanenbaum, et al."; cite-label:"Cristiano Giuffrida et al., 2013"; caption:"Safe and automatic live update for operating systems&nl;Cristiano Giuffrida, Kuijsten, Tanenbaum, Giuffrida, Kuijsten, Tanenbaum, et al., 2013"; data-line:"FormalReview.bib:5010"; searchterm:"Safe%20and%20automatic%20live%20update%20for%20operating%20systems%20Cristiano%20Giuffrida%2C%20Kuijsten%2C%20Tanenbaum%2C%20Giuffrida%2C%20Kuijsten%2C%20Tanenbaum%2C%20et%20al.%2C%202013"; spellcheck:"false"}
Giuffrida, C., Kuijsten, A., Tanenbaum, A.&nbsp;S., Giuffrida, C., Kuijsten, A., Tanenbaum, A.&nbsp;S., … Tanenbaum, A.&nbsp;S.&nbsp;(2013). Safe and automatic live update for operating systems. _ACM SIGARCH Computer Architecture News_, _41_(1), 279–292. https://doi.org/[10.1145/2451116.2451147](https://dx.doi.org/10.1145/2451116.2451147){.bib-doi}
~ end bibitem

~ begin bibitem {id:"goguen_unwinding_1984"; cite-year:"1984"; cite-authors:"Goguen and Meseguer"; cite-authors-long:"Goguen and Meseguer"; cite-label:"Goguen \& Meseguer, 1984"; caption:"Unwinding and Inference Control&nl;Goguen and Meseguer, 1984"; data-line:"FormalReview.bib:3695"; searchterm:"Unwinding%20and%20Inference%20Control%20Goguen%20and%20Meseguer%2C%201984"; spellcheck:"false"}
Goguen, J.&nbsp;A., & Meseguer, J.&nbsp;(1984). Unwinding and Inference Control. In _1984 IEEE Symposium on Security and Privacy_ (pp. 75–75). Oakland, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP.1984.10019](https://dx.doi.org/10.1109/SP.1984.10019){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_formal_2008"; cite-year:"2008"; cite-authors:"Gonthier"; cite-authors-long:"Gonthier"; cite-label:"Gonthier, 2008"; caption:"Formal Proof—The Four- Color Theorem&nl;Gonthier, 2008"; data-line:"FormalReview.bib:1446"; searchterm:"Formal%20Proof%E2%80%94The%20Four%20Color%20Theorem%20Gonthier%2C%202008"; spellcheck:"false"}
Gonthier, G.&nbsp;(2008). Formal Proof—The Four- Color Theorem, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"gonthier_introduction_2010"; cite-year:"2010"; cite-authors:"Gonthier and Mahboubi"; cite-authors-long:"Gonthier and Mahboubi"; cite-label:"Gonthier \& Mahboubi, 2010"; caption:"An introduction to small scale reflection in Coq&nl;Gonthier and Mahboubi, 2010"; data-line:"FormalReview.bib:2079"; searchterm:"An%20introduction%20to%20small%20scale%20reflection%20in%20Coq%20Gonthier%20and%20Mahboubi%2C%202010"; spellcheck:"false"}
Gonthier, G., & Mahboubi, A.&nbsp;(2010). An introduction to small scale reflection in Coq. _Journal of Formalized Reasoning_, _3_(2), 95–152. https://doi.org/[10.6092/issn.1972-5787/1979](https://dx.doi.org/10.6092/issn.1972-5787/1979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_small_2015"; cite-year:"2015"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Mahboubi, and Tassi"; cite-label:"Gonthier, Mahboubi, \& Tassi, 2015"; caption:"A Small Scale Reflection Extension for the Coq system&nl;Gonthier, Mahboubi, and Tassi, 2015"; data-line:"FormalReview.bib:3156"; searchterm:"A%20Small%20Scale%20Reflection%20Extension%20for%20the%20Coq%20system%20Gonthier%2C%20Mahboubi%2C%20and%20Tassi%2C%202015"; spellcheck:"false"}
Gonthier, G., Mahboubi, A., & Tassi, E.&nbsp;(2015). _A Small Scale Reflection Extension for the Coq system_ (report). Inria Saclay Ile de France. Retrieved from <https://hal.inria.fr/inria-00258384/document>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gonthier_how_2011"; cite-year:"2011"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Ziliani, Nanevski, and Dreyer"; cite-label:"Gonthier, Ziliani, Nanevski, \& Dreyer, 2011"; caption:"How to Make Ad Hoc Proof Automation Less Ad Hoc&nl;Gonthier, Ziliani, Nanevski, and Dreyer, 2011"; data-line:"FormalReview.bib:2097"; searchterm:"How%20to%20Make%20Ad%20Hoc%20Proof%20Automation%20Less%20Ad%20Hoc%20Gonthier%2C%20Ziliani%2C%20Nanevski%2C%20and%20Dreyer%2C%202011"; spellcheck:"false"}
Gonthier, G., Ziliani, B., Nanevski, A., & Dreyer, D.&nbsp;(2011). How to Make Ad Hoc Proof Automation Less Ad Hoc. In _Proceedings of the 16th ACM SIGPLAN International Conference on Functional Programming_ (pp. 163–175). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2034773.2034798](https://dx.doi.org/10.1145/2034773.2034798){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gonthier_how_2013"; cite-year:"2013"; cite-authors:"Gonthier et al."; cite-authors-long:"Gonthier, Ziliani, Nanevski, and Dreyer"; cite-label:"Gonthier, Ziliani, Nanevski, \& Dreyer, 2013"; caption:"How to make ad hoc proof automation less ad hoc&nl;Gonthier, Ziliani, Nanevski, and Dreyer, 2013"; data-line:"FormalReview.bib:4674"; searchterm:"How%20to%20make%20ad%20hoc%20proof%20automation%20less%20ad%20hoc%20Gonthier%2C%20Ziliani%2C%20Nanevski%2C%20and%20Dreyer%2C%202013"; spellcheck:"false"}
Gonthier, G., Ziliani, B., Nanevski, A., & Dreyer, D.&nbsp;(2013). How to make ad hoc proof automation less ad hoc. _J.&nbsp;Funct. Prog._, _23_(4), 357–401. https://doi.org/[10.1017/S0956796813000051](https://dx.doi.org/10.1017/S0956796813000051){.bib-doi}
~ end bibitem

~ begin bibitem {id:"goossens_xetex_nodate"; cite-year:"n.d."; cite-authors:"Goossens"; cite-authors-long:"Goossens"; cite-label:"Goossens, n.d."; caption:"The XeTeX Companion: TeX meets OpenType and Unicode&nl;Goossens, n.d."; data-line:"FormalReview.bib:5283"; searchterm:"The%20XeTeX%20Companion%3A%20TeX%20meets%20OpenType%20and%20Unicode%20Goossens%2C%20n.d."; spellcheck:"false"}
Goossens, M.&nbsp;(n.d.). The XeTeX Companion: TeX meets OpenType and Unicode, 112.
~ end bibitem

~ begin bibitem {id:"gorogiannis_true_2019"; cite-year:"2019"; cite-authors:"Gorogiannis et al."; cite-authors-long:"Gorogiannis, O’Hearn, and Sergey"; cite-label:"Gorogiannis, O’Hearn, \& Sergey, 2019"; caption:"A true positives theorem for a static race detector&nl;Gorogiannis, O’Hearn, and Sergey, 2019"; data-line:"FormalReview.bib:72"; searchterm:"A%20true%20positives%20theorem%20for%20a%20static%20race%20detector%20Gorogiannis%2C%20O%E2%80%99Hearn%2C%20and%20Sergey%2C%202019"; spellcheck:"false"}
Gorogiannis, N., O’Hearn, P.&nbsp;W., & Sergey, I.&nbsp;(2019). A true positives theorem for a static race detector. _Proceedings of the ACM on Programming Languages_, _3_, 1–29. https://doi.org/[10.1145/3290370](https://dx.doi.org/10.1145/3290370){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gross_experience_2014"; cite-year:"2014"; cite-authors:"Gross et al."; cite-authors-long:"Gross, Chlipala, and Spivak"; cite-label:"Gross, Chlipala, \& Spivak, 2014"; caption:"Experience Implementing a Performant Category-Theory Library in Coq&nl;Gross, Chlipala, and Spivak, 2014"; data-line:"FormalReview.bib:5546"; searchterm:"Experience%20Implementing%20a%20Performant%20CategoryTheory%20Library%20in%20Coq%20Gross%2C%20Chlipala%2C%20and%20Spivak%2C%202014"; spellcheck:"false"}
Gross, J., Chlipala, A., & Spivak, D.&nbsp;I.&nbsp;(2014). Experience Implementing a Performant Category-Theory Library in Coq. _arXiv:1401.7694 \[cs, Math\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1401.7694](http://arxiv.org/abs/1401.7694){.bib-url}
~ end bibitem

~ begin bibitem {id:"gueneau_procrastination_nodate"; cite-year:"n.d."; cite-authors:"Guéneau"; cite-authors-long:"Guéneau"; cite-label:"Guéneau, n.d."; caption:"Procrastination&nl;Guéneau, n.d."; data-line:"FormalReview.bib:4274"; searchterm:"Procrastination%20Gu%C3%A9neau%2C%20n.d."; spellcheck:"false"}
Guéneau, A.&nbsp;(n.d.). Procrastination, 7.
~ end bibitem

~ begin bibitem {id:"gueneau_formal_nodate"; cite-year:"n.d."; cite-authors:"Guéneau et al."; cite-authors-long:"Guéneau, Jourdan, Charguéraud, and Pottier"; cite-label:"Guéneau, Jourdan, Charguéraud, \& Pottier, n.d."; caption:"Formal Proof and Analysis of an Incremental Cycle Detection Algorithm&nl;Guéneau, Jourdan, Charguéraud, and Pottier, n.d."; data-line:"FormalReview.bib:3515"; searchterm:"Formal%20Proof%20and%20Analysis%20of%20an%20Incremental%20Cycle%20Detection%20Algorithm%20Gu%C3%A9neau%2C%20Jourdan%2C%20Chargu%C3%A9raud%2C%20and%20Pottier%2C%20n.d."; spellcheck:"false"}
Guéneau, A., Jourdan, J.-H., Charguéraud, A., & Pottier, F.&nbsp;(n.d.). Formal Proof and Analysis of an Incremental Cycle Detection Algorithm, 23.
~ end bibitem

~ begin bibitem {id:"gu_deep_2015"; cite-year:"2015"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al."; cite-label:"Gu et al., 2015"; caption:"Deep Specifications and Certified Abstraction Layers&nl;Gu, Koenig, Ramananandro, Shao, Wu, Weng, et al., 2015"; data-line:"FormalReview.bib:498"; searchterm:"Deep%20Specifications%20and%20Certified%20Abstraction%20Layers%20Gu%2C%20Koenig%2C%20Ramananandro%2C%20Shao%2C%20Wu%2C%20Weng%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Gu, R., Koenig, J., Ramananandro, T., Shao, Z., Wu, X.&nbsp;(Newman), Weng, S.-C., … Guo, Y.&nbsp;(2015). Deep Specifications and Certified Abstraction Layers. In _Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 595–608). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2676726.2676975](https://dx.doi.org/10.1145/2676726.2676975){.bib-doi}
~ end bibitem

~ begin bibitem {id:"gu_certikos:_2016"; cite-year:"2016"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo"; cite-label:"Gu et al., 2016"; caption:"CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels&nl;Gu, Shao, Chen, Wu, Kim, Sjöberg, and Costanzo, 2016"; data-line:"FormalReview.bib:549"; searchterm:"CertiKOS%3A%20An%20Extensible%20Architecture%20for%20Building%20Certified%20Concurrent%20OS%20Kernels%20Gu%2C%20Shao%2C%20Chen%2C%20Wu%2C%20Kim%2C%20Sj%C3%B6berg%2C%20and%20Costanzo%2C%202016"; spellcheck:"false"}
Gu, R., Shao, Z., Chen, H., Wu, X., Kim, J., Sjöberg, V., & Costanzo, D.&nbsp;(2016). CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels. In _Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation_ (pp. 653–669). Berkeley, CA, USA: USENIX Association. Retrieved from <http://dl.acm.org/citation.cfm?id=3026877.3026928>{.bib-url}
~ end bibitem

~ begin bibitem {id:"gu_certified_2018"; cite-year:"2018"; cite-authors:"Gu et al."; cite-authors-long:"Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al."; cite-label:"Gu et al., 2018"; caption:"Certified Concurrent Abstraction Layers&nl;Gu, Shao, Kim, Wu, Koenig, Sjöberg, et al., 2018"; data-line:"FormalReview.bib:595"; searchterm:"Certified%20Concurrent%20Abstraction%20Layers%20Gu%2C%20Shao%2C%20Kim%2C%20Wu%2C%20Koenig%2C%20Sj%C3%B6berg%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Gu, R., Shao, Z., Kim, J., Wu, X.&nbsp;(Newman), Koenig, J., Sjöberg, V., … Ramananandro, T.&nbsp;(2018). Certified Concurrent Abstraction Layers. In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 646–661). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192381](https://dx.doi.org/10.1145/3192366.3192381){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_seloger:_2013"; cite-year:"2013"; cite-authors:"Haase et al."; cite-authors-long:"Haase, Ishtiaq, Ouaknine, and Parkinson"; cite-label:"Haase, Ishtiaq, Ouaknine, \& Parkinson, 2013"; caption:"SeLoger: A Tool for Graph-Based Reasoning in Separation Logic&nl;Haase, Ishtiaq, Ouaknine, and Parkinson, 2013"; data-line:"FormalReview.bib:2481"; searchterm:"SeLoger%3A%20A%20Tool%20for%20GraphBased%20Reasoning%20in%20Separation%20Logic%20Haase%2C%20Ishtiaq%2C%20Ouaknine%2C%20and%20Parkinson%2C%202013"; spellcheck:"false"}
Haase, C., Ishtiaq, S., Ouaknine, J., & Parkinson, M.&nbsp;J.&nbsp;(2013). SeLoger: A Tool for Graph-Based Reasoning in Separation Logic. In N.&nbsp;Sharygina & H.&nbsp;Veith (Eds.), _Computer Aided Verification_ (Vol. 8044, pp. 790–795). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39799-8_55](https://dx.doi.org/10.1007/978-3-642-39799-8_55){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_handbook_nodate"; cite-authors:"2019t"; cite-authors-long:"2019t"; cite-label:"\&ldquo;Handbook Of Floating Point Arithmetic Download eBook for Free,\&rdquo; n.d."; caption:"Handbook Of Floating Point Arithmetic Download eBook for Free&nl;2019t, "; data-line:"FormalReview.bib:3861"; searchterm:"Handbook%20Of%20Floating%20Point%20Arithmetic%20Download%20eBook%20for%20Free%202019t%2C%20"; spellcheck:"false"}
Handbook Of Floating Point Arithmetic Download eBook for Free. (n.d.). Retrieved May 26, 2019, from <http://ebook4scaricare.com/gratis/handbook-of-floating-point-arithmetic/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"harper_framework_1993"; cite-year:"1993"; cite-authors:"Harper et al."; cite-authors-long:"Harper, Honsell, and Plotkin"; cite-label:"Harper, Honsell, \& Plotkin, 1993"; caption:"A Framework for Defining Logics&nl;Harper, Honsell, and Plotkin, 1993"; data-line:"FormalReview.bib:2151"; searchterm:"A%20Framework%20for%20Defining%20Logics%20Harper%2C%20Honsell%2C%20and%20Plotkin%2C%201993"; spellcheck:"false"}
Harper, R., Honsell, F., & Plotkin, G.&nbsp;(1993). A Framework for Defining Logics. _J.&nbsp;ACM_, _40_(1), 143–184. https://doi.org/[10.1145/138027.138060](https://dx.doi.org/10.1145/138027.138060){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harrison_formal_2008"; cite-year:"2008"; cite-authors:"J.&nbsp;Harrison"; cite-authors-long:"J.&nbsp;Harrison"; cite-label:"J. Harrison, 2008"; caption:"Formal Proof—Theory and Practice&nl;J. Harrison, 2008"; data-line:"FormalReview.bib:1468"; searchterm:"Formal%20Proof%E2%80%94Theory%20and%20Practice%20J.%20Harrison%2C%202008"; spellcheck:"false"}
Harrison, J.&nbsp;(2008). Formal Proof—Theory and Practice, _55_(11), 12.
~ end bibitem

~ begin bibitem {id:"harrison_hol_2013"; cite-year:"2013"; cite-authors:"J.&nbsp;Harrison"; cite-authors-long:"J.&nbsp;Harrison"; cite-label:"J. Harrison, 2013"; caption:"The HOL Light Theory of Euclidean Space&nl;J. Harrison, 2013"; data-line:"FormalReview.bib:2168"; searchterm:"The%20HOL%20Light%20Theory%20of%20Euclidean%20Space%20J.%20Harrison%2C%202013"; spellcheck:"false"}
Harrison, J.&nbsp;(2013). The HOL Light Theory of Euclidean Space. _Journal of Automated Reasoning_, _50_(2), 173–190. https://doi.org/[10.1007/s10817-012-9250-9](https://dx.doi.org/10.1007/s10817-012-9250-9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"harrison_can_1997"; cite-year:"1997"; cite-authors:"L.&nbsp;Harrison"; cite-authors-long:"L.&nbsp;Harrison"; cite-label:"L. Harrison, 1997"; caption:"Can abstract interpretation become a mainstream compiler technology?&nl;L. Harrison, 1997"; data-line:"FormalReview.bib:4201"; searchterm:"Can%20abstract%20interpretation%20become%20a%20mainstream%20compiler%20technology%3F%20L.%20Harrison%2C%201997"; spellcheck:"false"}
Harrison, L.&nbsp;(1997). Can abstract interpretation become a mainstream compiler technology? In P.&nbsp;Van Hentenryck (Ed.), _Static Analysis_ (pp. 395–395). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"hatcliff_behavioral_2012"; cite-year:"2012"; cite-authors:"Hatcliff et al."; cite-authors-long:"Hatcliff, Leavens, Leino, Müller, and Parkinson"; cite-label:"Hatcliff, Leavens, Leino, Müller, \& Parkinson, 2012"; caption:"Behavioral Interface Specification Languages&nl;Hatcliff, Leavens, Leino, Müller, and Parkinson, 2012"; data-line:"FormalReview.bib:1202"; searchterm:"Behavioral%20Interface%20Specification%20Languages%20Hatcliff%2C%20Leavens%2C%20Leino%2C%20M%C3%BCller%2C%20and%20Parkinson%2C%202012"; spellcheck:"false"}
Hatcliff, J., Leavens, G.&nbsp;T., Leino, K.&nbsp;R.&nbsp;M., Müller, P., & Parkinson, M.&nbsp;(2012). Behavioral Interface Specification Languages. _ACM Comput. Surv._, _44_(3), 16:1–16:58. https://doi.org/[10.1145/2187671.2187678](https://dx.doi.org/10.1145/2187671.2187678){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hathhorn_defining_2015"; cite-year:"2015"; cite-authors:"Hathhorn et al."; cite-authors-long:"Hathhorn, Ellison, and Roşu"; cite-label:"Hathhorn, Ellison, \& Roşu, 2015"; caption:"Defining the Undefinedness of C&nl;Hathhorn, Ellison, and Roşu, 2015"; data-line:"FormalReview.bib:2561"; searchterm:"Defining%20the%20Undefinedness%20of%20C%20Hathhorn%2C%20Ellison%2C%20and%20Ro%C5%9Fu%2C%202015"; spellcheck:"false"}
Hathhorn, C., Ellison, C., & Roşu, G.&nbsp;(2015). Defining the Undefinedness of C.&nbsp;In _Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 336–345). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2737924.2737979](https://dx.doi.org/10.1145/2737924.2737979){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironfleet:_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al."; cite-label:"Hawblitzel, Howell, et al., 2015"; caption:"IronFleet: Proving Practical Distributed Systems Correct&nl;Hawblitzel, Howell, Kapritsos, Lorch, Parno, Roberts, et al., 2015"; data-line:"FormalReview.bib:2251"; searchterm:"IronFleet%3A%20Proving%20Practical%20Distributed%20Systems%20Correct%20Hawblitzel%2C%20Howell%2C%20Kapritsos%2C%20Lorch%2C%20Parno%2C%20Roberts%2C%20et%20al.%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Howell, J., Kapritsos, M., Lorch, J.&nbsp;R., Parno, B., Roberts, M.&nbsp;L., … Zill, B.&nbsp;(2015). IronFleet: Proving Practical Distributed Systems Correct. In _Proceedings of the 25th Symposium on Operating Systems Principles_ (pp. 1–17). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2815400.2815428](https://dx.doi.org/10.1145/2815400.2815428){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hawblitzel_ironclad_nodate"; cite-year:"n.d."; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill"; cite-label:"Hawblitzel et al., n.d."; caption:"Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation&nl;Hawblitzel, Howell, Lorch, Narayan, Parno, Zhang, and Zill, n.d."; data-line:"FormalReview.bib:2242"; searchterm:"Ironclad%20Apps%3A%20EndtoEnd%20Security%20via%20Automated%20FullSystem%20Veri%EF%AC%81cation%20Hawblitzel%2C%20Howell%2C%20Lorch%2C%20Narayan%2C%20Parno%2C%20Zhang%2C%20and%20Zill%2C%20n.d."; spellcheck:"false"}
Hawblitzel, C., Howell, J., Lorch, J.&nbsp;R., Narayan, A., Parno, B., Zhang, D., & Zill, B.&nbsp;(n.d.). Ironclad Apps: End-to-End Security via Automated Full-System Veriﬁcation, 18.
~ end bibitem

~ begin bibitem {id:"hawblitzel_automated_2015"; cite-year:"2015"; cite-authors:"Hawblitzel et al."; cite-authors-long:"Hawblitzel, Petrank, Qadeer, and Tasiran"; cite-label:"Hawblitzel, Petrank, Qadeer, \& Tasiran, 2015"; caption:"Automated and Modular Refinement Reasoning for Concurrent Programs&nl;Hawblitzel, Petrank, Qadeer, and Tasiran, 2015"; data-line:"FormalReview.bib:2269"; searchterm:"Automated%20and%20Modular%20Refinement%20Reasoning%20for%20Concurrent%20Programs%20Hawblitzel%2C%20Petrank%2C%20Qadeer%2C%20and%20Tasiran%2C%202015"; spellcheck:"false"}
Hawblitzel, C., Petrank, E., Qadeer, S., & Tasiran, S.&nbsp;(2015). Automated and Modular Refinement Reasoning for Concurrent Programs. In _Computer Aided Verification_ (pp. 449–465). Springer, Cham. https://doi.org/[10.1007/978-3-319-21668-3_26](https://dx.doi.org/10.1007/978-3-319-21668-3_26){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_hazel_nodate"; cite-authors:"2019u"; cite-authors-long:"2019u"; cite-label:"\&ldquo;Hazel, a live functional programming environment featuring typed holes.,\&rdquo; n.d."; caption:"Hazel, a live functional programming environment featuring typed holes.&nl;2019u, "; data-line:"FormalReview.bib:4423"; searchterm:"Hazel%2C%20a%20live%20functional%20programming%20environment%20featuring%20typed%20holes.%202019u%2C%20"; spellcheck:"false"}
Hazel, a live functional programming environment featuring typed holes. (n.d.). Retrieved August 30, 2019, from <http://hazel.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_hazel_2019"; cite-authors:"2019d"; cite-authors-long:"2019d"; cite-label:"\_Hazel, a live functional programming environment with typed holes\_, 2019"; caption:"Hazel, a live functional programming environment with typed holes: hazelgrove/hazel&nl;2019d, "; data-line:"FormalReview.bib:4430"; searchterm:"Hazel%2C%20a%20live%20functional%20programming%20environment%20with%20typed%20holes%3A%20hazelgrove%2Fhazel%202019d%2C%20"; spellcheck:"false"}
_Hazel, a live functional programming environment with typed holes: hazelgrove/hazel_. (2019). hazelgrove. Retrieved from <https://github.com/hazelgrove/hazel>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hedin_perspective_nodate"; cite-year:"n.d."; cite-authors:"Hedin and Sabelfeld"; cite-authors-long:"Hedin and Sabelfeld"; cite-label:"Hedin \& Sabelfeld, n.d."; caption:"A Perspective on Information-Flow Control&nl;Hedin and Sabelfeld, n.d."; data-line:"FormalReview.bib:3633"; searchterm:"A%20Perspective%20on%20InformationFlow%20Control%20Hedin%20and%20Sabelfeld%2C%20n.d."; spellcheck:"false"}
Hedin, D., & Sabelfeld, A.&nbsp;(n.d.). A Perspective on Information-Flow Control, 29.
~ end bibitem

~ begin bibitem {id:"herlihy_linearizability:_1990"; cite-year:"1990"; cite-authors:"Herlihy and Wing"; cite-authors-long:"Herlihy and Wing"; cite-label:"Herlihy \& Wing, 1990"; caption:"Linearizability: A Correctness Condition for Concurrent Objects&nl;Herlihy and Wing, 1990"; data-line:"FormalReview.bib:532"; searchterm:"Linearizability%3A%20A%20Correctness%20Condition%20for%20Concurrent%20Objects%20Herlihy%20and%20Wing%2C%201990"; spellcheck:"false"}
Herlihy, M.&nbsp;P., & Wing, J.&nbsp;M.&nbsp;(1990). Linearizability: A Correctness Condition for Concurrent Objects. _ACM Trans. Program. Lang. Syst._, _12_(3), 463–492. https://doi.org/[10.1145/78969.78972](https://dx.doi.org/10.1145/78969.78972){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoang_spark_2015"; cite-year:"2015"; cite-authors:"Hoang et al."; cite-authors-long:"Hoang, Moy, Wallenburg, and Chapman"; cite-label:"Hoang, Moy, Wallenburg, \& Chapman, 2015"; caption:"SPARK 2014 and GNATprove&nl;Hoang, Moy, Wallenburg, and Chapman, 2015"; data-line:"FormalReview.bib:4129"; searchterm:"SPARK%202014%20and%20GNATprove%20Hoang%2C%20Moy%2C%20Wallenburg%2C%20and%20Chapman%2C%202015"; spellcheck:"false"}
Hoang, D., Moy, Y., Wallenburg, A., & Chapman, R.&nbsp;(2015). SPARK 2014 and GNATprove. _Int J Softw Tools Technol Transfer_, _17_(6), 695–707. https://doi.org/[10.1007/s10009-014-0322-5](https://dx.doi.org/10.1007/s10009-014-0322-5){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoare_verifying_2003"; cite-year:"2003"; cite-authors:"Hoare"; cite-authors-long:"Hoare"; cite-label:"Hoare, 2003"; caption:"The Verifying Compiler: A Grand Challenge for Computing Research&nl;Hoare, 2003"; data-line:"FormalReview.bib:4458"; searchterm:"The%20Verifying%20Compiler%3A%20A%20Grand%20Challenge%20for%20Computing%20Research%20Hoare%2C%202003"; spellcheck:"false"}
Hoare, T.&nbsp;(2003). The Verifying Compiler: A Grand Challenge for Computing Research. _J.&nbsp;ACM_, _50_(1), 63–69. https://doi.org/[10.1145/602382.602403](https://dx.doi.org/10.1145/602382.602403){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hobor_theory_2010"; cite-year:"2010"; cite-authors:"Hobor et al."; cite-authors-long:"Hobor, Dockins, and Appel"; cite-label:"Hobor, Dockins, \& Appel, 2010"; caption:"A Theory of Indirection via Approximation&nl;Hobor, Dockins, and Appel, 2010"; data-line:"FormalReview.bib:243"; searchterm:"A%20Theory%20of%20Indirection%20via%20Approximation%20Hobor%2C%20Dockins%2C%20and%20Appel%2C%202010"; spellcheck:"false"}
Hobor, A., Dockins, R., & Appel, A.&nbsp;W.&nbsp;(2010). A Theory of Indirection via Approximation. In _Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 171–184). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1706299.1706322](https://dx.doi.org/10.1145/1706299.1706322){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hoder_z_2011"; cite-year:"2011"; cite-authors:"Hoder et al."; cite-authors-long:"Hoder, Bjørner, and Moura"; cite-label:"Hoder, Bjørner, \& Moura, 2011"; caption:"μZ– An Efficient Engine for Fixed Points with Constraints&nl;Hoder, Bjørner, and Moura, 2011"; data-line:"FormalReview.bib:4290"; searchterm:"%CE%BCZ%E2%80%93%20An%20Efficient%20Engine%20for%20Fixed%20Points%20with%20Constraints%20Hoder%2C%20Bj%C3%B8rner%2C%20and%20Moura%2C%202011"; spellcheck:"false"}
Hoder, K., Bjørner, N., & Moura, L.&nbsp;de. (2011). μZ– An Efficient Engine for Fixed Points with Constraints. In G.&nbsp;Gopalakrishnan & S.&nbsp;Qadeer (Eds.), _Computer Aided Verification_ (pp. 457–462). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"holzl_type_2013"; cite-year:"2013"; cite-authors:"Hölzl et al."; cite-authors-long:"Hölzl, Immler, and Huffman"; cite-label:"Hölzl, Immler, \& Huffman, 2013"; caption:"Type Classes and Filters for Mathematical Analysis in Isabelle/HOL&nl;Hölzl, Immler, and Huffman, 2013"; data-line:"FormalReview.bib:2973"; searchterm:"Type%20Classes%20and%20Filters%20for%20Mathematical%20Analysis%20in%20Isabelle%2FHOL%20H%C3%B6lzl%2C%20Immler%2C%20and%20Huffman%2C%202013"; spellcheck:"false"}
Hölzl, J., Immler, F., & Huffman, B.&nbsp;(2013). Type Classes and Filters for Mathematical Analysis in Isabelle/HOL.&nbsp;In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (pp. 279–294). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"noauthor_hongwei_nodate"; cite-authors:"2020v"; cite-authors-long:"2020v"; cite-label:"\&ldquo;Hongwei Xi,\&rdquo; n.d."; caption:"Hongwei Xi&nl;2020v, "; data-line:"FormalReview.bib:5456"; searchterm:"Hongwei%20Xi%202020v%2C%20"; spellcheck:"false"}
Hongwei Xi. (n.d.). Retrieved January 10, 2020, from <http://www.cs.bu.edu/~hwxi/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hritcu_micro-policies:_2015"; cite-year:"2015"; cite-authors:"Cǎtǎlin Hriţcu"; cite-authors-long:"Cǎtǎlin Hriţcu"; cite-label:"Cǎtǎlin Hriţcu, 2015"; caption:"Micro-Policies: Formally Verified, Tag-Based Security Monitors&nl;Cǎtǎlin Hriţcu, 2015"; data-line:"FormalReview.bib:225"; searchterm:"MicroPolicies%3A%20Formally%20Verified%2C%20TagBased%20Security%20Monitors%20C%C7%8Et%C7%8Elin%20Hri%C5%A3cu%2C%202015"; spellcheck:"false"}
Hriţcu, C.&nbsp;(2015). Micro-Policies: Formally Verified, Tag-Based Security Monitors. In _Proceedings of the 10th ACM Workshop on Programming Languages and Analysis for Security - PLAS’15_ (pp. 1–1). Prague, Czech Republic: ACM Press. https://doi.org/[10.1145/2786558.2786560](https://dx.doi.org/10.1145/2786558.2786560){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hritcu_quest_nodate"; cite-year:"n.d."; cite-authors:"Cătălin Hriţcu"; cite-authors-long:"Cătălin Hriţcu"; cite-label:"Cătălin Hriţcu, n.d."; caption:"The Quest for Formally Secure Compartmentalizing Compilation&nl;Cătălin Hriţcu, n.d."; data-line:"FormalReview.bib:1980"; searchterm:"The%20Quest%20for%20Formally%20Secure%20Compartmentalizing%20Compilation%20C%C4%83t%C4%83lin%20Hri%C5%A3cu%2C%20n.d."; spellcheck:"false"}
Hriţcu, C.&nbsp;(n.d.). The Quest for Formally Secure Compartmentalizing Compilation, 96.
~ end bibitem

~ begin bibitem {id:"hughes_why_1989"; cite-year:"1989"; cite-authors:"Hughes"; cite-authors-long:"Hughes"; cite-label:"Hughes, 1989"; caption:"Why Functional Programming Matters&nl;Hughes, 1989"; data-line:"FormalReview.bib:3897"; searchterm:"Why%20Functional%20Programming%20Matters%20Hughes%2C%201989"; spellcheck:"false"}
Hughes, J.&nbsp;(1989). Why Functional Programming Matters. _The Computer Journal_, _32_(2), 98–107. https://doi.org/[10.1093/comjnl/32.2.98](https://dx.doi.org/10.1093/comjnl/32.2.98){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hunt_warren_a._industrial_2017"; cite-year:"2017"; cite-authors:"Hunt Warren A.&nbsp;et al."; cite-authors-long:"Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna"; cite-label:"Hunt Warren A., Kaufmann Matt, Moore J Strother, \& Slobodova Anna, 2017"; caption:"Industrial hardware and software verification with ACL2&nl;Hunt Warren A., Kaufmann Matt, Moore J Strother, and Slobodova Anna, 2017"; data-line:"FormalReview.bib:1651"; searchterm:"Industrial%20hardware%20and%20software%20verification%20with%20ACL2%20Hunt%20Warren%20A.%2C%20Kaufmann%20Matt%2C%20Moore%20J%20Strother%2C%20and%20Slobodova%20Anna%2C%202017"; spellcheck:"false"}
Hunt Warren A., Kaufmann Matt, Moore J Strother, & Slobodova Anna. (2017). Industrial hardware and software verification with ACL2. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150399. https://doi.org/[10.1098/rsta.2015.0399](https://dx.doi.org/10.1098/rsta.2015.0399){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bobaru_opentheory_2011"; cite-year:"2011"; cite-authors:"Hurd"; cite-authors-long:"Hurd"; cite-label:"Hurd, 2011"; caption:"The OpenTheory Standard Theory Library&nl;Hurd, 2011"; data-line:"FormalReview.bib:5388"; searchterm:"The%20OpenTheory%20Standard%20Theory%20Library%20Hurd%2C%202011"; spellcheck:"false"}
Hurd, J.&nbsp;(2011). The OpenTheory Standard Theory Library. In M.&nbsp;Bobaru, K.&nbsp;Havelund, G.&nbsp;J.&nbsp;Holzmann, & R.&nbsp;Joshi (Eds.), _NASA Formal Methods_ (Vol. 6617, pp. 177–191). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-20398-5_14](https://dx.doi.org/10.1007/978-3-642-20398-5_14){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate-1"; cite-authors:"2019w"; cite-authors-long:"2019w"; cite-label:"IEEE, n.d."; caption:"IEEE Standard for Universal Verification Methodology Language Reference Manual&nl;2019w, "; data-line:"FormalReview.bib:3878"; searchterm:"IEEE%20Standard%20for%20Universal%20Verification%20Methodology%20Language%20Reference%20Manual%202019w%2C%20"; spellcheck:"false"}
IEEE.&nbsp;(n.d.). _IEEE Standard for Universal Verification Methodology Language Reference Manual_. https://doi.org/[10.1109/IEEESTD.2017.7932212](https://dx.doi.org/10.1109/IEEESTD.2017.7932212){.bib-doi}
~ end bibitem

~ begin bibitem {id:"bourque_guide_2014"; cite-year:"2014"; cite-authors:"IEEE Computer Society"; cite-authors-long:"IEEE Computer Society"; cite-label:"IEEE Computer Society, 2014"; caption:"Guide to the software engineering body of knowledge&nl;IEEE Computer Society, 2014"; data-line:"FormalReview.bib:5025"; searchterm:"Guide%20to%20the%20software%20engineering%20body%20of%20knowledge%20IEEE%20Computer%20Society%2C%202014"; spellcheck:"false"}
IEEE Computer Society. (2014). _Guide to the software engineering body of knowledge_. (P.&nbsp;Bourque & R.&nbsp;E.&nbsp;Fairley, Eds.).
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate-2"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"\&ldquo;IEEE Std 754™-2008 \(Revision of IEEE Std 754-1985\), IEEE Standard for Floating-Point Arithmetic,\&rdquo; n.d."; caption:"IEEE Std 754™-2008 (Revision of IEEE Std 754-1985), IEEE Standard for Floating-Point Arithmetic&nl;n.d., "; data-line:"FormalReview.bib:3889"; searchterm:"IEEE%20Std%20754%E2%84%A22008%20Revision%20of%20IEEE%20Std%207541985%2C%20IEEE%20Standard%20for%20FloatingPoint%20Arithmetic%20n.d.%2C%20"; spellcheck:"false"}
IEEE Std 754™-2008 (Revision of IEEE Std 754-1985), IEEE Standard for Floating-Point Arithmetic. (n.d.), 70.
~ end bibitem

~ begin bibitem {id:"noauthor_ieee_nodate"; cite-authors:"n.d."; cite-authors-long:"n.d."; cite-label:"\&ldquo;IEEE Std 1800™-2012 \(Revision of IEEE Std 1800-2009\) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language,\&rdquo; n.d."; caption:"IEEE Std 1800™-2012 (Revision of IEEE Std 1800-2009) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language&nl;n.d., "; data-line:"FormalReview.bib:3870"; searchterm:"IEEE%20Std%201800%E2%84%A22012%20Revision%20of%20IEEE%20Std%2018002009%20IEEE%20Standard%20for%20SystemVerilog%E2%80%94Unified%20Hardware%20Design%2C%20Specification%2C%20and%20Verification%20Language%20n.d.%2C%20"; spellcheck:"false"}
IEEE Std 1800™-2012 (Revision of IEEE Std 1800-2009) IEEE Standard for SystemVerilog—Unified Hardware Design, Specification, and Verification Language. (n.d.), 1315.
~ end bibitem

~ begin bibitem {id:"immler_verified_2018"; cite-year:"2018"; cite-authors:"Immler"; cite-authors-long:"Immler"; cite-label:"Immler, 2018"; caption:"A Verified ODE Solver and the Lorenz Attractor&nl;Immler, 2018"; data-line:"FormalReview.bib:2926"; searchterm:"A%20Verified%20ODE%20Solver%20and%20the%20Lorenz%20Attractor%20Immler%2C%202018"; spellcheck:"false"}
Immler, F.&nbsp;(2018). A Verified ODE Solver and the Lorenz Attractor. _J Autom Reasoning_, _61_(1), 73–111. https://doi.org/[10.1007/s10817-017-9448-y](https://dx.doi.org/10.1007/s10817-017-9448-y){.bib-doi}
~ end bibitem

~ begin bibitem {id:"inria_inria_nodate"; cite-year:"2019"; cite-authors:"Inria"; cite-authors-long:"Inria"; cite-label:"Inria, n.d."; caption:"Inria - Inventors for the digital world.Inria&nl;Inria, 2019"; data-line:"FormalReview.bib:835"; searchterm:"Inria%20%20Inventors%20for%20the%20digital%20world.Inria%20Inria%2C%202019"; spellcheck:"false"}
Inria. (n.d.). Inria - Inventors for the digital world.Inria. Retrieved January 31, 2019, from <https://www.inria.fr/en>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_introduction_nodate"; cite-authors:"2020x"; cite-authors-long:"2020x"; cite-label:"\&ldquo;Introduction to Domain Theory,\&rdquo; n.d."; caption:"Introduction to Domain Theory&nl;2020x, "; data-line:"FormalReview.bib:5657"; searchterm:"Introduction%20to%20Domain%20Theory%202020x%2C%20"; spellcheck:"false"}
Introduction to Domain Theory. (n.d.). Retrieved January 13, 2020, from <http://www.cs.nott.ac.uk/~pszgmh/domains.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"badger_extracting_2019"; cite-year:"2019"; cite-authors:"Ioannidis et al."; cite-authors-long:"Ioannidis, Kaashoek, and Zeldovich"; cite-label:"Ioannidis, Kaashoek, \& Zeldovich, 2019"; caption:"Extracting and Optimizing Formally Verified Code for Systems Programming&nl;Ioannidis, Kaashoek, and Zeldovich, 2019"; data-line:"FormalReview.bib:4067"; searchterm:"Extracting%20and%20Optimizing%20Formally%20Verified%20Code%20for%20Systems%20Programming%20Ioannidis%2C%20Kaashoek%2C%20and%20Zeldovich%2C%202019"; spellcheck:"false"}
Ioannidis, E., Kaashoek, F., & Zeldovich, N.&nbsp;(2019). Extracting and Optimizing Formally Verified Code for Systems Programming. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (Vol. 11460, pp. 228–236). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-030-20652-9_15](https://dx.doi.org/10.1007/978-3-030-20652-9_15){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_iris_nodate"; cite-authors:"2020y"; cite-authors-long:"2020y"; cite-label:"\&ldquo;Iris / stdpp.GitLab,\&rdquo; n.d."; caption:"Iris / stdpp.GitLab&nl;2020y, "; data-line:"FormalReview.bib:5136"; searchterm:"Iris%20%2F%20stdpp.GitLab%202020y%2C%20"; spellcheck:"false"}
Iris / stdpp.GitLab. (n.d.). Retrieved January 10, 2020, from <https://gitlab.mpi-sws.org/iris/stdpp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_iron_nodate"; cite-authors:"2020z"; cite-authors-long:"2020z"; cite-label:"\&ldquo;Iron: Managing Obligations in Higher-Order Concurrent Separation Logic \(POPL 2019\),\&rdquo; n.d."; caption:"Iron: Managing Obligations in Higher-Order Concurrent Separation Logic (POPL 2019)&nl;2020z, "; data-line:"FormalReview.bib:5733"; searchterm:"Iron%3A%20Managing%20Obligations%20in%20HigherOrder%20Concurrent%20Separation%20Logic%20POPL%202019%202020z%2C%20"; spellcheck:"false"}
Iron: Managing Obligations in Higher-Order Concurrent Separation Logic (POPL 2019). (n.d.). Retrieved January 14, 2020, from <https://iris-project.org/iron/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ishtiaq_bi_2011"; cite-year:"2011"; cite-authors:"Ishtiaq and O’Hearn"; cite-authors-long:"Ishtiaq and O’Hearn"; cite-label:"Ishtiaq \& O’Hearn, 2011"; caption:"BI As an Assertion Language for Mutable Data Structures&nl;Ishtiaq and O’Hearn, 2011"; data-line:"FormalReview.bib:2465"; searchterm:"BI%20As%20an%20Assertion%20Language%20for%20Mutable%20Data%20Structures%20Ishtiaq%20and%20O%E2%80%99Hearn%2C%202011"; spellcheck:"false"}
Ishtiaq, S., & O’Hearn, P.&nbsp;W.&nbsp;(2011). BI As an Assertion Language for Mutable Data Structures. _SIGPLAN Not._, _46_(4), 84–96. https://doi.org/[10.1145/1988042.1988050](https://dx.doi.org/10.1145/1988042.1988050){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast/verifast:_2019"; cite-year:"2019"; cite-authors:"Jacobs"; cite-authors-long:"Jacobs"; cite-label:"Jacobs, 2019"; caption:"verifast/verifast: Research prototype tool for modular formal verification of C and Java programs&nl;Jacobs, 2019"; data-line:"FormalReview.bib:2764"; searchterm:"verifast%2Fverifast%3A%20Research%20prototype%20tool%20for%20modular%20formal%20verification%20of%20C%20and%20Java%20programs%20Jacobs%2C%202019"; spellcheck:"false"}
Jacobs, B.&nbsp;(2019). _verifast/verifast: Research prototype tool for modular formal verification of C and Java programs_. verifast. Retrieved from <https://github.com/verifast/verifast>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2008"; cite-year:"2008"; cite-authors:"Jacobs and Piessens"; cite-authors-long:"Jacobs and Piessens"; cite-label:"Jacobs \& Piessens, 2008"; caption:"The VeriFast program verifier&nl;Jacobs and Piessens, 2008"; data-line:"FormalReview.bib:2794"; searchterm:"The%20VeriFast%20program%20verifier%20Jacobs%20and%20Piessens%2C%202008"; spellcheck:"false"}
Jacobs, B., & Piessens, F.&nbsp;(2008). _The VeriFast program verifier_.
~ end bibitem

~ begin bibitem {id:"jacobs_verifast_2017"; cite-year:"2017"; cite-authors:"Jacobs et al."; cite-authors-long:"Jacobs, Smans, and Piessens"; cite-label:"Jacobs, Smans, \& Piessens, 2017"; caption:"The VeriFast Program Veriﬁer: A Tutorial&nl;Jacobs, Smans, and Piessens, 2017"; data-line:"FormalReview.bib:2802"; searchterm:"The%20VeriFast%20Program%20Veri%EF%AC%81er%3A%20A%20Tutorial%20Jacobs%2C%20Smans%2C%20and%20Piessens%2C%202017"; spellcheck:"false"}
Jacobs, B., Smans, J., & Piessens, F.&nbsp;(2017). The VeriFast Program Veriﬁer: A Tutorial, 102.
~ end bibitem

~ begin bibitem {id:"jacobs_featherweight_2015"; cite-year:"2015"; cite-authors:"Jacobs et al."; cite-authors-long:"Jacobs, Vogels, and Piessens"; cite-label:"Jacobs, Vogels, \& Piessens, 2015"; caption:"Featherweight VeriFast&nl;Jacobs, Vogels, and Piessens, 2015"; data-line:"FormalReview.bib:2776"; searchterm:"Featherweight%20VeriFast%20Jacobs%2C%20Vogels%2C%20and%20Piessens%2C%202015"; spellcheck:"false"}
Jacobs, B., Vogels, F., & Piessens, F.&nbsp;(2015). Featherweight VeriFast. _Logical Methods in Computer Science_, _11_(3). https://doi.org/[10.2168/LMCS-11(3:19)2015](https://dx.doi.org/10.2168/LMCS-11%283:19%292015){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jeannet_apron_nodate"; cite-year:"2019"; cite-authors:"Jeannet and Miné"; cite-authors-long:"Jeannet and Miné"; cite-label:"Jeannet \& Miné, n.d."; caption:"APRON numerical abstract domain library&nl;Jeannet and Miné, 2019"; data-line:"FormalReview.bib:1832"; searchterm:"APRON%20numerical%20abstract%20domain%20library%20Jeannet%20and%20Min%C3%A9%2C%202019"; spellcheck:"false"}
Jeannet, B., & Miné, A.&nbsp;(n.d.). APRON numerical abstract domain library. Retrieved February 1, 2019, from <http://apron.cri.ensmp.fr/library/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"joe_leslie-hurd_slowest_2015"; cite-year:"2015"; cite-authors:"Joe Leslie-Hurd"; cite-authors-long:"Joe Leslie-Hurd"; cite-label:"Joe Leslie-Hurd, 2015"; caption:"The Slowest Software Development Methodology in the World.The Robot Mathematician&nl;Joe Leslie-Hurd, 2015"; data-line:"FormalReview.bib:5414"; searchterm:"The%20Slowest%20Software%20Development%20Methodology%20in%20the%20World.The%20Robot%20Mathematician%20Joe%20LeslieHurd%2C%202015"; spellcheck:"false"}
Joe Leslie-Hurd. (2015, July 19). The Slowest Software Development Methodology in the World.The Robot Mathematician. Retrieved January 10, 2020, from <https://gilith.wordpress.com/2015/07/19/the-slowest-software-development-methodology-in-the-world/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jones_function_2013"; cite-year:"2013"; cite-authors:"Jones"; cite-authors-long:"Jones"; cite-label:"Jones, 2013"; caption:"Function Points As a Universal Software Metric&nl;Jones, 2013"; data-line:"FormalReview.bib:4937"; searchterm:"Function%20Points%20As%20a%20Universal%20Software%20Metric%20Jones%2C%202013"; spellcheck:"false"}
Jones, C.&nbsp;(2013). Function Points As a Universal Software Metric. _SIGSOFT Softw. Eng. Notes_, _38_(4), 1–27. https://doi.org/[10.1145/2492248.2492268](https://dx.doi.org/10.1145/2492248.2492268){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_nodate"; cite-year:"2019"; cite-authors:"Jung"; cite-authors-long:"Jung"; cite-label:"Jung, n.d."; caption:"Iris Project&nl;Jung, 2019"; data-line:"FormalReview.bib:2408"; searchterm:"Iris%20Project%20Jung%2C%202019"; spellcheck:"false"}
Jung, R.&nbsp;(n.d.). Iris Project. Retrieved February 1, 2019, from <https://iris-project.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"jung_rustbelt:_2017"; cite-year:"2017"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Jourdan, Krebbers, and Dreyer"; cite-label:"Jung, Jourdan, Krebbers, \& Dreyer, 2017"; caption:"RustBelt: securing the foundations of the rust programming language&nl;Jung, Jourdan, Krebbers, and Dreyer, 2017"; data-line:"FormalReview.bib:34"; searchterm:"RustBelt%3A%20securing%20the%20foundations%20of%20the%20rust%20programming%20language%20Jung%2C%20Jourdan%2C%20Krebbers%2C%20and%20Dreyer%2C%202017"; spellcheck:"false"}
Jung, R., Jourdan, J.-H., Krebbers, R., & Dreyer, D.&nbsp;(2017). RustBelt: securing the foundations of the rust programming language. _Proceedings of the ACM on Programming Languages_, _2_, 1–34. https://doi.org/[10.1145/3158154](https://dx.doi.org/10.1145/3158154){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_2018"; cite-year:"2018a"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer"; cite-label:"Jung et al., 2018a"; caption:"Iris from the ground up: A modular foundation for higher-order concurrent separation logic&nl;Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer, 2018a"; data-line:"FormalReview.bib:2424"; searchterm:"Iris%20from%20the%20ground%20up%3A%20A%20modular%20foundation%20for%20higherorder%20concurrent%20separation%20logic%20Jung%2C%20Krebbers%2C%20Jourdan%2C%20Bizjak%2C%20Birkedal%2C%20and%20Dreyer%2C%202018a"; spellcheck:"false"}
Jung, R., Krebbers, R., Jourdan, J.-H., Bizjak, A., Birkedal, L., & Dreyer, D.&nbsp;(2018a). Iris from the ground up: A modular foundation for higher-order concurrent separation logic. _Journal of Functional Programming_, _28_. https://doi.org/[10.1017/S0956796818000151](https://dx.doi.org/10.1017/S0956796818000151){.bib-doi}
~ end bibitem

~ begin bibitem {id:"jung_iris_2018-1"; cite-year:"2018b"; cite-authors:"Jung et al."; cite-authors-long:"Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer"; cite-label:"Jung et al., 2018b"; caption:"Iris from the ground up: A modular foundation for higher-order concurrent separation logic&nl;Jung, Krebbers, Jourdan, Bizjak, Birkedal, and Dreyer, 2018b"; data-line:"FormalReview.bib:3765"; searchterm:"Iris%20from%20the%20ground%20up%3A%20A%20modular%20foundation%20for%20higherorder%20concurrent%20separation%20logic%20Jung%2C%20Krebbers%2C%20Jourdan%2C%20Bizjak%2C%20Birkedal%2C%20and%20Dreyer%2C%202018b"; spellcheck:"false"}
Jung, R., Krebbers, R., Jourdan, J.-H., Bizjak, A., Birkedal, L., & Dreyer, D.&nbsp;(2018b). Iris from the ground up: A modular foundation for higher-order concurrent separation logic. _Journal of Functional Programming_, _28_. https://doi.org/[10.1017/S0956796818000151](https://dx.doi.org/10.1017/S0956796818000151){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kaiser_destruct_nodate"; cite-year:"2019"; cite-authors:"Kaiser and Ziliani"; cite-authors-long:"Kaiser and Ziliani"; cite-label:"Kaiser \& Ziliani, n.d."; caption:"A “destruct” Tactic for Mtac2 - POPL 2018&nl;Kaiser and Ziliani, 2019"; data-line:"FormalReview.bib:2553"; searchterm:"A%20%E2%80%9Cdestruct%E2%80%9D%20Tactic%20for%20Mtac2%20%20POPL%202018%20Kaiser%20and%20Ziliani%2C%202019"; spellcheck:"false"}
Kaiser, J.-O., & Ziliani, B.&nbsp;(n.d.). A &ldquo;destruct&rdquo; Tactic for Mtac2 - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-a-destruct-tactic-for-mtac2>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kang_crellvm:_2018"; cite-year:"2018"; cite-authors:"Kang et al."; cite-authors-long:"Kang, Kim, Song, Lee, Park, Shin, et al."; cite-label:"Kang et al., 2018"; caption:"Crellvm: Verified Credible Compilation for LLVM&nl;Kang, Kim, Song, Lee, Park, Shin, et al., 2018"; data-line:"FormalReview.bib:2653"; searchterm:"Crellvm%3A%20Verified%20Credible%20Compilation%20for%20LLVM%20Kang%2C%20Kim%2C%20Song%2C%20Lee%2C%20Park%2C%20Shin%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Kang, J., Kim, Y., Song, Y., Lee, J., Park, S., Shin, M.&nbsp;D., … Yi, K.&nbsp;(2018). Crellvm: Verified Credible Compilation for LLVM.&nbsp;In _Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 631–645). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3192366.3192377](https://dx.doi.org/10.1145/3192366.3192377){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kastner_program_2015"; cite-year:"2015"; cite-authors:"Daniel Kästner and Pohland"; cite-authors-long:"Daniel Kästner and Pohland"; cite-label:"Daniel Kästner \& Pohland, 2015"; caption:"Program Analysis on Evolving Software&nl;Daniel Kästner and Pohland, 2015"; data-line:"FormalReview.bib:384"; searchterm:"Program%20Analysis%20on%20Evolving%20Software%20Daniel%20K%C3%A4stner%20and%20Pohland%2C%202015"; spellcheck:"false"}
Kästner, D., & Pohland, J.&nbsp;(2015). Program Analysis on Evolving Software. In M.&nbsp;Roy (Ed.), _CARS 2015 - Critical Automotive applications: Robustness &amp; Safety_. Paris, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01192985>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kastner_astree:_nodate"; cite-year:"n.d."; cite-authors:"D Kästner et al."; cite-authors-long:"D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al."; cite-label:"D Kästner et al., n.d."; caption:"Astree: Proving the Absence of Runtime Errors&nl;D Kästner, Wilhelm, Nenova, Miné, Rival, Mauborgne, et al., n.d."; data-line:"FormalReview.bib:414"; searchterm:"Astree%3A%20Proving%20the%20Absence%20of%20Runtime%20Errors%20D%20K%C3%A4stner%2C%20Wilhelm%2C%20Nenova%2C%20Min%C3%A9%2C%20Rival%2C%20Mauborgne%2C%20et%20al.%2C%20n.d."; spellcheck:"false"}
Kästner, D., Wilhelm, S., Nenova, S., Miné, A., Rival, X., Mauborgne, L., … Cousot, R.&nbsp;(n.d.). Astree: Proving the Absence of Runtime Errors, 9. Retrieved from <https://www.di.ens.fr/~rival/papers/erts10.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"kell_missing_2016"; cite-year:"2016"; cite-authors:"Kell et al."; cite-authors-long:"Kell, Mulligan, and Sewell"; cite-label:"Kell, Mulligan, \& Sewell, 2016"; caption:"The Missing Link: Explaining ELF Static Linking, Semantically&nl;Kell, Mulligan, and Sewell, 2016"; data-line:"FormalReview.bib:3323"; searchterm:"The%20Missing%20Link%3A%20Explaining%20ELF%20Static%20Linking%2C%20Semantically%20Kell%2C%20Mulligan%2C%20and%20Sewell%2C%202016"; spellcheck:"false"}
Kell, S., Mulligan, D.&nbsp;P., & Sewell, P.&nbsp;(2016). The Missing Link: Explaining ELF Static Linking, Semantically. In _Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications_ (pp. 607–623). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2983990.2983996](https://dx.doi.org/10.1145/2983990.2983996){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kennedy_types_2010"; cite-year:"2010a"; cite-authors:"Kennedy"; cite-authors-long:"Kennedy"; cite-label:"Kennedy, 2010a"; caption:"Types for Units-of-Measure: Theory and Practice&nl;Kennedy, 2010a"; data-line:"FormalReview.bib:5105"; searchterm:"Types%20for%20UnitsofMeasure%3A%20Theory%20and%20Practice%20Kennedy%2C%202010a"; spellcheck:"false"}
Kennedy, A.&nbsp;(2010a). Types for Units-of-Measure: Theory and Practice. In Z.&nbsp;Horváth, R.&nbsp;Plasmeijer, & V.&nbsp;Zsók (Eds.), _Central European Functional Programming School: Third Summer School, CEFP 2009, Budapest, Hungary, May 21-23, 2009 and Komárno, Slovakia, May 25-30, 2009, Revised Selected Lectures_ (pp. 268–305). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-17685-2_8](https://dx.doi.org/10.1007/978-3-642-17685-2_8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kennedy_types_2010-1"; cite-year:"2010b"; cite-authors:"Kennedy"; cite-authors-long:"Kennedy"; cite-label:"Kennedy, 2010b"; caption:"Types for Units-of-Measure: Theory and Practice&nl;Kennedy, 2010b"; data-line:"FormalReview.bib:5263"; searchterm:"Types%20for%20UnitsofMeasure%3A%20Theory%20and%20Practice%20Kennedy%2C%202010b"; spellcheck:"false"}
Kennedy, A.&nbsp;(2010b). Types for Units-of-Measure: Theory and Practice. In Z.&nbsp;Horváth, R.&nbsp;Plasmeijer, & V.&nbsp;Zsók (Eds.), _Central European Functional Programming School: Third Summer School, CEFP 2009, Budapest, Hungary, May 21-23, 2009 and Komárno, Slovakia, May 25-30, 2009, Revised Selected Lectures_ (pp. 268–305). Berlin, Heidelberg: Springer. https://doi.org/[10.1007/978-3-642-17685-2_8](https://dx.doi.org/10.1007/978-3-642-17685-2_8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"klein_formally_2018"; cite-year:"2018"; cite-authors:"Klein et al."; cite-authors-long:"Klein, Andronick, Fernandez, Kuz, Murray, and Heiser"; cite-label:"Klein et al., 2018"; caption:"Formally verified software in the real world&nl;Klein, Andronick, Fernandez, Kuz, Murray, and Heiser, 2018"; data-line:"FormalReview.bib:4758"; searchterm:"Formally%20verified%20software%20in%20the%20real%20world%20Klein%2C%20Andronick%2C%20Fernandez%2C%20Kuz%2C%20Murray%2C%20and%20Heiser%2C%202018"; spellcheck:"false"}
Klein, G., Andronick, J., Fernandez, M., Kuz, I., Murray, T., & Heiser, G.&nbsp;(2018). Formally verified software in the real world. _Commun. ACM_, _61_(10), 68–77. https://doi.org/[10.1145/3230627](https://dx.doi.org/10.1145/3230627){.bib-doi}
~ end bibitem

~ begin bibitem {id:"klein_gerwin_provably_2017"; cite-year:"2017"; cite-authors:"Klein Gerwin et al."; cite-authors-long:"Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam"; cite-label:"Klein Gerwin et al., 2017"; caption:"Provably trustworthy systems&nl;Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, and O’Connor Liam, 2017"; data-line:"FormalReview.bib:1573"; searchterm:"Provably%20trustworthy%20systems%20Klein%20Gerwin%2C%20Andronick%20June%2C%20Keller%20Gabriele%2C%20Matichuk%20Daniel%2C%20Murray%20Toby%2C%20and%20O%E2%80%99Connor%20Liam%2C%202017"; spellcheck:"false"}
Klein Gerwin, Andronick June, Keller Gabriele, Matichuk Daniel, Murray Toby, & O’Connor Liam. (2017). Provably trustworthy systems. _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150404. https://doi.org/[10.1098/rsta.2015.0404](https://dx.doi.org/10.1098/rsta.2015.0404){.bib-doi}
~ end bibitem

~ begin bibitem {id:"knaggs_practical_1993"; cite-year:"1993"; cite-authors:"Knaggs"; cite-authors-long:"Knaggs"; cite-label:"Knaggs, 1993"; caption:"Practical and theoretical aspects of FORTH software development&nl;Knaggs, 1993"; data-line:"FormalReview.bib:4039"; searchterm:"Practical%20and%20theoretical%20aspects%20of%20FORTH%20software%20development%20Knaggs%2C%201993"; spellcheck:"false"}
Knaggs, P.&nbsp;J.&nbsp;(1993). Practical and theoretical aspects of FORTH software development.
~ end bibitem

~ begin bibitem {id:"koenig_programming_2016"; cite-year:"2016"; cite-authors:"Koenig and Leino"; cite-authors-long:"Koenig and Leino"; cite-label:"Koenig \& Leino, 2016"; caption:"Programming Language Features for Refinement&nl;Koenig and Leino, 2016"; data-line:"FormalReview.bib:1253"; searchterm:"Programming%20Language%20Features%20for%20Refinement%20Koenig%20and%20Leino%2C%202016"; spellcheck:"false"}
Koenig, J., & Leino, R.&nbsp;(2016). Programming Language Features for Refinement. Retrieved from <https://www.microsoft.com/en-us/research/publication/programming-language-features-refinement/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"koh_c_2019"; cite-year:"2019"; cite-authors:"Koh et al."; cite-authors-long:"Koh, Li, Li, Xia, Beringer, Honoré, et al."; cite-label:"Koh et al., 2019"; caption:"From C to Interaction Trees: Specifying, Verifying, and Testing a Networked Server&nl;Koh, Li, Li, Xia, Beringer, Honoré, et al., 2019"; data-line:"FormalReview.bib:3939"; searchterm:"From%20C%20to%20Interaction%20Trees%3A%20Specifying%2C%20Verifying%2C%20and%20Testing%20a%20Networked%20Server%20Koh%2C%20Li%2C%20Li%2C%20Xia%2C%20Beringer%2C%20Honor%C3%A9%2C%20et%20al.%2C%202019"; spellcheck:"false"}
Koh, N., Li, Y., Li, Y., Xia, L., Beringer, L., Honoré, W., … Zdancewic, S.&nbsp;(2019). From C to Interaction Trees: Specifying, Verifying, and Testing a Networked Server. In _Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 234–248). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3293880.3294106](https://dx.doi.org/10.1145/3293880.3294106){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krebbers_mosel_2018"; cite-year:"2018"; cite-authors:"Krebbers et al."; cite-authors-long:"Krebbers, Jourdan, Jung, Tassarotti, Kaiser, Timany, et al."; cite-label:"Krebbers et al., 2018"; caption:"MoSeL: a general, extensible modal framework for interactive proofs in separation logic&nl;Krebbers, Jourdan, Jung, Tassarotti, Kaiser, Timany, et al., 2018"; data-line:"FormalReview.bib:5619"; searchterm:"MoSeL%3A%20a%20general%2C%20extensible%20modal%20framework%20for%20interactive%20proofs%20in%20separation%20logic%20Krebbers%2C%20Jourdan%2C%20Jung%2C%20Tassarotti%2C%20Kaiser%2C%20Timany%2C%20et%20al.%2C%202018"; spellcheck:"false"}
Krebbers, R., Jourdan, J.-H., Jung, R., Tassarotti, J., Kaiser, J.-O., Timany, A., … Dreyer, D.&nbsp;(2018). MoSeL: a general, extensible modal framework for interactive proofs in separation logic. _Proceedings of the ACM on Programming Languages_, _2_, 1–30. https://doi.org/[10.1145/3236772](https://dx.doi.org/10.1145/3236772){.bib-doi}
~ end bibitem

~ begin bibitem {id:"davenport_computer_2011"; cite-year:"2011a"; cite-authors:"Krebbers and Spitters"; cite-authors-long:"Krebbers and Spitters"; cite-label:"Krebbers \& Spitters, 2011a"; caption:"Computer Certified Efficient Exact Reals in Coq&nl;Krebbers and Spitters, 2011a"; data-line:"FormalReview.bib:3975"; searchterm:"Computer%20Certified%20Efficient%20Exact%20Reals%20in%20Coq%20Krebbers%20and%20Spitters%2C%202011a"; spellcheck:"false"}
Krebbers, R., & Spitters, B.&nbsp;(2011a). Computer Certified Efficient Exact Reals in Coq. In J.&nbsp;H.&nbsp;Davenport, W.&nbsp;M.&nbsp;Farmer, J.&nbsp;Urban, & F.&nbsp;Rabe (Eds.), _Intelligent Computer Mathematics_ (Vol. 6824, pp. 90–106). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-22673-1_7](https://dx.doi.org/10.1007/978-3-642-22673-1_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krebbers_type_2011"; cite-year:"2011b"; cite-authors:"Krebbers and Spitters"; cite-authors-long:"Krebbers and Spitters"; cite-label:"Krebbers \& Spitters, 2011b"; caption:"Type classes for efficient exact real arithmetic in Coq&nl;Krebbers and Spitters, 2011b"; data-line:"FormalReview.bib:2989"; searchterm:"Type%20classes%20for%20efficient%20exact%20real%20arithmetic%20in%20Coq%20Krebbers%20and%20Spitters%2C%202011b"; spellcheck:"false"}
Krebbers, R., & Spitters, B.&nbsp;(2011b). Type classes for efficient exact real arithmetic in Coq. _arXiv:1106.3448 \[cs, Math\]_. https://doi.org/[10.2168/LMCS-9(1:01)2013](https://dx.doi.org/10.2168/LMCS-9%281:01%292013){.bib-doi}
~ end bibitem

~ begin bibitem {id:"krishnan_modelling_2018"; cite-year:"2018"; cite-authors:"Krishnan and Lalithambika"; cite-authors-long:"Krishnan and Lalithambika"; cite-label:"Krishnan \& Lalithambika, 2018"; caption:"Modelling and validating 1553B protocol using the SPIN model checker&nl;Krishnan and Lalithambika, 2018"; data-line:"FormalReview.bib:18"; searchterm:"Modelling%20and%20validating%201553B%20protocol%20using%20the%20SPIN%20model%20checker%20Krishnan%20and%20Lalithambika%2C%202018"; spellcheck:"false"}
Krishnan, R., & Lalithambika, V.&nbsp;R.&nbsp;(2018). Modelling and validating 1553B protocol using the SPIN model checker. In _2018 10th International Conference on Communication Systems &amp; Networks (COMSNETS)_ (pp. 472–475). Bengaluru: IEEE.&nbsp;https://doi.org/[10.1109/COMSNETS.2018.8328247](https://dx.doi.org/10.1109/COMSNETS.2018.8328247){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kubota_foundations_2016"; cite-year:"2016"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, 2016"; caption:"Foundations of Mathematics&nl;Kubota, 2016"; data-line:"FormalReview.bib:2588"; searchterm:"Foundations%20of%20Mathematics%20Kubota%2C%202016"; spellcheck:"false"}
Kubota, K.&nbsp;(2016). Foundations of Mathematics. https://doi.org/[10.4444/100.111](https://dx.doi.org/10.4444/100.111){.bib-doi}
~ end bibitem

~ begin bibitem {id:"kubota_foundations_nodate"; cite-year:"2019"; cite-authors:"Kubota"; cite-authors-long:"Kubota"; cite-label:"Kubota, n.d."; caption:"Foundations of Mathematics – Owl of Minerva Press&nl;Kubota, 2019"; data-line:"FormalReview.bib:2579"; searchterm:"Foundations%20of%20Mathematics%20%E2%80%93%20Owl%20of%20Minerva%20Press%20Kubota%2C%202019"; spellcheck:"false"}
Kubota, K.&nbsp;(n.d.). Foundations of Mathematics – Owl of Minerva Press. Retrieved February 1, 2019, from <http://owlofminerva.net/foundations-of-mathematics/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lahiri_symdiff:_2012"; cite-year:"2012"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Hawblitzel, Kawaguchi, and Rebêlo"; cite-label:"Lahiri, Hawblitzel, Kawaguchi, \& Rebêlo, 2012"; caption:"SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs&nl;Lahiri, Hawblitzel, Kawaguchi, and Rebêlo, 2012"; data-line:"FormalReview.bib:2317"; searchterm:"SYMDIFF%3A%20A%20LanguageAgnostic%20Semantic%20Diff%20Tool%20for%20Imperative%20Programs%20Lahiri%2C%20Hawblitzel%2C%20Kawaguchi%2C%20and%20Reb%C3%AAlo%2C%202012"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Hawblitzel, C., Kawaguchi, M., & Rebêlo, H.&nbsp;(2012). SYMDIFF: A Language-Agnostic Semantic Diff Tool for Imperative Programs. In P.&nbsp;Madhusudan & S.&nbsp;A.&nbsp;Seshia (Eds.), _Computer Aided Verification_ (pp. 712–717). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"lahiri_automatic_2015"; cite-year:"2015"; cite-authors:"Lahiri et al."; cite-authors-long:"Lahiri, Sinha, and Hawblitzel"; cite-label:"Lahiri, Sinha, \& Hawblitzel, 2015"; caption:"Automatic Rootcausing for Program Equivalence Failures in Binaries&nl;Lahiri, Sinha, and Hawblitzel, 2015"; data-line:"FormalReview.bib:2285"; searchterm:"Automatic%20Rootcausing%20for%20Program%20Equivalence%20Failures%20in%20Binaries%20Lahiri%2C%20Sinha%2C%20and%20Hawblitzel%2C%202015"; spellcheck:"false"}
Lahiri, S.&nbsp;K., Sinha, R., & Hawblitzel, C.&nbsp;(2015). Automatic Rootcausing for Program Equivalence Failures in Binaries. In D.&nbsp;Kroening & C.&nbsp;S.&nbsp;Păsăreanu (Eds.), _Computer Aided Verification_ (pp. 362–379). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"noauthor_lambdapi_2020"; cite-authors:"2020b"; cite-authors-long:"2020b"; cite-label:"\_Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting\_, 2020"; caption:"Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting&nl;2020b, "; data-line:"FormalReview.bib:5576"; searchterm:"Lambdapi%2C%20a%20proof%20assistant%20based%20on%20the%20%CE%BB%CE%A0calculus%20modulo%20rewriting%202020b%2C%20"; spellcheck:"false"}
_Lambdapi, a proof assistant based on the λΠ-calculus modulo rewriting_. (2020). Deducteam. Retrieved from <https://github.com/Deducteam/lambdapi>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_specifying_nodate"; cite-year:"2019"; cite-authors:"Lamport"; cite-authors-long:"Lamport"; cite-label:"Lamport, n.d."; caption:"Specifying Systems&nl;Lamport, 2019"; data-line:"FormalReview.bib:2599"; searchterm:"Specifying%20Systems%20Lamport%2C%202019"; spellcheck:"false"}
Lamport, L.&nbsp;(n.d.). Specifying Systems. Retrieved February 1, 2019, from <https://lamport.azurewebsites.net/tla/book.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_if_2018"; cite-year:"2018"; cite-authors:"Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic"; cite-authors-long:"Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic"; cite-label:"Lamport \& Distributed Computing \&bslash;\&amp; Education Column by Juraj Hromkovic, 2018"; caption:"If You’re Not Writing a Program, Don’t Use a Programming Language&nl;Lamport and Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic, 2018"; data-line:"FormalReview.bib:3211"; searchterm:"If%20You%E2%80%99re%20Not%20Writing%20a%20Program%2C%20Don%E2%80%99t%20Use%20a%20Programming%20Language%20Lamport%20and%20Distributed%20Computing%20%26bslash%3B%26amp%3B%20Education%20Column%20by%20Juraj%20Hromkovic%2C%202018"; spellcheck:"false"}
Lamport, L., & Distributed Computing &bslash;&amp; Education Column by Juraj Hromkovic, S.&nbsp;S.&nbsp;(2018). If You’re Not Writing a Program, Don’t Use a Programming Language. _Bulletin of EATCS_, _2_(125). Retrieved from <http://eatcs.org/beatcs/index.php/beatcs/article/view>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lamport_pretending_2005"; cite-year:"2005"; cite-authors:"Lamport and Schneider"; cite-authors-long:"Lamport and Schneider"; cite-label:"Lamport \& Schneider, 2005"; caption:"Pretending Atomicity, Digital Systems Research Center: Report 44&nl;Lamport and Schneider, 2005"; data-line:"FormalReview.bib:5058"; searchterm:"Pretending%20Atomicity%2C%20Digital%20Systems%20Research%20Center%3A%20Report%2044%20Lamport%20and%20Schneider%2C%202005"; spellcheck:"false"}
Lamport, L., & Schneider, F.&nbsp;B.&nbsp;(2005, December 27). Pretending Atomicity, Digital Systems Research Center: Report 44. Retrieved December 30, 2019, from <https://web.archive.org/web/20051227134748/http://gatekeeper.research.compaq.com/pub/DEC/SRC/research-reports/abstracts/src-rr-044.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lampson_abcds_2001"; cite-year:"2001"; cite-authors:"Lampson"; cite-authors-long:"Lampson"; cite-label:"Lampson, 2001"; caption:"The ABCD's of Paxos&nl;Lampson, 2001"; data-line:"FormalReview.bib:2827"; searchterm:"The%20ABCD's%20of%20Paxos%20Lampson%2C%202001"; spellcheck:"false"}
Lampson, B.&nbsp;(2001). The ABCD’s of Paxos. In _Proceedings of the Twentieth Annual ACM Symposium on Principles of Distributed Computing_ (p. 13 – ). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/383962.383969](https://dx.doi.org/10.1145/383962.383969){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lancaster_unified_1969"; cite-year:"1969"; cite-authors:"Lancaster and Blanchard"; cite-authors-long:"Lancaster and Blanchard"; cite-label:"Lancaster \& Blanchard, 1969"; caption:"A unified form of lambert's theorem&nl;Lancaster and Blanchard, 1969"; data-line:"FormalReview.bib:1762"; searchterm:"A%20unified%20form%20of%20lambert's%20theorem%20Lancaster%20and%20Blanchard%2C%201969"; spellcheck:"false"}
Lancaster, E.&nbsp;R., & Blanchard, R.&nbsp;C.&nbsp;(1969). A unified form of lambert’s theorem. _NASA Technical Note_, _{TN} D-5368_, 18.
~ end bibitem

~ begin bibitem {id:"noauthor_lean_nodate"; cite-authors:"2019ab"; cite-authors-long:"2019ab"; cite-label:"\&ldquo;Lean Forward: Usable Computer-Checked Proofs and Computations,\&rdquo; n.d."; caption:"Lean Forward: Usable Computer-Checked Proofs and Computations&nl;2019ab, "; data-line:"FormalReview.bib:3186"; searchterm:"Lean%20Forward%3A%20Usable%20ComputerChecked%20Proofs%20and%20Computations%202019ab%2C%20"; spellcheck:"false"}
Lean Forward: Usable Computer-Checked Proofs and Computations. (n.d.). Retrieved February 8, 2019, from <https://lean-forward.github.io/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_assertional_2015"; cite-year:"2015"; cite-authors:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-authors-long:"K.&nbsp;Rustan M.&nbsp;Leino and Lucio"; cite-label:"K. Rustan M. Leino \& Lucio, 2015"; caption:"An Assertional Proof of the Stability and Correctness of Natural Mergesort&nl;K. Rustan M. Leino and Lucio, 2015"; data-line:"FormalReview.bib:1145"; searchterm:"An%20Assertional%20Proof%20of%20the%20Stability%20and%20Correctness%20of%20Natural%20Mergesort%20K.%20Rustan%20M.%20Leino%20and%20Lucio%2C%202015"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Lucio, P.&nbsp;(2015). An Assertional Proof of the Stability and Correctness of Natural Mergesort. _ACM Trans. Comput. Logic_, _17_(1), 6:1–6:22. https://doi.org/[10.1145/2814571](https://dx.doi.org/10.1145/2814571){.bib-doi}
~ end bibitem

~ begin bibitem {id:"chaudhuri_trigger_2016"; cite-year:"2016"; cite-authors:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-authors-long:"K.&nbsp;R.&nbsp;M.&nbsp;Leino and Pit-Claudel"; cite-label:"K. R. M. Leino \& Pit-Claudel, 2016"; caption:"Trigger Selection Strategies to Stabilize Program Verifiers&nl;K. R. M. Leino and Pit-Claudel, 2016"; data-line:"FormalReview.bib:779"; searchterm:"Trigger%20Selection%20Strategies%20to%20Stabilize%20Program%20Verifiers%20K.%20R.%20M.%20Leino%20and%20PitClaudel%2C%202016"; spellcheck:"false"}
Leino, K.&nbsp;R.&nbsp;M., & Pit-Claudel, C.&nbsp;(2016). Trigger Selection Strategies to Stabilize Program Verifiers. In S.&nbsp;Chaudhuri & A.&nbsp;Farzan (Eds.), _Computer Aided Verification_ (Vol. 9779, pp. 361–381). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-41528-4_20](https://dx.doi.org/10.1007/978-3-319-41528-4_20){.bib-doi}
~ end bibitem

~ begin bibitem {id:"leino_compiling_2016"; cite-year:"2016a"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016a"; caption:"Compiling Hilbert's epsilon Operator&nl;R. Leino, 2016a"; data-line:"FormalReview.bib:1264"; searchterm:"Compiling%20Hilbert's%20epsilon%20Operator%20R.%20Leino%2C%202016a"; spellcheck:"false"}
Leino, R.&nbsp;(2016a). Compiling Hilbert’s epsilon Operator. _LPAR-20. 20th International Conferences on Logic for Programming, Artificial Intelligence and Reasoning_, _35_. Retrieved from <https://www.microsoft.com/en-us/research/publication/compiling-hilberts-%cf%b5-operator/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_well-founded_2016"; cite-year:"2016b"; cite-authors:"R.&nbsp;Leino"; cite-authors-long:"R.&nbsp;Leino"; cite-label:"R. Leino, 2016b"; caption:"Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial&nl;R. Leino, 2016b"; data-line:"FormalReview.bib:1300"; searchterm:"WellFounded%20Functions%20and%20Extreme%20Predicates%20in%20Dafny%3A%20A%20Tutorial%20R.%20Leino%2C%202016b"; spellcheck:"false"}
Leino, R.&nbsp;(2016b). Well-Founded Functions and Extreme Predicates in Dafny: A Tutorial, _40_. Retrieved from <https://www.microsoft.com/en-us/research/publication/well-founded-functions-extreme-predicates-dafny-tutorial/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_co-induction_2013"; cite-year:"2013"; cite-authors:"R.&nbsp;Leino and Moskal"; cite-authors-long:"R.&nbsp;Leino and Moskal"; cite-label:"R. Leino \& Moskal, 2013"; caption:"Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier&nl;R. Leino and Moskal, 2013"; data-line:"FormalReview.bib:1178"; searchterm:"CoInduction%20Simply%3A%20Automatic%20CoInductive%20Proofs%20in%20a%20Program%20Verifier%20R.%20Leino%20and%20Moskal%2C%202013"; spellcheck:"false"}
Leino, R., & Moskal, M.&nbsp;(2013). Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier. Retrieved from <https://www.microsoft.com/en-us/research/publication/co-induction-simply-automatic-co-inductive-proofs-in-a-program-verifier/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verification_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino et al."; cite-authors-long:"R.&nbsp;Leino, Müller, and Smans"; cite-label:"R. Leino, Müller, \& Smans, 2016"; caption:"Verification of Concurrent Programs with Chalice&nl;R. Leino, Müller, and Smans, 2016"; data-line:"FormalReview.bib:1219"; searchterm:"Verification%20of%20Concurrent%20Programs%20with%20Chalice%20R.%20Leino%2C%20M%C3%BCller%2C%20and%20Smans%2C%202016"; spellcheck:"false"}
Leino, R., Müller, P., & Smans, J.&nbsp;(2016). Verification of Concurrent Programs with Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/verification-concurrent-programs-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_verified_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Polikarpova"; cite-authors-long:"R.&nbsp;Leino and Polikarpova"; cite-label:"R. Leino \& Polikarpova, 2016"; caption:"Verified Calculations&nl;R. Leino and Polikarpova, 2016"; data-line:"FormalReview.bib:1289"; searchterm:"Verified%20Calculations%20R.%20Leino%20and%20Polikarpova%2C%202016"; spellcheck:"false"}
Leino, R., & Polikarpova, N.&nbsp;(2016). Verified Calculations. Retrieved from <https://www.microsoft.com/en-us/research/publication/verified-calculations/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_fine-grained_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Wüstholz"; cite-authors-long:"R.&nbsp;Leino and Wüstholz"; cite-label:"R. Leino \& Wüstholz, 2016"; caption:"Fine-grained Caching of Verification Results&nl;R. Leino and Wüstholz, 2016"; data-line:"FormalReview.bib:1241"; searchterm:"Finegrained%20Caching%20of%20Verification%20Results%20R.%20Leino%20and%20W%C3%BCstholz%2C%202016"; spellcheck:"false"}
Leino, R., & Wüstholz, V.&nbsp;(2016). Fine-grained Caching of Verification Results, _9206_. Retrieved from <https://www.microsoft.com/en-us/research/publication/fine-grained-caching-verification-results/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leino_stepwise_2016"; cite-year:"2016"; cite-authors:"R.&nbsp;Leino and Yessenov"; cite-authors-long:"R.&nbsp;Leino and Yessenov"; cite-label:"R. Leino \& Yessenov, 2016"; caption:"Stepwise Refinement of Heap-Manipulating Code in Chalice&nl;R. Leino and Yessenov, 2016"; data-line:"FormalReview.bib:1230"; searchterm:"Stepwise%20Refinement%20of%20HeapManipulating%20Code%20in%20Chalice%20R.%20Leino%20and%20Yessenov%2C%202016"; spellcheck:"false"}
Leino, R., & Yessenov, K.&nbsp;(2016). Stepwise Refinement of Heap-Manipulating Code in Chalice. Retrieved from <https://www.microsoft.com/en-us/research/publication/stepwise-refinement-heap-manipulating-code-chalice/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leinster_higher_2003"; cite-year:"2003"; cite-authors:"Leinster"; cite-authors-long:"Leinster"; cite-label:"Leinster, 2003"; caption:"Higher Operads, Higher Categories&nl;Leinster, 2003"; data-line:"FormalReview.bib:5780"; searchterm:"Higher%20Operads%2C%20Higher%20Categories%20Leinster%2C%202003"; spellcheck:"false"}
Leinster, T.&nbsp;(2003). Higher Operads, Higher Categories. _arXiv:math/0305049_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[math/0305049](http://arxiv.org/abs/math/0305049){.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_lem_2019"; cite-authors:"2019a"; cite-authors-long:"2019a"; cite-label:"\_Lem semantic definition language.\_, 2019"; caption:"Lem semantic definition language.&nl;2019a, "; data-line:"FormalReview.bib:3363"; searchterm:"Lem%20semantic%20definition%20language.%202019a%2C%20"; spellcheck:"false"}
_Lem semantic definition language._ (2019). REMS.&nbsp;Retrieved from <https://github.com/rems-project/lem>{.bib-url}
~ end bibitem

~ begin bibitem {id:"leroy_ocaml_nodate"; cite-year:"2019"; cite-authors:"Leroy"; cite-authors-long:"Leroy"; cite-label:"Leroy, n.d."; caption:"OCaml Home Page&nl;Leroy, 2019"; data-line:"FormalReview.bib:2811"; searchterm:"OCaml%20Home%20Page%20Leroy%2C%202019"; spellcheck:"false"}
Leroy, X.&nbsp;(n.d.). OCaml Home Page. Retrieved February 1, 2019, from <https://ocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lescuyer_provencore:_2015"; cite-year:"2015"; cite-authors:"Lescuyer"; cite-authors-long:"Lescuyer"; cite-label:"Lescuyer, 2015"; caption:"ProvenCore: Towards a Verified Isolation Micro-Kernel&nl;Lescuyer, 2015"; data-line:"FormalReview.bib:3720"; searchterm:"ProvenCore%3A%20Towards%20a%20Verified%20Isolation%20MicroKernel%20Lescuyer%2C%202015"; spellcheck:"false"}
Lescuyer, S.&nbsp;(2015). _ProvenCore: Towards a Verified Isolation Micro-Kernel_. Retrieved from <https://zenodo.org/record/47990#.XOrmF-tKi24>{.bib-url}
~ end bibitem

~ begin bibitem {id:"lescuyer_provencore:_nodate"; cite-year:"n.d."; cite-authors:"Lescuyer"; cite-authors-long:"Lescuyer"; cite-label:"Lescuyer, n.d."; caption:"ProvenCore: Towards a Verified Isolation Micro-Kernel&nl;Lescuyer, n.d."; data-line:"FormalReview.bib:3712"; searchterm:"ProvenCore%3A%20Towards%20a%20Verified%20Isolation%20MicroKernel%20Lescuyer%2C%20n.d."; spellcheck:"false"}
Lescuyer, S.&nbsp;(n.d.). ProvenCore: Towards a Verified Isolation Micro-Kernel, 69.
~ end bibitem

~ begin bibitem {id:"leslie-hurd_joe_nodate"; cite-year:"2020"; cite-authors:"Leslie-Hurd"; cite-authors-long:"Leslie-Hurd"; cite-label:"Leslie-Hurd, n.d."; caption:"Joe Leslie-Hurd - Gilith&nl;Leslie-Hurd, 2020"; data-line:"FormalReview.bib:5365"; searchterm:"Joe%20LeslieHurd%20%20Gilith%20LeslieHurd%2C%202020"; spellcheck:"false"}
Leslie-Hurd, J.&nbsp;(n.d.). Joe Leslie-Hurd - Gilith. Retrieved January 10, 2020, from <http://www.gilith.com/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"letouzey_certified_nodate"; cite-year:"2019"; cite-authors:"Letouzey"; cite-authors-long:"Letouzey"; cite-label:"Letouzey, n.d."; caption:"Certified functional programming : Program extraction within Coq proof assistant.ResearchGate&nl;Letouzey, 2019"; data-line:"FormalReview.bib:2641"; searchterm:"Certified%20functional%20programming%20%3A%20Program%20extraction%20within%20Coq%20proof%20assistant.ResearchGate%20Letouzey%2C%202019"; spellcheck:"false"}
Letouzey, P.&nbsp;(n.d.). Certified functional programming : Program extraction within Coq proof assistant.ResearchGate. Retrieved February 1, 2019, from <https://www.researchgate.net/publication/280790704_Certified_functional_programming_Program_extraction_within_Coq_proof_assistant>{.bib-url}
~ end bibitem

~ begin bibitem {id:"liu_virtual_2019"; cite-year:"2019"; cite-authors:"Liu et al."; cite-authors-long:"Liu, Rieg, Shao, Gu, Costanzo, Kim, and Yoon"; cite-label:"Liu et al., 2019"; caption:"Virtual timeline: a formal abstraction for verifying preemptive schedulers with temporal isolation&nl;Liu, Rieg, Shao, Gu, Costanzo, Kim, and Yoon, 2019"; data-line:"FormalReview.bib:5069"; searchterm:"Virtual%20timeline%3A%20a%20formal%20abstraction%20for%20verifying%20preemptive%20schedulers%20with%20temporal%20isolation%20Liu%2C%20Rieg%2C%20Shao%2C%20Gu%2C%20Costanzo%2C%20Kim%2C%20and%20Yoon%2C%202019"; spellcheck:"false"}
Liu, M., Rieg, L., Shao, Z., Gu, R., Costanzo, D., Kim, J.-E., & Yoon, M.-K.&nbsp;(2019). Virtual timeline: a formal abstraction for verifying preemptive schedulers with temporal isolation. _Proceedings of the ACM on Programming Languages_, _4_, 1–31. https://doi.org/[10.1145/3371088](https://dx.doi.org/10.1145/3371088){.bib-doi}
~ end bibitem

~ begin bibitem {id:"lombardi_commutative_2015"; cite-year:"2015"; cite-authors:"Lombardi and Quitté"; cite-authors-long:"Lombardi and Quitté"; cite-label:"Lombardi \& Quitté, 2015"; caption:"Commutative algebra: Constructive methods. Finite projective modules&nl;Lombardi and Quitté, 2015"; data-line:"FormalReview.bib:5340"; searchterm:"Commutative%20algebra%3A%20Constructive%20methods.%20Finite%20projective%20modules%20Lombardi%20and%20Quitt%C3%A9%2C%202015"; spellcheck:"false"}
Lombardi, H., & Quitté, C.&nbsp;(2015). Commutative algebra: Constructive methods. Finite projective modules. _arXiv:1605.04832 \[math\]_, _20_. https://doi.org/[10.1007/978-94-017-9944-7](https://dx.doi.org/10.1007/978-94-017-9944-7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"longley_higher-order_2015"; cite-year:"2015"; cite-authors:"Longley and Normann"; cite-authors-long:"Longley and Normann"; cite-label:"Longley \& Normann, 2015"; caption:"Higher-Order Computability&nl;Longley and Normann, 2015"; data-line:"FormalReview.bib:4846"; searchterm:"HigherOrder%20Computability%20Longley%20and%20Normann%2C%202015"; spellcheck:"false"}
Longley, J., & Normann, D.&nbsp;(2015). _Higher-Order Computability_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-662-47992-6](https://dx.doi.org/10.1007/978-3-662-47992-6){.bib-doi}
~ end bibitem

~ begin bibitem {id:"luo_extended_nodate"; cite-year:"2019"; cite-authors:"Luo"; cite-authors-long:"Luo"; cite-label:"Luo, n.d."; caption:"An Extended Calculus of Constructions&nl;Luo, 2019"; data-line:"FormalReview.bib:2672"; searchterm:"An%20Extended%20Calculus%20of%20Constructions%20Luo%2C%202019"; spellcheck:"false"}
Luo, Z.&nbsp;(n.d.). An Extended Calculus of Constructions. Retrieved February 1, 2019, from <http://www.lfcs.inf.ed.ac.uk/reports/90/ECS-LFCS-90-118/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_picard_2013"; cite-year:"2013"; cite-authors:"Makarov and Spitters"; cite-authors-long:"Makarov and Spitters"; cite-label:"Makarov \& Spitters, 2013"; caption:"The Picard Algorithm for Ordinary Differential Equations in Coq&nl;Makarov and Spitters, 2013"; data-line:"FormalReview.bib:3994"; searchterm:"The%20Picard%20Algorithm%20for%20Ordinary%20Differential%20Equations%20in%20Coq%20Makarov%20and%20Spitters%2C%202013"; spellcheck:"false"}
Makarov, E., & Spitters, B.&nbsp;(2013). The Picard Algorithm for Ordinary Differential Equations in Coq. In S.&nbsp;Blazy, C.&nbsp;Paulin-Mohring, & D.&nbsp;Pichardie (Eds.), _Interactive Theorem Proving_ (Vol. 7998, pp. 463–468). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-39634-2_34](https://dx.doi.org/10.1007/978-3-642-39634-2_34){.bib-doi}
~ end bibitem

~ begin bibitem {id:"malecha_reflection_2018"; cite-year:"2018"; cite-authors:"Malecha"; cite-authors-long:"Malecha"; cite-label:"Malecha, 2018"; caption:"Reflection library for Coq. Contribute to gmalecha/template-coq development by creating an account on GitHub&nl;Malecha, 2018"; data-line:"FormalReview.bib:1691"; searchterm:"Reflection%20library%20for%20Coq.%20Contribute%20to%20gmalecha%2Ftemplatecoq%20development%20by%20creating%20an%20account%20on%20GitHub%20Malecha%2C%202018"; spellcheck:"false"}
Malecha, G.&nbsp;(2018). _Reflection library for Coq. Contribute to gmalecha/template-coq development by creating an account on GitHub_. Retrieved from <https://github.com/gmalecha/template-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"malecha_towards_2016"; cite-year:"2016"; cite-authors:"Malecha et al."; cite-authors-long:"Malecha, Ricketts, Alvarez, and Lerner"; cite-label:"Malecha, Ricketts, Alvarez, \& Lerner, 2016"; caption:"Towards foundational verification of cyber-physical systems&nl;Malecha, Ricketts, Alvarez, and Lerner, 2016"; data-line:"FormalReview.bib:4969"; searchterm:"Towards%20foundational%20verification%20of%20cyberphysical%20systems%20Malecha%2C%20Ricketts%2C%20Alvarez%2C%20and%20Lerner%2C%202016"; spellcheck:"false"}
Malecha, G., Ricketts, D., Alvarez, M.&nbsp;M., & Lerner, S.&nbsp;(2016). Towards foundational verification of cyber-physical systems. In _2016 Science of Security for Cyber-Physical Systems Workshop (SOSCYPS)_ (pp. 1–5). https://doi.org/[10.1109/SOSCYPS.2016.7580000](https://dx.doi.org/10.1109/SOSCYPS.2016.7580000){.bib-doi}
~ end bibitem

~ begin bibitem {id:"manna_temporal_1995"; cite-year:"1995"; cite-authors:"Manna and Pnueli"; cite-authors-long:"Manna and Pnueli"; cite-label:"Manna \& Pnueli, 1995"; caption:"Temporal Verification of Reactive Systems: Safety&nl;Manna and Pnueli, 1995"; data-line:"FormalReview.bib:4367"; searchterm:"Temporal%20Verification%20of%20Reactive%20Systems%3A%20Safety%20Manna%20and%20Pnueli%2C%201995"; spellcheck:"false"}
Manna, Z., & Pnueli, A.&nbsp;(1995). _Temporal Verification of Reactive Systems: Safety_. New York: Springer-Verlag. Retrieved from <https://www.springer.com/gp/book/9780387944593>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mansky_verifying_nodate"; cite-year:"n.d."; cite-authors:"Mansky"; cite-authors-long:"Mansky"; cite-label:"Mansky, n.d."; caption:"Verifying Concurrent Programs with VST&nl;Mansky, n.d."; data-line:"FormalReview.bib:3959"; searchterm:"Verifying%20Concurrent%20Programs%20with%20VST%20Mansky%2C%20n.d."; spellcheck:"false"}
Mansky, W.&nbsp;(n.d.). Verifying Concurrent Programs with VST, 15.
~ end bibitem

~ begin bibitem {id:"martin-dorel_proving_2016"; cite-year:"2016"; cite-authors:"Martin-Dorel and Melquiond"; cite-authors-long:"Martin-Dorel and Melquiond"; cite-label:"Martin-Dorel \& Melquiond, 2016"; caption:"Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq&nl;Martin-Dorel and Melquiond, 2016"; data-line:"FormalReview.bib:2883"; searchterm:"Proving%20Tight%20Bounds%20on%20Univariate%20Expressions%20with%20Elementary%20Functions%20in%20Coq%20MartinDorel%20and%20Melquiond%2C%202016"; spellcheck:"false"}
Martin-Dorel, É., & Melquiond, G.&nbsp;(2016). Proving Tight Bounds on Univariate Expressions with Elementary Functions in Coq. _J Autom Reasoning_, _57_(3), 187–217. https://doi.org/[10.1007/s10817-015-9350-4](https://dx.doi.org/10.1007/s10817-015-9350-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"martin_mastering_2013"; cite-year:"2013"; cite-authors:"Martin et al."; cite-authors-long:"Martin, Hoffman, and Cedilnik"; cite-label:"Martin, Hoffman, \& Cedilnik, 2013"; caption:"Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts&nl;Martin, Hoffman, and Cedilnik, 2013"; data-line:"FormalReview.bib:757"; searchterm:"Mastering%20CMake%3A%20a%20crossplatform%20build%20system%20%3B%20covers%20installing%20and%20running%20CMake%20%3B%20details%20converting%20existing%20build%20processes%20to%20CMake%20%3B%20create%20powerful%20crossplatform%20build%20scripts%20Martin%2C%20Hoffman%2C%20and%20Cedilnik%2C%202013"; spellcheck:"false"}
Martin, K., Hoffman, B., & Cedilnik, A.&nbsp;(2013). _Mastering CMake: a cross-platform build system ; covers installing and running CMake ; details converting existing build processes to CMake ; create powerful cross-platform build scripts_ (6. ed). Clifton Park, NY: Kitware.
~ end bibitem

~ begin bibitem {id:"noauthor_matita_nodate"; cite-authors:"2020ac"; cite-authors-long:"2020ac"; cite-label:"\&ldquo;Matita - Interactive Theorem Prover,\&rdquo; n.d."; caption:"Matita - Interactive Theorem Prover&nl;2020ac, "; data-line:"FormalReview.bib:5587"; searchterm:"Matita%20%20Interactive%20Theorem%20Prover%202020ac%2C%20"; spellcheck:"false"}
Matita - Interactive Theorem Prover. (n.d.). Retrieved January 13, 2020, from <http://matita.cs.unibo.it/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mckinna_why_2006"; cite-year:"2006"; cite-authors:"McKinna"; cite-authors-long:"McKinna"; cite-label:"McKinna, 2006"; caption:"Why Dependent Types Matter&nl;McKinna, 2006"; data-line:"FormalReview.bib:3403"; searchterm:"Why%20Dependent%20Types%20Matter%20McKinna%2C%202006"; spellcheck:"false"}
McKinna, J.&nbsp;(2006). Why Dependent Types Matter. In _Conference Record of the 33rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 1–1). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1111037.1111038](https://dx.doi.org/10.1145/1111037.1111038){.bib-doi}
~ end bibitem

~ begin bibitem {id:"melquiond_why3_nodate"; cite-year:"2019"; cite-authors:"Melquiond"; cite-authors-long:"Melquiond"; cite-label:"Melquiond, n.d."; caption:"Why3&nl;Melquiond, 2019"; data-line:"FormalReview.bib:1908"; searchterm:"Why3%20Melquiond%2C%202019"; spellcheck:"false"}
Melquiond, G.&nbsp;(n.d.). Why3. Retrieved February 1, 2019, from <http://why3.lri.fr/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"memarian_exploring_2019"; cite-year:"2019"; cite-authors:"Memarian et al."; cite-authors-long:"Memarian, Gomes, Davis, Kell, Richardson, Watson, and Sewell"; cite-label:"Memarian et al., 2019"; caption:"Exploring C Semantics and Pointer Provenance&nl;Memarian, Gomes, Davis, Kell, Richardson, Watson, and Sewell, 2019"; data-line:"FormalReview.bib:3252"; searchterm:"Exploring%20C%20Semantics%20and%20Pointer%20Provenance%20Memarian%2C%20Gomes%2C%20Davis%2C%20Kell%2C%20Richardson%2C%20Watson%2C%20and%20Sewell%2C%202019"; spellcheck:"false"}
Memarian, K., Gomes, V.&nbsp;B.&nbsp;F., Davis, B., Kell, S., Richardson, A., Watson, R.&nbsp;N.&nbsp;M., & Sewell, P.&nbsp;(2019). Exploring C Semantics and Pointer Provenance. _Proc. ACM Program. Lang._, _3_, 67:1–67:32. https://doi.org/[10.1145/3290380](https://dx.doi.org/10.1145/3290380){.bib-doi}
~ end bibitem

~ begin bibitem {id:"menon_shakti-t:_2017"; cite-year:"2017"; cite-authors:"Menon et al."; cite-authors-long:"Menon, Murugan, Rebeiro, Gala, and Veezhinathan"; cite-label:"Menon, Murugan, Rebeiro, Gala, \& Veezhinathan, 2017"; caption:"Shakti-T: A RISC-V Processor with Light Weight Security Extensions&nl;Menon, Murugan, Rebeiro, Gala, and Veezhinathan, 2017"; data-line:"FormalReview.bib:3745"; searchterm:"ShaktiT%3A%20A%20RISCV%20Processor%20with%20Light%20Weight%20Security%20Extensions%20Menon%2C%20Murugan%2C%20Rebeiro%2C%20Gala%2C%20and%20Veezhinathan%2C%202017"; spellcheck:"false"}
Menon, A., Murugan, S., Rebeiro, C., Gala, N., & Veezhinathan, K.&nbsp;(2017). Shakti-T: A RISC-V Processor with Light Weight Security Extensions. In _Proceedings of the Hardware and Architectural Support for Security and Privacy_ (pp. 2:1–2:8). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3092627.3092629](https://dx.doi.org/10.1145/3092627.3092629){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_metis_nodate"; cite-authors:"2020ad"; cite-authors-long:"2020ad"; cite-label:"\&ldquo;Metis Theorem Prover - Gilith,\&rdquo; n.d."; caption:"Metis Theorem Prover - Gilith&nl;2020ad, "; data-line:"FormalReview.bib:5381"; searchterm:"Metis%20Theorem%20Prover%20%20Gilith%202020ad%2C%20"; spellcheck:"false"}
Metis Theorem Prover - Gilith. (n.d.). Retrieved January 10, 2020, from <http://www.gilith.com/metis/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mine_taking_2016"; cite-year:"2016"; cite-authors:"Miné et al."; cite-authors-long:"Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al."; cite-label:"Miné et al., 2016"; caption:"Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée&nl;Miné, Mauborgne, Rival, Feret, Cousot, Kästner, et al., 2016"; data-line:"FormalReview.bib:425"; searchterm:"Taking%20Static%20Analysis%20to%20the%20Next%20Level%3A%20Proving%20the%20Absence%20of%20RunTime%20Errors%20and%20Data%20Races%20with%20Astr%C3%A9e%20Min%C3%A9%2C%20Mauborgne%2C%20Rival%2C%20Feret%2C%20Cousot%2C%20K%C3%A4stner%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Miné, A., Mauborgne, L., Rival, X., Feret, J., Cousot, P., Kästner, D., … Ferdinand, C.&nbsp;(2016). Taking Static Analysis to the Next Level: Proving the Absence of Run-Time Errors and Data Races with Astrée. In _8th European Congress on Embedded Real Time Software and Systems (ERTS 2016)_. Toulouse, France. Retrieved from <https://hal.archives-ouvertes.fr/hal-01271552>{.bib-url}
~ end bibitem

~ begin bibitem {id:"minsky_real_nodate"; cite-year:"2019"; cite-authors:"Minsky et al."; cite-authors-long:"Minsky, Madhavapeddy, and Hickey"; cite-label:"Minsky, Madhavapeddy, \& Hickey, n.d."; caption:"Real World OCaml&nl;Minsky, Madhavapeddy, and Hickey, 2019"; data-line:"FormalReview.bib:2819"; searchterm:"Real%20World%20OCaml%20Minsky%2C%20Madhavapeddy%2C%20and%20Hickey%2C%202019"; spellcheck:"false"}
Minsky, Y., Madhavapeddy, A., & Hickey, J.&nbsp;(n.d.). Real World OCaml. Retrieved February 1, 2019, from <http://dev.realworldocaml.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"mokhov_algebraic_2017"; cite-year:"2017"; cite-authors:"Mokhov"; cite-authors-long:"Mokhov"; cite-label:"Mokhov, 2017"; caption:"Algebraic Graphs with Class (Functional Pearl)&nl;Mokhov, 2017"; data-line:"FormalReview.bib:2115"; searchterm:"Algebraic%20Graphs%20with%20Class%20Functional%20Pearl%20Mokhov%2C%202017"; spellcheck:"false"}
Mokhov, A.&nbsp;(2017). Algebraic Graphs with Class (Functional Pearl). In _Proceedings of the 10th ACM SIGPLAN International Symposium on Haskell_ (pp. 2–13). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3122955.3122956](https://dx.doi.org/10.1145/3122955.3122956){.bib-doi}
~ end bibitem

~ begin bibitem {id:"monniaux_parallel_2005"; cite-year:"2005"; cite-authors:"Monniaux"; cite-authors-long:"Monniaux"; cite-label:"Monniaux, 2005"; caption:"The parallel implementation of the Astr&bslash;'&lcurly;e&rcurly;e static analyzer&nl;Monniaux, 2005"; data-line:"FormalReview.bib:397"; searchterm:"The%20parallel%20implementation%20of%20the%20Astr%26bslash%3B'%26lcurly%3Be%26rcurly%3Be%20static%20analyzer%20Monniaux%2C%202005"; spellcheck:"false"}
Monniaux, D.&nbsp;(2005). The parallel implementation of the Astr&bslash;’&lcurly;e&rcurly;e static analyzer. _arXiv:cs/0701191_, _3780_, 86–96. https://doi.org/[10.1007/11575467_7](https://dx.doi.org/10.1007/11575467_7){.bib-doi}
~ end bibitem

~ begin bibitem {id:"montagu_theory_2013"; cite-year:"2013"; cite-authors:"Montagu et al."; cite-authors-long:"Montagu, Pierce, and Pollack"; cite-label:"Montagu, Pierce, \& Pollack, 2013"; caption:"A Theory of Information-Flow Labels&nl;Montagu, Pierce, and Pollack, 2013"; data-line:"FormalReview.bib:3732"; searchterm:"A%20Theory%20of%20InformationFlow%20Labels%20Montagu%2C%20Pierce%2C%20and%20Pollack%2C%202013"; spellcheck:"false"}
Montagu, B., Pierce, B.&nbsp;C., & Pollack, R.&nbsp;(2013). A Theory of Information-Flow Labels. In _2013 IEEE 26th Computer Security Foundations Symposium_ (pp. 3–17). https://doi.org/[10.1109/CSF.2013.8](https://dx.doi.org/10.1109/CSF.2013.8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"moscato_provably_2019"; cite-year:"2019"; cite-authors:"Moscato et al."; cite-authors-long:"Moscato, Titolo, Feliú, and Muñoz"; cite-label:"Moscato, Titolo, Feliú, \& Muñoz, 2019"; caption:"Provably Correct Floating-Point Implementation of a Point-in-Polygon Algorithm&nl;Moscato, Titolo, Feliú, and Muñoz, 2019"; data-line:"FormalReview.bib:4774"; searchterm:"Provably%20Correct%20FloatingPoint%20Implementation%20of%20a%20PointinPolygon%20Algorithm%20Moscato%2C%20Titolo%2C%20Feli%C3%BA%2C%20and%20Mu%C3%B1oz%2C%202019"; spellcheck:"false"}
Moscato, M.&nbsp;M., Titolo, L., Feliú, M.&nbsp;A., & Muñoz, C.&nbsp;A.&nbsp;(2019). Provably Correct Floating-Point Implementation of a Point-in-Polygon Algorithm. In M.&nbsp;H.&nbsp;ter Beek, A.&nbsp;McIver, & J.&nbsp;N.&nbsp;Oliveira (Eds.), _Formal Methods – The Next 30 Years_ (pp. 21–37). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"mullen_oeuf:_2018"; cite-year:"2018a"; cite-authors:"Mullen et al."; cite-authors-long:"Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman"; cite-label:"Mullen, Pernsteiner, Wilcox, Tatlock, \& Grossman, 2018a"; caption:"ŒUf: Minimizing the Coq Extraction TCB&nl;Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman, 2018a"; data-line:"FormalReview.bib:4383"; searchterm:"%C5%92Uf%3A%20Minimizing%20the%20Coq%20Extraction%20TCB%20Mullen%2C%20Pernsteiner%2C%20Wilcox%2C%20Tatlock%2C%20and%20Grossman%2C%202018a"; spellcheck:"false"}
Mullen, E., Pernsteiner, S., Wilcox, J.&nbsp;R., Tatlock, Z., & Grossman, D.&nbsp;(2018a). ŒUf: Minimizing the Coq Extraction TCB.&nbsp;In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 172–185). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167089](https://dx.doi.org/10.1145/3167089){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mullen_oeuf:_2018-1"; cite-year:"2018b"; cite-authors:"Mullen et al."; cite-authors-long:"Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman"; cite-label:"Mullen, Pernsteiner, Wilcox, Tatlock, \& Grossman, 2018b"; caption:"ŒUf: Minimizing the Coq Extraction TCB&nl;Mullen, Pernsteiner, Wilcox, Tatlock, and Grossman, 2018b"; data-line:"FormalReview.bib:4636"; searchterm:"%C5%92Uf%3A%20Minimizing%20the%20Coq%20Extraction%20TCB%20Mullen%2C%20Pernsteiner%2C%20Wilcox%2C%20Tatlock%2C%20and%20Grossman%2C%202018b"; spellcheck:"false"}
Mullen, E., Pernsteiner, S., Wilcox, J.&nbsp;R., Tatlock, Z., & Grossman, D.&nbsp;(2018b). ŒUf: Minimizing the Coq Extraction TCB.&nbsp;In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 172–185). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167089](https://dx.doi.org/10.1145/3167089){.bib-doi}
~ end bibitem

~ begin bibitem {id:"mulligan_lem:_2014"; cite-year:"2014"; cite-authors:"Mulligan et al."; cite-authors-long:"Mulligan, Owens, Gray, Ridge, and Sewell"; cite-label:"Mulligan, Owens, Gray, Ridge, \& Sewell, 2014"; caption:"Lem: Reusable Engineering of Real-world Semantics&nl;Mulligan, Owens, Gray, Ridge, and Sewell, 2014"; data-line:"FormalReview.bib:3343"; searchterm:"Lem%3A%20Reusable%20Engineering%20of%20Realworld%20Semantics%20Mulligan%2C%20Owens%2C%20Gray%2C%20Ridge%2C%20and%20Sewell%2C%202014"; spellcheck:"false"}
Mulligan, D.&nbsp;P., Owens, S., Gray, K.&nbsp;E., Ridge, T., & Sewell, P.&nbsp;(2014). Lem: Reusable Engineering of Real-world Semantics. In _Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming_ (pp. 175–188). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2628136.2628143](https://dx.doi.org/10.1145/2628136.2628143){.bib-doi}
~ end bibitem

~ begin bibitem {id:"murawski_invitation_2016"; cite-year:"2016"; cite-authors:"Murawski and Tzevelekos"; cite-authors-long:"Murawski and Tzevelekos"; cite-label:"Murawski \& Tzevelekos, 2016"; caption:"An Invitation to Game Semantics&nl;Murawski and Tzevelekos, 2016"; data-line:"FormalReview.bib:516"; searchterm:"An%20Invitation%20to%20Game%20Semantics%20Murawski%20and%20Tzevelekos%2C%202016"; spellcheck:"false"}
Murawski, A.&nbsp;S., & Tzevelekos, N.&nbsp;(2016). An Invitation to Game Semantics. _ACM SIGLOG News_, _3_(2), 56–67. https://doi.org/[10.1145/2948896.2948902](https://dx.doi.org/10.1145/2948896.2948902){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017"; cite-year:"2017a"; cite-authors:"L.&nbsp;Nelson et al."; cite-authors-long:"L.&nbsp;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"L. Nelson et al., 2017a"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel&nl;L. Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017a"; data-line:"FormalReview.bib:2372"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20L.%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017a"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017a). Hyperkernel: Push-Button Verification of an OS Kernel. In _Proceedings of the 26th Symposium on Operating Systems Principles_ (pp. 252–269). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_hyperkernel:_2017-1"; cite-year:"2017b"; cite-authors:"L.&nbsp;Nelson et al."; cite-authors-long:"L.&nbsp;Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang"; cite-label:"L. Nelson et al., 2017b"; caption:"Hyperkernel: Push-Button Verification of an OS Kernel - Slides&nl;L. Nelson, Sigurbjarnarson, Zhang, Johnson, Bornholt, Torlak, and Wang, 2017b"; data-line:"FormalReview.bib:2390"; searchterm:"Hyperkernel%3A%20PushButton%20Verification%20of%20an%20OS%20Kernel%20%20Slides%20L.%20Nelson%2C%20Sigurbjarnarson%2C%20Zhang%2C%20Johnson%2C%20Bornholt%2C%20Torlak%2C%20and%20Wang%2C%202017b"; spellcheck:"false"}
Nelson, L., Sigurbjarnarson, H., Zhang, K., Johnson, D., Bornholt, J., Torlak, E., & Wang, X.&nbsp;(2017b). Hyperkernel: Push-Button Verification of an OS Kernel - Slides. In _Proceedings of the 26th Symposium on Operating Systems Principles&nbsp;- SOSP ’17_ (pp. 252–269). Shanghai, China: ACM Press. https://doi.org/[10.1145/3132747.3132748](https://dx.doi.org/10.1145/3132747.3132748){.bib-doi}
~ end bibitem

~ begin bibitem {id:"nelson_computer_1980"; cite-year:"1980"; cite-authors:"W.&nbsp;R.&nbsp;Nelson and Jenkins"; cite-authors-long:"W.&nbsp;R.&nbsp;Nelson and Jenkins"; cite-label:"W. R. Nelson \& Jenkins, 1980"; caption:"Computer Techniques in Radiation Transport and Dosimetry&nl;W. R. Nelson and Jenkins, 1980"; data-line:"FormalReview.bib:4015"; searchterm:"Computer%20Techniques%20in%20Radiation%20Transport%20and%20Dosimetry%20W.%20R.%20Nelson%20and%20Jenkins%2C%201980"; spellcheck:"false"}
Nelson, W.&nbsp;R., & Jenkins, T.&nbsp;M.&nbsp;(1980). _Computer Techniques in Radiation Transport and Dosimetry_. Boston, MA: Springer US.&nbsp;Retrieved from <http://public.eblib.com/choice/publicfullrecord.aspx?p=3083212>{.bib-url}
~ end bibitem

~ begin bibitem {id:"nienhuis_operational_2016"; cite-year:"2016"; cite-authors:"Nienhuis et al."; cite-authors-long:"Nienhuis, Memarian, and Sewell"; cite-label:"Nienhuis, Memarian, \& Sewell, 2016"; caption:"An Operational Semantics for C/C++11 Concurrency&nl;Nienhuis, Memarian, and Sewell, 2016"; data-line:"FormalReview.bib:3304"; searchterm:"An%20Operational%20Semantics%20for%20C%2FC%2B%2B11%20Concurrency%20Nienhuis%2C%20Memarian%2C%20and%20Sewell%2C%202016"; spellcheck:"false"}
Nienhuis, K., Memarian, K., & Sewell, P.&nbsp;(2016). An Operational Semantics for C/C++11 Concurrency. In _Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications_ (pp. 111–128). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2983990.2983997](https://dx.doi.org/10.1145/2983990.2983997){.bib-doi}
~ end bibitem

~ begin bibitem {id:"oconnor_computer-verified_2010"; cite-year:"2010"; cite-authors:"O’Connor and Spitters"; cite-authors-long:"O’Connor and Spitters"; cite-label:"O’Connor \& Spitters, 2010"; caption:"A computer-verified monadic functional implementation of the integral&nl;O’Connor and Spitters, 2010"; data-line:"FormalReview.bib:4888"; searchterm:"A%20computerverified%20monadic%20functional%20implementation%20of%20the%20integral%20O%E2%80%99Connor%20and%20Spitters%2C%202010"; spellcheck:"false"}
O’Connor, R., & Spitters, B.&nbsp;(2010). A computer-verified monadic functional implementation of the integral. _Theoretical Computer Science_, _411_(37), 3386–3402. https://doi.org/[10.1016/j.tcs.2010.05.031](https://dx.doi.org/10.1016/j.tcs.2010.05.031){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_categorical_2015"; cite-year:"2015"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2015"; caption:"From Categorical Logic to Facebook Engineering&nl;P. O’Hearn, 2015"; data-line:"FormalReview.bib:135"; searchterm:"From%20Categorical%20Logic%20to%20Facebook%20Engineering%20P.%20O%E2%80%99Hearn%2C%202015"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2015). From Categorical Logic to Facebook Engineering. In _Proceedings of the 2015 30th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)_ (pp. 17–20). Washington, DC, USA: IEEE Computer Society. https://doi.org/[10.1109/LICS.2015.11](https://dx.doi.org/10.1109/LICS.2015.11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_separation_2019"; cite-year:"2019"; cite-authors:"P.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;O’Hearn"; cite-label:"P. O’Hearn, 2019"; caption:"Separation logic&nl;P. O’Hearn, 2019"; data-line:"FormalReview.bib:51"; searchterm:"Separation%20logic%20P.%20O%E2%80%99Hearn%2C%202019"; spellcheck:"false"}
O’Hearn, P.&nbsp;(2019). Separation logic. _Communications of the ACM_, _62_(2), 86–95. https://doi.org/[10.1145/3211968](https://dx.doi.org/10.1145/3211968){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_local_2001"; cite-year:"2001"; cite-authors:"O’Hearn et al."; cite-authors-long:"O’Hearn, Reynolds, and Yang"; cite-label:"O’Hearn, Reynolds, \& Yang, 2001"; caption:"Local Reasoning about Programs that Alter Data Structures&nl;O’Hearn, Reynolds, and Yang, 2001"; data-line:"FormalReview.bib:3075"; searchterm:"Local%20Reasoning%20about%20Programs%20that%20Alter%20Data%20Structures%20O%E2%80%99Hearn%2C%20Reynolds%2C%20and%20Yang%2C%202001"; spellcheck:"false"}
O’Hearn, P., Reynolds, J., & Yang, H.&nbsp;(2001). Local Reasoning about Programs that Alter Data Structures. In L.&nbsp;Fribourg (Ed.), _Computer Science Logic_ (pp. 1–19). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"ohearn_continuous_2018"; cite-year:"2018"; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, 2018"; caption:"Continuous Reasoning: Scaling the impact of formal methods&nl;P. W. O’Hearn, 2018"; data-line:"FormalReview.bib:88"; searchterm:"Continuous%20Reasoning%3A%20Scaling%20the%20impact%20of%20formal%20methods%20P.%20W.%20O%E2%80%99Hearn%2C%202018"; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(2018). Continuous Reasoning: Scaling the impact of formal methods. In _Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science&nbsp;- LICS ’18_ (pp. 13–25). Oxford, United Kingdom: ACM Press. https://doi.org/[10.1145/3209108.3209109](https://dx.doi.org/10.1145/3209108.3209109){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ohearn_peter_nodate"; cite-year:"n.d."; cite-authors:"P.&nbsp;W.&nbsp;O’Hearn"; cite-authors-long:"P.&nbsp;W.&nbsp;O’Hearn"; cite-label:"P. W. O’Hearn, n.d."; caption:"Peter W O'hearn - acm profile&nl;P. W. O’Hearn, n.d."; data-line:"FormalReview.bib:66"; searchterm:"Peter%20W%20O'hearn%20%20acm%20profile%20P.%20W.%20O%E2%80%99Hearn%2C%20n.d."; spellcheck:"false"}
O’Hearn, P.&nbsp;W.&nbsp;(n.d.). Peter W O’hearn - acm profile. Retrieved from <https://dl.acm.org/author_page.cfm?id=81332519314&coll=DL&dl=ACM&trk=0>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_opentheory_nodate"; cite-authors:"2020af"; cite-authors-long:"2020af"; cite-label:"\&ldquo;OpenTheory Project - Gilith,\&rdquo; n.d."; caption:"OpenTheory Project - Gilith&nl;2020af, "; data-line:"FormalReview.bib:5374"; searchterm:"OpenTheory%20Project%20%20Gilith%202020af%2C%20"; spellcheck:"false"}
OpenTheory Project - Gilith. (n.d.). Retrieved January 10, 2020, from <http://www.gilith.com/opentheory/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"padon_ivy:_2016"; cite-year:"2016"; cite-authors:"Padon et al."; cite-authors-long:"Padon, McMillan, Panda, Sagiv, and Shoham"; cite-label:"Padon, McMillan, Panda, Sagiv, \& Shoham, 2016"; caption:"Ivy: Safety Verification by Interactive Generalization&nl;Padon, McMillan, Panda, Sagiv, and Shoham, 2016"; data-line:"FormalReview.bib:4403"; searchterm:"Ivy%3A%20Safety%20Verification%20by%20Interactive%20Generalization%20Padon%2C%20McMillan%2C%20Panda%2C%20Sagiv%2C%20and%20Shoham%2C%202016"; spellcheck:"false"}
Padon, O., McMillan, K.&nbsp;L., Panda, A., Sagiv, M., & Shoham, S.&nbsp;(2016). Ivy: Safety Verification by Interactive Generalization. In _Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation_ (pp. 614–630). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2908080.2908118](https://dx.doi.org/10.1145/2908080.2908118){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pakin_comprehensive_nodate"; cite-year:"n.d."; cite-authors:"Pakin"; cite-authors-long:"Pakin"; cite-label:"Pakin, n.d."; caption:"The Comprehensive LaTeX Symbol List&nl;Pakin, n.d."; data-line:"FormalReview.bib:2615"; searchterm:"The%20Comprehensive%20LaTeX%20Symbol%20List%20Pakin%2C%20n.d."; spellcheck:"false"}
Pakin, S.&nbsp;(n.d.). The Comprehensive LaTeX Symbol List, 358.
~ end bibitem

~ begin bibitem {id:"parigot_logic_2000"; cite-year:"2000"; cite-authors:"Parigot and Voronkov"; cite-authors-long:"Parigot and Voronkov"; cite-label:"Parigot \& Voronkov, 2000"; caption:"Logic for Programming and Automated Reasoning: 7th International Conference, LPAR 2000 Reunion Island, France, November 6-10, 2000 Proceedings&nl;Parigot and Voronkov, 2000"; data-line:"FormalReview.bib:1712"; searchterm:"Logic%20for%20Programming%20and%20Automated%20Reasoning%3A%207th%20International%20Conference%2C%20LPAR%202000%20Reunion%20Island%2C%20France%2C%20November%20610%2C%202000%20Proceedings%20Parigot%20and%20Voronkov%2C%202000"; spellcheck:"false"}
Parigot, M., & Voronkov, A.&nbsp;(2000). _Logic for Programming and Automated Reasoning: 7th International Conference, LPAR 2000 Reunion Island, France, November 6-10, 2000 Proceedings_. Berlin, Heidelberg: Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"parkinson_relationship_nodate"; cite-year:"n.d."; cite-authors:"Parkinson and Summers"; cite-authors-long:"Parkinson and Summers"; cite-label:"Parkinson \& Summers, n.d."; caption:"The Relationship between Separation Logic and Implicit Dynamic Frames&nl;Parkinson and Summers, n.d."; data-line:"FormalReview.bib:1277"; searchterm:"The%20Relationship%20between%20Separation%20Logic%20and%20Implicit%20Dynamic%20Frames%20Parkinson%20and%20Summers%2C%20n.d."; spellcheck:"false"}
Parkinson, M.&nbsp;J., & Summers, A.&nbsp;J.&nbsp;(n.d.). The Relationship between Separation Logic and Implicit Dynamic Frames. _LNCS_, _6602_, 439–458.
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate-1"; cite-year:"n.d."; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-a"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation&nl;Patterson and Ahmed, n.d."; data-line:"FormalReview.bib:2688"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20Patterson%20and%20Ahmed%2C%20n.d."; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-a). On Compositional Compiler Correctness and Fully Abstract Compilation, 3. Retrieved from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"patterson_compositional_nodate"; cite-year:"2019"; cite-authors:"Patterson and Ahmed"; cite-authors-long:"Patterson and Ahmed"; cite-label:"Patterson \& Ahmed, n.d.-b"; caption:"On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018&nl;Patterson and Ahmed, 2019"; data-line:"FormalReview.bib:2680"; searchterm:"On%20Compositional%20Compiler%20Correctness%20and%20Fully%20Abstract%20Compilation%20%20POPL%202018%20Patterson%20and%20Ahmed%2C%202019"; spellcheck:"false"}
Patterson, D., & Ahmed, A.&nbsp;(n.d.-b). On Compositional Compiler Correctness and Fully Abstract Compilation - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/prisc-2018-on-compositional-compiler-correctness-and-fully-abstract-compilation>{.bib-url}
~ end bibitem

~ begin bibitem {id:"paulson_foundation_2000"; cite-year:"2000"; cite-authors:"Paulson"; cite-authors-long:"Paulson"; cite-label:"Paulson, 2000"; caption:"The Foundation of a Generic Theorem Prover&nl;Paulson, 2000"; data-line:"FormalReview.bib:2440"; searchterm:"The%20Foundation%20of%20a%20Generic%20Theorem%20Prover%20Paulson%2C%202000"; spellcheck:"false"}
Paulson, L.&nbsp;C.&nbsp;(2000). The Foundation of a Generic Theorem Prover. _arXiv:cs/9301105_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[cs/9301105](http://arxiv.org/abs/cs/9301105){.bib-url}
~ end bibitem

~ begin bibitem {id:"petcher_foundational_2015"; cite-year:"2015"; cite-authors:"Petcher and Morrisett"; cite-authors-long:"Petcher and Morrisett"; cite-label:"Petcher \& Morrisett, 2015"; caption:"The Foundational Cryptography Framework&nl;Petcher and Morrisett, 2015"; data-line:"FormalReview.bib:1479"; searchterm:"The%20Foundational%20Cryptography%20Framework%20Petcher%20and%20Morrisett%2C%202015"; spellcheck:"false"}
Petcher, A., & Morrisett, G.&nbsp;(2015). The Foundational Cryptography Framework. In R.&nbsp;Focardi & A.&nbsp;Myers (Eds.), _Principles of Security and Trust_ (pp. 53–72). Springer Berlin Heidelberg. Retrieved from <http://www.cs.cornell.edu/~jgm/papers/FCF.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_your_2015"; cite-year:"2015"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2015"; caption:"Your Proof Fails? Testing Helps to Find the Reason&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2015"; data-line:"FormalReview.bib:1877"; searchterm:"Your%20Proof%20Fails%3F%20Testing%20Helps%20to%20Find%20the%20Reason%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202015"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2015). Your Proof Fails? Testing Helps to Find the Reason. _arXiv:1508.01691 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1508.01691](http://arxiv.org/abs/1508.01691){.bib-url}
~ end bibitem

~ begin bibitem {id:"petiot_how_2018"; cite-year:"2018"; cite-authors:"Petiot et al."; cite-authors-long:"Petiot, Kosmatov, Botella, Giorgetti, and Julliand"; cite-label:"Petiot, Kosmatov, Botella, Giorgetti, \& Julliand, 2018"; caption:"How testing helps to diagnose proof failures&nl;Petiot, Kosmatov, Botella, Giorgetti, and Julliand, 2018"; data-line:"FormalReview.bib:1859"; searchterm:"How%20testing%20helps%20to%20diagnose%20proof%20failures%20Petiot%2C%20Kosmatov%2C%20Botella%2C%20Giorgetti%2C%20and%20Julliand%2C%202018"; spellcheck:"false"}
Petiot, G., Kosmatov, N., Botella, B., Giorgetti, A., & Julliand, J.&nbsp;(2018). How testing helps to diagnose proof failures. _Form Asp Comp_, _30_(6), 629–657. https://doi.org/[10.1007/s00165-018-0456-4](https://dx.doi.org/10.1007/s00165-018-0456-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pit-claudel_clement_nodate"; cite-year:"2019"; cite-authors:"Pit-Claudel"; cite-authors-long:"Pit-Claudel"; cite-label:"Pit-Claudel, n.d."; caption:"Clément Pit-Claudel&nl;Pit-Claudel, 2019"; data-line:"FormalReview.bib:796"; searchterm:"Cl%C3%A9ment%20PitClaudel%20PitClaudel%2C%202019"; spellcheck:"false"}
Pit-Claudel, C.&nbsp;(n.d.). Clément Pit-Claudel. Retrieved January 31, 2019, from <http://pit-claudel.fr/clement/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"pit-claudel_extensible_nodate"; cite-year:"n.d."; cite-authors:"Pit-Claudel et al."; cite-authors-long:"Pit-Claudel, Wang, Delaware, Gross, and Chlipala"; cite-label:"Pit-Claudel, Wang, Delaware, Gross, \& Chlipala, n.d."; caption:"Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs&nl;Pit-Claudel, Wang, Delaware, Gross, and Chlipala, n.d."; data-line:"FormalReview.bib:729"; searchterm:"Extensible%20Extraction%20of%20Ef%EF%AC%81cient%20Imperative%20Programs%20with%20Foreign%20Functions%2C%20Manually%20Managed%20Memory%2C%20and%20Proofs%20PitClaudel%2C%20Wang%2C%20Delaware%2C%20Gross%2C%20and%20Chlipala%2C%20n.d."; spellcheck:"false"}
Pit-Claudel, C., Wang, P., Delaware, B., Gross, J., & Chlipala, A.&nbsp;(n.d.). Extensible Extraction of Efﬁcient Imperative Programs with Foreign Functions, Manually Managed Memory, and Proofs, 14. Retrieved from <http://pit-claudel.fr/clement/papers/fiat-to-facade.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2008"; cite-year:"2008"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2008"; caption:"Differential Dynamic Logic for Hybrid Systems&nl;André Platzer, 2008"; data-line:"FormalReview.bib:899"; searchterm:"Differential%20Dynamic%20Logic%20for%20Hybrid%20Systems%20Andr%C3%A9%20Platzer%2C%202008"; spellcheck:"false"}
Platzer, A.&nbsp;(2008). Differential Dynamic Logic for Hybrid Systems. _Journal of Automated Reasoning_, _41_(2), 143–189. https://doi.org/[10.1007/s10817-008-9103-8](https://dx.doi.org/10.1007/s10817-008-9103-8){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2015"; cite-year:"2015"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2015"; caption:"Differential Game Logic&nl;André Platzer, 2015"; data-line:"FormalReview.bib:882"; searchterm:"Differential%20Game%20Logic%20Andr%C3%A9%20Platzer%2C%202015"; spellcheck:"false"}
Platzer, A.&nbsp;(2015). Differential Game Logic. _ACM Trans. Comput. Logic_, _17_(1), 1:1–1:51. https://doi.org/[10.1145/2817824](https://dx.doi.org/10.1145/2817824){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_complete_2017"; cite-year:"2017"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2017"; caption:"A Complete Uniform Substitution Calculus for Differential Dynamic Logic&nl;André Platzer, 2017"; data-line:"FormalReview.bib:992"; searchterm:"A%20Complete%20Uniform%20Substitution%20Calculus%20for%20Differential%20Dynamic%20Logic%20Andr%C3%A9%20Platzer%2C%202017"; spellcheck:"false"}
Platzer, A.&nbsp;(2017). A Complete Uniform Substitution Calculus for Differential Dynamic Logic. _Journal of Automated Reasoning_, _59_(2), 219–265. https://doi.org/[10.1007/s10817-016-9385-1](https://dx.doi.org/10.1007/s10817-016-9385-1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_differential_2018"; cite-year:"2018a"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018a"; caption:"Differential Equations &amp; Differential Invariants&nl;André Platzer, 2018a"; data-line:"FormalReview.bib:865"; searchterm:"Differential%20Equations%20%26amp%3B%20Differential%20Invariants%20Andr%C3%A9%20Platzer%2C%202018a"; spellcheck:"false"}
Platzer, A.&nbsp;(2018a). Differential Equations &amp; Differential Invariants. In A.&nbsp;Platzer, _Logical Foundations of Cyber-Physical Systems_ (pp. 287–322). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0_10](https://dx.doi.org/10.1007/978-3-319-63588-0_10){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018"; cite-year:"2018"; cite-authors:"Andre Platzer"; cite-authors-long:"Andre Platzer"; cite-label:"Andre Platzer, 2018"; caption:"Logical Foundations of Cyber-Physical Systems&nl;Andre Platzer, 2018"; data-line:"FormalReview.bib:937"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20Andre%20Platzer%2C%202018"; spellcheck:"false"}
Platzer, A.&nbsp;(2018). _Logical Foundations of Cyber-Physical Systems_. Springer International Publishing. Retrieved from <https://www.springer.com/gp/book/9783319635873>{.bib-url}
~ end bibitem

~ begin bibitem {id:"platzer_logical_2018-1"; cite-year:"2018b"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, 2018b"; caption:"Logical Foundations of Cyber-Physical Systems - Slides&nl;André Platzer, 2018b"; data-line:"FormalReview.bib:978"; searchterm:"Logical%20Foundations%20of%20CyberPhysical%20Systems%20%20Slides%20Andr%C3%A9%20Platzer%2C%202018b"; spellcheck:"false"}
Platzer, A.&nbsp;(2018b). _Logical Foundations of Cyber-Physical Systems - Slides_. Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-63588-0](https://dx.doi.org/10.1007/978-3-319-63588-0){.bib-doi}
~ end bibitem

~ begin bibitem {id:"platzer_keymaera_nodate"; cite-year:"2019"; cite-authors:"André Platzer"; cite-authors-long:"André Platzer"; cite-label:"André Platzer, n.d."; caption:"KeYmaera X: Documentation&nl;André Platzer, 2019"; data-line:"FormalReview.bib:950"; searchterm:"KeYmaera%20X%3A%20Documentation%20Andr%C3%A9%20Platzer%2C%202019"; spellcheck:"false"}
Platzer, A.&nbsp;(n.d.). KeYmaera X: Documentation. Retrieved January 31, 2019, from <http://www.ls.cs.cmu.edu/KeYmaeraX/documentation.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"poial_forth_nodate"; cite-year:"n.d."; cite-authors:"Poial"; cite-authors-long:"Poial"; cite-label:"Poial, n.d."; caption:"Forth and Formal Language Theory&nl;Poial, n.d."; data-line:"FormalReview.bib:3797"; searchterm:"Forth%20and%20Formal%20Language%20Theory%20Poial%2C%20n.d."; spellcheck:"false"}
Poial, J.&nbsp;(n.d.). Forth and Formal Language Theory, 6.
~ end bibitem

~ begin bibitem {id:"polikarpova_structuring_2019"; cite-year:"2019"; cite-authors:"Polikarpova and Sergey"; cite-authors-long:"Polikarpova and Sergey"; cite-label:"Polikarpova \& Sergey, 2019"; caption:"Structuring the Synthesis of Heap-manipulating Programs&nl;Polikarpova and Sergey, 2019"; data-line:"FormalReview.bib:1128"; searchterm:"Structuring%20the%20Synthesis%20of%20Heapmanipulating%20Programs%20Polikarpova%20and%20Sergey%2C%202019"; spellcheck:"false"}
Polikarpova, N., & Sergey, I.&nbsp;(2019). Structuring the Synthesis of Heap-manipulating Programs. _Proc. ACM Program. Lang._, _3_, 72:1–72:30. https://doi.org/[10.1145/3290385](https://dx.doi.org/10.1145/3290385){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pottier_menhir_nodate"; cite-year:"2019"; cite-authors:"Pottier and REgis-Gianas"; cite-authors-long:"Pottier and REgis-Gianas"; cite-label:"Pottier \& REgis-Gianas, n.d."; caption:"Menhir Reference Manual (version 20181113)&nl;Pottier and REgis-Gianas, 2019"; data-line:"FormalReview.bib:2756"; searchterm:"Menhir%20Reference%20Manual%20version%2020181113%20Pottier%20and%20REgisGianas%2C%202019"; spellcheck:"false"}
Pottier, F., & REgis-Gianas, Y.&nbsp;(n.d.). Menhir Reference Manual (version 20181113). Retrieved February 1, 2019, from <http://gallium.inria.fr/~fpottier/menhir/manual.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"power_formal_nodate"; cite-year:"n.d."; cite-authors:"Power and Sinclair"; cite-authors-long:"Power and Sinclair"; cite-label:"Power \& Sinclair, n.d."; caption:"A Formal Model of Forth Control Words in the Pi-Calculus&nl;Power and Sinclair, n.d."; data-line:"FormalReview.bib:3806"; searchterm:"A%20Formal%20Model%20of%20Forth%20Control%20Words%20in%20the%20PiCalculus%20Power%20and%20Sinclair%2C%20n.d."; spellcheck:"false"}
Power, J.&nbsp;F., & Sinclair, D.&nbsp;(n.d.). _A Formal Model of Forth Control Words in the Pi-Calculus_.
~ end bibitem

~ begin bibitem {id:"protzenko_formally_2019"; cite-year:"2019"; cite-authors:"Protzenko et al."; cite-authors-long:"Protzenko, Beurdouche, Merigoux, and Bhargavan"; cite-label:"Protzenko, Beurdouche, Merigoux, \& Bhargavan, 2019"; caption:"Formally Verified Cryptographic Web Applications in WebAssembly&nl;Protzenko, Beurdouche, Merigoux, and Bhargavan, 2019"; data-line:"FormalReview.bib:4982"; searchterm:"Formally%20Verified%20Cryptographic%20Web%20Applications%20in%20WebAssembly%20Protzenko%2C%20Beurdouche%2C%20Merigoux%2C%20and%20Bhargavan%2C%202019"; spellcheck:"false"}
Protzenko, J., Beurdouche, B., Merigoux, D., & Bhargavan, K.&nbsp;(2019). Formally Verified Cryptographic Web Applications in WebAssembly. In _2019 IEEE Symposium on Security and Privacy (SP)_ (pp. 1256–1274). San Francisco, CA, USA: IEEE.&nbsp;https://doi.org/[10.1109/SP.2019.00064](https://dx.doi.org/10.1109/SP.2019.00064){.bib-doi}
~ end bibitem

~ begin bibitem {id:"protzenko_verified_2017"; cite-year:"2017"; cite-authors:"Protzenko et al."; cite-authors-long:"Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al."; cite-label:"Protzenko et al., 2017"; caption:"Verified Low-level Programming Embedded in F\*&nl;Protzenko, Zinzindohoué, Rastogi, Ramananandro, Wang, Zanella-Béguelin, et al., 2017"; data-line:"FormalReview.bib:1773"; searchterm:"Verified%20Lowlevel%20Programming%20Embedded%20in%20F%5C*%20Protzenko%2C%20Zinzindohou%C3%A9%2C%20Rastogi%2C%20Ramananandro%2C%20Wang%2C%20ZanellaB%C3%A9guelin%2C%20et%20al.%2C%202017"; spellcheck:"false"}
Protzenko, J., Zinzindohoué, J.-K., Rastogi, A., Ramananandro, T., Wang, P., Zanella-Béguelin, S., … Swamy, N.&nbsp;(2017). Verified Low-level Programming Embedded in F\*. _Proc. ACM Program. Lang._, _1_, 17:1–17:29. https://doi.org/[10.1145/3110261](https://dx.doi.org/10.1145/3110261){.bib-doi}
~ end bibitem

~ begin bibitem {id:"pulte_simplifying_2017"; cite-year:"2017"; cite-authors:"Pulte et al."; cite-authors-long:"Pulte, Flur, Deacon, French, Sarkar, and Sewell"; cite-label:"Pulte et al., 2017"; caption:"Simplifying ARM Concurrency: Multicopy-atomic Axiomatic and Operational Models for ARMv8&nl;Pulte, Flur, Deacon, French, Sarkar, and Sewell, 2017"; data-line:"FormalReview.bib:3286"; searchterm:"Simplifying%20ARM%20Concurrency%3A%20Multicopyatomic%20Axiomatic%20and%20Operational%20Models%20for%20ARMv8%20Pulte%2C%20Flur%2C%20Deacon%2C%20French%2C%20Sarkar%2C%20and%20Sewell%2C%202017"; spellcheck:"false"}
Pulte, C., Flur, S., Deacon, W., French, J., Sarkar, S., & Sewell, P.&nbsp;(2017). Simplifying ARM Concurrency: Multicopy-atomic Axiomatic and Operational Models for ARMv8. _Proc. ACM Program. Lang._, _2_, 19:1–19:29. https://doi.org/[10.1145/3158107](https://dx.doi.org/10.1145/3158107){.bib-doi}
~ end bibitem

~ begin bibitem {id:"noauthor_qemu_nodate"; cite-authors:"2020aj"; cite-authors-long:"2020aj"; cite-label:"\&ldquo;QEMU,\&rdquo; n.d."; caption:"QEMU&nl;2020aj, "; data-line:"FormalReview.bib:5500"; searchterm:"QEMU%202020aj%2C%20"; spellcheck:"false"}
QEMU.&nbsp;(n.d.). Retrieved January 10, 2020, from <https://wiki.qemu.org/Main_Page>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_qemu_nodate-1"; cite-authors:"2020ak"; cite-authors-long:"2020ak"; cite-label:"\&ldquo;QEMU version 4.1.0 User Documentation,\&rdquo; n.d."; caption:"QEMU version 4.1.0 User Documentation&nl;2020ak, "; data-line:"FormalReview.bib:5507"; searchterm:"QEMU%20version%204.1.0%20User%20Documentation%202020ak%2C%20"; spellcheck:"false"}
QEMU version 4.1.0 User Documentation. (n.d.). Retrieved January 10, 2020, from <https://qemu.weilnetz.de/doc/qemu-doc.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"qureshi_formal_nodate"; cite-year:"n.d."; cite-authors:"Qureshi"; cite-authors-long:"Qureshi"; cite-label:"Qureshi, n.d."; caption:"Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems&nl;Qureshi, n.d."; data-line:"FormalReview.bib:166"; searchterm:"Formal%20Modelling%20and%20Analysis%20of%20MissionCritical%20Software%20in%20Military%20Avionics%20Systems%20Qureshi%2C%20n.d."; spellcheck:"false"}
Qureshi, Z.&nbsp;H.&nbsp;(n.d.). Formal Modelling and Analysis of Mission-Critical Software in Military Avionics Systems. _11th Australian Workshop on Safety Related Programmable Systems (SCS’06)_, 11. Retrieved from <http://crpit.com/confpapers/CRPITV69Qureshi.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"ramsey_applicative_2006"; cite-year:"2006"; cite-authors:"Ramsey and Dias"; cite-authors-long:"Ramsey and Dias"; cite-label:"Ramsey \& Dias, 2006"; caption:"An Applicative Control-Flow Graph Based on Huet's Zipper&nl;Ramsey and Dias, 2006"; data-line:"FormalReview.bib:2133"; searchterm:"An%20Applicative%20ControlFlow%20Graph%20Based%20on%20Huet's%20Zipper%20Ramsey%20and%20Dias%2C%202006"; spellcheck:"false"}
Ramsey, N., & Dias, J.&nbsp;(2006). An Applicative Control-Flow Graph Based on Huet’s Zipper. _Electronic Notes in Theoretical Computer Science_, _148_(2), 105–126. https://doi.org/[10.1016/j.entcs.2005.11.042](https://dx.doi.org/10.1016/j.entcs.2005.11.042){.bib-doi}
~ end bibitem

~ begin bibitem {id:"rand_formally_nodate"; cite-year:"n.d."; cite-authors:"Rand"; cite-authors-long:"Rand"; cite-label:"Rand, n.d."; caption:"Formally Verified Quantum Programming&nl;Rand, n.d."; data-line:"FormalReview.bib:3967"; searchterm:"Formally%20Verified%20Quantum%20Programming%20Rand%2C%20n.d."; spellcheck:"false"}
Rand, R.&nbsp;(n.d.). Formally Verified Quantum Programming, 222.
~ end bibitem

~ begin bibitem {id:"noauthor_rems:_nodate"; cite-authors:"2019al"; cite-authors-long:"2019al"; cite-label:"\&ldquo;REMS: Rigorous Engineering of Mainsteam Systems, Papers,\&rdquo; n.d."; caption:"REMS: Rigorous Engineering of Mainsteam Systems, Papers&nl;2019al, "; data-line:"FormalReview.bib:5036"; searchterm:"REMS%3A%20Rigorous%20Engineering%20of%20Mainsteam%20Systems%2C%20Papers%202019al%2C%20"; spellcheck:"false"}
REMS: Rigorous Engineering of Mainsteam Systems, Papers. (n.d.). Retrieved December 27, 2019, from <https://www.cl.cam.ac.uk/~pes20/rems/rems-all.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"riehl_category_2017"; cite-year:"2017"; cite-authors:"Riehl"; cite-authors-long:"Riehl"; cite-label:"Riehl, 2017"; caption:"Category Theory in Context&nl;Riehl, 2017"; data-line:"FormalReview.bib:5761"; searchterm:"Category%20Theory%20in%20Context%20Riehl%2C%202017"; spellcheck:"false"}
Riehl, E.&nbsp;(2017). _Category Theory in Context_. Dover Publications.
~ end bibitem

~ begin bibitem {id:"ringer_qed_2019"; cite-year:"2019"; cite-authors:"Talia Ringer et al."; cite-authors-long:"Talia Ringer, Palmskog, Sergey, Gligoric, and Tatlock"; cite-label:"Talia Ringer, Palmskog, Sergey, Gligoric, \& Tatlock, 2019"; caption:"QED at Large: A Survey of Engineering of Formally Verified Software&nl;Talia Ringer, Palmskog, Sergey, Gligoric, and Tatlock, 2019"; data-line:"FormalReview.bib:4441"; searchterm:"QED%20at%20Large%3A%20A%20Survey%20of%20Engineering%20of%20Formally%20Verified%20Software%20Talia%20Ringer%2C%20Palmskog%2C%20Sergey%2C%20Gligoric%2C%20and%20Tatlock%2C%202019"; spellcheck:"false"}
Ringer, T., Palmskog, K., Sergey, I., Gligoric, M., & Tatlock, Z.&nbsp;(2019). QED at Large: A Survey of Engineering of Formally Verified Software. _PGL_, _5_(2), 102–281. https://doi.org/[10.1561/2500000045](https://dx.doi.org/10.1561/2500000045){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ringer_qed_2019-1"; cite-year:"2019"; cite-authors:"T.&nbsp;Ringer et al."; cite-authors-long:"T.&nbsp;Ringer, Palmskog, Sergey, Gligoric, and Tatlock"; cite-label:"T. Ringer, Palmskog, Sergey, Gligoric, \& Tatlock, 2019"; caption:"QED at Large: A Survey of Engineering of Formally Verified Software&nl;T. Ringer, Palmskog, Sergey, Gligoric, and Tatlock, 2019"; data-line:"FormalReview.bib:4511"; searchterm:"QED%20at%20Large%3A%20A%20Survey%20of%20Engineering%20of%20Formally%20Verified%20Software%20T.%20Ringer%2C%20Palmskog%2C%20Sergey%2C%20Gligoric%2C%20and%20Tatlock%2C%202019"; spellcheck:"false"}
Ringer, T., Palmskog, K., Sergey, I., Gligoric, M., & Tatlock, Z.&nbsp;(2019). _QED at Large: A Survey of Engineering of Formally Verified Software_. now. Retrieved from <http://ieeexplore.ieee.org/document/8824174>{.bib-url}
~ end bibitem

~ begin bibitem {id:"da_rocha_pinto_tada:_2014"; cite-year:"2014"; cite-authors:"Rocha Pinto et al."; cite-authors-long:"Rocha Pinto, Dinsdale-Young, and Gardner"; cite-label:"Rocha Pinto, Dinsdale-Young, \& Gardner, 2014"; caption:"TaDA: A Logic for Time and Data Abstraction&nl;Rocha Pinto, Dinsdale-Young, and Gardner, 2014"; data-line:"FormalReview.bib:3922"; searchterm:"TaDA%3A%20A%20Logic%20for%20Time%20and%20Data%20Abstraction%20Rocha%20Pinto%2C%20DinsdaleYoung%2C%20and%20Gardner%2C%202014"; spellcheck:"false"}
Rocha Pinto, P.&nbsp;da, Dinsdale-Young, T., & Gardner, P.&nbsp;(2014). TaDA: A Logic for Time and Data Abstraction. In R.&nbsp;Jones (Ed.), _ECOOP 2014 – Object-Oriented Programming_ (pp. 207–231). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"ross_exterminators_2005"; cite-year:"2005a"; cite-authors:"Ross"; cite-authors-long:"Ross"; cite-label:"Ross, 2005a"; caption:"The exterminators \[software bugs&nl;Ross, 2005a"; data-line:"FormalReview.bib:4541"; searchterm:"The%20exterminators%20%5C%5Bsoftware%20bugs%20Ross%2C%202005a"; spellcheck:"false"}
Ross, P.&nbsp;E.&nbsp;(2005a). The exterminators \[software bugs. _IEEE Spectr._, _42_(9), 36–41. https://doi.org/[10.1109/MSPEC.2005.1502527](https://dx.doi.org/10.1109/MSPEC.2005.1502527){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ross_exterminators_2005-1"; cite-year:"2005b"; cite-authors:"Ross"; cite-authors-long:"Ross"; cite-label:"Ross, 2005b"; caption:"The exterminators \[software bugs\]&nl;Ross, 2005b"; data-line:"FormalReview.bib:4557"; searchterm:"The%20exterminators%20%5C%5Bsoftware%20bugs%5C%5D%20Ross%2C%202005b"; spellcheck:"false"}
Ross, P.&nbsp;E.&nbsp;(2005b). The exterminators \[software bugs\]. _IEEE Spectrum_, _42_(9), 36–41. https://doi.org/[10.1109/MSPEC.2005.1502527](https://dx.doi.org/10.1109/MSPEC.2005.1502527){.bib-doi}
~ end bibitem

~ begin bibitem {id:"saillard_typechecking_2015"; cite-year:"2015"; cite-authors:"Saillard"; cite-authors-long:"Saillard"; cite-label:"Saillard, 2015"; caption:"Typechecking in the lambda-Pi-Calculus Modulo : Theory and Practice&nl;Saillard, 2015"; data-line:"FormalReview.bib:5605"; searchterm:"Typechecking%20in%20the%20lambdaPiCalculus%20Modulo%20%3A%20Theory%20and%20Practice%20Saillard%2C%202015"; spellcheck:"false"}
Saillard, R.&nbsp;(2015). _Typechecking in the lambda-Pi-Calculus Modulo : Theory and Practice_ (phdthesis). Ecole Nationale Supérieure des Mines de Paris. Retrieved from <https://pastel.archives-ouvertes.fr/tel-01299180>{.bib-url}
~ end bibitem

~ begin bibitem {id:"salvia_mixed_2019"; cite-year:"2019a"; cite-authors:"Salvia et al."; cite-authors-long:"Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić"; cite-label:"Salvia et al., 2019a"; caption:"A Mixed Real and Floating-Point Solver&nl;Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić, 2019a"; data-line:"FormalReview.bib:4115"; searchterm:"A%20Mixed%20Real%20and%20FloatingPoint%20Solver%20Salvia%2C%20Titolo%2C%20Feli%C3%BA%2C%20Moscato%2C%20Mu%C3%B1oz%2C%20and%20Rakamari%C4%87%2C%202019a"; spellcheck:"false"}
Salvia, R., Titolo, L., Feliú, M.&nbsp;A., Moscato, M.&nbsp;M., Muñoz, C.&nbsp;A., & Rakamarić, Z.&nbsp;(2019a). A Mixed Real and Floating-Point Solver. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (pp. 363–370). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"salvia_mixed_2019-1"; cite-year:"2019b"; cite-authors:"Salvia et al."; cite-authors-long:"Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić"; cite-label:"Salvia et al., 2019b"; caption:"A Mixed Real and Floating-Point Solver&nl;Salvia, Titolo, Feliú, Moscato, Muñoz, and Rakamarić, 2019b"; data-line:"FormalReview.bib:4157"; searchterm:"A%20Mixed%20Real%20and%20FloatingPoint%20Solver%20Salvia%2C%20Titolo%2C%20Feli%C3%BA%2C%20Moscato%2C%20Mu%C3%B1oz%2C%20and%20Rakamari%C4%87%2C%202019b"; spellcheck:"false"}
Salvia, R., Titolo, L., Feliú, M.&nbsp;A., Moscato, M.&nbsp;M., Muñoz, C.&nbsp;A., & Rakamarić, Z.&nbsp;(2019b). A Mixed Real and Floating-Point Solver. In J.&nbsp;M.&nbsp;Badger & K.&nbsp;Y.&nbsp;Rozier (Eds.), _NASA Formal Methods_ (pp. 363–370). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"scott_continuous_nodate"; cite-year:"2020"; cite-authors:"Scott"; cite-authors-long:"Scott"; cite-label:"Scott, n.d."; caption:"Continuous lattices.ResearchGate&nl;Scott, 2020"; data-line:"FormalReview.bib:5514"; searchterm:"Continuous%20lattices.ResearchGate%20Scott%2C%202020"; spellcheck:"false"}
Scott, D.&nbsp;(n.d.). Continuous lattices.ResearchGate. Retrieved January 12, 2020, from <https://www.researchgate.net/publication/251394986_Continuous_lattices>{.bib-url}
~ end bibitem

~ begin bibitem {id:"selsam_guiding_2019"; cite-year:"2019"; cite-authors:"Selsam and Bjørner"; cite-authors-long:"Selsam and Bjørner"; cite-label:"Selsam \& Bjørner, 2019"; caption:"Guiding High-Performance SAT Solvers with Unsat-Core Predictions&nl;Selsam and Bjørner, 2019"; data-line:"FormalReview.bib:4306"; searchterm:"Guiding%20HighPerformance%20SAT%20Solvers%20with%20UnsatCore%20Predictions%20Selsam%20and%20Bj%C3%B8rner%2C%202019"; spellcheck:"false"}
Selsam, D., & Bjørner, N.&nbsp;(2019). Guiding High-Performance SAT Solvers with Unsat-Core Predictions. In M.&nbsp;Janota & I.&nbsp;Lynce (Eds.), _Theory and Applications of Satisfiability Testing – SAT 2019_ (pp. 336–353). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"sewell_ott_2019"; cite-year:"2019"; cite-authors:"Sewell"; cite-authors-long:"Sewell"; cite-label:"Sewell, 2019"; caption:"The Ott tool for writing definitions of programming languages and calculi: ott-lang/ott&nl;Sewell, 2019"; data-line:"FormalReview.bib:3372"; searchterm:"The%20Ott%20tool%20for%20writing%20definitions%20of%20programming%20languages%20and%20calculi%3A%20ottlang%2Fott%20Sewell%2C%202019"; spellcheck:"false"}
Sewell, P.&nbsp;(2019). _The Ott tool for writing definitions of programming languages and calculi: ott-lang/ott_. ott-lang. Retrieved from <https://github.com/ott-lang/ott>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sewell_rems_nodate"; cite-year:"2019"; cite-authors:"Sewell"; cite-authors-long:"Sewell"; cite-label:"Sewell, n.d."; caption:"REMS - Rigorous Engineering of Mainstream Systems&nl;Sewell, 2019"; data-line:"FormalReview.bib:3226"; searchterm:"REMS%20%20Rigorous%20Engineering%20of%20Mainstream%20Systems%20Sewell%2C%202019"; spellcheck:"false"}
Sewell, P.&nbsp;(n.d.). REMS - Rigorous Engineering of Mainstream Systems. Retrieved February 28, 2019, from <https://www.cl.cam.ac.uk/~pes20/rems/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shafiq_integrating_2014"; cite-year:"2014"; cite-authors:"Shafiq and Minhas"; cite-authors-long:"Shafiq and Minhas"; cite-label:"Shafiq \& Minhas, 2014"; caption:"Integrating Formal Methods in XP—A Conceptual Solution&nl;Shafiq and Minhas, 2014"; data-line:"FormalReview.bib:5170"; searchterm:"Integrating%20Formal%20Methods%20in%20XP%E2%80%94A%20Conceptual%20Solution%20Shafiq%20and%20Minhas%2C%202014"; spellcheck:"false"}
Shafiq, S., & Minhas, N.&nbsp;M.&nbsp;(2014). Integrating Formal Methods in XP—A Conceptual Solution. _Journal of Software Engineering and Applications_, _07_(4), 299–310. https://doi.org/[10.4236/jsea.2014.74029](https://dx.doi.org/10.4236/jsea.2014.74029){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sherman_making_2017"; cite-year:"2017"; cite-authors:"Sherman"; cite-authors-long:"Sherman"; cite-label:"Sherman, 2017"; caption:"Making Discrete Decisions Based on Continuous Values&nl;Sherman, 2017"; data-line:"FormalReview.bib:461"; searchterm:"Making%20Discrete%20Decisions%20Based%20on%20Continuous%20Values%20Sherman%2C%202017"; spellcheck:"false"}
Sherman, B.&nbsp;(2017). _Making Discrete Decisions Based on Continuous Values_ (Master of Science). MIT, Cambridge, MA.&nbsp;Retrieved from <http://adam.chlipala.net/theses/sherman_sm.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shin_wormspace:_2019"; cite-year:"2019"; cite-authors:"Shin et al."; cite-authors-long:"Shin, Kim, Honoré, Vanzetto, Radhakrishnan, Balakrishnan, and Shao"; cite-label:"Shin et al., 2019"; caption:"WormSpace: A Modular Foundation for Simple, Verifiable Distributed Systems&nl;Shin, Kim, Honoré, Vanzetto, Radhakrishnan, Balakrishnan, and Shao, 2019"; data-line:"FormalReview.bib:5086"; searchterm:"WormSpace%3A%20A%20Modular%20Foundation%20for%20Simple%2C%20Verifiable%20Distributed%20Systems%20Shin%2C%20Kim%2C%20Honor%C3%A9%2C%20Vanzetto%2C%20Radhakrishnan%2C%20Balakrishnan%2C%20and%20Shao%2C%202019"; spellcheck:"false"}
Shin, J.-Y., Kim, J., Honoré, W., Vanzetto, H., Radhakrishnan, S., Balakrishnan, M., & Shao, Z.&nbsp;(2019). WormSpace: A Modular Foundation for Simple, Verifiable Distributed Systems. In _Proceedings of the ACM Symposium on Cloud Computing&nbsp;- SoCC ’19_ (pp. 299–311). Santa Cruz, CA, USA: ACM Press. https://doi.org/[10.1145/3357223.3362739](https://dx.doi.org/10.1145/3357223.3362739){.bib-doi}
~ end bibitem

~ begin bibitem {id:"shrobe_trust-management_2009"; cite-year:"2009"; cite-authors:"Shrobe et al."; cite-authors-long:"Shrobe, DeHon, and Knight"; cite-label:"Shrobe, DeHon, \& Knight, 2009"; caption:"Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA)&nl;Shrobe, DeHon, and Knight, 2009"; data-line:"FormalReview.bib:3004"; searchterm:"TrustManagement%2C%20IntrusionTolerance%2C%20Accountability%2C%20and%20Reconstitution%20Architecture%20TIARA%20Shrobe%2C%20DeHon%2C%20and%20Knight%2C%202009"; spellcheck:"false"}
Shrobe, H., DeHon, A., & Knight, T.&nbsp;(2009). Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture (TIARA), 133. Retrieved from <https://apps.dtic.mil/dtic/tr/fulltext/u2/a511350.pdf>{.bib-url}
~ end bibitem

~ begin bibitem {id:"shulman_hott_2013"; cite-year:"2013"; cite-authors:"Shulman"; cite-authors-long:"Shulman"; cite-label:"Shulman, 2013"; caption:"The HoTT Book.Homotopy Type Theory&nl;Shulman, 2013"; data-line:"FormalReview.bib:2352"; searchterm:"The%20HoTT%20Book.Homotopy%20Type%20Theory%20Shulman%2C%202013"; spellcheck:"false"}
Shulman, M.&nbsp;(2013, March 12). The HoTT Book.Homotopy Type Theory. Retrieved February 1, 2019, from <https://homotopytypetheory.org/book/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sjosten_information_2018"; cite-year:"2018"; cite-authors:"Sjösten et al."; cite-authors-long:"Sjösten, Hedin, and Sabelfeld"; cite-label:"Sjösten, Hedin, \& Sabelfeld, 2018"; caption:"Information Flow Tracking for Side-Effectful Libraries&nl;Sjösten, Hedin, and Sabelfeld, 2018"; data-line:"FormalReview.bib:3661"; searchterm:"Information%20Flow%20Tracking%20for%20SideEffectful%20Libraries%20Sj%C3%B6sten%2C%20Hedin%2C%20and%20Sabelfeld%2C%202018"; spellcheck:"false"}
Sjösten, A., Hedin, D., & Sabelfeld, A.&nbsp;(2018). Information Flow Tracking for Side-Effectful Libraries. In C.&nbsp;Baier & L.&nbsp;Caires (Eds.), _Formal Techniques for Distributed Objects, Components, and Systems_ (pp. 141–160). Springer International Publishing.
~ end bibitem

~ begin bibitem {id:"soare_turing_2016"; cite-year:"2016"; cite-authors:"Soare"; cite-authors-long:"Soare"; cite-label:"Soare, 2016"; caption:"Turing Computability&nl;Soare, 2016"; data-line:"FormalReview.bib:4832"; searchterm:"Turing%20Computability%20Soare%2C%202016"; spellcheck:"false"}
Soare, R.&nbsp;I.&nbsp;(2016). _Turing Computability_. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-31933-4](https://dx.doi.org/10.1007/978-3-642-31933-4){.bib-doi}
~ end bibitem

~ begin bibitem {id:"sozeau_equations:_2010"; cite-year:"2010"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2010"; caption:"Equations: A Dependent Pattern-Matching Compiler&nl;Sozeau, 2010"; data-line:"FormalReview.bib:1401"; searchterm:"Equations%3A%20A%20Dependent%20PatternMatching%20Compiler%20Sozeau%2C%202010"; spellcheck:"false"}
Sozeau, M.&nbsp;(2010). Equations: A Dependent Pattern-Matching Compiler. In M.&nbsp;Kaufmann & L.&nbsp;C.&nbsp;Paulson (Eds.), _Interactive Theorem Proving_ (pp. 419–434). Springer Berlin Heidelberg.
~ end bibitem

~ begin bibitem {id:"sozeau_metacoq_2019"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, 2019"; caption:"MetaCoq - Metaprogramming in Coq (Was template-coq)&nl;Sozeau, 2019"; data-line:"FormalReview.bib:1701"; searchterm:"MetaCoq%20%20Metaprogramming%20in%20Coq%20Was%20templatecoq%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(2019). _MetaCoq - Metaprogramming in Coq (Was template-coq)_. MetaCoq. Retrieved from <https://github.com/MetaCoq/metacoq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_subset_nodate"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-a"; caption:"Subset coercions in Coq&nl;Sozeau, n.d."; data-line:"FormalReview.bib:3147"; searchterm:"Subset%20coercions%20in%20Coq%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-a). Subset coercions in Coq. _Springer-Verlag LNCS_, 237–252.
~ end bibitem

~ begin bibitem {id:"sozeau_metacoq_nodate"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-b"; caption:"The MetaCoq Project&nl;Sozeau, n.d."; data-line:"FormalReview.bib:3478"; searchterm:"The%20MetaCoq%20Project%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-b). The MetaCoq Project, 39.
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate"; cite-year:"2019"; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-c"; caption:"Typed Template Coq - POPL 2018&nl;Sozeau, 2019"; data-line:"FormalReview.bib:1329"; searchterm:"Typed%20Template%20Coq%20%20POPL%202018%20Sozeau%2C%202019"; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-c). Typed Template Coq - POPL 2018. Retrieved February 1, 2019, from <https://popl18.sigplan.org/event/coqpl-2018-typed-template-coq>{.bib-url}
~ end bibitem

~ begin bibitem {id:"sozeau_typed_nodate-1"; cite-year:"n.d."; cite-authors:"Sozeau"; cite-authors-long:"Sozeau"; cite-label:"Sozeau, n.d.-d"; caption:"Typed Template Coq - Slides&nl;Sozeau, n.d."; data-line:"FormalReview.bib:1346"; searchterm:"Typed%20Template%20Coq%20%20Slides%20Sozeau%2C%20n.d."; spellcheck:"false"}
Sozeau, M.&nbsp;(n.d.-d). Typed Template Coq - Slides, 11.
~ end bibitem

~ begin bibitem {id:"sozeau_first-class_2008"; cite-year:"2008a"; cite-authors:"Sozeau and Oury"; cite-authors-long:"Sozeau and Oury"; cite-label:"Sozeau \& Oury, 2008a"; caption:"First-class type classes&nl;Sozeau and Oury, 2008a"; data-line:"FormalReview.bib:3121"; searchterm:"Firstclass%20type%20classes%20Sozeau%20and%20Oury%2C%202008a"; spellcheck:"false"}
Sozeau, M., & Oury, N.&nbsp;(2008a). _First-class type classes_.
~ end bibitem

~ begin bibitem {id:"mohamed_first-class_2008"; cite-year:"2008b"; cite-authors:"Sozeau and Oury"; cite-authors-long:"Sozeau and Oury"; cite-label:"Sozeau \& Oury, 2008b"; caption:"First-Class Type Classes - TPHOLs Talk&nl;Sozeau and Oury, 2008b"; data-line:"FormalReview.bib:3129"; searchterm:"FirstClass%20Type%20Classes%20%20TPHOLs%20Talk%20Sozeau%20and%20Oury%2C%202008b"; spellcheck:"false"}
Sozeau, M., & Oury, N.&nbsp;(2008b). First-Class Type Classes - TPHOLs Talk. In O.&nbsp;A.&nbsp;Mohamed, C.&nbsp;Muñoz, & S.&nbsp;Tahar (Eds.), _Theorem Proving in Higher Order Logics_ (Vol. 5170, pp. 278–293). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-540-71067-7_23](https://dx.doi.org/10.1007/978-3-540-71067-7_23){.bib-doi}
~ end bibitem

~ begin bibitem {id:"spector-zabusky_total_2018"; cite-year:"2018"; cite-authors:"Spector-Zabusky et al."; cite-authors-long:"Spector-Zabusky, Breitner, Rizkallah, and Weirich"; cite-label:"Spector-Zabusky, Breitner, Rizkallah, \& Weirich, 2018"; caption:"Total Haskell is Reasonable Coq&nl;Spector-Zabusky, Breitner, Rizkallah, and Weirich, 2018"; data-line:"FormalReview.bib:2184"; searchterm:"Total%20Haskell%20is%20Reasonable%20Coq%20SpectorZabusky%2C%20Breitner%2C%20Rizkallah%2C%20and%20Weirich%2C%202018"; spellcheck:"false"}
Spector-Zabusky, A., Breitner, J., Rizkallah, C., & Weirich, S.&nbsp;(2018). Total Haskell is Reasonable Coq. In _Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 14–27). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3167092](https://dx.doi.org/10.1145/3167092){.bib-doi}
~ end bibitem

~ begin bibitem {id:"stewart_verified_nodate"; cite-year:"2019"; cite-authors:"Stewart"; cite-authors-long:"Stewart"; cite-label:"Stewart, n.d."; caption:"Verified Separate Compilation for C &bar; Computer Science Department at Princeton University&nl;Stewart, 2019"; data-line:"FormalReview.bib:3395"; searchterm:"Verified%20Separate%20Compilation%20for%20C%20%26bar%3B%20Computer%20Science%20Department%20at%20Princeton%20University%20Stewart%2C%202019"; spellcheck:"false"}
Stewart, G.&nbsp;(n.d.). Verified Separate Compilation for C &bar; Computer Science Department at Princeton University. Retrieved March 3, 2019, from <https://www.cs.princeton.edu/research/techreps/TR-980-15>{.bib-url}
~ end bibitem

~ begin bibitem {id:"stewart_verified_2012"; cite-year:"2012"; cite-authors:"Stewart et al."; cite-authors-long:"Stewart, Beringer, and Appel"; cite-label:"Stewart, Beringer, \& Appel, 2012"; caption:"Verified Heap Theorem Prover by Paramodulation&nl;Stewart, Beringer, and Appel, 2012"; data-line:"FormalReview.bib:349"; searchterm:"Verified%20Heap%20Theorem%20Prover%20by%20Paramodulation%20Stewart%2C%20Beringer%2C%20and%20Appel%2C%202012"; spellcheck:"false"}
Stewart, G., Beringer, L., & Appel, A.&nbsp;W.&nbsp;(2012). Verified Heap Theorem Prover by Paramodulation. In _Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming_ (pp. 3–14). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2364527.2364531](https://dx.doi.org/10.1145/2364527.2364531){.bib-doi}
~ end bibitem

~ begin bibitem {id:"stoddart_forth_2012"; cite-year:"2012"; cite-authors:"Stoddart et al."; cite-authors-long:"Stoddart, Ritchie, and Dunne"; cite-label:"Stoddart, Ritchie, \& Dunne, 2012"; caption:"Forth Semantics for Compiler Verification&nl;Stoddart, Ritchie, and Dunne, 2012"; data-line:"FormalReview.bib:4030"; searchterm:"Forth%20Semantics%20for%20Compiler%20Verification%20Stoddart%2C%20Ritchie%2C%20and%20Dunne%2C%202012"; spellcheck:"false"}
Stoddart, B., Ritchie, C., & Dunne, S.&nbsp;(2012). Forth Semantics for Compiler Verification.
~ end bibitem

~ begin bibitem {id:"strange_loop_proof_nodate"; cite-year:"2019"; cite-authors:"Strange Loop"; cite-authors-long:"Strange Loop"; cite-label:"Strange Loop, n.d."; caption:"\"Proof Theory Impressionism: Blurring the Curry-Howard Line\" by Dan Pittman&nl;Strange Loop, 2019"; data-line:"FormalReview.bib:3430"; searchterm:"%22Proof%20Theory%20Impressionism%3A%20Blurring%20the%20CurryHoward%20Line%22%20by%20Dan%20Pittman%20Strange%20Loop%2C%202019"; spellcheck:"false"}
Strange Loop. (n.d.). &ldquo;Proof Theory Impressionism: Blurring the Curry-Howard Line&rdquo; by Dan Pittman. Retrieved from <https://www.youtube.com/watch?v=jrVPB-Ad5Gc&t=31s>{.bib-url}
~ end bibitem

~ begin bibitem {id:"hutchison_impredicative_2014"; cite-year:"2014"; cite-authors:"Svendsen and Birkedal"; cite-authors-long:"Svendsen and Birkedal"; cite-label:"Svendsen \& Birkedal, 2014"; caption:"Impredicative Concurrent Abstract Predicates&nl;Svendsen and Birkedal, 2014"; data-line:"FormalReview.bib:5808"; searchterm:"Impredicative%20Concurrent%20Abstract%20Predicates%20Svendsen%20and%20Birkedal%2C%202014"; spellcheck:"false"}
Svendsen, K., & Birkedal, L.&nbsp;(2014). Impredicative Concurrent Abstract Predicates. In Z.&nbsp;Shao (Ed.), _Programming Languages and Systems_ (Vol. 8410, pp. 149–168). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-54833-8_9](https://dx.doi.org/10.1007/978-3-642-54833-8_9){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_modular_2013"; cite-year:"2013"; cite-authors:"Svendsen et al."; cite-authors-long:"Svendsen, Birkedal, and Parkinson"; cite-label:"Svendsen, Birkedal, \& Parkinson, 2013"; caption:"Modular Reasoning about Separation of Concurrent Data Structures&nl;Svendsen, Birkedal, and Parkinson, 2013"; data-line:"FormalReview.bib:5829"; searchterm:"Modular%20Reasoning%20about%20Separation%20of%20Concurrent%20Data%20Structures%20Svendsen%2C%20Birkedal%2C%20and%20Parkinson%2C%202013"; spellcheck:"false"}
Svendsen, K., Birkedal, L., & Parkinson, M.&nbsp;(2013). Modular Reasoning about Separation of Concurrent Data Structures. In M.&nbsp;Felleisen & P.&nbsp;Gardner (Eds.), _Programming Languages and Systems_ (Vol. 7792, pp. 169–188). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-37036-6_11](https://dx.doi.org/10.1007/978-3-642-37036-6_11){.bib-doi}
~ end bibitem

~ begin bibitem {id:"swamy_project_nodate"; cite-year:"2019"; cite-authors:"Swamy"; cite-authors-long:"Swamy"; cite-label:"Swamy, n.d."; caption:"Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research&nl;Swamy, 2019"; data-line:"FormalReview.bib:2223"; searchterm:"Project%20Everest%20%20Verified%20Secure%20Implementations%20of%20the%20HTTPS%20Ecosystem.Microsoft%20Research%20Swamy%2C%202019"; spellcheck:"false"}
Swamy, N.&nbsp;(n.d.). Project Everest - Verified Secure Implementations of the HTTPS Ecosystem.Microsoft Research. Retrieved February 1, 2019, from <https://www.microsoft.com/en-us/research/project/project-everest-verified-secure-implementations-https-ecosystem/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_verifying_2013"; cite-year:"2013"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Chen, and Livshits"; cite-label:"Swamy, Chen, \& Livshits, 2013"; caption:"Verifying Higher-order Programs with the Dijkstra Monad&nl;Swamy, Chen, and Livshits, 2013"; data-line:"FormalReview.bib:1933"; searchterm:"Verifying%20Higherorder%20Programs%20with%20the%20Dijkstra%20Monad%20Swamy%2C%20Chen%2C%20and%20Livshits%2C%202013"; spellcheck:"false"}
Swamy, N., Chen, J., & Livshits, B.&nbsp;(2013). Verifying Higher-order Programs with the Dijkstra Monad. Retrieved from <https://www.microsoft.com/en-us/research/publication/verifying-higher-order-programs-with-the-dijkstra-monad/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"swamy_dependent_2016"; cite-year:"2016"; cite-authors:"Swamy et al."; cite-authors-long:"Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al."; cite-label:"Swamy et al., 2016"; caption:"Dependent Types and Multi-monadic Effects in F\*&nl;Swamy, Hriţcu, Keller, Rastogi, Delignat-Lavaud, Forest, et al., 2016"; data-line:"FormalReview.bib:1944"; searchterm:"Dependent%20Types%20and%20Multimonadic%20Effects%20in%20F%5C*%20Swamy%2C%20Hri%C5%A3cu%2C%20Keller%2C%20Rastogi%2C%20DelignatLavaud%2C%20Forest%2C%20et%20al.%2C%202016"; spellcheck:"false"}
Swamy, N., Hriţcu, C., Keller, C., Rastogi, A., Delignat-Lavaud, A., Forest, S., … Zanella-Béguelin, S.&nbsp;(2016). Dependent Types and Multi-monadic Effects in F\*. In _Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 256–270). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/2837614.2837655](https://dx.doi.org/10.1145/2837614.2837655){.bib-doi}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019"; cite-year:"2019a"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019a"; caption:"Fsharp design: RFCs and docs related to the F&hash; language design process,&nl;Syme, 2019a"; data-line:"FormalReview.bib:2007"; searchterm:"Fsharp%20design%3A%20RFCs%20and%20docs%20related%20to%20the%20F%26hash%3B%20language%20design%20process%2C%20Syme%2C%202019a"; spellcheck:"false"}
Syme, D.&nbsp;(2019a). _Fsharp design: RFCs and docs related to the F&hash; language design process,_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fslang-design>{.bib-url}
~ end bibitem

~ begin bibitem {id:"syme_fsharp_2019-1"; cite-year:"2019b"; cite-authors:"Syme"; cite-authors-long:"Syme"; cite-label:"Syme, 2019b"; caption:"The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp&nl;Syme, 2019b"; data-line:"FormalReview.bib:2018"; searchterm:"The%20Fsharp%20Compiler%2C%20Core%20Library%20%26amp%3B%20Tools%20F%26hash%3B%20Software%20Foundation%20Repository%3A%20fsharp%2Ffsharp%20Syme%2C%202019b"; spellcheck:"false"}
Syme, D.&nbsp;(2019b). _The Fsharp Compiler, Core Library &amp; Tools (F&hash; Software Foundation Repository): fsharp/fsharp_. F&hash; Software Foundation Repositories. Retrieved from <https://github.com/fsharp/fsharp>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_texmaker_nodate"; cite-authors:"2020am"; cite-authors-long:"2020am"; cite-label:"\&ldquo;Texmaker \(free cross-platform latex editor\),\&rdquo; n.d."; caption:"Texmaker (free cross-platform latex editor)&nl;2020am, "; data-line:"FormalReview.bib:5291"; searchterm:"Texmaker%20free%20crossplatform%20latex%20editor%202020am%2C%20"; spellcheck:"false"}
Texmaker (free cross-platform latex editor). (n.d.). Retrieved January 10, 2020, from <https://www.xm1math.net/texmaker/doc.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_ats_nodate"; cite-authors:"2020an"; cite-authors-long:"2020an"; cite-label:"\&ldquo;The ATS Programming Language,\&rdquo; n.d."; caption:"The ATS Programming Language&nl;2020an, "; data-line:"FormalReview.bib:5426"; searchterm:"The%20ATS%20Programming%20Language%202020an%2C%20"; spellcheck:"false"}
The ATS Programming Language. (n.d.). Retrieved January 10, 2020, from <http://www.ats-lang.org/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_mezzo_nodate"; cite-authors:"2019ao"; cite-authors-long:"2019ao"; cite-label:"\&ldquo;The Mezzo programming language,\&rdquo; n.d."; caption:"The Mezzo programming language&nl;2019ao, "; data-line:"FormalReview.bib:4283"; searchterm:"The%20Mezzo%20programming%20language%202019ao%2C%20"; spellcheck:"false"}
The Mezzo programming language. (n.d.). Retrieved August 5, 2019, from <http://protz.github.io/mezzo/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_theorem_nodate"; cite-authors:"2020ap"; cite-authors-long:"2020ap"; cite-label:"\&ldquo;Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation,\&rdquo; n.d."; caption:"Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation&nl;2020ap, "; data-line:"FormalReview.bib:5163"; searchterm:"Theorem%20Proving%20in%20Lean%20%E2%80%94%20Theorem%20Proving%20in%20Lean%203.4.0%20documentation%202020ap%2C%20"; spellcheck:"false"}
Theorem Proving in Lean — Theorem Proving in Lean 3.4.0 documentation. (n.d.). Retrieved January 10, 2020, from <https://leanprover.github.io/theorem_proving_in_lean/index.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_proofpower_nodate"; cite-authors:"2020aq"; cite-authors-long:"2020aq"; cite-label:"\&ldquo;The ProofPower Web Pages,\&rdquo; n.d."; caption:"The ProofPower Web Pages&nl;2020aq, "; data-line:"FormalReview.bib:5407"; searchterm:"The%20ProofPower%20Web%20Pages%202020aq%2C%20"; spellcheck:"false"}
The ProofPower Web Pages. (n.d.). Retrieved January 10, 2020, from <http://www.lemma-one.com/ProofPower/index/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"timany_consistency_2017"; cite-year:"2017"; cite-authors:"Timany and Sozeau"; cite-authors-long:"Timany and Sozeau"; cite-label:"Timany \& Sozeau, 2017"; caption:"Consistency of the Predicative Calculus of Cumulative Inductive Constructions (pCuIC)&nl;Timany and Sozeau, 2017"; data-line:"FormalReview.bib:4260"; searchterm:"Consistency%20of%20the%20Predicative%20Calculus%20of%20Cumulative%20Inductive%20Constructions%20pCuIC%20Timany%20and%20Sozeau%2C%202017"; spellcheck:"false"}
Timany, A., & Sozeau, M.&nbsp;(2017). Consistency of the Predicative Calculus of Cumulative Inductive Constructions (pCuIC). _arXiv:1710.03912 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1710.03912](http://arxiv.org/abs/1710.03912){.bib-url}
~ end bibitem

~ begin bibitem {id:"timany_cumulative_2018"; cite-year:"2018"; cite-authors:"Timany and Sozeau"; cite-authors-long:"Timany and Sozeau"; cite-label:"Timany \& Sozeau, 2018"; caption:"Cumulative Inductive Types In Coq&nl;Timany and Sozeau, 2018"; data-line:"FormalReview.bib:3504"; searchterm:"Cumulative%20Inductive%20Types%20In%20Coq%20Timany%20and%20Sozeau%2C%202018"; spellcheck:"false"}
Timany, A., & Sozeau, M.&nbsp;(2018). Cumulative Inductive Types In Coq. In _FSCD_. https://doi.org/[10.4230/LIPIcs.FSCD.2018.29](https://dx.doi.org/10.4230/LIPIcs.FSCD.2018.29){.bib-doi}
~ end bibitem

~ begin bibitem {id:"hutchison_formal_2009"; cite-year:"2009"; cite-authors:"Tschantz and Wing"; cite-authors-long:"Tschantz and Wing"; cite-label:"Tschantz \& Wing, 2009"; caption:"Formal Methods for Privacy&nl;Tschantz and Wing, 2009"; data-line:"FormalReview.bib:4483"; searchterm:"Formal%20Methods%20for%20Privacy%20Tschantz%20and%20Wing%2C%202009"; spellcheck:"false"}
Tschantz, M.&nbsp;C., & Wing, J.&nbsp;M.&nbsp;(2009). Formal Methods for Privacy. In A.&nbsp;Cavalcanti & D.&nbsp;R.&nbsp;Dams (Eds.), _FM 2009: Formal Methods_ (Vol. 5850, pp. 1–15). Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/[10.1007/978-3-642-05089-3_1](https://dx.doi.org/10.1007/978-3-642-05089-3_1){.bib-doi}
~ end bibitem

~ begin bibitem {id:"tuch_types_2007"; cite-year:"2007"; cite-authors:"Tuch et al."; cite-authors-long:"Tuch, Klein, and Norrish"; cite-label:"Tuch, Klein, \& Norrish, 2007"; caption:"Types, Bytes, and Separation Logic&nl;Tuch, Klein, and Norrish, 2007"; data-line:"FormalReview.bib:4522"; searchterm:"Types%2C%20Bytes%2C%20and%20Separation%20Logic%20Tuch%2C%20Klein%2C%20and%20Norrish%2C%202007"; spellcheck:"false"}
Tuch, H., Klein, G., & Norrish, M.&nbsp;(2007). Types, Bytes, and Separation Logic. In _Proceedings of the 34th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages_ (pp. 97–108). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/1190216.1190234](https://dx.doi.org/10.1145/1190216.1190234){.bib-doi}
~ end bibitem

~ begin bibitem {id:"ullrich_counting_2019"; cite-year:"2019"; cite-authors:"Ullrich and Moura"; cite-authors-long:"Ullrich and Moura"; cite-label:"Ullrich \& Moura, 2019"; caption:"Counting Immutable Beans: Reference Counting Optimized for Purely Functional Programming&nl;Ullrich and Moura, 2019"; data-line:"FormalReview.bib:5185"; searchterm:"Counting%20Immutable%20Beans%3A%20Reference%20Counting%20Optimized%20for%20Purely%20Functional%20Programming%20Ullrich%20and%20Moura%2C%202019"; spellcheck:"false"}
Ullrich, S., & Moura, L.&nbsp;de. (2019). Counting Immutable Beans: Reference Counting Optimized for Purely Functional Programming. _arXiv:1908.05647 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1908.05647](http://arxiv.org/abs/1908.05647){.bib-url}
~ end bibitem

~ begin bibitem {id:"van_renesse_paxos_2015"; cite-year:"2015"; cite-authors:"Van Renesse and Altinbuken"; cite-authors-long:"Van Renesse and Altinbuken"; cite-label:"Van Renesse \& Altinbuken, 2015"; caption:"Paxos Made Moderately Complex&nl;Van Renesse and Altinbuken, 2015"; data-line:"FormalReview.bib:2844"; searchterm:"Paxos%20Made%20Moderately%20Complex%20Van%20Renesse%20and%20Altinbuken%2C%202015"; spellcheck:"false"}
Van Renesse, R., & Altinbuken, D.&nbsp;(2015). Paxos Made Moderately Complex. _ACM Comput. Surv._, _47_(3), 42:1–42:36. https://doi.org/[10.1145/2673577](https://dx.doi.org/10.1145/2673577){.bib-doi}
~ end bibitem

~ begin bibitem {id:"voevodsky_homotopy_nodate"; cite-year:"n.d."; cite-authors:"Voevodsky"; cite-authors-long:"Voevodsky"; cite-label:"Voevodsky, n.d."; caption:"Homotopy Type Theory: Univalent Foundations of Mathematics&nl;Voevodsky, n.d."; data-line:"FormalReview.bib:2364"; searchterm:"Homotopy%20Type%20Theory%3A%20Univalent%20Foundations%20of%20Mathematics%20Voevodsky%2C%20n.d."; spellcheck:"false"}
Voevodsky, V.&nbsp;(n.d.). Homotopy Type Theory: Univalent Foundations of Mathematics, 490.
~ end bibitem

~ begin bibitem {id:"weirich_specification_2017"; cite-year:"2017"; cite-authors:"Weirich et al."; cite-authors-long:"Weirich, Voizard, Amorim, and Eisenberg"; cite-label:"Weirich, Voizard, Amorim, \& Eisenberg, 2017"; caption:"A Specification for Dependent Types in Haskell&nl;Weirich, Voizard, Amorim, and Eisenberg, 2017"; data-line:"FormalReview.bib:3584"; searchterm:"A%20Specification%20for%20Dependent%20Types%20in%20Haskell%20Weirich%2C%20Voizard%2C%20Amorim%2C%20and%20Eisenberg%2C%202017"; spellcheck:"false"}
Weirich, S., Voizard, A., Amorim, P.&nbsp;H.&nbsp;A.&nbsp;de, & Eisenberg, R.&nbsp;A.&nbsp;(2017). A Specification for Dependent Types in Haskell. _Proc. ACM Program. Lang._, _1_, 31:1–31:29. https://doi.org/[10.1145/3110275](https://dx.doi.org/10.1145/3110275){.bib-doi}
~ end bibitem

~ begin bibitem {id:"weisstein_mathworld_nodate"; cite-year:"2020"; cite-authors:"Weisstein"; cite-authors-long:"Weisstein"; cite-label:"Weisstein, n.d."; caption:"Mathworld Classroom&nl;Weisstein, 2020"; data-line:"FormalReview.bib:5525"; searchterm:"Mathworld%20Classroom%20Weisstein%2C%202020"; spellcheck:"false"}
Weisstein, E.&nbsp;W.&nbsp;(n.d.). Mathworld Classroom [Text]. Retrieved January 12, 2020, from <http://mathworld.wolfram.com/classroom/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"noauthor_welcome_nodate"; cite-authors:"2020ar"; cite-authors-long:"2020ar"; cite-label:"\&ldquo;Welcome to dune’s documentation\! — dune documentation,\&rdquo; n.d."; caption:"Welcome to dune’s documentation! — dune documentation&nl;2020ar, "; data-line:"FormalReview.bib:5561"; searchterm:"Welcome%20to%20dune%E2%80%99s%20documentation!%20%E2%80%94%20dune%20documentation%202020ar%2C%20"; spellcheck:"false"}
Welcome to dune’s documentation! — dune documentation. (n.d.). Retrieved January 13, 2020, from <https://dune.readthedocs.io/en/stable/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wenzel_isabelle/isar_2018"; cite-year:"2018"; cite-authors:"Wenzel"; cite-authors-long:"Wenzel"; cite-label:"Wenzel, 2018"; caption:"The Isabelle/Isar Reference Manual&nl;Wenzel, 2018"; data-line:"FormalReview.bib:2454"; searchterm:"The%20Isabelle%2FIsar%20Reference%20Manual%20Wenzel%2C%202018"; spellcheck:"false"}
Wenzel, M.&nbsp;(2018). The Isabelle/Isar Reference Manual. Retrieved from <https://core.ac.uk/display/22830292>{.bib-url}
~ end bibitem

~ begin bibitem {id:"white_neil_formal_2017"; cite-year:"2017"; cite-authors:"White Neil et al."; cite-authors-long:"White Neil, Matthews Stuart, and Chapman Roderick"; cite-label:"White Neil, Matthews Stuart, \& Chapman Roderick, 2017"; caption:"Formal verification: will the seedling ever flower?&nl;White Neil, Matthews Stuart, and Chapman Roderick, 2017"; data-line:"FormalReview.bib:1635"; searchterm:"Formal%20verification%3A%20will%20the%20seedling%20ever%20flower%3F%20White%20Neil%2C%20Matthews%20Stuart%2C%20and%20Chapman%20Roderick%2C%202017"; spellcheck:"false"}
White Neil, Matthews Stuart, & Chapman Roderick. (2017). Formal verification: will the seedling ever flower? _Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences_, _375_(2104), 20150402. https://doi.org/[10.1098/rsta.2015.0402](https://dx.doi.org/10.1098/rsta.2015.0402){.bib-doi}
~ end bibitem

~ begin bibitem {id:"wiedijk_formal_2008"; cite-year:"2008"; cite-authors:"Wiedijk"; cite-authors-long:"Wiedijk"; cite-label:"Wiedijk, 2008"; caption:"Formal Proof—Getting Started&nl;Wiedijk, 2008"; data-line:"FormalReview.bib:1457"; searchterm:"Formal%20Proof%E2%80%94Getting%20Started%20Wiedijk%2C%202008"; spellcheck:"false"}
Wiedijk, F.&nbsp;(2008). Formal Proof—Getting Started, _55_(11), 7.
~ end bibitem

~ begin bibitem {id:"wikipedia_category:formal_2017"; cite-year:"2017"; cite-authors:"Wikipedia"; cite-authors-long:"Wikipedia"; cite-label:"Wikipedia, 2017"; caption:"Category:Formal methods people&nl;Wikipedia, 2017"; data-line:"FormalReview.bib:151"; searchterm:"Category%3AFormal%20methods%20people%20Wikipedia%2C%202017"; spellcheck:"false"}
Wikipedia. (2017). Category:Formal methods people. In _Wikipedia_. Retrieved from <https://en.wikipedia.org/w/index.php?title=Category:Formal_methods_people&oldid=812800009>{.bib-url}
~ end bibitem

~ begin bibitem {id:"williams_interactive_nodate"; cite-year:"n.d."; cite-authors:"Williams and Kelley"; cite-authors-long:"Williams and Kelley"; cite-label:"Williams \& Kelley, n.d."; caption:"An Interactive Plotting Program&nl;Williams and Kelley, n.d."; data-line:"FormalReview.bib:3914"; searchterm:"An%20Interactive%20Plotting%20Program%20Williams%20and%20Kelley%2C%20n.d."; spellcheck:"false"}
Williams, T., & Kelley, C.&nbsp;(n.d.). An Interactive Plotting Program, 259.
~ end bibitem

~ begin bibitem {id:"noauthor_xetex_nodate"; cite-authors:"2020as"; cite-authors-long:"2020as"; cite-label:"\&ldquo;XeTeX - TeX Users Group,\&rdquo; n.d."; caption:"XeTeX - TeX Users Group&nl;2020as, "; data-line:"FormalReview.bib:5256"; searchterm:"XeTeX%20%20TeX%20Users%20Group%202020as%2C%20"; spellcheck:"false"}
XeTeX - TeX Users Group. (n.d.). Retrieved January 10, 2020, from <https://tug.org/xetex/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"xi_applied_2017"; cite-year:"2017"; cite-authors:"Xi"; cite-authors-long:"Xi"; cite-label:"Xi, 2017"; caption:"Applied Type System: An Approach to Practical Programming with Theorem-Proving&nl;Xi, 2017"; data-line:"FormalReview.bib:5433"; searchterm:"Applied%20Type%20System%3A%20An%20Approach%20to%20Practical%20Programming%20with%20TheoremProving%20Xi%2C%202017"; spellcheck:"false"}
Xi, H.&nbsp;(2017). Applied Type System: An Approach to Practical Programming with Theorem-Proving. _arXiv:1703.08683 \[cs\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1703.08683](http://arxiv.org/abs/1703.08683){.bib-url}
~ end bibitem

~ begin bibitem {id:"xi_introduction_nodate"; cite-year:"n.d."; cite-authors:"Xi"; cite-authors-long:"Xi"; cite-label:"Xi, n.d."; caption:"Introduction to Programming in ATS&nl;Xi, n.d."; data-line:"FormalReview.bib:5448"; searchterm:"Introduction%20to%20Programming%20in%20ATS%20Xi%2C%20n.d."; spellcheck:"false"}
Xi, H.&nbsp;(n.d.). Introduction to Programming in ATS, 252.
~ end bibitem

~ begin bibitem {id:"yang_safe_2011"; cite-year:"2011"; cite-authors:"J.&nbsp;Yang and Hawblitzel"; cite-authors-long:"J.&nbsp;Yang and Hawblitzel"; cite-label:"J. Yang \& Hawblitzel, 2011"; caption:"Safe to the last instruction: automated verification of a type-safe operating system&nl;J. Yang and Hawblitzel, 2011"; data-line:"FormalReview.bib:2300"; searchterm:"Safe%20to%20the%20last%20instruction%3A%20automated%20verification%20of%20a%20typesafe%20operating%20system%20J.%20Yang%20and%20Hawblitzel%2C%202011"; spellcheck:"false"}
Yang, J., & Hawblitzel, C.&nbsp;(2011). Safe to the last instruction: automated verification of a type-safe operating system. _Communications of the ACM_, _54_(12), 123. https://doi.org/[10.1145/2043174.2043197](https://dx.doi.org/10.1145/2043174.2043197){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yang_learning_2019"; cite-year:"2019"; cite-authors:"K.&nbsp;Yang and Deng"; cite-authors-long:"K.&nbsp;Yang and Deng"; cite-label:"K. Yang \& Deng, 2019"; caption:"Learning to Prove Theorems via Interacting with Proof Assistants&nl;K. Yang and Deng, 2019"; data-line:"FormalReview.bib:3453"; searchterm:"Learning%20to%20Prove%20Theorems%20via%20Interacting%20with%20Proof%20Assistants%20K.%20Yang%20and%20Deng%2C%202019"; spellcheck:"false"}
Yang, K., & Deng, J.&nbsp;(2019). Learning to Prove Theorems via Interacting with Proof Assistants. _arXiv:1905.09381 \[cs, Stat\]_. Retrieved from [[arXiv:]{.etype}]{.bib-urlpre}[1905.09381](http://arxiv.org/abs/1905.09381){.bib-url}
~ end bibitem

~ begin bibitem {id:"ye_verified_2019"; cite-year:"2019"; cite-authors:"Ye and Delaware"; cite-authors-long:"Ye and Delaware"; cite-label:"Ye \& Delaware, 2019"; caption:"A Verified Protocol Buffer Compiler&nl;Ye and Delaware, 2019"; data-line:"FormalReview.bib:3169"; searchterm:"A%20Verified%20Protocol%20Buffer%20Compiler%20Ye%20and%20Delaware%2C%202019"; spellcheck:"false"}
Ye, Q., & Delaware, B.&nbsp;(2019). A Verified Protocol Buffer Compiler. In _Proceedings of the 8th ACM SIGPLAN International Conference on Certified Programs and Proofs_ (pp. 222–233). New York, NY, USA: ACM.&nbsp;https://doi.org/[10.1145/3293880.3294105](https://dx.doi.org/10.1145/3293880.3294105){.bib-doi}
~ end bibitem

~ begin bibitem {id:"yurichev_sat/smt_nodate"; cite-year:"n.d."; cite-authors:"Yurichev"; cite-authors-long:"Yurichev"; cite-label:"Yurichev, n.d."; caption:"SAT/SMT by Example&nl;Yurichev, n.d."; data-line:"FormalReview.bib:4338"; searchterm:"SAT%2FSMT%20by%20Example%20Yurichev%2C%20n.d."; spellcheck:"false"}
Yurichev, D.&nbsp;(n.d.). SAT/SMT by Example, 555.
~ end bibitem

~ begin bibitem {id:"feng_correct-by-construction_2018"; cite-year:"2018"; cite-authors:"Zhang et al."; cite-authors-long:"Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky"; cite-label:"Zhang et al., 2018"; caption:"Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement&nl;Zhang, Wiegley, Giannakopoulos, Eakman, Pit-Claudel, Lee, and Sokolsky, 2018"; data-line:"FormalReview.bib:740"; searchterm:"CorrectbyConstruction%20Implementation%20of%20Runtime%20Monitors%20Using%20Stepwise%20Refinement%20Zhang%2C%20Wiegley%2C%20Giannakopoulos%2C%20Eakman%2C%20PitClaudel%2C%20Lee%2C%20and%20Sokolsky%2C%202018"; spellcheck:"false"}
Zhang, T., Wiegley, J., Giannakopoulos, T., Eakman, G., Pit-Claudel, C., Lee, I., & Sokolsky, O.&nbsp;(2018). Correct-by-Construction Implementation of Runtime Monitors Using Stepwise Refinement. In X.&nbsp;Feng, M.&nbsp;Müller-Olm, & Z.&nbsp;Yang (Eds.), _Dependable Software Engineering. Theories, Tools, and Applications_ (Vol. 10998, pp. 31–49). Cham: Springer International Publishing. https://doi.org/[10.1007/978-3-319-99933-3_3](https://dx.doi.org/10.1007/978-3-319-99933-3_3){.bib-doi}
~ end bibitem

~ begin bibitem {id:"acm_acm_nodate"; cite-authors:"2019a"; cite-authors-long:"2019a"; cite-label:"n.d.-a"; caption:"ACM Classification Codes&nl;2019a, "; data-line:"FormalReview.bib:1313"; searchterm:"ACM%20Classification%20Codes%202019a%2C%20"; spellcheck:"false"}
(n.d.-a). ACM Classification Codes. Retrieved February 1, 2019, from <https://cran.r-project.org/web/classifications/ACM.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coq_nodate"; cite-authors:"2019f"; cite-authors-long:"2019f"; cite-label:"n.d.-b"; caption:"Coq for PL conference series - CoqPL 2019&nl;2019f, "; data-line:"FormalReview.bib:1094"; searchterm:"Coq%20for%20PL%20conference%20series%20%20CoqPL%202019%202019f%2C%20"; spellcheck:"false"}
(n.d.-b). Coq for PL conference series - CoqPL 2019. Retrieved January 31, 2019, from <https://popl18.sigplan.org/series/CoqPL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coqpl_nodate-1"; cite-authors:"2019g"; cite-authors-long:"2019g"; cite-label:"n.d.-c"; caption:"CoqPL 2018 The Fourth International Workshop on Coq for Programming Languages - POPL 2018&nl;2019g, "; data-line:"FormalReview.bib:1086"; searchterm:"CoqPL%202018%20The%20Fourth%20International%20Workshop%20on%20Coq%20for%20Programming%20Languages%20%20POPL%202018%202019g%2C%20"; spellcheck:"false"}
(n.d.-c). CoqPL 2018 The Fourth International Workshop on Coq for Programming Languages - POPL 2018. Retrieved January 31, 2019, from <https://popl18.sigplan.org/track/CoqPL-2018>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_coqpl_nodate"; cite-authors:"2019h"; cite-authors-long:"2019h"; cite-label:"n.d.-d"; caption:"CoqPL 2019 The Fifth International Workshop on Coq for Programming Languages - POPL 2019&nl;2019h, "; data-line:"FormalReview.bib:1078"; searchterm:"CoqPL%202019%20The%20Fifth%20International%20Workshop%20on%20Coq%20for%20Programming%20Languages%20%20POPL%202019%202019h%2C%20"; spellcheck:"false"}
(n.d.-d). CoqPL 2019 The Fifth International Workshop on Coq for Programming Languages - POPL 2019. Retrieved January 31, 2019, from <https://popl19.sigplan.org/track/CoqPL-2019#program>{.bib-url}
~ end bibitem

~ begin bibitem {id:"cea_frama-c_nodate"; cite-authors:"2019q"; cite-authors-long:"2019q"; cite-label:"n.d.-e"; caption:"Frama-C&nl;2019q, "; data-line:"FormalReview.bib:1801"; searchterm:"FramaC%202019q%2C%20"; spellcheck:"false"}
(n.d.-e). Frama-C.&nbsp;Retrieved February 1, 2019, from <https://frama-c.com/>{.bib-url}
~ end bibitem

~ begin bibitem {id:"wikibook_latex_nodate"; cite-authors:"2019aa"; cite-authors-long:"2019aa"; cite-label:"n.d.-f"; caption:"LaTeX - Wikibooks, open books for an open world&nl;2019aa, "; data-line:"FormalReview.bib:2607"; searchterm:"LaTeX%20%20Wikibooks%2C%20open%20books%20for%20an%20open%20world%202019aa%2C%20"; spellcheck:"false"}
(n.d.-f). LaTeX - Wikibooks, open books for an open world. Retrieved February 1, 2019, from <https://en.wikibooks.org/wiki/LaTeX>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_msc2010_nodate"; cite-authors:"2019ae"; cite-authors-long:"2019ae"; cite-label:"n.d.-g"; caption:"MSC2010 database&nl;2019ae, "; data-line:"FormalReview.bib:1321"; searchterm:"MSC2010%20database%202019ae%2C%20"; spellcheck:"false"}
(n.d.-g). MSC2010 database. Retrieved February 1, 2019, from <https://mathscinet.ams.org/msc/msc2010.html>{.bib-url}
~ end bibitem

~ begin bibitem {id:"royalsociety_philosophical_nodate"; cite-authors:"2019ag"; cite-authors-long:"2019ag"; cite-label:"n.d.-h"; caption:"Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences&nl;2019ag, "; data-line:"FormalReview.bib:1512"; searchterm:"Philosophical%20Transactions%20of%20the%20Royal%20Society%20A%3A%20Mathematical%2C%20Physical%20and%20Engineering%20Sciences%202019ag%2C%20"; spellcheck:"false"}
(n.d.-h). Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences. Retrieved February 1, 2019, from <https://royalsocietypublishing.org/journal/rsta>{.bib-url}
~ end bibitem

~ begin bibitem {id:"acm_popl_nodate"; cite-authors:"2019ah"; cite-authors-long:"2019ah"; cite-label:"n.d.-i"; caption:"POPL conference series - POPL 2020&nl;2019ah, "; data-line:"FormalReview.bib:1102"; searchterm:"POPL%20conference%20series%20%20POPL%202020%202019ah%2C%20"; spellcheck:"false"}
(n.d.-i). POPL conference series - POPL 2020. Retrieved January 31, 2019, from <https://popl18.sigplan.org/series/POPL>{.bib-url}
~ end bibitem

~ begin bibitem {id:"royalsociety_proceedings_nodate"; cite-authors:"2019ai"; cite-authors-long:"2019ai"; cite-label:"n.d.-j"; caption:"Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences&nl;2019ai, "; data-line:"FormalReview.bib:1520"; searchterm:"Proceedings%20of%20the%20Royal%20Society%20A%3A%20Mathematical%2C%20Physical%20and%20Engineering%20Sciences%202019ai%2C%20"; spellcheck:"false"}
(n.d.-j). Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences. Retrieved February 1, 2019, from <https://royalsocietypublishing.org/journal/rspa>{.bib-url}
~ end bibitem

~ end bibliography
