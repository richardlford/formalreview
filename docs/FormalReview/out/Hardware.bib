
@article{bornebusch_coq_nodate,
	title = {{COQ} meets Clash: {PROPOSING} A {HARDWARE} {DESIGN} {SYNTHESIS} {FLOW} {THAT} {COMBINES} {PROOF} {ASSISTANTS} {WITH} {FUNCTIONAL} {HARDWARE} {DESCRIPTION} {LANGUAGES}},
	pages = {186},
	author = {Bornebusch, Fritjof},
	langid = {english},
	file = {Bornebusch - PROPOSING A HARDWARE DESIGN SYNTHESIS FLOW THAT CO.pdf:/home/fordrl/Zotero/storage/3PDVA7X3/Bornebusch - PROPOSING A HARDWARE DESIGN SYNTHESIS FLOW THAT CO.pdf:application/pdf},
}

@article{altamirano_formal_nodate,
	title = {Formal Verification of an Implementation of the Roughtime Server},
	abstract = {Formal verification has been used in the past few decades to prove correctness of programs. This thesis provides a verification of a simpler implementation of Roughtime [1], a protocol that consists of securely querying the current time via a client-server interaction. The tool that was used is Bedrock2 [3], a work-in-progress Coq framework suitable for reasoning about low-level code, developed in the Programming Languages and Verification group at {MIT} {CSAIL}.},
	pages = {46},
	author = {Altamirano, Christian},
	langid = {english},
	file = {Altamirano - Formal Verification of an Implementation of the Ro.pdf:/home/fordrl/Zotero/storage/47LXVJBV/Altamirano - Formal Verification of an Implementation of the Ro.pdf:application/pdf},
}

@article{perez-lopez_puppetmaster_nodate,
	title = {Puppetmaster: a certified hardware architecture for task parallelism},
	abstract = {This thesis presents Puppetmaster, a hardware accelerator for transactional workloads. Existing software and hardware frameworks for transactional memory and online transaction processing are not able to scale to hundreds or thousands of cores unless the rate of conflicts between transactions is very low. Puppetmaster aims to improve upon the scalability of concurrency control by requiring transactions to declare their read and write sets in advance and uses this information to only run transactions concurrently when they are known not to conflict. In this thesis, I present and evaluate the design of Puppetmaster in a high-level model, in cycle-accurate simulations, and on real reconfigurable hardware.},
	pages = {49},
	author = {Perez-Lopez, √Åron Ricardo},
	langid = {english},
	file = {Perez-Lopez - Puppetmaster a certified hardware architecture fo.pdf:/home/fordrl/Zotero/storage/ADTH7RLS/Perez-Lopez - Puppetmaster a certified hardware architecture fo.pdf:application/pdf},
}

@report{dagand_formal_2022,
	title = {A Formal Model of Interrupt-based Checkpointing with Peripherals},
	url = {https://hal.archives-ouvertes.fr/hal-03557760},
	abstract = {Transiently-powered systems featuring non-volatile memory as well as external peripherals enable the development of new low-power sensor applications. However, as programmers, we are ill-equipped to reason about systems where power failures are the norm rather than the exception. A first challenge consists in being able to capture all the volatile state of the application-external peripherals included-to ensure progress. A second, more fundamental, challenge consists in specifying how power failures may interact with peripheral operations. In this paper, we propose a formal specification of intermittent computing with peripherals, an axiomatic model of interrupt-based checkpointing as well as its proof of correctness, machine-checked in the Coq proof assistant. We state the correctness of the checkpointing mechanism as a trace refinement property between the model and the specification, which accounts for peripheral device operations replays due to power failures. Our proof methodology relies on intermediate oracle semantics to tame the non-determinism of power failures scenarios.},
	pages = {1--36},
	institution = {{IRIF} ; {IRISA} ; {INSA} {RENNES}},
	type = {Technical Report},
	author = {Dagand, Pierre-Evariste and Berthou, Gautier and Demange, Delphine and Risset, Tanguy},
	urldate = {2022-02-09},
	date = {2022-02},
	file = {HAL PDF Full Text:/home/fordrl/Zotero/storage/95PNWM5C/Dagand et al. - 2022 - A Formal Model of Interrupt-based Checkpointing wi.pdf:application/pdf},
}