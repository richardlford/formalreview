
@article{cassez_verification_2021,
	title = {Verification of the Incremental Merkle Tree Algorithm with Dafny},
	url = {http://arxiv.org/abs/2105.06009},
	abstract = {The Deposit Smart Contract ({DSC}) is an instrumental component of the Ethereum 2.0 Phase 0 infrastructure. We have developed the first machine-checkable version of the incremental Merkle tree algorithm used in the {DSC}. We present our new and original correctness proof of the algorithm along with the Dafny machine-checkable version. The main results are: 1) a new proof of total correctness; 2) a software artefact with the proof in the form of the complete Dafny code base and 3) new provably correct optimisations of the algorithm.},
	journaltitle = {{arXiv}:2105.06009 [cs]},
	author = {Cassez, Franck},
	urldate = {2021-06-01},
	date = {2021-05-12},
	eprinttype = {arxiv},
	eprint = {2105.06009},
	keywords = {Computer Science - Logic in Computer Science, D.2.4, F.3},
	file = {arXiv.org Snapshot:/home/fordrl/Zotero/storage/NVDSWRES/2105.html:text/html;arXiv Fulltext PDF:/home/fordrl/Zotero/storage/GSSIENXN/Cassez - 2021 - Verification of the Incremental Merkle Tree Algori.pdf:application/pdf},
}

@article{liu_survey_nodate,
	title = {A survey on blockchain-enabled smart grids: Advances, applications and challenges},
	volume = {n/a},
	issn = {2631-7680},
	url = {https://ietresearch.onlinelibrary.wiley.com/doi/abs/10.1049/smc2.12010},
	doi = {https://doi.org/10.1049/smc2.12010},
	shorttitle = {A survey on blockchain-enabled smart grids},
	abstract = {Electric power grid infrastructure has revolutionized our world and changed the way of living. So has blockchain technology. The hierarchical electric power grid has been shifting from a centralized structure to a decentralized structure to achieve higher flexibility and stability, and blockchain technology has been widely adopted in the energy sector to deal with grid management, billing, metering, and so on, because of its nature of decentralization. Here, the aim is to provide a multi-dimensional review on the technological advances of the blockchain in smart grids. Its corresponding applications based on these advances, including company projects and use cases, are summarized. Furthermore, the security threat issues in smart grids, Ethereum Virtual Machine (i.e. the operating environment of consensus mechanisms), and smart contracts are analysed, with a brief conclusion to manifest the prior tasks in building secure blockchain-based infrastructures in smart grids. As such, the challenges and features of different protocols and their applicability in each use case are identified to provide an insightful guide for future research studies.},
	issue = {n/a},
	journaltitle = {{IET} Smart Cities},
	author = {Liu, Chao and Zhang, Xiaoshuai and Chai, Kok Koeng and Loo, Jonathan and Chen, Yue},
	urldate = {2021-05-27},
	langid = {english},
	note = {\_eprint: https://ietresearch.onlinelibrary.wiley.com/doi/pdf/10.1049/smc2.12010},
	file = {Full Text PDF:/home/fordrl/Zotero/storage/TMNMQ8G4/Liu et al. - A survey on blockchain-enabled smart grids Advanc.pdf:application/pdf;Snapshot:/home/fordrl/Zotero/storage/N4UZ9N5R/smc2.html:text/html},
}

@book{crain_red_2021,
	title = {Red Belly: A Secure, Fair and Scalable Open Blockchain},
	shorttitle = {Red Belly},
	abstract = {Blockchain has found applications to track ownership of digital assets. Yet, several blockchains were shown vulnerable to network attacks. It is thus crucial for companies to adopt secure blockchains before moving them to production. In this paper, we present Red Belly Blockchain ({RBBC}), the first secure blockchain whose throughput scales to hundreds of geodistributed consensus participants. To this end, we drastically revisited Byzantine Fault Tolerant ({BFT}) blockchains through three contributions: (i) defining the Set Byzantine Consensus problem of agreeing on a superblock of all proposed blocks instead of a single block; (ii) adopting a fair leaderless design to offer censorship-resistance guaranteeing the commit of correctly requested transactions; (iii) introducing sharded verification to limit the number of signature verifications without hampering security. We evaluate {RBBC} on up to 1000 {VMs} of 3 different types, spread across 4 continents, and under attacks. Although its performance is affected by attacks, {RBBC} scales in that its throughput increases to hundreds of consensus nodes and achieves 30k {TPS} throughput and 3 second latency on 1000 {VMs}, hence improving by 3x both the latency and the throughput of its closest competitor.},
	author = {Crain, Tyler and Natoli, Christopher and Gramoli, Vincent},
	date = {2021-05-18},
	doi = {10.1109/SP40001.2021.00087},
}

@article{fahmideh_software_2021,
	title = {Software Engineering for Blockchain Based Software Systems: Foundations, Survey, and Future Directions},
	volume = {2105},
	url = {http://adsabs.harvard.edu/abs/2021arXiv210501881F},
	shorttitle = {Software Engineering for Blockchain Based Software Systems},
	abstract = {Many scientific and practical areas have shown increasing interest in 
reaping the benefits of blockchain technology to empower software
systems. However, the unique characteristics and requirements associated
with Blockchain Based Software ({BBS}) systems raise new challenges across
the development lifecycle that entail an extensive improvement of
conventional software engineering. This article presents a systematic
literature review of the state-of-the-art in {BBS} engineering research
from a software engineering perspective. We characterize {BBS} engineering
from the theoretical foundations, processes, models, and roles and
discuss a rich repertoire of key development activities, principles,
challenges, and techniques. The focus and depth of this survey not only
gives software engineering practitioners and researchers a consolidated
body of knowledge about current {BBS} development but also underpins a
starting point for further research in this field.},
	pages = {arXiv:2105.01881},
	journaltitle = {{arXiv} e-prints},
	shortjournal = {{arXiv} e-prints},
	author = {Fahmideh, Mahdi and Grundy, John and Ahmed, Aakash and Shen, Jun and Yan, Jun and Mougouei, Davoud and Wang, Peng and Ghose, Aditya and Gunawardana, Anuradha and Aickelin, Uwe and Abedin, Babak},
	urldate = {2021-05-12},
	date = {2021-05-01},
	keywords = {Computer Science - Software Engineering},
	file = {Full Text PDF:/home/fordrl/Zotero/storage/NYZRR4MJ/Fahmideh et al. - 2021 - Software Engineering for Blockchain Based Software.pdf:application/pdf},
}

@article{losa_formal_2020,
	title = {On the Formal Verification of the Stellar Consensus Protocol},
	abstract = {The Stellar Consensus Protocol ({SCP}) is a quorum-based {BFT} consensus protocol. However, instead of using threshold-based quorums, {SCP} is permissionless and its quorum system emerges from participants’ self-declared trust relationships. In this paper, we describe the methodology we deploy to formally verify the safety and liveness of {SCP} for arbitrary but ﬁxed conﬁgurations.},
	pages = {9},
	author = {Losa, Giuliano and Dodds, Mike},
	date = {2020},
	langid = {english},
	file = {Losa and Dodds - 2020 - On the Formal Verification of the Stellar Consensu.pdf:/home/fordrl/Zotero/storage/KQNU2G9J/Losa and Dodds - 2020 - On the Formal Verification of the Stellar Consensu.pdf:application/pdf},
}

@article{annenkov_extracting_2021,
	title = {Extracting functional programs from Coq, in Coq},
	url = {http://arxiv.org/abs/2108.02995},
	abstract = {We implement extraction of Coq programs to functional languages based on {MetaCoq}'s certified erasure. We extend the {MetaCoq} erasure output language with typing information and use it as an intermediate representation, which we call \${\textbackslash}lambda{\textasciicircum}T\_{\textbackslash}square\$. We complement the extraction functionality with a full pipeline that includes several standard transformations (eta-expansion, inlining, etc) implemented in a proof-generating manner along with a verified optimisation pass removing unused arguments. We prove the pass correct wrt. a conventional call-by-value operational semantics of functional languages. From the optimised \${\textbackslash}lambda{\textasciicircum}T\_{\textbackslash}square\$ representation, we obtain code in two functional smart contract languages (Liquidity and {CameLIGO}), the functional language Elm, and a subset of the multi-paradigm language for systems programming Rust. Rust is currently gaining popularity as a language for smart contracts, and we demonstrate how our extraction can be used to extract smart contract code for the Concordium network. The development is done in the context of the {ConCert} framework that enables smart contract verification. We contribute with two verified real-world smart contracts (boardroom voting and escrow), which we use, among other examples, to exemplify the applicability of the pipeline. In addition, we develop a verified web application and extract it to fully functional Elm code. In total, this gives us a way to write dependently typed programs in Coq, verify, and then extract them to several target languages while retaining a small trusted computing base of only {MetaCoq} and the pretty-printers into these languages.},
	journaltitle = {{arXiv}:2108.02995 [cs]},
	author = {Annenkov, Danil and Milo, Mikkel and Nielsen, Jakob Botsch and Spitters, Bas},
	urldate = {2021-08-16},
	date = {2021-08-06},
	eprinttype = {arxiv},
	eprint = {2108.02995},
	keywords = {Computer Science - Programming Languages, Computer Science - Logic in Computer Science},
	file = {arXiv.org Snapshot:/home/fordrl/Zotero/storage/XKTPWCD8/2108.html:text/html;arXiv Fulltext PDF:/home/fordrl/Zotero/storage/3VTKVU5P/Annenkov et al. - 2021 - Extracting functional programs from Coq, in Coq.pdf:application/pdf},
}

@article{wan_smart_2021,
	title = {Smart Contract Security: a Practitioners' Perspective},
	url = {http://arxiv.org/abs/2102.10963},
	shorttitle = {Smart Contract Security},
	abstract = {Smart contracts have been plagued by security incidents, which resulted in substantial financial losses. Given numerous research efforts in addressing the security issues of smart contracts, we wondered how software practitioners build security into smart contracts in practice. We performed a mixture of qualitative and quantitative studies with 13 interviewees and 156 survey respondents from 35 countries across six continents to understand practitioners' perceptions and practices on smart contract security. Our study uncovers practitioners' motivations and deterrents of smart contract security, as well as how security efforts and strategies fit into the development lifecycle. We also find that blockchain platforms have a statistically significant impact on practitioners' security perceptions and practices of smart contract development. Based on our findings, we highlight future research directions and provide recommendations for practitioners.},
	journaltitle = {{arXiv}:2102.10963 [cs]},
	author = {Wan, Zhiyuan and Xia, Xin and Lo, David and Chen, Jiachi and Luo, Xiapu and Yang, Xiaohu},
	urldate = {2021-03-01},
	date = {2021-02-22},
	eprinttype = {arxiv},
	eprint = {2102.10963},
	keywords = {Computer Science - Software Engineering},
	file = {arXiv.org Snapshot:/home/fordrl/Zotero/storage/BGFWDR6D/2102.html:text/html;arXiv Fulltext PDF:/home/fordrl/Zotero/storage/PCJ5H5B7/Wan et al. - 2021 - Smart Contract Security a Practitioners' Perspect.pdf:application/pdf},
}

@article{cassez_formal_2021,
	title = {Formal Verification of the Ethereum 2.0 Beacon Chain},
	url = {http://arxiv.org/abs/2110.12909},
	abstract = {We report our experience in the formal verification of the reference implementation of the Beacon Chain. The Beacon Chain is the backbone component of the new Proof-of-Stake Ethereum 2.0 network: it is in charge of tracking information about the validators, their stakes, their attestations (votes) and if some validators are found to be dishonest, to slash them (they lose some of their stakes). The Beacon Chain is mission-critical and any bug in it could compromise the whole network. The Beacon Chain reference implementation developed by the Ethereum Foundation is written in Python, and provides a detailed operational description of the state machine each Beacon Chain's network participant (node) must implement. We have formally specified and verified the absence of runtime errors in (a large and critical part of) the Beacon Chain reference implementation using the verification-friendly language Dafny. During the course of this work, we have uncovered several issues, proposed verified fixes. We have also synthesised functional correctness specifications that enable us to provide guarantees beyond runtime errors. Our software artefact is available at https://github.com/{ConsenSys}/eth2.0-dafny.},
	journaltitle = {{arXiv}:2110.12909 [cs]},
	author = {Cassez, Franck and Fuller, Joanne and Asgaonkar, Aditya},
	urldate = {2021-11-01},
	date = {2021-10-21},
	eprinttype = {arxiv},
	eprint = {2110.12909},
	keywords = {Computer Science - Programming Languages, Computer Science - Logic in Computer Science, F.2.2, F.4.2},
	file = {arXiv.org Snapshot:/home/fordrl/Zotero/storage/JGC47I9J/2110.html:text/html;arXiv Fulltext PDF:/home/fordrl/Zotero/storage/I7DSDBI6/Cassez et al. - 2021 - Formal Verification of the Ethereum 2.0 Beacon Cha.pdf:application/pdf},
}

@article{gabbay_money_2021,
	title = {Money grows on (proof-)trees: the formal {FA}1.2 ledger standard},
	url = {http://arxiv.org/abs/2109.09451},
	shorttitle = {Money grows on (proof-)trees},
	abstract = {Once you have invented digital money, you may need a ledger to track who owns what -- and an interface to that ledger so that users of your money can transact. On the Tezos blockchain this implies: a smart contract (distributed program), storing in its state a ledger to map owner addresses to token quantities, and standardised entrypoints to transact on accounts. A bank does a similar job -- it maps account numbers to account quantities and permits users to transact -- but in return the bank demands trust, it incurs expense to maintain a centralised server and staff, it uses a proprietary interface ... and it may speculate using your money and/or display rent-seeking behaviour. A blockchain ledger is by design decentralised, inexpensive, open, and it won't just bet your tokens on risky derivatives (unless you ask). The {FA}1.2 standard is an open standard for ledger-keeping smart contracts on the Tezos blockchain. Several {FA}1.2 implementations already exist. Or do they? Is the standard sensible and complete? Are the implementations correct? And what are they implementations {\textbackslash}emph\{of\}? The {FA}1.2 standard is written in English, a specification language favoured by wet human brains but notorious for its incompleteness and ambiguity when rendered into dry and unforgiving code. In this paper we report on a formalisation of the {FA}1.2 standard as a Coq specification, and on a formal verification of three {FA}1.2-compliant smart contracts with respect to that specification. Errors were found and ambiguities were resolved; but also, there now exists a {\textbackslash}emph\{mathematically precise\} and battle-tested specification of the {FA}1.2 ledger standard. We will describe {FA}1.2 itself, outline the structure of the Coq theories -- which in itself captures some non-trivial and novel design decisions of the development -- and review the detailed verification of the implementations.},
	journaltitle = {{arXiv}:2109.09451 [cs]},
	author = {Gabbay, Murdoch and Jakobsson, Arvid and Sojakova, Kristina},
	urldate = {2021-09-26},
	date = {2021-09-20},
	eprinttype = {arxiv},
	eprint = {2109.09451},
	keywords = {Computer Science - Logic in Computer Science, D.2.4, F.3.1, K.4.4, K.7.3},
	file = {arXiv.org Snapshot:/home/fordrl/Zotero/storage/WEH35WBL/2109.html:text/html;arXiv Fulltext PDF:/home/fordrl/Zotero/storage/6GKERH8U/Gabbay et al. - 2021 - Money grows on (proof-)trees the formal FA1.2 led.pdf:application/pdf},
}